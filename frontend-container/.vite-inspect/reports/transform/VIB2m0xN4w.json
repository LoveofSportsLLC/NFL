{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/lodash/isFunction.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n",
      "start": 1702937445370,
      "end": 1702937445380,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445380,
      "end": 1702937445380,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445380,
      "end": 1702937445380,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445380,
      "end": 1702937445380,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445380,
      "end": 1702937445380,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445380,
      "end": 1702937445380,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445380,
      "end": 1702937445380,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445380,
      "end": 1702937445380,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445380,
      "end": 1702937445380,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445380,
      "end": 1702937445380,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445380,
      "end": 1702937445380,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/zepor/ssweb/frontend-container/node_modules/lodash/_baseGetTag.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/zepor/ssweb/frontend-container/node_modules/lodash/isObject.js?commonjs-proxy\";\n\nvar baseGetTag = require$$0,\n    isObject = require$$1;\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nvar isFunction_1 = isFunction;\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(isFunction_1);\nexport { isFunction_1 as __moduleExports };",
      "start": 1702937445380,
      "end": 1702937445388,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;AAAA,IAAI,UAAU,GAAG,UAAwB;AACzC,IAAI,QAAQ,GAAG,UAAqB,CAAC;AACrC;AACA;AACA,IAAI,QAAQ,GAAG,wBAAwB;AACvC,IAAI,OAAO,GAAG,mBAAmB;AACjC,IAAI,MAAM,GAAG,4BAA4B;AACzC,IAAI,QAAQ,GAAG,gBAAgB,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU,CAAC,KAAK,EAAE;AAC3B,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;AACxB,IAAI,OAAO,KAAK,CAAC;AACjB,GAAG;AACH;AACA;AACA,EAAE,IAAI,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;AAC9B,EAAE,OAAO,GAAG,IAAI,OAAO,IAAI,GAAG,IAAI,MAAM,IAAI,GAAG,IAAI,QAAQ,IAAI,GAAG,IAAI,QAAQ,CAAC;AAC/E,CAAC;AACD;IACA,YAAc,GAAG,UAAU"
      }
    },
    {
      "name": "inject",
      "start": 1702937445388,
      "end": 1702937445388,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445388,
      "end": 1702937445388,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445388,
      "end": 1702937445388,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445388,
      "end": 1702937445388,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445388,
      "end": 1702937445388,
      "order": "normal"
    }
  ]
}
