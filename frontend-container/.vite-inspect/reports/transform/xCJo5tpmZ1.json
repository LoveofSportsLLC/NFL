{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/actionscript.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = actionscript\nactionscript.displayName = 'actionscript'\nactionscript.aliases = []\nfunction actionscript(Prism) {\n  Prism.languages.actionscript = Prism.languages.extend('javascript', {\n    keyword:\n      /\\b(?:as|break|case|catch|class|const|default|delete|do|dynamic|each|else|extends|final|finally|for|function|get|if|implements|import|in|include|instanceof|interface|internal|is|namespace|native|new|null|override|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|use|var|void|while|with)\\b/,\n    operator: /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n  })\n  Prism.languages.actionscript['class-name'].alias = 'function' // doesn't work with AS because AS is too complex\n  delete Prism.languages.actionscript['parameter']\n  delete Prism.languages.actionscript['literal-property']\n  if (Prism.languages.markup) {\n    Prism.languages.insertBefore('actionscript', 'string', {\n      xml: {\n        pattern:\n          /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      }\n    })\n  }\n}\n",
      "start": 1702937444698,
      "end": 1702937444821,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444821,
      "end": 1702937444821,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444821,
      "end": 1702937444821,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444821,
      "end": 1702937444821,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444821,
      "end": 1702937444821,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444821,
      "end": 1702937444821,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444821,
      "end": 1702937444821,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444821,
      "end": 1702937444821,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444821,
      "end": 1702937444821,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444821,
      "end": 1702937444821,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444821,
      "end": 1702937444821,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar actionscript_1;\nvar hasRequiredActionscript;\n\nfunction requireActionscript () {\n\tif (hasRequiredActionscript) return actionscript_1;\n\thasRequiredActionscript = 1;\n\t'use strict'\n\n\tactionscript_1 = actionscript\n\tactionscript.displayName = 'actionscript'\n\tactionscript.aliases = []\n\tfunction actionscript(Prism) {\n\t  Prism.languages.actionscript = Prism.languages.extend('javascript', {\n\t    keyword:\n\t      /\\b(?:as|break|case|catch|class|const|default|delete|do|dynamic|each|else|extends|final|finally|for|function|get|if|implements|import|in|include|instanceof|interface|internal|is|namespace|native|new|null|override|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|use|var|void|while|with)\\b/,\n\t    operator: /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n\t  })\n\t  Prism.languages.actionscript['class-name'].alias = 'function' // doesn't work with AS because AS is too complex\n\t  delete Prism.languages.actionscript['parameter']\n\t  delete Prism.languages.actionscript['literal-property']\n\t  if (Prism.languages.markup) {\n\t    Prism.languages.insertBefore('actionscript', 'string', {\n\t      xml: {\n\t        pattern:\n\t          /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n\t        lookbehind: true,\n\t        inside: Prism.languages.markup\n\t      }\n\t    })\n\t  }\n\t}\n\treturn actionscript_1;\n}\n\nexport { requireActionscript as __require };",
      "start": 1702937444821,
      "end": 1702937444821,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;CAAA,YAAY;AACZ;AACA,eAAc,GAAG,YAAY;CAC7B,YAAY,CAAC,WAAW,GAAG,cAAc;CACzC,YAAY,CAAC,OAAO,GAAG,EAAE;CACzB,SAAS,YAAY,CAAC,KAAK,EAAE;CAC7B,EAAE,KAAK,CAAC,SAAS,CAAC,YAAY,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,EAAE;CACtE,IAAI,OAAO;CACX,MAAM,sUAAsU;CAC5U,IAAI,QAAQ,EAAE,2DAA2D;CACzE,GAAG,CAAC;CACJ,EAAE,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,KAAK,GAAG,UAAU;CAC/D,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,WAAW,CAAC;CAClD,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,kBAAkB,CAAC;CACzD,EAAE,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE;CAC9B,IAAI,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,cAAc,EAAE,QAAQ,EAAE;CAC3D,MAAM,GAAG,EAAE;CACX,QAAQ,OAAO;CACf,UAAU,2EAA2E;CACrF,QAAQ,UAAU,EAAE,IAAI;CACxB,QAAQ,MAAM,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;CACtC,OAAO;CACP,KAAK,CAAC;CACN,GAAG;CACH"
      }
    },
    {
      "name": "inject",
      "start": 1702937444821,
      "end": 1702937444821,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444821,
      "end": 1702937444821,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444821,
      "end": 1702937444821,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444821,
      "end": 1702937444821,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444821,
      "end": 1702937444821,
      "order": "normal"
    }
  ]
}
