{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/sml.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = sml\nsml.displayName = 'sml'\nsml.aliases = ['smlnj']\nfunction sml(Prism) {\n  // https://smlfamily.github.io/sml97-defn.pdf\n  // https://people.mpi-sws.org/~rossberg/sml.html\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\\b/i\n    Prism.languages.sml = {\n      // allow one level of nesting\n      comment:\n        /\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*)|\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*))*\\*\\))*\\*\\)/,\n      string: {\n        pattern: /#?\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': [\n        {\n          // This is only an approximation since the real grammar is context-free\n          //\n          // Why the main loop so complex?\n          // The main loop is approximately the same as /(?:\\s*(?:[*,]|->)\\s*<TERMINAL>)*/ which is, obviously, a lot\n          // simpler. The difference is that if a comma is the last iteration of the loop, then the terminal must be\n          // followed by a long identifier.\n          pattern: RegExp(\n            /((?:^|[^:]):\\s*)<TERMINAL>(?:\\s*(?:(?:\\*|->)\\s*<TERMINAL>|,\\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\\s+<LONG-ID>)))*/.source\n              .replace(/<NOT-LAST>/g, function () {\n                return /\\s*(?:[*,]|->)/.source\n              })\n              .replace(/<TERMINAL>/g, function () {\n                return /(?:'[\\w']*|<LONG-ID>|\\((?:[^()]|\\([^()]*\\))*\\)|\\{(?:[^{}]|\\{[^{}]*\\})*\\})(?:\\s+<LONG-ID>)*/\n                  .source\n              })\n              .replace(/<LONG-ID>/g, function () {\n                return /(?!<KEYWORD>)[a-z\\d_][\\w'.]*/.source\n              })\n              .replace(/<KEYWORD>/g, function () {\n                return keywords.source\n              }),\n            'i'\n          ),\n          lookbehind: true,\n          greedy: true,\n          inside: null // see below\n        },\n        {\n          pattern:\n            /((?:^|[^\\w'])(?:datatype|exception|functor|signature|structure|type)\\s+)[a-z_][\\w'.]*/i,\n          lookbehind: true\n        }\n      ],\n      function: {\n        pattern: /((?:^|[^\\w'])fun\\s+)[a-z_][\\w'.]*/i,\n        lookbehind: true\n      },\n      keyword: keywords,\n      variable: {\n        pattern: /(^|[^\\w'])'[\\w']*/,\n        lookbehind: true\n      },\n      number: /~?\\b(?:\\d+(?:\\.\\d+)?(?:e~?\\d+)?|0x[\\da-f]+)\\b/i,\n      word: {\n        pattern: /\\b0w(?:\\d+|x[\\da-f]+)\\b/i,\n        alias: 'constant'\n      },\n      boolean: /\\b(?:false|true)\\b/i,\n      operator: /\\.\\.\\.|:[>=:]|=>?|->|[<>]=?|[!+\\-*/^#|@~]/,\n      punctuation: /[(){}\\[\\].:,;]/\n    }\n    Prism.languages.sml['class-name'][0].inside = Prism.languages.sml\n    Prism.languages.smlnj = Prism.languages.sml\n  })(Prism)\n}\n",
      "start": 1702937445059,
      "end": 1702937445090,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445090,
      "end": 1702937445090,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445090,
      "end": 1702937445090,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445090,
      "end": 1702937445090,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445090,
      "end": 1702937445090,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445090,
      "end": 1702937445090,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445090,
      "end": 1702937445090,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445090,
      "end": 1702937445090,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445090,
      "end": 1702937445090,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445090,
      "end": 1702937445090,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445090,
      "end": 1702937445090,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar sml_1;\nvar hasRequiredSml;\n\nfunction requireSml () {\n\tif (hasRequiredSml) return sml_1;\n\thasRequiredSml = 1;\n\t'use strict'\n\n\tsml_1 = sml\n\tsml.displayName = 'sml'\n\tsml.aliases = ['smlnj']\n\tfunction sml(Prism) {\n\t  // https://smlfamily.github.io/sml97-defn.pdf\n\t  // https://people.mpi-sws.org/~rossberg/sml.html\n\t  ;(function (Prism) {\n\t    var keywords =\n\t      /\\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\\b/i\n\t    Prism.languages.sml = {\n\t      // allow one level of nesting\n\t      comment:\n\t        /\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*)|\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*))*\\*\\))*\\*\\)/,\n\t      string: {\n\t        pattern: /#?\"(?:[^\"\\\\]|\\\\.)*\"/,\n\t        greedy: true\n\t      },\n\t      'class-name': [\n\t        {\n\t          // This is only an approximation since the real grammar is context-free\n\t          //\n\t          // Why the main loop so complex?\n\t          // The main loop is approximately the same as /(?:\\s*(?:[*,]|->)\\s*<TERMINAL>)*/ which is, obviously, a lot\n\t          // simpler. The difference is that if a comma is the last iteration of the loop, then the terminal must be\n\t          // followed by a long identifier.\n\t          pattern: RegExp(\n\t            /((?:^|[^:]):\\s*)<TERMINAL>(?:\\s*(?:(?:\\*|->)\\s*<TERMINAL>|,\\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\\s+<LONG-ID>)))*/.source\n\t              .replace(/<NOT-LAST>/g, function () {\n\t                return /\\s*(?:[*,]|->)/.source\n\t              })\n\t              .replace(/<TERMINAL>/g, function () {\n\t                return /(?:'[\\w']*|<LONG-ID>|\\((?:[^()]|\\([^()]*\\))*\\)|\\{(?:[^{}]|\\{[^{}]*\\})*\\})(?:\\s+<LONG-ID>)*/\n\t                  .source\n\t              })\n\t              .replace(/<LONG-ID>/g, function () {\n\t                return /(?!<KEYWORD>)[a-z\\d_][\\w'.]*/.source\n\t              })\n\t              .replace(/<KEYWORD>/g, function () {\n\t                return keywords.source\n\t              }),\n\t            'i'\n\t          ),\n\t          lookbehind: true,\n\t          greedy: true,\n\t          inside: null // see below\n\t        },\n\t        {\n\t          pattern:\n\t            /((?:^|[^\\w'])(?:datatype|exception|functor|signature|structure|type)\\s+)[a-z_][\\w'.]*/i,\n\t          lookbehind: true\n\t        }\n\t      ],\n\t      function: {\n\t        pattern: /((?:^|[^\\w'])fun\\s+)[a-z_][\\w'.]*/i,\n\t        lookbehind: true\n\t      },\n\t      keyword: keywords,\n\t      variable: {\n\t        pattern: /(^|[^\\w'])'[\\w']*/,\n\t        lookbehind: true\n\t      },\n\t      number: /~?\\b(?:\\d+(?:\\.\\d+)?(?:e~?\\d+)?|0x[\\da-f]+)\\b/i,\n\t      word: {\n\t        pattern: /\\b0w(?:\\d+|x[\\da-f]+)\\b/i,\n\t        alias: 'constant'\n\t      },\n\t      boolean: /\\b(?:false|true)\\b/i,\n\t      operator: /\\.\\.\\.|:[>=:]|=>?|->|[<>]=?|[!+\\-*/^#|@~]/,\n\t      punctuation: /[(){}\\[\\].:,;]/\n\t    }\n\t    Prism.languages.sml['class-name'][0].inside = Prism.languages.sml\n\t    Prism.languages.smlnj = Prism.languages.sml\n\t  })(Prism)\n\t}\n\treturn sml_1;\n}\n\nexport { requireSml as __require };",
      "start": 1702937445090,
      "end": 1702937445090,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;CAAA,YAAY;AACZ;AACA,MAAc,GAAG,GAAG;CACpB,GAAG,CAAC,WAAW,GAAG,KAAK;CACvB,GAAG,CAAC,OAAO,GAAG,CAAC,OAAO,CAAC;CACvB,SAAS,GAAG,CAAC,KAAK,EAAE;CACpB;CACA;CACA,EAAE,CAAC,CAAC,UAAU,KAAK,EAAE;CACrB,IAAI,IAAI,QAAQ;CAChB,MAAM,yPAAyP;CAC/P,IAAI,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG;CAC1B;CACA,MAAM,OAAO;CACb,QAAQ,2EAA2E;CACnF,MAAM,MAAM,EAAE;CACd,QAAQ,OAAO,EAAE,qBAAqB;CACtC,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,MAAM,YAAY,EAAE;CACpB,QAAQ;CACR;CACA;CACA;CACA;CACA;CACA;CACA,UAAU,OAAO,EAAE,MAAM;CACzB,YAAY,0HAA0H,CAAC,MAAM;CAC7I,eAAe,OAAO,CAAC,aAAa,EAAE,YAAY;CAClD,gBAAgB,OAAO,gBAAgB,CAAC,MAAM;CAC9C,eAAe,CAAC;CAChB,eAAe,OAAO,CAAC,aAAa,EAAE,YAAY;CAClD,gBAAgB,OAAO,4FAA4F;CACnH,mBAAmB,MAAM;CACzB,eAAe,CAAC;CAChB,eAAe,OAAO,CAAC,YAAY,EAAE,YAAY;CACjD,gBAAgB,OAAO,8BAA8B,CAAC,MAAM;CAC5D,eAAe,CAAC;CAChB,eAAe,OAAO,CAAC,YAAY,EAAE,YAAY;CACjD,gBAAgB,OAAO,QAAQ,CAAC,MAAM;CACtC,eAAe,CAAC;CAChB,YAAY,GAAG;CACf,WAAW;CACX,UAAU,UAAU,EAAE,IAAI;CAC1B,UAAU,MAAM,EAAE,IAAI;CACtB,UAAU,MAAM,EAAE,IAAI;CACtB,SAAS;CACT,QAAQ;CACR,UAAU,OAAO;CACjB,YAAY,wFAAwF;CACpG,UAAU,UAAU,EAAE,IAAI;CAC1B,SAAS;CACT,OAAO;CACP,MAAM,QAAQ,EAAE;CAChB,QAAQ,OAAO,EAAE,oCAAoC;CACrD,QAAQ,UAAU,EAAE,IAAI;CACxB,OAAO;CACP,MAAM,OAAO,EAAE,QAAQ;CACvB,MAAM,QAAQ,EAAE;CAChB,QAAQ,OAAO,EAAE,mBAAmB;CACpC,QAAQ,UAAU,EAAE,IAAI;CACxB,OAAO;CACP,MAAM,MAAM,EAAE,gDAAgD;CAC9D,MAAM,IAAI,EAAE;CACZ,QAAQ,OAAO,EAAE,0BAA0B;CAC3C,QAAQ,KAAK,EAAE,UAAU;CACzB,OAAO;CACP,MAAM,OAAO,EAAE,qBAAqB;CACpC,MAAM,QAAQ,EAAE,2CAA2C;CAC3D,MAAM,WAAW,EAAE,gBAAgB;CACnC,KAAK;CACL,IAAI,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG;CACrE,IAAI,KAAK,CAAC,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG;CAC/C,GAAG,EAAE,KAAK,CAAC;CACX"
      }
    },
    {
      "name": "inject",
      "start": 1702937445090,
      "end": 1702937445090,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445090,
      "end": 1702937445090,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445090,
      "end": 1702937445090,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445090,
      "end": 1702937445090,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445090,
      "end": 1702937445090,
      "order": "normal"
    }
  ]
}
