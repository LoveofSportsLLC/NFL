{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/.vite/deps/chunk-OYHNC6W5.js?v=733ce8d4",
  "transforms": [
    {
      "name": "vite:optimized-deps",
      "result": "\"use strict\";\n(() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n    // If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n    mod\n  ));\n\n  // node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\n  var require_base64_js = __commonJS({\n    \"node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\"(exports) {\n      \"use strict\";\n      init_dist();\n      exports.byteLength = byteLength;\n      exports.toByteArray = toByteArray;\n      exports.fromByteArray = fromByteArray;\n      var lookup = [];\n      var revLookup = [];\n      var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n      var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n      for (i = 0, len = code.length; i < len; ++i) {\n        lookup[i] = code[i];\n        revLookup[code.charCodeAt(i)] = i;\n      }\n      var i;\n      var len;\n      revLookup[\"-\".charCodeAt(0)] = 62;\n      revLookup[\"_\".charCodeAt(0)] = 63;\n      function getLens(b64) {\n        var len2 = b64.length;\n        if (len2 % 4 > 0) {\n          throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        }\n        var validLen = b64.indexOf(\"=\");\n        if (validLen === -1)\n          validLen = len2;\n        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n        return [validLen, placeHoldersLen];\n      }\n      function byteLength(b64) {\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n      function _byteLength(b64, validLen, placeHoldersLen) {\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n      function toByteArray(b64) {\n        var tmp;\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n        var curByte = 0;\n        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n        var i2;\n        for (i2 = 0; i2 < len2; i2 += 4) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n          arr[curByte++] = tmp >> 16 & 255;\n          arr[curByte++] = tmp >> 8 & 255;\n          arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 2) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n          arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 1) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n          arr[curByte++] = tmp >> 8 & 255;\n          arr[curByte++] = tmp & 255;\n        }\n        return arr;\n      }\n      function tripletToBase64(num) {\n        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n      }\n      function encodeChunk(uint8, start, end) {\n        var tmp;\n        var output = [];\n        for (var i2 = start; i2 < end; i2 += 3) {\n          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n          output.push(tripletToBase64(tmp));\n        }\n        return output.join(\"\");\n      }\n      function fromByteArray(uint8) {\n        var tmp;\n        var len2 = uint8.length;\n        var extraBytes = len2 % 3;\n        var parts = [];\n        var maxChunkLength = 16383;\n        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\n          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n        }\n        if (extraBytes === 1) {\n          tmp = uint8[len2 - 1];\n          parts.push(\n            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\"\n          );\n        } else if (extraBytes === 2) {\n          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n          parts.push(\n            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\"\n          );\n        }\n        return parts.join(\"\");\n      }\n    }\n  });\n\n  // node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\n  var require_ieee754 = __commonJS({\n    \"node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\"(exports) {\n      init_dist();\n      exports.read = function(buffer, offset, isLE, mLen, nBytes) {\n        var e, m;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var nBits = -7;\n        var i = isLE ? nBytes - 1 : 0;\n        var d = isLE ? -1 : 1;\n        var s2 = buffer[offset + i];\n        i += d;\n        e = s2 & (1 << -nBits) - 1;\n        s2 >>= -nBits;\n        nBits += eLen;\n        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {\n        }\n        m = e & (1 << -nBits) - 1;\n        e >>= -nBits;\n        nBits += mLen;\n        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {\n        }\n        if (e === 0) {\n          e = 1 - eBias;\n        } else if (e === eMax) {\n          return m ? NaN : (s2 ? -1 : 1) * Infinity;\n        } else {\n          m = m + Math.pow(2, mLen);\n          e = e - eBias;\n        }\n        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);\n      };\n      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n        var e, m, c;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n        var i = isLE ? 0 : nBytes - 1;\n        var d = isLE ? 1 : -1;\n        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n        value = Math.abs(value);\n        if (isNaN(value) || value === Infinity) {\n          m = isNaN(value) ? 1 : 0;\n          e = eMax;\n        } else {\n          e = Math.floor(Math.log(value) / Math.LN2);\n          if (value * (c = Math.pow(2, -e)) < 1) {\n            e--;\n            c *= 2;\n          }\n          if (e + eBias >= 1) {\n            value += rt / c;\n          } else {\n            value += rt * Math.pow(2, 1 - eBias);\n          }\n          if (value * c >= 2) {\n            e++;\n            c /= 2;\n          }\n          if (e + eBias >= eMax) {\n            m = 0;\n            e = eMax;\n          } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen);\n            e = e + eBias;\n          } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n            e = 0;\n          }\n        }\n        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {\n        }\n        e = e << mLen | m;\n        eLen += mLen;\n        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {\n        }\n        buffer[offset + i - d] |= s2 * 128;\n      };\n    }\n  });\n\n  // node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js\n  var require_buffer = __commonJS({\n    \"node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js\"(exports) {\n      \"use strict\";\n      init_dist();\n      var base64 = require_base64_js();\n      var ieee754 = require_ieee754();\n      var customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") : null;\n      exports.Buffer = Buffer2;\n      exports.SlowBuffer = SlowBuffer;\n      exports.INSPECT_MAX_BYTES = 50;\n      var K_MAX_LENGTH = 2147483647;\n      exports.kMaxLength = K_MAX_LENGTH;\n      var { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;\n      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();\n      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n        console.error(\n          \"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"\n        );\n      }\n      function typedArraySupport() {\n        try {\n          const arr = new GlobalUint8Array(1);\n          const proto = { foo: function() {\n            return 42;\n          } };\n          Object.setPrototypeOf(proto, GlobalUint8Array.prototype);\n          Object.setPrototypeOf(arr, proto);\n          return arr.foo() === 42;\n        } catch (e) {\n          return false;\n        }\n      }\n      Object.defineProperty(Buffer2.prototype, \"parent\", {\n        enumerable: true,\n        get: function() {\n          if (!Buffer2.isBuffer(this))\n            return void 0;\n          return this.buffer;\n        }\n      });\n      Object.defineProperty(Buffer2.prototype, \"offset\", {\n        enumerable: true,\n        get: function() {\n          if (!Buffer2.isBuffer(this))\n            return void 0;\n          return this.byteOffset;\n        }\n      });\n      function createBuffer(length) {\n        if (length > K_MAX_LENGTH) {\n          throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n        }\n        const buf = new GlobalUint8Array(length);\n        Object.setPrototypeOf(buf, Buffer2.prototype);\n        return buf;\n      }\n      function Buffer2(arg, encodingOrOffset, length) {\n        if (typeof arg === \"number\") {\n          if (typeof encodingOrOffset === \"string\") {\n            throw new TypeError(\n              'The \"string\" argument must be of type string. Received type number'\n            );\n          }\n          return allocUnsafe(arg);\n        }\n        return from(arg, encodingOrOffset, length);\n      }\n      Buffer2.poolSize = 8192;\n      function from(value, encodingOrOffset, length) {\n        if (typeof value === \"string\") {\n          return fromString(value, encodingOrOffset);\n        }\n        if (GlobalArrayBuffer.isView(value)) {\n          return fromArrayView(value);\n        }\n        if (value == null) {\n          throw new TypeError(\n            \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n          );\n        }\n        if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n        if (typeof GlobalSharedArrayBuffer !== \"undefined\" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n        if (typeof value === \"number\") {\n          throw new TypeError(\n            'The \"value\" argument must not be of type number. Received type number'\n          );\n        }\n        const valueOf = value.valueOf && value.valueOf();\n        if (valueOf != null && valueOf !== value) {\n          return Buffer2.from(valueOf, encodingOrOffset, length);\n        }\n        const b = fromObject(value);\n        if (b)\n          return b;\n        if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n          return Buffer2.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n        }\n        throw new TypeError(\n          \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n        );\n      }\n      Buffer2.from = function(value, encodingOrOffset, length) {\n        return from(value, encodingOrOffset, length);\n      };\n      Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);\n      Object.setPrototypeOf(Buffer2, GlobalUint8Array);\n      function assertSize(size) {\n        if (typeof size !== \"number\") {\n          throw new TypeError('\"size\" argument must be of type number');\n        } else if (size < 0) {\n          throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n        }\n      }\n      function alloc(size, fill, encoding) {\n        assertSize(size);\n        if (size <= 0) {\n          return createBuffer(size);\n        }\n        if (fill !== void 0) {\n          return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n        }\n        return createBuffer(size);\n      }\n      Buffer2.alloc = function(size, fill, encoding) {\n        return alloc(size, fill, encoding);\n      };\n      function allocUnsafe(size) {\n        assertSize(size);\n        return createBuffer(size < 0 ? 0 : checked(size) | 0);\n      }\n      Buffer2.allocUnsafe = function(size) {\n        return allocUnsafe(size);\n      };\n      Buffer2.allocUnsafeSlow = function(size) {\n        return allocUnsafe(size);\n      };\n      function fromString(string, encoding) {\n        if (typeof encoding !== \"string\" || encoding === \"\") {\n          encoding = \"utf8\";\n        }\n        if (!Buffer2.isEncoding(encoding)) {\n          throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        const length = byteLength(string, encoding) | 0;\n        let buf = createBuffer(length);\n        const actual = buf.write(string, encoding);\n        if (actual !== length) {\n          buf = buf.slice(0, actual);\n        }\n        return buf;\n      }\n      function fromArrayLike(array) {\n        const length = array.length < 0 ? 0 : checked(array.length) | 0;\n        const buf = createBuffer(length);\n        for (let i = 0; i < length; i += 1) {\n          buf[i] = array[i] & 255;\n        }\n        return buf;\n      }\n      function fromArrayView(arrayView) {\n        if (isInstance(arrayView, GlobalUint8Array)) {\n          const copy = new GlobalUint8Array(arrayView);\n          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n        }\n        return fromArrayLike(arrayView);\n      }\n      function fromArrayBuffer(array, byteOffset, length) {\n        if (byteOffset < 0 || array.byteLength < byteOffset) {\n          throw new RangeError('\"offset\" is outside of buffer bounds');\n        }\n        if (array.byteLength < byteOffset + (length || 0)) {\n          throw new RangeError('\"length\" is outside of buffer bounds');\n        }\n        let buf;\n        if (byteOffset === void 0 && length === void 0) {\n          buf = new GlobalUint8Array(array);\n        } else if (length === void 0) {\n          buf = new GlobalUint8Array(array, byteOffset);\n        } else {\n          buf = new GlobalUint8Array(array, byteOffset, length);\n        }\n        Object.setPrototypeOf(buf, Buffer2.prototype);\n        return buf;\n      }\n      function fromObject(obj) {\n        if (Buffer2.isBuffer(obj)) {\n          const len = checked(obj.length) | 0;\n          const buf = createBuffer(len);\n          if (buf.length === 0) {\n            return buf;\n          }\n          obj.copy(buf, 0, 0, len);\n          return buf;\n        }\n        if (obj.length !== void 0) {\n          if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n            return createBuffer(0);\n          }\n          return fromArrayLike(obj);\n        }\n        if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n          return fromArrayLike(obj.data);\n        }\n      }\n      function checked(length) {\n        if (length >= K_MAX_LENGTH) {\n          throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n        }\n        return length | 0;\n      }\n      function SlowBuffer(length) {\n        if (+length != length) {\n          length = 0;\n        }\n        return Buffer2.alloc(+length);\n      }\n      Buffer2.isBuffer = function isBuffer(b) {\n        return b != null && b._isBuffer === true && b !== Buffer2.prototype;\n      };\n      Buffer2.compare = function compare(a, b) {\n        if (isInstance(a, GlobalUint8Array))\n          a = Buffer2.from(a, a.offset, a.byteLength);\n        if (isInstance(b, GlobalUint8Array))\n          b = Buffer2.from(b, b.offset, b.byteLength);\n        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {\n          throw new TypeError(\n            'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n          );\n        }\n        if (a === b)\n          return 0;\n        let x = a.length;\n        let y = b.length;\n        for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n          if (a[i] !== b[i]) {\n            x = a[i];\n            y = b[i];\n            break;\n          }\n        }\n        if (x < y)\n          return -1;\n        if (y < x)\n          return 1;\n        return 0;\n      };\n      Buffer2.isEncoding = function isEncoding(encoding) {\n        switch (String(encoding).toLowerCase()) {\n          case \"hex\":\n          case \"utf8\":\n          case \"utf-8\":\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n          case \"base64\":\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return true;\n          default:\n            return false;\n        }\n      };\n      Buffer2.concat = function concat(list, length) {\n        if (!Array.isArray(list)) {\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        }\n        if (list.length === 0) {\n          return Buffer2.alloc(0);\n        }\n        let i;\n        if (length === void 0) {\n          length = 0;\n          for (i = 0; i < list.length; ++i) {\n            length += list[i].length;\n          }\n        }\n        const buffer = Buffer2.allocUnsafe(length);\n        let pos = 0;\n        for (i = 0; i < list.length; ++i) {\n          let buf = list[i];\n          if (isInstance(buf, GlobalUint8Array)) {\n            if (pos + buf.length > buffer.length) {\n              if (!Buffer2.isBuffer(buf))\n                buf = Buffer2.from(buf);\n              buf.copy(buffer, pos);\n            } else {\n              GlobalUint8Array.prototype.set.call(\n                buffer,\n                buf,\n                pos\n              );\n            }\n          } else if (!Buffer2.isBuffer(buf)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers');\n          } else {\n            buf.copy(buffer, pos);\n          }\n          pos += buf.length;\n        }\n        return buffer;\n      };\n      function byteLength(string, encoding) {\n        if (Buffer2.isBuffer(string)) {\n          return string.length;\n        }\n        if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {\n          return string.byteLength;\n        }\n        if (typeof string !== \"string\") {\n          throw new TypeError(\n            'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string\n          );\n        }\n        const len = string.length;\n        const mustMatch = arguments.length > 2 && arguments[2] === true;\n        if (!mustMatch && len === 0)\n          return 0;\n        let loweredCase = false;\n        for (; ; ) {\n          switch (encoding) {\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n              return len;\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8ToBytes(string).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return len * 2;\n            case \"hex\":\n              return len >>> 1;\n            case \"base64\":\n              return base64ToBytes(string).length;\n            default:\n              if (loweredCase) {\n                return mustMatch ? -1 : utf8ToBytes(string).length;\n              }\n              encoding = (\"\" + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n      Buffer2.byteLength = byteLength;\n      function slowToString(encoding, start, end) {\n        let loweredCase = false;\n        if (start === void 0 || start < 0) {\n          start = 0;\n        }\n        if (start > this.length) {\n          return \"\";\n        }\n        if (end === void 0 || end > this.length) {\n          end = this.length;\n        }\n        if (end <= 0) {\n          return \"\";\n        }\n        end >>>= 0;\n        start >>>= 0;\n        if (end <= start) {\n          return \"\";\n        }\n        if (!encoding)\n          encoding = \"utf8\";\n        while (true) {\n          switch (encoding) {\n            case \"hex\":\n              return hexSlice(this, start, end);\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8Slice(this, start, end);\n            case \"ascii\":\n              return asciiSlice(this, start, end);\n            case \"latin1\":\n            case \"binary\":\n              return latin1Slice(this, start, end);\n            case \"base64\":\n              return base64Slice(this, start, end);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return utf16leSlice(this, start, end);\n            default:\n              if (loweredCase)\n                throw new TypeError(\"Unknown encoding: \" + encoding);\n              encoding = (encoding + \"\").toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n      Buffer2.prototype._isBuffer = true;\n      function swap(b, n, m) {\n        const i = b[n];\n        b[n] = b[m];\n        b[m] = i;\n      }\n      Buffer2.prototype.swap16 = function swap16() {\n        const len = this.length;\n        if (len % 2 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n        }\n        for (let i = 0; i < len; i += 2) {\n          swap(this, i, i + 1);\n        }\n        return this;\n      };\n      Buffer2.prototype.swap32 = function swap32() {\n        const len = this.length;\n        if (len % 4 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n        }\n        for (let i = 0; i < len; i += 4) {\n          swap(this, i, i + 3);\n          swap(this, i + 1, i + 2);\n        }\n        return this;\n      };\n      Buffer2.prototype.swap64 = function swap64() {\n        const len = this.length;\n        if (len % 8 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n        }\n        for (let i = 0; i < len; i += 8) {\n          swap(this, i, i + 7);\n          swap(this, i + 1, i + 6);\n          swap(this, i + 2, i + 5);\n          swap(this, i + 3, i + 4);\n        }\n        return this;\n      };\n      Buffer2.prototype.toString = function toString() {\n        const length = this.length;\n        if (length === 0)\n          return \"\";\n        if (arguments.length === 0)\n          return utf8Slice(this, 0, length);\n        return slowToString.apply(this, arguments);\n      };\n      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;\n      Buffer2.prototype.equals = function equals(b) {\n        if (!Buffer2.isBuffer(b))\n          throw new TypeError(\"Argument must be a Buffer\");\n        if (this === b)\n          return true;\n        return Buffer2.compare(this, b) === 0;\n      };\n      Buffer2.prototype.inspect = function inspect() {\n        let str = \"\";\n        const max = exports.INSPECT_MAX_BYTES;\n        str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n        if (this.length > max)\n          str += \" ... \";\n        return \"<Buffer \" + str + \">\";\n      };\n      if (customInspectSymbol) {\n        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;\n      }\n      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n        if (isInstance(target, GlobalUint8Array)) {\n          target = Buffer2.from(target, target.offset, target.byteLength);\n        }\n        if (!Buffer2.isBuffer(target)) {\n          throw new TypeError(\n            'The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target\n          );\n        }\n        if (start === void 0) {\n          start = 0;\n        }\n        if (end === void 0) {\n          end = target ? target.length : 0;\n        }\n        if (thisStart === void 0) {\n          thisStart = 0;\n        }\n        if (thisEnd === void 0) {\n          thisEnd = this.length;\n        }\n        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n          throw new RangeError(\"out of range index\");\n        }\n        if (thisStart >= thisEnd && start >= end) {\n          return 0;\n        }\n        if (thisStart >= thisEnd) {\n          return -1;\n        }\n        if (start >= end) {\n          return 1;\n        }\n        start >>>= 0;\n        end >>>= 0;\n        thisStart >>>= 0;\n        thisEnd >>>= 0;\n        if (this === target)\n          return 0;\n        let x = thisEnd - thisStart;\n        let y = end - start;\n        const len = Math.min(x, y);\n        const thisCopy = this.slice(thisStart, thisEnd);\n        const targetCopy = target.slice(start, end);\n        for (let i = 0; i < len; ++i) {\n          if (thisCopy[i] !== targetCopy[i]) {\n            x = thisCopy[i];\n            y = targetCopy[i];\n            break;\n          }\n        }\n        if (x < y)\n          return -1;\n        if (y < x)\n          return 1;\n        return 0;\n      };\n      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n        if (buffer.length === 0)\n          return -1;\n        if (typeof byteOffset === \"string\") {\n          encoding = byteOffset;\n          byteOffset = 0;\n        } else if (byteOffset > 2147483647) {\n          byteOffset = 2147483647;\n        } else if (byteOffset < -2147483648) {\n          byteOffset = -2147483648;\n        }\n        byteOffset = +byteOffset;\n        if (numberIsNaN(byteOffset)) {\n          byteOffset = dir ? 0 : buffer.length - 1;\n        }\n        if (byteOffset < 0)\n          byteOffset = buffer.length + byteOffset;\n        if (byteOffset >= buffer.length) {\n          if (dir)\n            return -1;\n          else\n            byteOffset = buffer.length - 1;\n        } else if (byteOffset < 0) {\n          if (dir)\n            byteOffset = 0;\n          else\n            return -1;\n        }\n        if (typeof val === \"string\") {\n          val = Buffer2.from(val, encoding);\n        }\n        if (Buffer2.isBuffer(val)) {\n          if (val.length === 0) {\n            return -1;\n          }\n          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n        } else if (typeof val === \"number\") {\n          val = val & 255;\n          if (typeof GlobalUint8Array.prototype.indexOf === \"function\") {\n            if (dir) {\n              return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n            } else {\n              return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n            }\n          }\n          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n        }\n        throw new TypeError(\"val must be string, number or Buffer\");\n      }\n      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n        let indexSize = 1;\n        let arrLength = arr.length;\n        let valLength = val.length;\n        if (encoding !== void 0) {\n          encoding = String(encoding).toLowerCase();\n          if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n            if (arr.length < 2 || val.length < 2) {\n              return -1;\n            }\n            indexSize = 2;\n            arrLength /= 2;\n            valLength /= 2;\n            byteOffset /= 2;\n          }\n        }\n        function read(buf, i2) {\n          if (indexSize === 1) {\n            return buf[i2];\n          } else {\n            return buf.readUInt16BE(i2 * indexSize);\n          }\n        }\n        let i;\n        if (dir) {\n          let foundIndex = -1;\n          for (i = byteOffset; i < arrLength; i++) {\n            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n              if (foundIndex === -1)\n                foundIndex = i;\n              if (i - foundIndex + 1 === valLength)\n                return foundIndex * indexSize;\n            } else {\n              if (foundIndex !== -1)\n                i -= i - foundIndex;\n              foundIndex = -1;\n            }\n          }\n        } else {\n          if (byteOffset + valLength > arrLength)\n            byteOffset = arrLength - valLength;\n          for (i = byteOffset; i >= 0; i--) {\n            let found = true;\n            for (let j = 0; j < valLength; j++) {\n              if (read(arr, i + j) !== read(val, j)) {\n                found = false;\n                break;\n              }\n            }\n            if (found)\n              return i;\n          }\n        }\n        return -1;\n      }\n      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {\n        return this.indexOf(val, byteOffset, encoding) !== -1;\n      };\n      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n      };\n      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n      };\n      function hexWrite(buf, string, offset, length) {\n        offset = Number(offset) || 0;\n        const remaining = buf.length - offset;\n        if (!length) {\n          length = remaining;\n        } else {\n          length = Number(length);\n          if (length > remaining) {\n            length = remaining;\n          }\n        }\n        const strLen = string.length;\n        if (length > strLen / 2) {\n          length = strLen / 2;\n        }\n        let i;\n        for (i = 0; i < length; ++i) {\n          const parsed = parseInt(string.substr(i * 2, 2), 16);\n          if (numberIsNaN(parsed))\n            return i;\n          buf[offset + i] = parsed;\n        }\n        return i;\n      }\n      function utf8Write(buf, string, offset, length) {\n        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n      }\n      function asciiWrite(buf, string, offset, length) {\n        return blitBuffer(asciiToBytes(string), buf, offset, length);\n      }\n      function base64Write(buf, string, offset, length) {\n        return blitBuffer(base64ToBytes(string), buf, offset, length);\n      }\n      function ucs2Write(buf, string, offset, length) {\n        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n      }\n      Buffer2.prototype.write = function write(string, offset, length, encoding) {\n        if (offset === void 0) {\n          encoding = \"utf8\";\n          length = this.length;\n          offset = 0;\n        } else if (length === void 0 && typeof offset === \"string\") {\n          encoding = offset;\n          length = this.length;\n          offset = 0;\n        } else if (isFinite(offset)) {\n          offset = offset >>> 0;\n          if (isFinite(length)) {\n            length = length >>> 0;\n            if (encoding === void 0)\n              encoding = \"utf8\";\n          } else {\n            encoding = length;\n            length = void 0;\n          }\n        } else {\n          throw new Error(\n            \"Buffer.write(string, encoding, offset[, length]) is no longer supported\"\n          );\n        }\n        const remaining = this.length - offset;\n        if (length === void 0 || length > remaining)\n          length = remaining;\n        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n          throw new RangeError(\"Attempt to write outside buffer bounds\");\n        }\n        if (!encoding)\n          encoding = \"utf8\";\n        let loweredCase = false;\n        for (; ; ) {\n          switch (encoding) {\n            case \"hex\":\n              return hexWrite(this, string, offset, length);\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8Write(this, string, offset, length);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n              return asciiWrite(this, string, offset, length);\n            case \"base64\":\n              return base64Write(this, string, offset, length);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return ucs2Write(this, string, offset, length);\n            default:\n              if (loweredCase)\n                throw new TypeError(\"Unknown encoding: \" + encoding);\n              encoding = (\"\" + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      };\n      Buffer2.prototype.toJSON = function toJSON() {\n        return {\n          type: \"Buffer\",\n          data: Array.prototype.slice.call(this._arr || this, 0)\n        };\n      };\n      function base64Slice(buf, start, end) {\n        if (start === 0 && end === buf.length) {\n          return base64.fromByteArray(buf);\n        } else {\n          return base64.fromByteArray(buf.slice(start, end));\n        }\n      }\n      function utf8Slice(buf, start, end) {\n        end = Math.min(buf.length, end);\n        const res = [];\n        let i = start;\n        while (i < end) {\n          const firstByte = buf[i];\n          let codePoint = null;\n          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n          if (i + bytesPerSequence <= end) {\n            let secondByte, thirdByte, fourthByte, tempCodePoint;\n            switch (bytesPerSequence) {\n              case 1:\n                if (firstByte < 128) {\n                  codePoint = firstByte;\n                }\n                break;\n              case 2:\n                secondByte = buf[i + 1];\n                if ((secondByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n                  if (tempCodePoint > 127) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 3:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 4:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                fourthByte = buf[i + 3];\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n            }\n          }\n          if (codePoint === null) {\n            codePoint = 65533;\n            bytesPerSequence = 1;\n          } else if (codePoint > 65535) {\n            codePoint -= 65536;\n            res.push(codePoint >>> 10 & 1023 | 55296);\n            codePoint = 56320 | codePoint & 1023;\n          }\n          res.push(codePoint);\n          i += bytesPerSequence;\n        }\n        return decodeCodePointsArray(res);\n      }\n      var MAX_ARGUMENTS_LENGTH = 4096;\n      function decodeCodePointsArray(codePoints) {\n        const len = codePoints.length;\n        if (len <= MAX_ARGUMENTS_LENGTH) {\n          return String.fromCharCode.apply(String, codePoints);\n        }\n        let res = \"\";\n        let i = 0;\n        while (i < len) {\n          res += String.fromCharCode.apply(\n            String,\n            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n          );\n        }\n        return res;\n      }\n      function asciiSlice(buf, start, end) {\n        let ret = \"\";\n        end = Math.min(buf.length, end);\n        for (let i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i] & 127);\n        }\n        return ret;\n      }\n      function latin1Slice(buf, start, end) {\n        let ret = \"\";\n        end = Math.min(buf.length, end);\n        for (let i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i]);\n        }\n        return ret;\n      }\n      function hexSlice(buf, start, end) {\n        const len = buf.length;\n        if (!start || start < 0)\n          start = 0;\n        if (!end || end < 0 || end > len)\n          end = len;\n        let out = \"\";\n        for (let i = start; i < end; ++i) {\n          out += hexSliceLookupTable[buf[i]];\n        }\n        return out;\n      }\n      function utf16leSlice(buf, start, end) {\n        const bytes = buf.slice(start, end);\n        let res = \"\";\n        for (let i = 0; i < bytes.length - 1; i += 2) {\n          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n        }\n        return res;\n      }\n      Buffer2.prototype.slice = function slice(start, end) {\n        const len = this.length;\n        start = ~~start;\n        end = end === void 0 ? len : ~~end;\n        if (start < 0) {\n          start += len;\n          if (start < 0)\n            start = 0;\n        } else if (start > len) {\n          start = len;\n        }\n        if (end < 0) {\n          end += len;\n          if (end < 0)\n            end = 0;\n        } else if (end > len) {\n          end = len;\n        }\n        if (end < start)\n          end = start;\n        const newBuf = this.subarray(start, end);\n        Object.setPrototypeOf(newBuf, Buffer2.prototype);\n        return newBuf;\n      };\n      function checkOffset(offset, ext, length) {\n        if (offset % 1 !== 0 || offset < 0)\n          throw new RangeError(\"offset is not uint\");\n        if (offset + ext > length)\n          throw new RangeError(\"Trying to access beyond buffer length\");\n      }\n      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let val = this[offset];\n        let mul = 1;\n        let i = 0;\n        while (++i < byteLength2 && (mul *= 256)) {\n          val += this[offset + i] * mul;\n        }\n        return val;\n      };\n      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          checkOffset(offset, byteLength2, this.length);\n        }\n        let val = this[offset + --byteLength2];\n        let mul = 1;\n        while (byteLength2 > 0 && (mul *= 256)) {\n          val += this[offset + --byteLength2] * mul;\n        }\n        return val;\n      };\n      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 1, this.length);\n        return this[offset];\n      };\n      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        return this[offset] | this[offset + 1] << 8;\n      };\n      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        return this[offset] << 8 | this[offset + 1];\n      };\n      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n      };\n      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n      };\n      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n        return BigInt(lo) + (BigInt(hi) << BigInt(32));\n      });\n      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\n        return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n      });\n      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let val = this[offset];\n        let mul = 1;\n        let i = 0;\n        while (++i < byteLength2 && (mul *= 256)) {\n          val += this[offset + i] * mul;\n        }\n        mul *= 128;\n        if (val >= mul)\n          val -= Math.pow(2, 8 * byteLength2);\n        return val;\n      };\n      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let i = byteLength2;\n        let mul = 1;\n        let val = this[offset + --i];\n        while (i > 0 && (mul *= 256)) {\n          val += this[offset + --i] * mul;\n        }\n        mul *= 128;\n        if (val >= mul)\n          val -= Math.pow(2, 8 * byteLength2);\n        return val;\n      };\n      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 1, this.length);\n        if (!(this[offset] & 128))\n          return this[offset];\n        return (255 - this[offset] + 1) * -1;\n      };\n      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        const val = this[offset] | this[offset + 1] << 8;\n        return val & 32768 ? val | 4294901760 : val;\n      };\n      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        const val = this[offset + 1] | this[offset] << 8;\n        return val & 32768 ? val | 4294901760 : val;\n      };\n      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n      };\n      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n      };\n      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);\n        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n      });\n      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const val = (first << 24) + // Overflow\n        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\n      });\n      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, true, 23, 4);\n      };\n      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, false, 23, 4);\n      };\n      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, true, 52, 8);\n      };\n      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, false, 52, 8);\n      };\n      function checkInt(buf, value, offset, ext, max, min) {\n        if (!Buffer2.isBuffer(buf))\n          throw new TypeError('\"buffer\" argument must be a Buffer instance');\n        if (value > max || value < min)\n          throw new RangeError('\"value\" argument is out of bounds');\n        if (offset + ext > buf.length)\n          throw new RangeError(\"Index out of range\");\n      }\n      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\n        }\n        let mul = 1;\n        let i = 0;\n        this[offset] = value & 255;\n        while (++i < byteLength2 && (mul *= 256)) {\n          this[offset + i] = value / mul & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\n        }\n        let i = byteLength2 - 1;\n        let mul = 1;\n        this[offset + i] = value & 255;\n        while (--i >= 0 && (mul *= 256)) {\n          this[offset + i] = value / mul & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 1, 255, 0);\n        this[offset] = value & 255;\n        return offset + 1;\n      };\n      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 65535, 0);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 65535, 0);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 255;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 4294967295, 0);\n        this[offset + 3] = value >>> 24;\n        this[offset + 2] = value >>> 16;\n        this[offset + 1] = value >>> 8;\n        this[offset] = value & 255;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 4294967295, 0);\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 255;\n        return offset + 4;\n      };\n      function wrtBigUInt64LE(buf, value, offset, min, max) {\n        checkIntBI(value, min, max, buf, offset, 7);\n        let lo = Number(value & BigInt(4294967295));\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        return offset;\n      }\n      function wrtBigUInt64BE(buf, value, offset, min, max) {\n        checkIntBI(value, min, max, buf, offset, 7);\n        let lo = Number(value & BigInt(4294967295));\n        buf[offset + 7] = lo;\n        lo = lo >> 8;\n        buf[offset + 6] = lo;\n        lo = lo >> 8;\n        buf[offset + 5] = lo;\n        lo = lo >> 8;\n        buf[offset + 4] = lo;\n        let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n        buf[offset + 3] = hi;\n        hi = hi >> 8;\n        buf[offset + 2] = hi;\n        hi = hi >> 8;\n        buf[offset + 1] = hi;\n        hi = hi >> 8;\n        buf[offset] = hi;\n        return offset + 8;\n      }\n      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {\n        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n      });\n      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {\n        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n      });\n      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          const limit = Math.pow(2, 8 * byteLength2 - 1);\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n        }\n        let i = 0;\n        let mul = 1;\n        let sub = 0;\n        this[offset] = value & 255;\n        while (++i < byteLength2 && (mul *= 256)) {\n          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          const limit = Math.pow(2, 8 * byteLength2 - 1);\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n        }\n        let i = byteLength2 - 1;\n        let mul = 1;\n        let sub = 0;\n        this[offset + i] = value & 255;\n        while (--i >= 0 && (mul *= 256)) {\n          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 1, 127, -128);\n        if (value < 0)\n          value = 255 + value + 1;\n        this[offset] = value & 255;\n        return offset + 1;\n      };\n      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 32767, -32768);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 32767, -32768);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 255;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 2147483647, -2147483648);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        this[offset + 2] = value >>> 16;\n        this[offset + 3] = value >>> 24;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 2147483647, -2147483648);\n        if (value < 0)\n          value = 4294967295 + value + 1;\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 255;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {\n        return wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n      });\n      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {\n        return wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n      });\n      function checkIEEE754(buf, value, offset, ext, max, min) {\n        if (offset + ext > buf.length)\n          throw new RangeError(\"Index out of range\");\n        if (offset < 0)\n          throw new RangeError(\"Index out of range\");\n      }\n      function writeFloat(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 23, 4);\n        return offset + 4;\n      }\n      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, true, noAssert);\n      };\n      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, false, noAssert);\n      };\n      function writeDouble(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 52, 8);\n        return offset + 8;\n      }\n      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, true, noAssert);\n      };\n      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, false, noAssert);\n      };\n      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {\n        if (!Buffer2.isBuffer(target))\n          throw new TypeError(\"argument should be a Buffer\");\n        if (!start)\n          start = 0;\n        if (!end && end !== 0)\n          end = this.length;\n        if (targetStart >= target.length)\n          targetStart = target.length;\n        if (!targetStart)\n          targetStart = 0;\n        if (end > 0 && end < start)\n          end = start;\n        if (end === start)\n          return 0;\n        if (target.length === 0 || this.length === 0)\n          return 0;\n        if (targetStart < 0) {\n          throw new RangeError(\"targetStart out of bounds\");\n        }\n        if (start < 0 || start >= this.length)\n          throw new RangeError(\"Index out of range\");\n        if (end < 0)\n          throw new RangeError(\"sourceEnd out of bounds\");\n        if (end > this.length)\n          end = this.length;\n        if (target.length - targetStart < end - start) {\n          end = target.length - targetStart + start;\n        }\n        const len = end - start;\n        if (this === target && typeof GlobalUint8Array.prototype.copyWithin === \"function\") {\n          this.copyWithin(targetStart, start, end);\n        } else {\n          GlobalUint8Array.prototype.set.call(\n            target,\n            this.subarray(start, end),\n            targetStart\n          );\n        }\n        return len;\n      };\n      Buffer2.prototype.fill = function fill(val, start, end, encoding) {\n        if (typeof val === \"string\") {\n          if (typeof start === \"string\") {\n            encoding = start;\n            start = 0;\n            end = this.length;\n          } else if (typeof end === \"string\") {\n            encoding = end;\n            end = this.length;\n          }\n          if (encoding !== void 0 && typeof encoding !== \"string\") {\n            throw new TypeError(\"encoding must be a string\");\n          }\n          if (typeof encoding === \"string\" && !Buffer2.isEncoding(encoding)) {\n            throw new TypeError(\"Unknown encoding: \" + encoding);\n          }\n          if (val.length === 1) {\n            const code = val.charCodeAt(0);\n            if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n              val = code;\n            }\n          }\n        } else if (typeof val === \"number\") {\n          val = val & 255;\n        } else if (typeof val === \"boolean\") {\n          val = Number(val);\n        }\n        if (start < 0 || this.length < start || this.length < end) {\n          throw new RangeError(\"Out of range index\");\n        }\n        if (end <= start) {\n          return this;\n        }\n        start = start >>> 0;\n        end = end === void 0 ? this.length : end >>> 0;\n        if (!val)\n          val = 0;\n        let i;\n        if (typeof val === \"number\") {\n          for (i = start; i < end; ++i) {\n            this[i] = val;\n          }\n        } else {\n          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);\n          const len = bytes.length;\n          if (len === 0) {\n            throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n          }\n          for (i = 0; i < end - start; ++i) {\n            this[i + start] = bytes[i % len];\n          }\n        }\n        return this;\n      };\n      var errors = {};\n      function E(sym, getMessage, Base) {\n        errors[sym] = class NodeError extends Base {\n          constructor() {\n            super();\n            Object.defineProperty(this, \"message\", {\n              value: getMessage.apply(this, arguments),\n              writable: true,\n              configurable: true\n            });\n            this.name = `${this.name} [${sym}]`;\n            this.stack;\n            delete this.name;\n          }\n          get code() {\n            return sym;\n          }\n          set code(value) {\n            Object.defineProperty(this, \"code\", {\n              configurable: true,\n              enumerable: true,\n              value,\n              writable: true\n            });\n          }\n          toString() {\n            return `${this.name} [${sym}]: ${this.message}`;\n          }\n        };\n      }\n      E(\n        \"ERR_BUFFER_OUT_OF_BOUNDS\",\n        function(name) {\n          if (name) {\n            return `${name} is outside of buffer bounds`;\n          }\n          return \"Attempt to access memory outside buffer bounds\";\n        },\n        RangeError\n      );\n      E(\n        \"ERR_INVALID_ARG_TYPE\",\n        function(name, actual) {\n          return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`;\n        },\n        TypeError\n      );\n      E(\n        \"ERR_OUT_OF_RANGE\",\n        function(str, range, input) {\n          let msg = `The value of \"${str}\" is out of range.`;\n          let received = input;\n          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n            received = addNumericalSeparator(String(input));\n          } else if (typeof input === \"bigint\") {\n            received = String(input);\n            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n              received = addNumericalSeparator(received);\n            }\n            received += \"n\";\n          }\n          msg += ` It must be ${range}. Received ${received}`;\n          return msg;\n        },\n        RangeError\n      );\n      function addNumericalSeparator(val) {\n        let res = \"\";\n        let i = val.length;\n        const start = val[0] === \"-\" ? 1 : 0;\n        for (; i >= start + 4; i -= 3) {\n          res = `_${val.slice(i - 3, i)}${res}`;\n        }\n        return `${val.slice(0, i)}${res}`;\n      }\n      function checkBounds(buf, offset, byteLength2) {\n        validateNumber(offset, \"offset\");\n        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {\n          boundsError(offset, buf.length - (byteLength2 + 1));\n        }\n      }\n      function checkIntBI(value, min, max, buf, offset, byteLength2) {\n        if (value > max || value < min) {\n          const n = typeof min === \"bigint\" ? \"n\" : \"\";\n          let range;\n          if (byteLength2 > 3) {\n            if (min === 0 || min === BigInt(0)) {\n              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;\n            } else {\n              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;\n            }\n          } else {\n            range = `>= ${min}${n} and <= ${max}${n}`;\n          }\n          throw new errors.ERR_OUT_OF_RANGE(\"value\", range, value);\n        }\n        checkBounds(buf, offset, byteLength2);\n      }\n      function validateNumber(value, name) {\n        if (typeof value !== \"number\") {\n          throw new errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n        }\n      }\n      function boundsError(value, length, type) {\n        if (Math.floor(value) !== value) {\n          validateNumber(value, type);\n          throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \"an integer\", value);\n        }\n        if (length < 0) {\n          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n        }\n        throw new errors.ERR_OUT_OF_RANGE(\n          type || \"offset\",\n          `>= ${type ? 1 : 0} and <= ${length}`,\n          value\n        );\n      }\n      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n      function base64clean(str) {\n        str = str.split(\"=\")[0];\n        str = str.trim().replace(INVALID_BASE64_RE, \"\");\n        if (str.length < 2)\n          return \"\";\n        while (str.length % 4 !== 0) {\n          str = str + \"=\";\n        }\n        return str;\n      }\n      function utf8ToBytes(string, units) {\n        units = units || Infinity;\n        let codePoint;\n        const length = string.length;\n        let leadSurrogate = null;\n        const bytes = [];\n        for (let i = 0; i < length; ++i) {\n          codePoint = string.charCodeAt(i);\n          if (codePoint > 55295 && codePoint < 57344) {\n            if (!leadSurrogate) {\n              if (codePoint > 56319) {\n                if ((units -= 3) > -1)\n                  bytes.push(239, 191, 189);\n                continue;\n              } else if (i + 1 === length) {\n                if ((units -= 3) > -1)\n                  bytes.push(239, 191, 189);\n                continue;\n              }\n              leadSurrogate = codePoint;\n              continue;\n            }\n            if (codePoint < 56320) {\n              if ((units -= 3) > -1)\n                bytes.push(239, 191, 189);\n              leadSurrogate = codePoint;\n              continue;\n            }\n            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n          } else if (leadSurrogate) {\n            if ((units -= 3) > -1)\n              bytes.push(239, 191, 189);\n          }\n          leadSurrogate = null;\n          if (codePoint < 128) {\n            if ((units -= 1) < 0)\n              break;\n            bytes.push(codePoint);\n          } else if (codePoint < 2048) {\n            if ((units -= 2) < 0)\n              break;\n            bytes.push(\n              codePoint >> 6 | 192,\n              codePoint & 63 | 128\n            );\n          } else if (codePoint < 65536) {\n            if ((units -= 3) < 0)\n              break;\n            bytes.push(\n              codePoint >> 12 | 224,\n              codePoint >> 6 & 63 | 128,\n              codePoint & 63 | 128\n            );\n          } else if (codePoint < 1114112) {\n            if ((units -= 4) < 0)\n              break;\n            bytes.push(\n              codePoint >> 18 | 240,\n              codePoint >> 12 & 63 | 128,\n              codePoint >> 6 & 63 | 128,\n              codePoint & 63 | 128\n            );\n          } else {\n            throw new Error(\"Invalid code point\");\n          }\n        }\n        return bytes;\n      }\n      function asciiToBytes(str) {\n        const byteArray = [];\n        for (let i = 0; i < str.length; ++i) {\n          byteArray.push(str.charCodeAt(i) & 255);\n        }\n        return byteArray;\n      }\n      function utf16leToBytes(str, units) {\n        let c, hi, lo;\n        const byteArray = [];\n        for (let i = 0; i < str.length; ++i) {\n          if ((units -= 2) < 0)\n            break;\n          c = str.charCodeAt(i);\n          hi = c >> 8;\n          lo = c % 256;\n          byteArray.push(lo);\n          byteArray.push(hi);\n        }\n        return byteArray;\n      }\n      function base64ToBytes(str) {\n        return base64.toByteArray(base64clean(str));\n      }\n      function blitBuffer(src, dst, offset, length) {\n        let i;\n        for (i = 0; i < length; ++i) {\n          if (i + offset >= dst.length || i >= src.length)\n            break;\n          dst[i + offset] = src[i];\n        }\n        return i;\n      }\n      function isInstance(obj, type) {\n        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n      }\n      function numberIsNaN(obj) {\n        return obj !== obj;\n      }\n      var hexSliceLookupTable = function() {\n        const alphabet = \"0123456789abcdef\";\n        const table = new Array(256);\n        for (let i = 0; i < 16; ++i) {\n          const i16 = i * 16;\n          for (let j = 0; j < 16; ++j) {\n            table[i16 + j] = alphabet[i] + alphabet[j];\n          }\n        }\n        return table;\n      }();\n      function defineBigIntMethod(fn) {\n        return typeof BigInt === \"undefined\" ? BufferBigIntNotDefined : fn;\n      }\n      function BufferBigIntNotDefined() {\n        throw new Error(\"BigInt not supported\");\n      }\n    }\n  });\n\n  // node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\n  var require_browser = __commonJS({\n    \"node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\"(exports, module) {\n      init_dist();\n      var process = module.exports = {};\n      var cachedSetTimeout;\n      var cachedClearTimeout;\n      function defaultSetTimout() {\n        throw new Error(\"setTimeout has not been defined\");\n      }\n      function defaultClearTimeout() {\n        throw new Error(\"clearTimeout has not been defined\");\n      }\n      (function() {\n        try {\n          if (typeof setTimeout === \"function\") {\n            cachedSetTimeout = setTimeout;\n          } else {\n            cachedSetTimeout = defaultSetTimout;\n          }\n        } catch (e) {\n          cachedSetTimeout = defaultSetTimout;\n        }\n        try {\n          if (typeof clearTimeout === \"function\") {\n            cachedClearTimeout = clearTimeout;\n          } else {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        } catch (e) {\n          cachedClearTimeout = defaultClearTimeout;\n        }\n      })();\n      function runTimeout(fun) {\n        if (cachedSetTimeout === setTimeout) {\n          return setTimeout(fun, 0);\n        }\n        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n          cachedSetTimeout = setTimeout;\n          return setTimeout(fun, 0);\n        }\n        try {\n          return cachedSetTimeout(fun, 0);\n        } catch (e) {\n          try {\n            return cachedSetTimeout.call(null, fun, 0);\n          } catch (e2) {\n            return cachedSetTimeout.call(this, fun, 0);\n          }\n        }\n      }\n      function runClearTimeout(marker) {\n        if (cachedClearTimeout === clearTimeout) {\n          return clearTimeout(marker);\n        }\n        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n          cachedClearTimeout = clearTimeout;\n          return clearTimeout(marker);\n        }\n        try {\n          return cachedClearTimeout(marker);\n        } catch (e) {\n          try {\n            return cachedClearTimeout.call(null, marker);\n          } catch (e2) {\n            return cachedClearTimeout.call(this, marker);\n          }\n        }\n      }\n      var queue = [];\n      var draining = false;\n      var currentQueue;\n      var queueIndex = -1;\n      function cleanUpNextTick() {\n        if (!draining || !currentQueue) {\n          return;\n        }\n        draining = false;\n        if (currentQueue.length) {\n          queue = currentQueue.concat(queue);\n        } else {\n          queueIndex = -1;\n        }\n        if (queue.length) {\n          drainQueue();\n        }\n      }\n      function drainQueue() {\n        if (draining) {\n          return;\n        }\n        var timeout = runTimeout(cleanUpNextTick);\n        draining = true;\n        var len = queue.length;\n        while (len) {\n          currentQueue = queue;\n          queue = [];\n          while (++queueIndex < len) {\n            if (currentQueue) {\n              currentQueue[queueIndex].run();\n            }\n          }\n          queueIndex = -1;\n          len = queue.length;\n        }\n        currentQueue = null;\n        draining = false;\n        runClearTimeout(timeout);\n      }\n      process.nextTick = function(fun) {\n        var args = new Array(arguments.length - 1);\n        if (arguments.length > 1) {\n          for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n          }\n        }\n        queue.push(new Item(fun, args));\n        if (queue.length === 1 && !draining) {\n          runTimeout(drainQueue);\n        }\n      };\n      function Item(fun, array) {\n        this.fun = fun;\n        this.array = array;\n      }\n      Item.prototype.run = function() {\n        this.fun.apply(null, this.array);\n      };\n      process.title = \"browser\";\n      process.browser = true;\n      process.env = {};\n      process.argv = [];\n      process.version = \"\";\n      process.versions = {};\n      function noop() {\n      }\n      process.on = noop;\n      process.addListener = noop;\n      process.once = noop;\n      process.off = noop;\n      process.removeListener = noop;\n      process.removeAllListeners = noop;\n      process.emit = noop;\n      process.prependListener = noop;\n      process.prependOnceListener = noop;\n      process.listeners = function(name) {\n        return [];\n      };\n      process.binding = function(name) {\n        throw new Error(\"process.binding is not supported\");\n      };\n      process.cwd = function() {\n        return \"/\";\n      };\n      process.chdir = function(dir) {\n        throw new Error(\"process.chdir is not supported\");\n      };\n      process.umask = function() {\n        return 0;\n      };\n    }\n  });\n\n  // shims/dist/index.js\n  var import_buffer_polyfill, import_process, o;\n  var init_dist = __esm({\n    \"shims/dist/index.js\"() {\n      \"use strict\";\n      import_buffer_polyfill = __toESM(require_buffer(), 1);\n      import_process = __toESM(require_browser(), 1);\n      o = globalThis || void 0 || self;\n    }\n  });\n\n  // shims/banner/index.cjs\n  var require_banner = __commonJS({\n    \"shims/banner/index.cjs\"() {\n      init_dist();\n      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;\n      globalThis.global = globalThis.global || o;\n      globalThis.process = globalThis.process || import_process.default;\n    }\n  });\n  require_banner();\n})();\n/*! Bundled license information:\n\nieee754/index.js:\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n\nbuffer/index.js:\n  (*!\n   * The buffer module from node.js, for the browser.\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   *)\n*/\n\nimport {\n  __commonJS,\n  __toESM,\n  require_buffer_polyfill,\n  require_dist\n} from \"./chunk-VMXIV7NB.js\";\n\n// node_modules/inherits/inherits_browser.js\nvar require_inherits_browser = __commonJS({\n  \"node_modules/inherits/inherits_browser.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    if (typeof Object.create === \"function\") {\n      module.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n          ctor.prototype = Object.create(superCtor.prototype, {\n            constructor: {\n              value: ctor,\n              enumerable: false,\n              writable: true,\n              configurable: true\n            }\n          });\n        }\n      };\n    } else {\n      module.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n          var TempCtor = function() {\n          };\n          TempCtor.prototype = superCtor.prototype;\n          ctor.prototype = new TempCtor();\n          ctor.prototype.constructor = ctor;\n        }\n      };\n    }\n  }\n});\n\n// node_modules/has-symbols/shams.js\nvar require_shams = __commonJS({\n  \"node_modules/has-symbols/shams.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = function hasSymbols() {\n      if (typeof Symbol !== \"function\" || typeof Object.getOwnPropertySymbols !== \"function\") {\n        return false;\n      }\n      if (typeof Symbol.iterator === \"symbol\") {\n        return true;\n      }\n      var obj = {};\n      var sym = Symbol(\"test\");\n      var symObj = Object(sym);\n      if (typeof sym === \"string\") {\n        return false;\n      }\n      if (Object.prototype.toString.call(sym) !== \"[object Symbol]\") {\n        return false;\n      }\n      if (Object.prototype.toString.call(symObj) !== \"[object Symbol]\") {\n        return false;\n      }\n      var symVal = 42;\n      obj[sym] = symVal;\n      for (sym in obj) {\n        return false;\n      }\n      if (typeof Object.keys === \"function\" && Object.keys(obj).length !== 0) {\n        return false;\n      }\n      if (typeof Object.getOwnPropertyNames === \"function\" && Object.getOwnPropertyNames(obj).length !== 0) {\n        return false;\n      }\n      var syms = Object.getOwnPropertySymbols(obj);\n      if (syms.length !== 1 || syms[0] !== sym) {\n        return false;\n      }\n      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {\n        return false;\n      }\n      if (typeof Object.getOwnPropertyDescriptor === \"function\") {\n        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n        if (descriptor.value !== symVal || descriptor.enumerable !== true) {\n          return false;\n        }\n      }\n      return true;\n    };\n  }\n});\n\n// node_modules/has-tostringtag/shams.js\nvar require_shams2 = __commonJS({\n  \"node_modules/has-tostringtag/shams.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var hasSymbols = require_shams();\n    module.exports = function hasToStringTagShams() {\n      return hasSymbols() && !!Symbol.toStringTag;\n    };\n  }\n});\n\n// node_modules/has-symbols/index.js\nvar require_has_symbols = __commonJS({\n  \"node_modules/has-symbols/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var origSymbol = typeof Symbol !== \"undefined\" && Symbol;\n    var hasSymbolSham = require_shams();\n    module.exports = function hasNativeSymbols() {\n      if (typeof origSymbol !== \"function\") {\n        return false;\n      }\n      if (typeof Symbol !== \"function\") {\n        return false;\n      }\n      if (typeof origSymbol(\"foo\") !== \"symbol\") {\n        return false;\n      }\n      if (typeof Symbol(\"bar\") !== \"symbol\") {\n        return false;\n      }\n      return hasSymbolSham();\n    };\n  }\n});\n\n// node_modules/has-proto/index.js\nvar require_has_proto = __commonJS({\n  \"node_modules/has-proto/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var test = {\n      foo: {}\n    };\n    var $Object = Object;\n    module.exports = function hasProto() {\n      return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);\n    };\n  }\n});\n\n// node_modules/function-bind/implementation.js\nvar require_implementation = __commonJS({\n  \"node_modules/function-bind/implementation.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var ERROR_MESSAGE = \"Function.prototype.bind called on incompatible \";\n    var toStr = Object.prototype.toString;\n    var max = Math.max;\n    var funcType = \"[object Function]\";\n    var concatty = function concatty2(a, b) {\n      var arr = [];\n      for (var i = 0; i < a.length; i += 1) {\n        arr[i] = a[i];\n      }\n      for (var j = 0; j < b.length; j += 1) {\n        arr[j + a.length] = b[j];\n      }\n      return arr;\n    };\n    var slicy = function slicy2(arrLike, offset) {\n      var arr = [];\n      for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {\n        arr[j] = arrLike[i];\n      }\n      return arr;\n    };\n    var joiny = function(arr, joiner) {\n      var str = \"\";\n      for (var i = 0; i < arr.length; i += 1) {\n        str += arr[i];\n        if (i + 1 < arr.length) {\n          str += joiner;\n        }\n      }\n      return str;\n    };\n    module.exports = function bind(that) {\n      var target = this;\n      if (typeof target !== \"function\" || toStr.apply(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n      }\n      var args = slicy(arguments, 1);\n      var bound;\n      var binder = function() {\n        if (this instanceof bound) {\n          var result = target.apply(\n            this,\n            concatty(args, arguments)\n          );\n          if (Object(result) === result) {\n            return result;\n          }\n          return this;\n        }\n        return target.apply(\n          that,\n          concatty(args, arguments)\n        );\n      };\n      var boundLength = max(0, target.length - args.length);\n      var boundArgs = [];\n      for (var i = 0; i < boundLength; i++) {\n        boundArgs[i] = \"$\" + i;\n      }\n      bound = Function(\"binder\", \"return function (\" + joiny(boundArgs, \",\") + \"){ return binder.apply(this,arguments); }\")(binder);\n      if (target.prototype) {\n        var Empty = function Empty2() {\n        };\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n      }\n      return bound;\n    };\n  }\n});\n\n// node_modules/function-bind/index.js\nvar require_function_bind = __commonJS({\n  \"node_modules/function-bind/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var implementation = require_implementation();\n    module.exports = Function.prototype.bind || implementation;\n  }\n});\n\n// node_modules/hasown/index.js\nvar require_hasown = __commonJS({\n  \"node_modules/hasown/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var call = Function.prototype.call;\n    var $hasOwn = Object.prototype.hasOwnProperty;\n    var bind = require_function_bind();\n    module.exports = bind.call(call, $hasOwn);\n  }\n});\n\n// node_modules/get-intrinsic/index.js\nvar require_get_intrinsic = __commonJS({\n  \"node_modules/get-intrinsic/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var undefined2;\n    var $SyntaxError = SyntaxError;\n    var $Function = Function;\n    var $TypeError = TypeError;\n    var getEvalledConstructor = function(expressionSyntax) {\n      try {\n        return $Function('\"use strict\"; return (' + expressionSyntax + \").constructor;\")();\n      } catch (e) {\n      }\n    };\n    var $gOPD = Object.getOwnPropertyDescriptor;\n    if ($gOPD) {\n      try {\n        $gOPD({}, \"\");\n      } catch (e) {\n        $gOPD = null;\n      }\n    }\n    var throwTypeError = function() {\n      throw new $TypeError();\n    };\n    var ThrowTypeError = $gOPD ? function() {\n      try {\n        arguments.callee;\n        return throwTypeError;\n      } catch (calleeThrows) {\n        try {\n          return $gOPD(arguments, \"callee\").get;\n        } catch (gOPDthrows) {\n          return throwTypeError;\n        }\n      }\n    }() : throwTypeError;\n    var hasSymbols = require_has_symbols()();\n    var hasProto = require_has_proto()();\n    var getProto = Object.getPrototypeOf || (hasProto ? function(x) {\n      return x.__proto__;\n    } : null);\n    var needsEval = {};\n    var TypedArray = typeof Uint8Array === \"undefined\" || !getProto ? undefined2 : getProto(Uint8Array);\n    var INTRINSICS = {\n      \"%AggregateError%\": typeof AggregateError === \"undefined\" ? undefined2 : AggregateError,\n      \"%Array%\": Array,\n      \"%ArrayBuffer%\": typeof ArrayBuffer === \"undefined\" ? undefined2 : ArrayBuffer,\n      \"%ArrayIteratorPrototype%\": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,\n      \"%AsyncFromSyncIteratorPrototype%\": undefined2,\n      \"%AsyncFunction%\": needsEval,\n      \"%AsyncGenerator%\": needsEval,\n      \"%AsyncGeneratorFunction%\": needsEval,\n      \"%AsyncIteratorPrototype%\": needsEval,\n      \"%Atomics%\": typeof Atomics === \"undefined\" ? undefined2 : Atomics,\n      \"%BigInt%\": typeof BigInt === \"undefined\" ? undefined2 : BigInt,\n      \"%BigInt64Array%\": typeof BigInt64Array === \"undefined\" ? undefined2 : BigInt64Array,\n      \"%BigUint64Array%\": typeof BigUint64Array === \"undefined\" ? undefined2 : BigUint64Array,\n      \"%Boolean%\": Boolean,\n      \"%DataView%\": typeof DataView === \"undefined\" ? undefined2 : DataView,\n      \"%Date%\": Date,\n      \"%decodeURI%\": decodeURI,\n      \"%decodeURIComponent%\": decodeURIComponent,\n      \"%encodeURI%\": encodeURI,\n      \"%encodeURIComponent%\": encodeURIComponent,\n      \"%Error%\": Error,\n      \"%eval%\": eval,\n      // eslint-disable-line no-eval\n      \"%EvalError%\": EvalError,\n      \"%Float32Array%\": typeof Float32Array === \"undefined\" ? undefined2 : Float32Array,\n      \"%Float64Array%\": typeof Float64Array === \"undefined\" ? undefined2 : Float64Array,\n      \"%FinalizationRegistry%\": typeof FinalizationRegistry === \"undefined\" ? undefined2 : FinalizationRegistry,\n      \"%Function%\": $Function,\n      \"%GeneratorFunction%\": needsEval,\n      \"%Int8Array%\": typeof Int8Array === \"undefined\" ? undefined2 : Int8Array,\n      \"%Int16Array%\": typeof Int16Array === \"undefined\" ? undefined2 : Int16Array,\n      \"%Int32Array%\": typeof Int32Array === \"undefined\" ? undefined2 : Int32Array,\n      \"%isFinite%\": isFinite,\n      \"%isNaN%\": isNaN,\n      \"%IteratorPrototype%\": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,\n      \"%JSON%\": typeof JSON === \"object\" ? JSON : undefined2,\n      \"%Map%\": typeof Map === \"undefined\" ? undefined2 : Map,\n      \"%MapIteratorPrototype%\": typeof Map === \"undefined\" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),\n      \"%Math%\": Math,\n      \"%Number%\": Number,\n      \"%Object%\": Object,\n      \"%parseFloat%\": parseFloat,\n      \"%parseInt%\": parseInt,\n      \"%Promise%\": typeof Promise === \"undefined\" ? undefined2 : Promise,\n      \"%Proxy%\": typeof Proxy === \"undefined\" ? undefined2 : Proxy,\n      \"%RangeError%\": RangeError,\n      \"%ReferenceError%\": ReferenceError,\n      \"%Reflect%\": typeof Reflect === \"undefined\" ? undefined2 : Reflect,\n      \"%RegExp%\": RegExp,\n      \"%Set%\": typeof Set === \"undefined\" ? undefined2 : Set,\n      \"%SetIteratorPrototype%\": typeof Set === \"undefined\" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),\n      \"%SharedArrayBuffer%\": typeof SharedArrayBuffer === \"undefined\" ? undefined2 : SharedArrayBuffer,\n      \"%String%\": String,\n      \"%StringIteratorPrototype%\": hasSymbols && getProto ? getProto(\"\"[Symbol.iterator]()) : undefined2,\n      \"%Symbol%\": hasSymbols ? Symbol : undefined2,\n      \"%SyntaxError%\": $SyntaxError,\n      \"%ThrowTypeError%\": ThrowTypeError,\n      \"%TypedArray%\": TypedArray,\n      \"%TypeError%\": $TypeError,\n      \"%Uint8Array%\": typeof Uint8Array === \"undefined\" ? undefined2 : Uint8Array,\n      \"%Uint8ClampedArray%\": typeof Uint8ClampedArray === \"undefined\" ? undefined2 : Uint8ClampedArray,\n      \"%Uint16Array%\": typeof Uint16Array === \"undefined\" ? undefined2 : Uint16Array,\n      \"%Uint32Array%\": typeof Uint32Array === \"undefined\" ? undefined2 : Uint32Array,\n      \"%URIError%\": URIError,\n      \"%WeakMap%\": typeof WeakMap === \"undefined\" ? undefined2 : WeakMap,\n      \"%WeakRef%\": typeof WeakRef === \"undefined\" ? undefined2 : WeakRef,\n      \"%WeakSet%\": typeof WeakSet === \"undefined\" ? undefined2 : WeakSet\n    };\n    if (getProto) {\n      try {\n        null.error;\n      } catch (e) {\n        errorProto = getProto(getProto(e));\n        INTRINSICS[\"%Error.prototype%\"] = errorProto;\n      }\n    }\n    var errorProto;\n    var doEval = function doEval2(name) {\n      var value;\n      if (name === \"%AsyncFunction%\") {\n        value = getEvalledConstructor(\"async function () {}\");\n      } else if (name === \"%GeneratorFunction%\") {\n        value = getEvalledConstructor(\"function* () {}\");\n      } else if (name === \"%AsyncGeneratorFunction%\") {\n        value = getEvalledConstructor(\"async function* () {}\");\n      } else if (name === \"%AsyncGenerator%\") {\n        var fn = doEval2(\"%AsyncGeneratorFunction%\");\n        if (fn) {\n          value = fn.prototype;\n        }\n      } else if (name === \"%AsyncIteratorPrototype%\") {\n        var gen = doEval2(\"%AsyncGenerator%\");\n        if (gen && getProto) {\n          value = getProto(gen.prototype);\n        }\n      }\n      INTRINSICS[name] = value;\n      return value;\n    };\n    var LEGACY_ALIASES = {\n      \"%ArrayBufferPrototype%\": [\"ArrayBuffer\", \"prototype\"],\n      \"%ArrayPrototype%\": [\"Array\", \"prototype\"],\n      \"%ArrayProto_entries%\": [\"Array\", \"prototype\", \"entries\"],\n      \"%ArrayProto_forEach%\": [\"Array\", \"prototype\", \"forEach\"],\n      \"%ArrayProto_keys%\": [\"Array\", \"prototype\", \"keys\"],\n      \"%ArrayProto_values%\": [\"Array\", \"prototype\", \"values\"],\n      \"%AsyncFunctionPrototype%\": [\"AsyncFunction\", \"prototype\"],\n      \"%AsyncGenerator%\": [\"AsyncGeneratorFunction\", \"prototype\"],\n      \"%AsyncGeneratorPrototype%\": [\"AsyncGeneratorFunction\", \"prototype\", \"prototype\"],\n      \"%BooleanPrototype%\": [\"Boolean\", \"prototype\"],\n      \"%DataViewPrototype%\": [\"DataView\", \"prototype\"],\n      \"%DatePrototype%\": [\"Date\", \"prototype\"],\n      \"%ErrorPrototype%\": [\"Error\", \"prototype\"],\n      \"%EvalErrorPrototype%\": [\"EvalError\", \"prototype\"],\n      \"%Float32ArrayPrototype%\": [\"Float32Array\", \"prototype\"],\n      \"%Float64ArrayPrototype%\": [\"Float64Array\", \"prototype\"],\n      \"%FunctionPrototype%\": [\"Function\", \"prototype\"],\n      \"%Generator%\": [\"GeneratorFunction\", \"prototype\"],\n      \"%GeneratorPrototype%\": [\"GeneratorFunction\", \"prototype\", \"prototype\"],\n      \"%Int8ArrayPrototype%\": [\"Int8Array\", \"prototype\"],\n      \"%Int16ArrayPrototype%\": [\"Int16Array\", \"prototype\"],\n      \"%Int32ArrayPrototype%\": [\"Int32Array\", \"prototype\"],\n      \"%JSONParse%\": [\"JSON\", \"parse\"],\n      \"%JSONStringify%\": [\"JSON\", \"stringify\"],\n      \"%MapPrototype%\": [\"Map\", \"prototype\"],\n      \"%NumberPrototype%\": [\"Number\", \"prototype\"],\n      \"%ObjectPrototype%\": [\"Object\", \"prototype\"],\n      \"%ObjProto_toString%\": [\"Object\", \"prototype\", \"toString\"],\n      \"%ObjProto_valueOf%\": [\"Object\", \"prototype\", \"valueOf\"],\n      \"%PromisePrototype%\": [\"Promise\", \"prototype\"],\n      \"%PromiseProto_then%\": [\"Promise\", \"prototype\", \"then\"],\n      \"%Promise_all%\": [\"Promise\", \"all\"],\n      \"%Promise_reject%\": [\"Promise\", \"reject\"],\n      \"%Promise_resolve%\": [\"Promise\", \"resolve\"],\n      \"%RangeErrorPrototype%\": [\"RangeError\", \"prototype\"],\n      \"%ReferenceErrorPrototype%\": [\"ReferenceError\", \"prototype\"],\n      \"%RegExpPrototype%\": [\"RegExp\", \"prototype\"],\n      \"%SetPrototype%\": [\"Set\", \"prototype\"],\n      \"%SharedArrayBufferPrototype%\": [\"SharedArrayBuffer\", \"prototype\"],\n      \"%StringPrototype%\": [\"String\", \"prototype\"],\n      \"%SymbolPrototype%\": [\"Symbol\", \"prototype\"],\n      \"%SyntaxErrorPrototype%\": [\"SyntaxError\", \"prototype\"],\n      \"%TypedArrayPrototype%\": [\"TypedArray\", \"prototype\"],\n      \"%TypeErrorPrototype%\": [\"TypeError\", \"prototype\"],\n      \"%Uint8ArrayPrototype%\": [\"Uint8Array\", \"prototype\"],\n      \"%Uint8ClampedArrayPrototype%\": [\"Uint8ClampedArray\", \"prototype\"],\n      \"%Uint16ArrayPrototype%\": [\"Uint16Array\", \"prototype\"],\n      \"%Uint32ArrayPrototype%\": [\"Uint32Array\", \"prototype\"],\n      \"%URIErrorPrototype%\": [\"URIError\", \"prototype\"],\n      \"%WeakMapPrototype%\": [\"WeakMap\", \"prototype\"],\n      \"%WeakSetPrototype%\": [\"WeakSet\", \"prototype\"]\n    };\n    var bind = require_function_bind();\n    var hasOwn = require_hasown();\n    var $concat = bind.call(Function.call, Array.prototype.concat);\n    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);\n    var $replace = bind.call(Function.call, String.prototype.replace);\n    var $strSlice = bind.call(Function.call, String.prototype.slice);\n    var $exec = bind.call(Function.call, RegExp.prototype.exec);\n    var rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\n    var reEscapeChar = /\\\\(\\\\)?/g;\n    var stringToPath = function stringToPath2(string) {\n      var first = $strSlice(string, 0, 1);\n      var last = $strSlice(string, -1);\n      if (first === \"%\" && last !== \"%\") {\n        throw new $SyntaxError(\"invalid intrinsic syntax, expected closing `%`\");\n      } else if (last === \"%\" && first !== \"%\") {\n        throw new $SyntaxError(\"invalid intrinsic syntax, expected opening `%`\");\n      }\n      var result = [];\n      $replace(string, rePropName, function(match, number, quote, subString) {\n        result[result.length] = quote ? $replace(subString, reEscapeChar, \"$1\") : number || match;\n      });\n      return result;\n    };\n    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {\n      var intrinsicName = name;\n      var alias;\n      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n        alias = LEGACY_ALIASES[intrinsicName];\n        intrinsicName = \"%\" + alias[0] + \"%\";\n      }\n      if (hasOwn(INTRINSICS, intrinsicName)) {\n        var value = INTRINSICS[intrinsicName];\n        if (value === needsEval) {\n          value = doEval(intrinsicName);\n        }\n        if (typeof value === \"undefined\" && !allowMissing) {\n          throw new $TypeError(\"intrinsic \" + name + \" exists, but is not available. Please file an issue!\");\n        }\n        return {\n          alias,\n          name: intrinsicName,\n          value\n        };\n      }\n      throw new $SyntaxError(\"intrinsic \" + name + \" does not exist!\");\n    };\n    module.exports = function GetIntrinsic(name, allowMissing) {\n      if (typeof name !== \"string\" || name.length === 0) {\n        throw new $TypeError(\"intrinsic name must be a non-empty string\");\n      }\n      if (arguments.length > 1 && typeof allowMissing !== \"boolean\") {\n        throw new $TypeError('\"allowMissing\" argument must be a boolean');\n      }\n      if ($exec(/^%?[^%]*%?$/, name) === null) {\n        throw new $SyntaxError(\"`%` may not be present anywhere but at the beginning and end of the intrinsic name\");\n      }\n      var parts = stringToPath(name);\n      var intrinsicBaseName = parts.length > 0 ? parts[0] : \"\";\n      var intrinsic = getBaseIntrinsic(\"%\" + intrinsicBaseName + \"%\", allowMissing);\n      var intrinsicRealName = intrinsic.name;\n      var value = intrinsic.value;\n      var skipFurtherCaching = false;\n      var alias = intrinsic.alias;\n      if (alias) {\n        intrinsicBaseName = alias[0];\n        $spliceApply(parts, $concat([0, 1], alias));\n      }\n      for (var i = 1, isOwn = true; i < parts.length; i += 1) {\n        var part = parts[i];\n        var first = $strSlice(part, 0, 1);\n        var last = $strSlice(part, -1);\n        if ((first === '\"' || first === \"'\" || first === \"`\" || (last === '\"' || last === \"'\" || last === \"`\")) && first !== last) {\n          throw new $SyntaxError(\"property names with quotes must have matching quotes\");\n        }\n        if (part === \"constructor\" || !isOwn) {\n          skipFurtherCaching = true;\n        }\n        intrinsicBaseName += \".\" + part;\n        intrinsicRealName = \"%\" + intrinsicBaseName + \"%\";\n        if (hasOwn(INTRINSICS, intrinsicRealName)) {\n          value = INTRINSICS[intrinsicRealName];\n        } else if (value != null) {\n          if (!(part in value)) {\n            if (!allowMissing) {\n              throw new $TypeError(\"base intrinsic for \" + name + \" exists, but the property is not available.\");\n            }\n            return void 0;\n          }\n          if ($gOPD && i + 1 >= parts.length) {\n            var desc = $gOPD(value, part);\n            isOwn = !!desc;\n            if (isOwn && \"get\" in desc && !(\"originalValue\" in desc.get)) {\n              value = desc.get;\n            } else {\n              value = value[part];\n            }\n          } else {\n            isOwn = hasOwn(value, part);\n            value = value[part];\n          }\n          if (isOwn && !skipFurtherCaching) {\n            INTRINSICS[intrinsicRealName] = value;\n          }\n        }\n      }\n      return value;\n    };\n  }\n});\n\n// node_modules/has-property-descriptors/index.js\nvar require_has_property_descriptors = __commonJS({\n  \"node_modules/has-property-descriptors/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var GetIntrinsic = require_get_intrinsic();\n    var $defineProperty = GetIntrinsic(\"%Object.defineProperty%\", true);\n    var hasPropertyDescriptors = function hasPropertyDescriptors2() {\n      if ($defineProperty) {\n        try {\n          $defineProperty({}, \"a\", { value: 1 });\n          return true;\n        } catch (e) {\n          return false;\n        }\n      }\n      return false;\n    };\n    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {\n      if (!hasPropertyDescriptors()) {\n        return null;\n      }\n      try {\n        return $defineProperty([], \"length\", { value: 1 }).length !== 1;\n      } catch (e) {\n        return true;\n      }\n    };\n    module.exports = hasPropertyDescriptors;\n  }\n});\n\n// node_modules/gopd/index.js\nvar require_gopd = __commonJS({\n  \"node_modules/gopd/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var GetIntrinsic = require_get_intrinsic();\n    var $gOPD = GetIntrinsic(\"%Object.getOwnPropertyDescriptor%\", true);\n    if ($gOPD) {\n      try {\n        $gOPD([], \"length\");\n      } catch (e) {\n        $gOPD = null;\n      }\n    }\n    module.exports = $gOPD;\n  }\n});\n\n// node_modules/define-data-property/index.js\nvar require_define_data_property = __commonJS({\n  \"node_modules/define-data-property/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var hasPropertyDescriptors = require_has_property_descriptors()();\n    var GetIntrinsic = require_get_intrinsic();\n    var $defineProperty = hasPropertyDescriptors && GetIntrinsic(\"%Object.defineProperty%\", true);\n    if ($defineProperty) {\n      try {\n        $defineProperty({}, \"a\", { value: 1 });\n      } catch (e) {\n        $defineProperty = false;\n      }\n    }\n    var $SyntaxError = GetIntrinsic(\"%SyntaxError%\");\n    var $TypeError = GetIntrinsic(\"%TypeError%\");\n    var gopd = require_gopd();\n    module.exports = function defineDataProperty(obj, property, value) {\n      if (!obj || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        throw new $TypeError(\"`obj` must be an object or a function`\");\n      }\n      if (typeof property !== \"string\" && typeof property !== \"symbol\") {\n        throw new $TypeError(\"`property` must be a string or a symbol`\");\n      }\n      if (arguments.length > 3 && typeof arguments[3] !== \"boolean\" && arguments[3] !== null) {\n        throw new $TypeError(\"`nonEnumerable`, if provided, must be a boolean or null\");\n      }\n      if (arguments.length > 4 && typeof arguments[4] !== \"boolean\" && arguments[4] !== null) {\n        throw new $TypeError(\"`nonWritable`, if provided, must be a boolean or null\");\n      }\n      if (arguments.length > 5 && typeof arguments[5] !== \"boolean\" && arguments[5] !== null) {\n        throw new $TypeError(\"`nonConfigurable`, if provided, must be a boolean or null\");\n      }\n      if (arguments.length > 6 && typeof arguments[6] !== \"boolean\") {\n        throw new $TypeError(\"`loose`, if provided, must be a boolean\");\n      }\n      var nonEnumerable = arguments.length > 3 ? arguments[3] : null;\n      var nonWritable = arguments.length > 4 ? arguments[4] : null;\n      var nonConfigurable = arguments.length > 5 ? arguments[5] : null;\n      var loose = arguments.length > 6 ? arguments[6] : false;\n      var desc = !!gopd && gopd(obj, property);\n      if ($defineProperty) {\n        $defineProperty(obj, property, {\n          configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,\n          enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,\n          value,\n          writable: nonWritable === null && desc ? desc.writable : !nonWritable\n        });\n      } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {\n        obj[property] = value;\n      } else {\n        throw new $SyntaxError(\"This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.\");\n      }\n    };\n  }\n});\n\n// node_modules/set-function-length/index.js\nvar require_set_function_length = __commonJS({\n  \"node_modules/set-function-length/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var GetIntrinsic = require_get_intrinsic();\n    var define = require_define_data_property();\n    var hasDescriptors = require_has_property_descriptors()();\n    var gOPD = require_gopd();\n    var $TypeError = GetIntrinsic(\"%TypeError%\");\n    var $floor = GetIntrinsic(\"%Math.floor%\");\n    module.exports = function setFunctionLength(fn, length) {\n      if (typeof fn !== \"function\") {\n        throw new $TypeError(\"`fn` is not a function\");\n      }\n      if (typeof length !== \"number\" || length < 0 || length > 4294967295 || $floor(length) !== length) {\n        throw new $TypeError(\"`length` must be a positive 32-bit integer\");\n      }\n      var loose = arguments.length > 2 && !!arguments[2];\n      var functionLengthIsConfigurable = true;\n      var functionLengthIsWritable = true;\n      if (\"length\" in fn && gOPD) {\n        var desc = gOPD(fn, \"length\");\n        if (desc && !desc.configurable) {\n          functionLengthIsConfigurable = false;\n        }\n        if (desc && !desc.writable) {\n          functionLengthIsWritable = false;\n        }\n      }\n      if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {\n        if (hasDescriptors) {\n          define(fn, \"length\", length, true, true);\n        } else {\n          define(fn, \"length\", length);\n        }\n      }\n      return fn;\n    };\n  }\n});\n\n// node_modules/call-bind/index.js\nvar require_call_bind = __commonJS({\n  \"node_modules/call-bind/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var bind = require_function_bind();\n    var GetIntrinsic = require_get_intrinsic();\n    var setFunctionLength = require_set_function_length();\n    var $TypeError = GetIntrinsic(\"%TypeError%\");\n    var $apply = GetIntrinsic(\"%Function.prototype.apply%\");\n    var $call = GetIntrinsic(\"%Function.prototype.call%\");\n    var $reflectApply = GetIntrinsic(\"%Reflect.apply%\", true) || bind.call($call, $apply);\n    var $defineProperty = GetIntrinsic(\"%Object.defineProperty%\", true);\n    var $max = GetIntrinsic(\"%Math.max%\");\n    if ($defineProperty) {\n      try {\n        $defineProperty({}, \"a\", { value: 1 });\n      } catch (e) {\n        $defineProperty = null;\n      }\n    }\n    module.exports = function callBind(originalFunction) {\n      if (typeof originalFunction !== \"function\") {\n        throw new $TypeError(\"a function is required\");\n      }\n      var func = $reflectApply(bind, $call, arguments);\n      return setFunctionLength(\n        func,\n        1 + $max(0, originalFunction.length - (arguments.length - 1)),\n        true\n      );\n    };\n    var applyBind = function applyBind2() {\n      return $reflectApply(bind, $apply, arguments);\n    };\n    if ($defineProperty) {\n      $defineProperty(module.exports, \"apply\", { value: applyBind });\n    } else {\n      module.exports.apply = applyBind;\n    }\n  }\n});\n\n// node_modules/call-bind/callBound.js\nvar require_callBound = __commonJS({\n  \"node_modules/call-bind/callBound.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var GetIntrinsic = require_get_intrinsic();\n    var callBind = require_call_bind();\n    var $indexOf = callBind(GetIntrinsic(\"String.prototype.indexOf\"));\n    module.exports = function callBoundIntrinsic(name, allowMissing) {\n      var intrinsic = GetIntrinsic(name, !!allowMissing);\n      if (typeof intrinsic === \"function\" && $indexOf(name, \".prototype.\") > -1) {\n        return callBind(intrinsic);\n      }\n      return intrinsic;\n    };\n  }\n});\n\n// node_modules/is-arguments/index.js\nvar require_is_arguments = __commonJS({\n  \"node_modules/is-arguments/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var hasToStringTag = require_shams2()();\n    var callBound = require_callBound();\n    var $toString = callBound(\"Object.prototype.toString\");\n    var isStandardArguments = function isArguments(value) {\n      if (hasToStringTag && value && typeof value === \"object\" && Symbol.toStringTag in value) {\n        return false;\n      }\n      return $toString(value) === \"[object Arguments]\";\n    };\n    var isLegacyArguments = function isArguments(value) {\n      if (isStandardArguments(value)) {\n        return true;\n      }\n      return value !== null && typeof value === \"object\" && typeof value.length === \"number\" && value.length >= 0 && $toString(value) !== \"[object Array]\" && $toString(value.callee) === \"[object Function]\";\n    };\n    var supportsStandardArguments = function() {\n      return isStandardArguments(arguments);\n    }();\n    isStandardArguments.isLegacyArguments = isLegacyArguments;\n    module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;\n  }\n});\n\n// node_modules/is-generator-function/index.js\nvar require_is_generator_function = __commonJS({\n  \"node_modules/is-generator-function/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var toStr = Object.prototype.toString;\n    var fnToStr = Function.prototype.toString;\n    var isFnRegex = /^\\s*(?:function)?\\*/;\n    var hasToStringTag = require_shams2()();\n    var getProto = Object.getPrototypeOf;\n    var getGeneratorFunc = function() {\n      if (!hasToStringTag) {\n        return false;\n      }\n      try {\n        return Function(\"return function*() {}\")();\n      } catch (e) {\n      }\n    };\n    var GeneratorFunction;\n    module.exports = function isGeneratorFunction(fn) {\n      if (typeof fn !== \"function\") {\n        return false;\n      }\n      if (isFnRegex.test(fnToStr.call(fn))) {\n        return true;\n      }\n      if (!hasToStringTag) {\n        var str = toStr.call(fn);\n        return str === \"[object GeneratorFunction]\";\n      }\n      if (!getProto) {\n        return false;\n      }\n      if (typeof GeneratorFunction === \"undefined\") {\n        var generatorFunc = getGeneratorFunc();\n        GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;\n      }\n      return getProto(fn) === GeneratorFunction;\n    };\n  }\n});\n\n// node_modules/is-callable/index.js\nvar require_is_callable = __commonJS({\n  \"node_modules/is-callable/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var fnToStr = Function.prototype.toString;\n    var reflectApply = typeof Reflect === \"object\" && Reflect !== null && Reflect.apply;\n    var badArrayLike;\n    var isCallableMarker;\n    if (typeof reflectApply === \"function\" && typeof Object.defineProperty === \"function\") {\n      try {\n        badArrayLike = Object.defineProperty({}, \"length\", {\n          get: function() {\n            throw isCallableMarker;\n          }\n        });\n        isCallableMarker = {};\n        reflectApply(function() {\n          throw 42;\n        }, null, badArrayLike);\n      } catch (_) {\n        if (_ !== isCallableMarker) {\n          reflectApply = null;\n        }\n      }\n    } else {\n      reflectApply = null;\n    }\n    var constructorRegex = /^\\s*class\\b/;\n    var isES6ClassFn = function isES6ClassFunction(value) {\n      try {\n        var fnStr = fnToStr.call(value);\n        return constructorRegex.test(fnStr);\n      } catch (e) {\n        return false;\n      }\n    };\n    var tryFunctionObject = function tryFunctionToStr(value) {\n      try {\n        if (isES6ClassFn(value)) {\n          return false;\n        }\n        fnToStr.call(value);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    };\n    var toStr = Object.prototype.toString;\n    var objectClass = \"[object Object]\";\n    var fnClass = \"[object Function]\";\n    var genClass = \"[object GeneratorFunction]\";\n    var ddaClass = \"[object HTMLAllCollection]\";\n    var ddaClass2 = \"[object HTML document.all class]\";\n    var ddaClass3 = \"[object HTMLCollection]\";\n    var hasToStringTag = typeof Symbol === \"function\" && !!Symbol.toStringTag;\n    var isIE68 = !(0 in [,]);\n    var isDDA = function isDocumentDotAll() {\n      return false;\n    };\n    if (typeof document === \"object\") {\n      all = document.all;\n      if (toStr.call(all) === toStr.call(document.all)) {\n        isDDA = function isDocumentDotAll(value) {\n          if ((isIE68 || !value) && (typeof value === \"undefined\" || typeof value === \"object\")) {\n            try {\n              var str = toStr.call(value);\n              return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value(\"\") == null;\n            } catch (e) {\n            }\n          }\n          return false;\n        };\n      }\n    }\n    var all;\n    module.exports = reflectApply ? function isCallable(value) {\n      if (isDDA(value)) {\n        return true;\n      }\n      if (!value) {\n        return false;\n      }\n      if (typeof value !== \"function\" && typeof value !== \"object\") {\n        return false;\n      }\n      try {\n        reflectApply(value, null, badArrayLike);\n      } catch (e) {\n        if (e !== isCallableMarker) {\n          return false;\n        }\n      }\n      return !isES6ClassFn(value) && tryFunctionObject(value);\n    } : function isCallable(value) {\n      if (isDDA(value)) {\n        return true;\n      }\n      if (!value) {\n        return false;\n      }\n      if (typeof value !== \"function\" && typeof value !== \"object\") {\n        return false;\n      }\n      if (hasToStringTag) {\n        return tryFunctionObject(value);\n      }\n      if (isES6ClassFn(value)) {\n        return false;\n      }\n      var strClass = toStr.call(value);\n      if (strClass !== fnClass && strClass !== genClass && !/^\\[object HTML/.test(strClass)) {\n        return false;\n      }\n      return tryFunctionObject(value);\n    };\n  }\n});\n\n// node_modules/for-each/index.js\nvar require_for_each = __commonJS({\n  \"node_modules/for-each/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var isCallable = require_is_callable();\n    var toStr = Object.prototype.toString;\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var forEachArray = function forEachArray2(array, iterator, receiver) {\n      for (var i = 0, len = array.length; i < len; i++) {\n        if (hasOwnProperty.call(array, i)) {\n          if (receiver == null) {\n            iterator(array[i], i, array);\n          } else {\n            iterator.call(receiver, array[i], i, array);\n          }\n        }\n      }\n    };\n    var forEachString = function forEachString2(string, iterator, receiver) {\n      for (var i = 0, len = string.length; i < len; i++) {\n        if (receiver == null) {\n          iterator(string.charAt(i), i, string);\n        } else {\n          iterator.call(receiver, string.charAt(i), i, string);\n        }\n      }\n    };\n    var forEachObject = function forEachObject2(object, iterator, receiver) {\n      for (var k in object) {\n        if (hasOwnProperty.call(object, k)) {\n          if (receiver == null) {\n            iterator(object[k], k, object);\n          } else {\n            iterator.call(receiver, object[k], k, object);\n          }\n        }\n      }\n    };\n    var forEach = function forEach2(list, iterator, thisArg) {\n      if (!isCallable(iterator)) {\n        throw new TypeError(\"iterator must be a function\");\n      }\n      var receiver;\n      if (arguments.length >= 3) {\n        receiver = thisArg;\n      }\n      if (toStr.call(list) === \"[object Array]\") {\n        forEachArray(list, iterator, receiver);\n      } else if (typeof list === \"string\") {\n        forEachString(list, iterator, receiver);\n      } else {\n        forEachObject(list, iterator, receiver);\n      }\n    };\n    module.exports = forEach;\n  }\n});\n\n// node_modules/available-typed-arrays/index.js\nvar require_available_typed_arrays = __commonJS({\n  \"node_modules/available-typed-arrays/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var possibleNames = [\n      \"BigInt64Array\",\n      \"BigUint64Array\",\n      \"Float32Array\",\n      \"Float64Array\",\n      \"Int16Array\",\n      \"Int32Array\",\n      \"Int8Array\",\n      \"Uint16Array\",\n      \"Uint32Array\",\n      \"Uint8Array\",\n      \"Uint8ClampedArray\"\n    ];\n    var g = typeof globalThis === \"undefined\" ? global : globalThis;\n    module.exports = function availableTypedArrays() {\n      var out = [];\n      for (var i = 0; i < possibleNames.length; i++) {\n        if (typeof g[possibleNames[i]] === \"function\") {\n          out[out.length] = possibleNames[i];\n        }\n      }\n      return out;\n    };\n  }\n});\n\n// node_modules/which-typed-array/index.js\nvar require_which_typed_array = __commonJS({\n  \"node_modules/which-typed-array/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var forEach = require_for_each();\n    var availableTypedArrays = require_available_typed_arrays();\n    var callBind = require_call_bind();\n    var callBound = require_callBound();\n    var gOPD = require_gopd();\n    var $toString = callBound(\"Object.prototype.toString\");\n    var hasToStringTag = require_shams2()();\n    var g = typeof globalThis === \"undefined\" ? global : globalThis;\n    var typedArrays = availableTypedArrays();\n    var $slice = callBound(\"String.prototype.slice\");\n    var getPrototypeOf = Object.getPrototypeOf;\n    var $indexOf = callBound(\"Array.prototype.indexOf\", true) || function indexOf(array, value) {\n      for (var i = 0; i < array.length; i += 1) {\n        if (array[i] === value) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    var cache = { __proto__: null };\n    if (hasToStringTag && gOPD && getPrototypeOf) {\n      forEach(typedArrays, function(typedArray) {\n        var arr = new g[typedArray]();\n        if (Symbol.toStringTag in arr) {\n          var proto = getPrototypeOf(arr);\n          var descriptor = gOPD(proto, Symbol.toStringTag);\n          if (!descriptor) {\n            var superProto = getPrototypeOf(proto);\n            descriptor = gOPD(superProto, Symbol.toStringTag);\n          }\n          cache[\"$\" + typedArray] = callBind(descriptor.get);\n        }\n      });\n    } else {\n      forEach(typedArrays, function(typedArray) {\n        var arr = new g[typedArray]();\n        var fn = arr.slice || arr.set;\n        if (fn) {\n          cache[\"$\" + typedArray] = callBind(fn);\n        }\n      });\n    }\n    var tryTypedArrays = function tryAllTypedArrays(value) {\n      var found = false;\n      forEach(cache, function(getter, typedArray) {\n        if (!found) {\n          try {\n            if (\"$\" + getter(value) === typedArray) {\n              found = $slice(typedArray, 1);\n            }\n          } catch (e) {\n          }\n        }\n      });\n      return found;\n    };\n    var trySlices = function tryAllSlices(value) {\n      var found = false;\n      forEach(cache, function(getter, name) {\n        if (!found) {\n          try {\n            getter(value);\n            found = $slice(name, 1);\n          } catch (e) {\n          }\n        }\n      });\n      return found;\n    };\n    module.exports = function whichTypedArray(value) {\n      if (!value || typeof value !== \"object\") {\n        return false;\n      }\n      if (!hasToStringTag) {\n        var tag = $slice($toString(value), 8, -1);\n        if ($indexOf(typedArrays, tag) > -1) {\n          return tag;\n        }\n        if (tag !== \"Object\") {\n          return false;\n        }\n        return trySlices(value);\n      }\n      if (!gOPD) {\n        return null;\n      }\n      return tryTypedArrays(value);\n    };\n  }\n});\n\n// node_modules/is-typed-array/index.js\nvar require_is_typed_array = __commonJS({\n  \"node_modules/is-typed-array/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var whichTypedArray = require_which_typed_array();\n    module.exports = function isTypedArray(value) {\n      return !!whichTypedArray(value);\n    };\n  }\n});\n\n// node_modules/util/support/types.js\nvar require_types = __commonJS({\n  \"node_modules/util/support/types.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var isArgumentsObject = require_is_arguments();\n    var isGeneratorFunction = require_is_generator_function();\n    var whichTypedArray = require_which_typed_array();\n    var isTypedArray = require_is_typed_array();\n    function uncurryThis(f) {\n      return f.call.bind(f);\n    }\n    var BigIntSupported = typeof BigInt !== \"undefined\";\n    var SymbolSupported = typeof Symbol !== \"undefined\";\n    var ObjectToString = uncurryThis(Object.prototype.toString);\n    var numberValue = uncurryThis(Number.prototype.valueOf);\n    var stringValue = uncurryThis(String.prototype.valueOf);\n    var booleanValue = uncurryThis(Boolean.prototype.valueOf);\n    if (BigIntSupported) {\n      bigIntValue = uncurryThis(BigInt.prototype.valueOf);\n    }\n    var bigIntValue;\n    if (SymbolSupported) {\n      symbolValue = uncurryThis(Symbol.prototype.valueOf);\n    }\n    var symbolValue;\n    function checkBoxedPrimitive(value, prototypeValueOf) {\n      if (typeof value !== \"object\") {\n        return false;\n      }\n      try {\n        prototypeValueOf(value);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n    exports.isArgumentsObject = isArgumentsObject;\n    exports.isGeneratorFunction = isGeneratorFunction;\n    exports.isTypedArray = isTypedArray;\n    function isPromise(input) {\n      return typeof Promise !== \"undefined\" && input instanceof Promise || input !== null && typeof input === \"object\" && typeof input.then === \"function\" && typeof input.catch === \"function\";\n    }\n    exports.isPromise = isPromise;\n    function isArrayBufferView(value) {\n      if (typeof ArrayBuffer !== \"undefined\" && ArrayBuffer.isView) {\n        return ArrayBuffer.isView(value);\n      }\n      return isTypedArray(value) || isDataView(value);\n    }\n    exports.isArrayBufferView = isArrayBufferView;\n    function isUint8Array(value) {\n      return whichTypedArray(value) === \"Uint8Array\";\n    }\n    exports.isUint8Array = isUint8Array;\n    function isUint8ClampedArray(value) {\n      return whichTypedArray(value) === \"Uint8ClampedArray\";\n    }\n    exports.isUint8ClampedArray = isUint8ClampedArray;\n    function isUint16Array(value) {\n      return whichTypedArray(value) === \"Uint16Array\";\n    }\n    exports.isUint16Array = isUint16Array;\n    function isUint32Array(value) {\n      return whichTypedArray(value) === \"Uint32Array\";\n    }\n    exports.isUint32Array = isUint32Array;\n    function isInt8Array(value) {\n      return whichTypedArray(value) === \"Int8Array\";\n    }\n    exports.isInt8Array = isInt8Array;\n    function isInt16Array(value) {\n      return whichTypedArray(value) === \"Int16Array\";\n    }\n    exports.isInt16Array = isInt16Array;\n    function isInt32Array(value) {\n      return whichTypedArray(value) === \"Int32Array\";\n    }\n    exports.isInt32Array = isInt32Array;\n    function isFloat32Array(value) {\n      return whichTypedArray(value) === \"Float32Array\";\n    }\n    exports.isFloat32Array = isFloat32Array;\n    function isFloat64Array(value) {\n      return whichTypedArray(value) === \"Float64Array\";\n    }\n    exports.isFloat64Array = isFloat64Array;\n    function isBigInt64Array(value) {\n      return whichTypedArray(value) === \"BigInt64Array\";\n    }\n    exports.isBigInt64Array = isBigInt64Array;\n    function isBigUint64Array(value) {\n      return whichTypedArray(value) === \"BigUint64Array\";\n    }\n    exports.isBigUint64Array = isBigUint64Array;\n    function isMapToString(value) {\n      return ObjectToString(value) === \"[object Map]\";\n    }\n    isMapToString.working = typeof Map !== \"undefined\" && isMapToString(/* @__PURE__ */ new Map());\n    function isMap(value) {\n      if (typeof Map === \"undefined\") {\n        return false;\n      }\n      return isMapToString.working ? isMapToString(value) : value instanceof Map;\n    }\n    exports.isMap = isMap;\n    function isSetToString(value) {\n      return ObjectToString(value) === \"[object Set]\";\n    }\n    isSetToString.working = typeof Set !== \"undefined\" && isSetToString(/* @__PURE__ */ new Set());\n    function isSet(value) {\n      if (typeof Set === \"undefined\") {\n        return false;\n      }\n      return isSetToString.working ? isSetToString(value) : value instanceof Set;\n    }\n    exports.isSet = isSet;\n    function isWeakMapToString(value) {\n      return ObjectToString(value) === \"[object WeakMap]\";\n    }\n    isWeakMapToString.working = typeof WeakMap !== \"undefined\" && isWeakMapToString(/* @__PURE__ */ new WeakMap());\n    function isWeakMap(value) {\n      if (typeof WeakMap === \"undefined\") {\n        return false;\n      }\n      return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;\n    }\n    exports.isWeakMap = isWeakMap;\n    function isWeakSetToString(value) {\n      return ObjectToString(value) === \"[object WeakSet]\";\n    }\n    isWeakSetToString.working = typeof WeakSet !== \"undefined\" && isWeakSetToString(/* @__PURE__ */ new WeakSet());\n    function isWeakSet(value) {\n      return isWeakSetToString(value);\n    }\n    exports.isWeakSet = isWeakSet;\n    function isArrayBufferToString(value) {\n      return ObjectToString(value) === \"[object ArrayBuffer]\";\n    }\n    isArrayBufferToString.working = typeof ArrayBuffer !== \"undefined\" && isArrayBufferToString(new ArrayBuffer());\n    function isArrayBuffer(value) {\n      if (typeof ArrayBuffer === \"undefined\") {\n        return false;\n      }\n      return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;\n    }\n    exports.isArrayBuffer = isArrayBuffer;\n    function isDataViewToString(value) {\n      return ObjectToString(value) === \"[object DataView]\";\n    }\n    isDataViewToString.working = typeof ArrayBuffer !== \"undefined\" && typeof DataView !== \"undefined\" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));\n    function isDataView(value) {\n      if (typeof DataView === \"undefined\") {\n        return false;\n      }\n      return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;\n    }\n    exports.isDataView = isDataView;\n    var SharedArrayBufferCopy = typeof SharedArrayBuffer !== \"undefined\" ? SharedArrayBuffer : void 0;\n    function isSharedArrayBufferToString(value) {\n      return ObjectToString(value) === \"[object SharedArrayBuffer]\";\n    }\n    function isSharedArrayBuffer(value) {\n      if (typeof SharedArrayBufferCopy === \"undefined\") {\n        return false;\n      }\n      if (typeof isSharedArrayBufferToString.working === \"undefined\") {\n        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());\n      }\n      return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;\n    }\n    exports.isSharedArrayBuffer = isSharedArrayBuffer;\n    function isAsyncFunction(value) {\n      return ObjectToString(value) === \"[object AsyncFunction]\";\n    }\n    exports.isAsyncFunction = isAsyncFunction;\n    function isMapIterator(value) {\n      return ObjectToString(value) === \"[object Map Iterator]\";\n    }\n    exports.isMapIterator = isMapIterator;\n    function isSetIterator(value) {\n      return ObjectToString(value) === \"[object Set Iterator]\";\n    }\n    exports.isSetIterator = isSetIterator;\n    function isGeneratorObject(value) {\n      return ObjectToString(value) === \"[object Generator]\";\n    }\n    exports.isGeneratorObject = isGeneratorObject;\n    function isWebAssemblyCompiledModule(value) {\n      return ObjectToString(value) === \"[object WebAssembly.Module]\";\n    }\n    exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;\n    function isNumberObject(value) {\n      return checkBoxedPrimitive(value, numberValue);\n    }\n    exports.isNumberObject = isNumberObject;\n    function isStringObject(value) {\n      return checkBoxedPrimitive(value, stringValue);\n    }\n    exports.isStringObject = isStringObject;\n    function isBooleanObject(value) {\n      return checkBoxedPrimitive(value, booleanValue);\n    }\n    exports.isBooleanObject = isBooleanObject;\n    function isBigIntObject(value) {\n      return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);\n    }\n    exports.isBigIntObject = isBigIntObject;\n    function isSymbolObject(value) {\n      return SymbolSupported && checkBoxedPrimitive(value, symbolValue);\n    }\n    exports.isSymbolObject = isSymbolObject;\n    function isBoxedPrimitive(value) {\n      return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);\n    }\n    exports.isBoxedPrimitive = isBoxedPrimitive;\n    function isAnyArrayBuffer(value) {\n      return typeof Uint8Array !== \"undefined\" && (isArrayBuffer(value) || isSharedArrayBuffer(value));\n    }\n    exports.isAnyArrayBuffer = isAnyArrayBuffer;\n    [\"isProxy\", \"isExternal\", \"isModuleNamespaceObject\"].forEach(function(method) {\n      Object.defineProperty(exports, method, {\n        enumerable: false,\n        value: function() {\n          throw new Error(method + \" is not supported in userland\");\n        }\n      });\n    });\n  }\n});\n\n// node_modules/util/support/isBufferBrowser.js\nvar require_isBufferBrowser = __commonJS({\n  \"node_modules/util/support/isBufferBrowser.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = function isBuffer(arg) {\n      return arg && typeof arg === \"object\" && typeof arg.copy === \"function\" && typeof arg.fill === \"function\" && typeof arg.readUInt8 === \"function\";\n    };\n  }\n});\n\n// node_modules/util/util.js\nvar require_util = __commonJS({\n  \"node_modules/util/util.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {\n      var keys = Object.keys(obj);\n      var descriptors = {};\n      for (var i = 0; i < keys.length; i++) {\n        descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n      }\n      return descriptors;\n    };\n    var formatRegExp = /%[sdj%]/g;\n    exports.format = function(f) {\n      if (!isString(f)) {\n        var objects = [];\n        for (var i = 0; i < arguments.length; i++) {\n          objects.push(inspect(arguments[i]));\n        }\n        return objects.join(\" \");\n      }\n      var i = 1;\n      var args = arguments;\n      var len = args.length;\n      var str = String(f).replace(formatRegExp, function(x2) {\n        if (x2 === \"%%\")\n          return \"%\";\n        if (i >= len)\n          return x2;\n        switch (x2) {\n          case \"%s\":\n            return String(args[i++]);\n          case \"%d\":\n            return Number(args[i++]);\n          case \"%j\":\n            try {\n              return JSON.stringify(args[i++]);\n            } catch (_) {\n              return \"[Circular]\";\n            }\n          default:\n            return x2;\n        }\n      });\n      for (var x = args[i]; i < len; x = args[++i]) {\n        if (isNull(x) || !isObject(x)) {\n          str += \" \" + x;\n        } else {\n          str += \" \" + inspect(x);\n        }\n      }\n      return str;\n    };\n    exports.deprecate = function(fn, msg) {\n      if (typeof process !== \"undefined\" && process.noDeprecation === true) {\n        return fn;\n      }\n      if (typeof process === \"undefined\") {\n        return function() {\n          return exports.deprecate(fn, msg).apply(this, arguments);\n        };\n      }\n      var warned = false;\n      function deprecated() {\n        if (!warned) {\n          if (process.throwDeprecation) {\n            throw new Error(msg);\n          } else if (process.traceDeprecation) {\n            console.trace(msg);\n          } else {\n            console.error(msg);\n          }\n          warned = true;\n        }\n        return fn.apply(this, arguments);\n      }\n      return deprecated;\n    };\n    var debugs = {};\n    var debugEnvRegex = /^$/;\n    if (process.env.NODE_DEBUG) {\n      debugEnv = process.env.NODE_DEBUG;\n      debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, \"\\\\$&\").replace(/\\*/g, \".*\").replace(/,/g, \"$|^\").toUpperCase();\n      debugEnvRegex = new RegExp(\"^\" + debugEnv + \"$\", \"i\");\n    }\n    var debugEnv;\n    exports.debuglog = function(set) {\n      set = set.toUpperCase();\n      if (!debugs[set]) {\n        if (debugEnvRegex.test(set)) {\n          var pid = process.pid;\n          debugs[set] = function() {\n            var msg = exports.format.apply(exports, arguments);\n            console.error(\"%s %d: %s\", set, pid, msg);\n          };\n        } else {\n          debugs[set] = function() {\n          };\n        }\n      }\n      return debugs[set];\n    };\n    function inspect(obj, opts) {\n      var ctx = {\n        seen: [],\n        stylize: stylizeNoColor\n      };\n      if (arguments.length >= 3)\n        ctx.depth = arguments[2];\n      if (arguments.length >= 4)\n        ctx.colors = arguments[3];\n      if (isBoolean(opts)) {\n        ctx.showHidden = opts;\n      } else if (opts) {\n        exports._extend(ctx, opts);\n      }\n      if (isUndefined(ctx.showHidden))\n        ctx.showHidden = false;\n      if (isUndefined(ctx.depth))\n        ctx.depth = 2;\n      if (isUndefined(ctx.colors))\n        ctx.colors = false;\n      if (isUndefined(ctx.customInspect))\n        ctx.customInspect = true;\n      if (ctx.colors)\n        ctx.stylize = stylizeWithColor;\n      return formatValue(ctx, obj, ctx.depth);\n    }\n    exports.inspect = inspect;\n    inspect.colors = {\n      \"bold\": [1, 22],\n      \"italic\": [3, 23],\n      \"underline\": [4, 24],\n      \"inverse\": [7, 27],\n      \"white\": [37, 39],\n      \"grey\": [90, 39],\n      \"black\": [30, 39],\n      \"blue\": [34, 39],\n      \"cyan\": [36, 39],\n      \"green\": [32, 39],\n      \"magenta\": [35, 39],\n      \"red\": [31, 39],\n      \"yellow\": [33, 39]\n    };\n    inspect.styles = {\n      \"special\": \"cyan\",\n      \"number\": \"yellow\",\n      \"boolean\": \"yellow\",\n      \"undefined\": \"grey\",\n      \"null\": \"bold\",\n      \"string\": \"green\",\n      \"date\": \"magenta\",\n      // \"name\": intentionally not styling\n      \"regexp\": \"red\"\n    };\n    function stylizeWithColor(str, styleType) {\n      var style = inspect.styles[styleType];\n      if (style) {\n        return \"\\x1B[\" + inspect.colors[style][0] + \"m\" + str + \"\\x1B[\" + inspect.colors[style][1] + \"m\";\n      } else {\n        return str;\n      }\n    }\n    function stylizeNoColor(str, styleType) {\n      return str;\n    }\n    function arrayToHash(array) {\n      var hash = {};\n      array.forEach(function(val, idx) {\n        hash[val] = true;\n      });\n      return hash;\n    }\n    function formatValue(ctx, value, recurseTimes) {\n      if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n        var ret = value.inspect(recurseTimes, ctx);\n        if (!isString(ret)) {\n          ret = formatValue(ctx, ret, recurseTimes);\n        }\n        return ret;\n      }\n      var primitive = formatPrimitive(ctx, value);\n      if (primitive) {\n        return primitive;\n      }\n      var keys = Object.keys(value);\n      var visibleKeys = arrayToHash(keys);\n      if (ctx.showHidden) {\n        keys = Object.getOwnPropertyNames(value);\n      }\n      if (isError(value) && (keys.indexOf(\"message\") >= 0 || keys.indexOf(\"description\") >= 0)) {\n        return formatError(value);\n      }\n      if (keys.length === 0) {\n        if (isFunction(value)) {\n          var name = value.name ? \": \" + value.name : \"\";\n          return ctx.stylize(\"[Function\" + name + \"]\", \"special\");\n        }\n        if (isRegExp(value)) {\n          return ctx.stylize(RegExp.prototype.toString.call(value), \"regexp\");\n        }\n        if (isDate(value)) {\n          return ctx.stylize(Date.prototype.toString.call(value), \"date\");\n        }\n        if (isError(value)) {\n          return formatError(value);\n        }\n      }\n      var base = \"\", array = false, braces = [\"{\", \"}\"];\n      if (isArray(value)) {\n        array = true;\n        braces = [\"[\", \"]\"];\n      }\n      if (isFunction(value)) {\n        var n = value.name ? \": \" + value.name : \"\";\n        base = \" [Function\" + n + \"]\";\n      }\n      if (isRegExp(value)) {\n        base = \" \" + RegExp.prototype.toString.call(value);\n      }\n      if (isDate(value)) {\n        base = \" \" + Date.prototype.toUTCString.call(value);\n      }\n      if (isError(value)) {\n        base = \" \" + formatError(value);\n      }\n      if (keys.length === 0 && (!array || value.length == 0)) {\n        return braces[0] + base + braces[1];\n      }\n      if (recurseTimes < 0) {\n        if (isRegExp(value)) {\n          return ctx.stylize(RegExp.prototype.toString.call(value), \"regexp\");\n        } else {\n          return ctx.stylize(\"[Object]\", \"special\");\n        }\n      }\n      ctx.seen.push(value);\n      var output;\n      if (array) {\n        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n      } else {\n        output = keys.map(function(key) {\n          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n        });\n      }\n      ctx.seen.pop();\n      return reduceToSingleString(output, base, braces);\n    }\n    function formatPrimitive(ctx, value) {\n      if (isUndefined(value))\n        return ctx.stylize(\"undefined\", \"undefined\");\n      if (isString(value)) {\n        var simple = \"'\" + JSON.stringify(value).replace(/^\"|\"$/g, \"\").replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"') + \"'\";\n        return ctx.stylize(simple, \"string\");\n      }\n      if (isNumber(value))\n        return ctx.stylize(\"\" + value, \"number\");\n      if (isBoolean(value))\n        return ctx.stylize(\"\" + value, \"boolean\");\n      if (isNull(value))\n        return ctx.stylize(\"null\", \"null\");\n    }\n    function formatError(value) {\n      return \"[\" + Error.prototype.toString.call(value) + \"]\";\n    }\n    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n      var output = [];\n      for (var i = 0, l = value.length; i < l; ++i) {\n        if (hasOwnProperty(value, String(i))) {\n          output.push(formatProperty(\n            ctx,\n            value,\n            recurseTimes,\n            visibleKeys,\n            String(i),\n            true\n          ));\n        } else {\n          output.push(\"\");\n        }\n      }\n      keys.forEach(function(key) {\n        if (!key.match(/^\\d+$/)) {\n          output.push(formatProperty(\n            ctx,\n            value,\n            recurseTimes,\n            visibleKeys,\n            key,\n            true\n          ));\n        }\n      });\n      return output;\n    }\n    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n      var name, str, desc;\n      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n      if (desc.get) {\n        if (desc.set) {\n          str = ctx.stylize(\"[Getter/Setter]\", \"special\");\n        } else {\n          str = ctx.stylize(\"[Getter]\", \"special\");\n        }\n      } else {\n        if (desc.set) {\n          str = ctx.stylize(\"[Setter]\", \"special\");\n        }\n      }\n      if (!hasOwnProperty(visibleKeys, key)) {\n        name = \"[\" + key + \"]\";\n      }\n      if (!str) {\n        if (ctx.seen.indexOf(desc.value) < 0) {\n          if (isNull(recurseTimes)) {\n            str = formatValue(ctx, desc.value, null);\n          } else {\n            str = formatValue(ctx, desc.value, recurseTimes - 1);\n          }\n          if (str.indexOf(\"\\n\") > -1) {\n            if (array) {\n              str = str.split(\"\\n\").map(function(line) {\n                return \"  \" + line;\n              }).join(\"\\n\").slice(2);\n            } else {\n              str = \"\\n\" + str.split(\"\\n\").map(function(line) {\n                return \"   \" + line;\n              }).join(\"\\n\");\n            }\n          }\n        } else {\n          str = ctx.stylize(\"[Circular]\", \"special\");\n        }\n      }\n      if (isUndefined(name)) {\n        if (array && key.match(/^\\d+$/)) {\n          return str;\n        }\n        name = JSON.stringify(\"\" + key);\n        if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n          name = name.slice(1, -1);\n          name = ctx.stylize(name, \"name\");\n        } else {\n          name = name.replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n          name = ctx.stylize(name, \"string\");\n        }\n      }\n      return name + \": \" + str;\n    }\n    function reduceToSingleString(output, base, braces) {\n      var numLinesEst = 0;\n      var length = output.reduce(function(prev, cur) {\n        numLinesEst++;\n        if (cur.indexOf(\"\\n\") >= 0)\n          numLinesEst++;\n        return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, \"\").length + 1;\n      }, 0);\n      if (length > 60) {\n        return braces[0] + (base === \"\" ? \"\" : base + \"\\n \") + \" \" + output.join(\",\\n  \") + \" \" + braces[1];\n      }\n      return braces[0] + base + \" \" + output.join(\", \") + \" \" + braces[1];\n    }\n    exports.types = require_types();\n    function isArray(ar) {\n      return Array.isArray(ar);\n    }\n    exports.isArray = isArray;\n    function isBoolean(arg) {\n      return typeof arg === \"boolean\";\n    }\n    exports.isBoolean = isBoolean;\n    function isNull(arg) {\n      return arg === null;\n    }\n    exports.isNull = isNull;\n    function isNullOrUndefined(arg) {\n      return arg == null;\n    }\n    exports.isNullOrUndefined = isNullOrUndefined;\n    function isNumber(arg) {\n      return typeof arg === \"number\";\n    }\n    exports.isNumber = isNumber;\n    function isString(arg) {\n      return typeof arg === \"string\";\n    }\n    exports.isString = isString;\n    function isSymbol(arg) {\n      return typeof arg === \"symbol\";\n    }\n    exports.isSymbol = isSymbol;\n    function isUndefined(arg) {\n      return arg === void 0;\n    }\n    exports.isUndefined = isUndefined;\n    function isRegExp(re) {\n      return isObject(re) && objectToString(re) === \"[object RegExp]\";\n    }\n    exports.isRegExp = isRegExp;\n    exports.types.isRegExp = isRegExp;\n    function isObject(arg) {\n      return typeof arg === \"object\" && arg !== null;\n    }\n    exports.isObject = isObject;\n    function isDate(d) {\n      return isObject(d) && objectToString(d) === \"[object Date]\";\n    }\n    exports.isDate = isDate;\n    exports.types.isDate = isDate;\n    function isError(e) {\n      return isObject(e) && (objectToString(e) === \"[object Error]\" || e instanceof Error);\n    }\n    exports.isError = isError;\n    exports.types.isNativeError = isError;\n    function isFunction(arg) {\n      return typeof arg === \"function\";\n    }\n    exports.isFunction = isFunction;\n    function isPrimitive(arg) {\n      return arg === null || typeof arg === \"boolean\" || typeof arg === \"number\" || typeof arg === \"string\" || typeof arg === \"symbol\" || // ES6 symbol\n      typeof arg === \"undefined\";\n    }\n    exports.isPrimitive = isPrimitive;\n    exports.isBuffer = require_isBufferBrowser();\n    function objectToString(o) {\n      return Object.prototype.toString.call(o);\n    }\n    function pad(n) {\n      return n < 10 ? \"0\" + n.toString(10) : n.toString(10);\n    }\n    var months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\"\n    ];\n    function timestamp() {\n      var d = /* @__PURE__ */ new Date();\n      var time = [\n        pad(d.getHours()),\n        pad(d.getMinutes()),\n        pad(d.getSeconds())\n      ].join(\":\");\n      return [d.getDate(), months[d.getMonth()], time].join(\" \");\n    }\n    exports.log = function() {\n      console.log(\"%s - %s\", timestamp(), exports.format.apply(exports, arguments));\n    };\n    exports.inherits = require_inherits_browser();\n    exports._extend = function(origin, add) {\n      if (!add || !isObject(add))\n        return origin;\n      var keys = Object.keys(add);\n      var i = keys.length;\n      while (i--) {\n        origin[keys[i]] = add[keys[i]];\n      }\n      return origin;\n    };\n    function hasOwnProperty(obj, prop) {\n      return Object.prototype.hasOwnProperty.call(obj, prop);\n    }\n    var kCustomPromisifiedSymbol = typeof Symbol !== \"undefined\" ? Symbol(\"util.promisify.custom\") : void 0;\n    exports.promisify = function promisify(original) {\n      if (typeof original !== \"function\")\n        throw new TypeError('The \"original\" argument must be of type Function');\n      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n        var fn = original[kCustomPromisifiedSymbol];\n        if (typeof fn !== \"function\") {\n          throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n        }\n        Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n          value: fn,\n          enumerable: false,\n          writable: false,\n          configurable: true\n        });\n        return fn;\n      }\n      function fn() {\n        var promiseResolve, promiseReject;\n        var promise = new Promise(function(resolve, reject) {\n          promiseResolve = resolve;\n          promiseReject = reject;\n        });\n        var args = [];\n        for (var i = 0; i < arguments.length; i++) {\n          args.push(arguments[i]);\n        }\n        args.push(function(err, value) {\n          if (err) {\n            promiseReject(err);\n          } else {\n            promiseResolve(value);\n          }\n        });\n        try {\n          original.apply(this, args);\n        } catch (err) {\n          promiseReject(err);\n        }\n        return promise;\n      }\n      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n      if (kCustomPromisifiedSymbol)\n        Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n          value: fn,\n          enumerable: false,\n          writable: false,\n          configurable: true\n        });\n      return Object.defineProperties(\n        fn,\n        getOwnPropertyDescriptors(original)\n      );\n    };\n    exports.promisify.custom = kCustomPromisifiedSymbol;\n    function callbackifyOnRejected(reason, cb) {\n      if (!reason) {\n        var newReason = new Error(\"Promise was rejected with a falsy value\");\n        newReason.reason = reason;\n        reason = newReason;\n      }\n      return cb(reason);\n    }\n    function callbackify(original) {\n      if (typeof original !== \"function\") {\n        throw new TypeError('The \"original\" argument must be of type Function');\n      }\n      function callbackified() {\n        var args = [];\n        for (var i = 0; i < arguments.length; i++) {\n          args.push(arguments[i]);\n        }\n        var maybeCb = args.pop();\n        if (typeof maybeCb !== \"function\") {\n          throw new TypeError(\"The last argument must be of type Function\");\n        }\n        var self2 = this;\n        var cb = function() {\n          return maybeCb.apply(self2, arguments);\n        };\n        original.apply(this, args).then(\n          function(ret) {\n            process.nextTick(cb.bind(null, null, ret));\n          },\n          function(rej) {\n            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));\n          }\n        );\n      }\n      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n      Object.defineProperties(\n        callbackified,\n        getOwnPropertyDescriptors(original)\n      );\n      return callbackified;\n    }\n    exports.callbackify = callbackify;\n  }\n});\n\n// node_modules/safe-buffer/index.js\nvar require_safe_buffer = __commonJS({\n  \"node_modules/safe-buffer/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var buffer = require_buffer_polyfill();\n    var Buffer2 = buffer.Buffer;\n    function copyProps(src, dst) {\n      for (var key in src) {\n        dst[key] = src[key];\n      }\n    }\n    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {\n      module.exports = buffer;\n    } else {\n      copyProps(buffer, exports);\n      exports.Buffer = SafeBuffer;\n    }\n    function SafeBuffer(arg, encodingOrOffset, length) {\n      return Buffer2(arg, encodingOrOffset, length);\n    }\n    SafeBuffer.prototype = Object.create(Buffer2.prototype);\n    copyProps(Buffer2, SafeBuffer);\n    SafeBuffer.from = function(arg, encodingOrOffset, length) {\n      if (typeof arg === \"number\") {\n        throw new TypeError(\"Argument must not be a number\");\n      }\n      return Buffer2(arg, encodingOrOffset, length);\n    };\n    SafeBuffer.alloc = function(size, fill, encoding) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      var buf = Buffer2(size);\n      if (fill !== void 0) {\n        if (typeof encoding === \"string\") {\n          buf.fill(fill, encoding);\n        } else {\n          buf.fill(fill);\n        }\n      } else {\n        buf.fill(0);\n      }\n      return buf;\n    };\n    SafeBuffer.allocUnsafe = function(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      return Buffer2(size);\n    };\n    SafeBuffer.allocUnsafeSlow = function(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      return buffer.SlowBuffer(size);\n    };\n  }\n});\n\n// node_modules/randombytes/browser.js\nvar require_browser = __commonJS({\n  \"node_modules/randombytes/browser.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var MAX_BYTES = 65536;\n    var MAX_UINT32 = 4294967295;\n    function oldBrowser() {\n      throw new Error(\"Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11\");\n    }\n    var Buffer2 = require_safe_buffer().Buffer;\n    var crypto = global.crypto || global.msCrypto;\n    if (crypto && crypto.getRandomValues) {\n      module.exports = randomBytes;\n    } else {\n      module.exports = oldBrowser;\n    }\n    function randomBytes(size, cb) {\n      if (size > MAX_UINT32)\n        throw new RangeError(\"requested too many random bytes\");\n      var bytes = Buffer2.allocUnsafe(size);\n      if (size > 0) {\n        if (size > MAX_BYTES) {\n          for (var generated = 0; generated < size; generated += MAX_BYTES) {\n            crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));\n          }\n        } else {\n          crypto.getRandomValues(bytes);\n        }\n      }\n      if (typeof cb === \"function\") {\n        return process.nextTick(function() {\n          cb(null, bytes);\n        });\n      }\n      return bytes;\n    }\n  }\n});\n\n// node_modules/events/events.js\nvar require_events = __commonJS({\n  \"node_modules/events/events.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var R = typeof Reflect === \"object\" ? Reflect : null;\n    var ReflectApply = R && typeof R.apply === \"function\" ? R.apply : function ReflectApply2(target, receiver, args) {\n      return Function.prototype.apply.call(target, receiver, args);\n    };\n    var ReflectOwnKeys;\n    if (R && typeof R.ownKeys === \"function\") {\n      ReflectOwnKeys = R.ownKeys;\n    } else if (Object.getOwnPropertySymbols) {\n      ReflectOwnKeys = function ReflectOwnKeys2(target) {\n        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\n      };\n    } else {\n      ReflectOwnKeys = function ReflectOwnKeys2(target) {\n        return Object.getOwnPropertyNames(target);\n      };\n    }\n    function ProcessEmitWarning(warning) {\n      if (console && console.warn)\n        console.warn(warning);\n    }\n    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {\n      return value !== value;\n    };\n    function EventEmitter() {\n      EventEmitter.init.call(this);\n    }\n    module.exports = EventEmitter;\n    module.exports.once = once;\n    EventEmitter.EventEmitter = EventEmitter;\n    EventEmitter.prototype._events = void 0;\n    EventEmitter.prototype._eventsCount = 0;\n    EventEmitter.prototype._maxListeners = void 0;\n    var defaultMaxListeners = 10;\n    function checkListener(listener) {\n      if (typeof listener !== \"function\") {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n    }\n    Object.defineProperty(EventEmitter, \"defaultMaxListeners\", {\n      enumerable: true,\n      get: function() {\n        return defaultMaxListeners;\n      },\n      set: function(arg) {\n        if (typeof arg !== \"number\" || arg < 0 || NumberIsNaN(arg)) {\n          throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + \".\");\n        }\n        defaultMaxListeners = arg;\n      }\n    });\n    EventEmitter.init = function() {\n      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {\n        this._events = /* @__PURE__ */ Object.create(null);\n        this._eventsCount = 0;\n      }\n      this._maxListeners = this._maxListeners || void 0;\n    };\n    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n      if (typeof n !== \"number\" || n < 0 || NumberIsNaN(n)) {\n        throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + \".\");\n      }\n      this._maxListeners = n;\n      return this;\n    };\n    function _getMaxListeners(that) {\n      if (that._maxListeners === void 0)\n        return EventEmitter.defaultMaxListeners;\n      return that._maxListeners;\n    }\n    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n      return _getMaxListeners(this);\n    };\n    EventEmitter.prototype.emit = function emit(type) {\n      var args = [];\n      for (var i = 1; i < arguments.length; i++)\n        args.push(arguments[i]);\n      var doError = type === \"error\";\n      var events = this._events;\n      if (events !== void 0)\n        doError = doError && events.error === void 0;\n      else if (!doError)\n        return false;\n      if (doError) {\n        var er;\n        if (args.length > 0)\n          er = args[0];\n        if (er instanceof Error) {\n          throw er;\n        }\n        var err = new Error(\"Unhandled error.\" + (er ? \" (\" + er.message + \")\" : \"\"));\n        err.context = er;\n        throw err;\n      }\n      var handler = events[type];\n      if (handler === void 0)\n        return false;\n      if (typeof handler === \"function\") {\n        ReflectApply(handler, this, args);\n      } else {\n        var len = handler.length;\n        var listeners = arrayClone(handler, len);\n        for (var i = 0; i < len; ++i)\n          ReflectApply(listeners[i], this, args);\n      }\n      return true;\n    };\n    function _addListener(target, type, listener, prepend) {\n      var m;\n      var events;\n      var existing;\n      checkListener(listener);\n      events = target._events;\n      if (events === void 0) {\n        events = target._events = /* @__PURE__ */ Object.create(null);\n        target._eventsCount = 0;\n      } else {\n        if (events.newListener !== void 0) {\n          target.emit(\n            \"newListener\",\n            type,\n            listener.listener ? listener.listener : listener\n          );\n          events = target._events;\n        }\n        existing = events[type];\n      }\n      if (existing === void 0) {\n        existing = events[type] = listener;\n        ++target._eventsCount;\n      } else {\n        if (typeof existing === \"function\") {\n          existing = events[type] = prepend ? [listener, existing] : [existing, listener];\n        } else if (prepend) {\n          existing.unshift(listener);\n        } else {\n          existing.push(listener);\n        }\n        m = _getMaxListeners(target);\n        if (m > 0 && existing.length > m && !existing.warned) {\n          existing.warned = true;\n          var w = new Error(\"Possible EventEmitter memory leak detected. \" + existing.length + \" \" + String(type) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n          w.name = \"MaxListenersExceededWarning\";\n          w.emitter = target;\n          w.type = type;\n          w.count = existing.length;\n          ProcessEmitWarning(w);\n        }\n      }\n      return target;\n    }\n    EventEmitter.prototype.addListener = function addListener(type, listener) {\n      return _addListener(this, type, listener, false);\n    };\n    EventEmitter.prototype.on = EventEmitter.prototype.addListener;\n    EventEmitter.prototype.prependListener = function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n    function onceWrapper() {\n      if (!this.fired) {\n        this.target.removeListener(this.type, this.wrapFn);\n        this.fired = true;\n        if (arguments.length === 0)\n          return this.listener.call(this.target);\n        return this.listener.apply(this.target, arguments);\n      }\n    }\n    function _onceWrap(target, type, listener) {\n      var state = { fired: false, wrapFn: void 0, target, type, listener };\n      var wrapped = onceWrapper.bind(state);\n      wrapped.listener = listener;\n      state.wrapFn = wrapped;\n      return wrapped;\n    }\n    EventEmitter.prototype.once = function once2(type, listener) {\n      checkListener(listener);\n      this.on(type, _onceWrap(this, type, listener));\n      return this;\n    };\n    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n    EventEmitter.prototype.removeListener = function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n      checkListener(listener);\n      events = this._events;\n      if (events === void 0)\n        return this;\n      list = events[type];\n      if (list === void 0)\n        return this;\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = /* @__PURE__ */ Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit(\"removeListener\", type, list.listener || listener);\n        }\n      } else if (typeof list !== \"function\") {\n        position = -1;\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n        if (position < 0)\n          return this;\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n        if (list.length === 1)\n          events[type] = list[0];\n        if (events.removeListener !== void 0)\n          this.emit(\"removeListener\", type, originalListener || listener);\n      }\n      return this;\n    };\n    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {\n      var listeners, events, i;\n      events = this._events;\n      if (events === void 0)\n        return this;\n      if (events.removeListener === void 0) {\n        if (arguments.length === 0) {\n          this._events = /* @__PURE__ */ Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== void 0) {\n          if (--this._eventsCount === 0)\n            this._events = /* @__PURE__ */ Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === \"removeListener\")\n            continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners(\"removeListener\");\n        this._events = /* @__PURE__ */ Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n      listeners = events[type];\n      if (typeof listeners === \"function\") {\n        this.removeListener(type, listeners);\n      } else if (listeners !== void 0) {\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n      return this;\n    };\n    function _listeners(target, type, unwrap) {\n      var events = target._events;\n      if (events === void 0)\n        return [];\n      var evlistener = events[type];\n      if (evlistener === void 0)\n        return [];\n      if (typeof evlistener === \"function\")\n        return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n    }\n    EventEmitter.prototype.listeners = function listeners(type) {\n      return _listeners(this, type, true);\n    };\n    EventEmitter.prototype.rawListeners = function rawListeners(type) {\n      return _listeners(this, type, false);\n    };\n    EventEmitter.listenerCount = function(emitter, type) {\n      if (typeof emitter.listenerCount === \"function\") {\n        return emitter.listenerCount(type);\n      } else {\n        return listenerCount.call(emitter, type);\n      }\n    };\n    EventEmitter.prototype.listenerCount = listenerCount;\n    function listenerCount(type) {\n      var events = this._events;\n      if (events !== void 0) {\n        var evlistener = events[type];\n        if (typeof evlistener === \"function\") {\n          return 1;\n        } else if (evlistener !== void 0) {\n          return evlistener.length;\n        }\n      }\n      return 0;\n    }\n    EventEmitter.prototype.eventNames = function eventNames() {\n      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n    };\n    function arrayClone(arr, n) {\n      var copy = new Array(n);\n      for (var i = 0; i < n; ++i)\n        copy[i] = arr[i];\n      return copy;\n    }\n    function spliceOne(list, index) {\n      for (; index + 1 < list.length; index++)\n        list[index] = list[index + 1];\n      list.pop();\n    }\n    function unwrapListeners(arr) {\n      var ret = new Array(arr.length);\n      for (var i = 0; i < ret.length; ++i) {\n        ret[i] = arr[i].listener || arr[i];\n      }\n      return ret;\n    }\n    function once(emitter, name) {\n      return new Promise(function(resolve, reject) {\n        function errorListener(err) {\n          emitter.removeListener(name, resolver);\n          reject(err);\n        }\n        function resolver() {\n          if (typeof emitter.removeListener === \"function\") {\n            emitter.removeListener(\"error\", errorListener);\n          }\n          resolve([].slice.call(arguments));\n        }\n        ;\n        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n        if (name !== \"error\") {\n          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n        }\n      });\n    }\n    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n      if (typeof emitter.on === \"function\") {\n        eventTargetAgnosticAddListener(emitter, \"error\", handler, flags);\n      }\n    }\n    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n      if (typeof emitter.on === \"function\") {\n        if (flags.once) {\n          emitter.once(name, listener);\n        } else {\n          emitter.on(name, listener);\n        }\n      } else if (typeof emitter.addEventListener === \"function\") {\n        emitter.addEventListener(name, function wrapListener(arg) {\n          if (flags.once) {\n            emitter.removeEventListener(name, wrapListener);\n          }\n          listener(arg);\n        });\n      } else {\n        throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n      }\n    }\n  }\n});\n\n// node_modules/readable-stream/lib/internal/streams/stream-browser.js\nvar require_stream_browser = __commonJS({\n  \"node_modules/readable-stream/lib/internal/streams/stream-browser.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = require_events().EventEmitter;\n  }\n});\n\n// node_modules/readable-stream/lib/internal/streams/buffer_list.js\nvar require_buffer_list = __commonJS({\n  \"node_modules/readable-stream/lib/internal/streams/buffer_list.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    function ownKeys(object, enumerableOnly) {\n      var keys = Object.keys(object);\n      if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n          return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n      }\n      return keys;\n    }\n    function _objectSpread(target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {\n          _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n      return target;\n    }\n    function _defineProperty(obj, key, value) {\n      key = _toPropertyKey(key);\n      if (key in obj) {\n        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });\n      } else {\n        obj[key] = value;\n      }\n      return obj;\n    }\n    function _classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    }\n    function _defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor)\n          descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n      }\n    }\n    function _createClass(Constructor, protoProps, staticProps) {\n      if (protoProps)\n        _defineProperties(Constructor.prototype, protoProps);\n      if (staticProps)\n        _defineProperties(Constructor, staticProps);\n      Object.defineProperty(Constructor, \"prototype\", { writable: false });\n      return Constructor;\n    }\n    function _toPropertyKey(arg) {\n      var key = _toPrimitive(arg, \"string\");\n      return typeof key === \"symbol\" ? key : String(key);\n    }\n    function _toPrimitive(input, hint) {\n      if (typeof input !== \"object\" || input === null)\n        return input;\n      var prim = input[Symbol.toPrimitive];\n      if (prim !== void 0) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\")\n          return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n      }\n      return (hint === \"string\" ? String : Number)(input);\n    }\n    var _require = require_buffer_polyfill();\n    var Buffer2 = _require.Buffer;\n    var _require2 = require_util();\n    var inspect = _require2.inspect;\n    var custom = inspect && inspect.custom || \"inspect\";\n    function copyBuffer(src, target, offset) {\n      Buffer2.prototype.copy.call(src, target, offset);\n    }\n    module.exports = function() {\n      function BufferList() {\n        _classCallCheck(this, BufferList);\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n      }\n      _createClass(BufferList, [{\n        key: \"push\",\n        value: function push(v) {\n          var entry = {\n            data: v,\n            next: null\n          };\n          if (this.length > 0)\n            this.tail.next = entry;\n          else\n            this.head = entry;\n          this.tail = entry;\n          ++this.length;\n        }\n      }, {\n        key: \"unshift\",\n        value: function unshift(v) {\n          var entry = {\n            data: v,\n            next: this.head\n          };\n          if (this.length === 0)\n            this.tail = entry;\n          this.head = entry;\n          ++this.length;\n        }\n      }, {\n        key: \"shift\",\n        value: function shift() {\n          if (this.length === 0)\n            return;\n          var ret = this.head.data;\n          if (this.length === 1)\n            this.head = this.tail = null;\n          else\n            this.head = this.head.next;\n          --this.length;\n          return ret;\n        }\n      }, {\n        key: \"clear\",\n        value: function clear() {\n          this.head = this.tail = null;\n          this.length = 0;\n        }\n      }, {\n        key: \"join\",\n        value: function join(s) {\n          if (this.length === 0)\n            return \"\";\n          var p = this.head;\n          var ret = \"\" + p.data;\n          while (p = p.next)\n            ret += s + p.data;\n          return ret;\n        }\n      }, {\n        key: \"concat\",\n        value: function concat(n) {\n          if (this.length === 0)\n            return Buffer2.alloc(0);\n          var ret = Buffer2.allocUnsafe(n >>> 0);\n          var p = this.head;\n          var i = 0;\n          while (p) {\n            copyBuffer(p.data, ret, i);\n            i += p.data.length;\n            p = p.next;\n          }\n          return ret;\n        }\n        // Consumes a specified amount of bytes or characters from the buffered data.\n      }, {\n        key: \"consume\",\n        value: function consume(n, hasStrings) {\n          var ret;\n          if (n < this.head.data.length) {\n            ret = this.head.data.slice(0, n);\n            this.head.data = this.head.data.slice(n);\n          } else if (n === this.head.data.length) {\n            ret = this.shift();\n          } else {\n            ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n          }\n          return ret;\n        }\n      }, {\n        key: \"first\",\n        value: function first() {\n          return this.head.data;\n        }\n        // Consumes a specified amount of characters from the buffered data.\n      }, {\n        key: \"_getString\",\n        value: function _getString(n) {\n          var p = this.head;\n          var c = 1;\n          var ret = p.data;\n          n -= ret.length;\n          while (p = p.next) {\n            var str = p.data;\n            var nb = n > str.length ? str.length : n;\n            if (nb === str.length)\n              ret += str;\n            else\n              ret += str.slice(0, n);\n            n -= nb;\n            if (n === 0) {\n              if (nb === str.length) {\n                ++c;\n                if (p.next)\n                  this.head = p.next;\n                else\n                  this.head = this.tail = null;\n              } else {\n                this.head = p;\n                p.data = str.slice(nb);\n              }\n              break;\n            }\n            ++c;\n          }\n          this.length -= c;\n          return ret;\n        }\n        // Consumes a specified amount of bytes from the buffered data.\n      }, {\n        key: \"_getBuffer\",\n        value: function _getBuffer(n) {\n          var ret = Buffer2.allocUnsafe(n);\n          var p = this.head;\n          var c = 1;\n          p.data.copy(ret);\n          n -= p.data.length;\n          while (p = p.next) {\n            var buf = p.data;\n            var nb = n > buf.length ? buf.length : n;\n            buf.copy(ret, ret.length - n, 0, nb);\n            n -= nb;\n            if (n === 0) {\n              if (nb === buf.length) {\n                ++c;\n                if (p.next)\n                  this.head = p.next;\n                else\n                  this.head = this.tail = null;\n              } else {\n                this.head = p;\n                p.data = buf.slice(nb);\n              }\n              break;\n            }\n            ++c;\n          }\n          this.length -= c;\n          return ret;\n        }\n        // Make sure the linked list only shows the minimal necessary information.\n      }, {\n        key: custom,\n        value: function value(_, options) {\n          return inspect(this, _objectSpread(_objectSpread({}, options), {}, {\n            // Only inspect one level.\n            depth: 0,\n            // It should not recurse.\n            customInspect: false\n          }));\n        }\n      }]);\n      return BufferList;\n    }();\n  }\n});\n\n// node_modules/readable-stream/lib/internal/streams/destroy.js\nvar require_destroy = __commonJS({\n  \"node_modules/readable-stream/lib/internal/streams/destroy.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    function destroy(err, cb) {\n      var _this = this;\n      var readableDestroyed = this._readableState && this._readableState.destroyed;\n      var writableDestroyed = this._writableState && this._writableState.destroyed;\n      if (readableDestroyed || writableDestroyed) {\n        if (cb) {\n          cb(err);\n        } else if (err) {\n          if (!this._writableState) {\n            process.nextTick(emitErrorNT, this, err);\n          } else if (!this._writableState.errorEmitted) {\n            this._writableState.errorEmitted = true;\n            process.nextTick(emitErrorNT, this, err);\n          }\n        }\n        return this;\n      }\n      if (this._readableState) {\n        this._readableState.destroyed = true;\n      }\n      if (this._writableState) {\n        this._writableState.destroyed = true;\n      }\n      this._destroy(err || null, function(err2) {\n        if (!cb && err2) {\n          if (!_this._writableState) {\n            process.nextTick(emitErrorAndCloseNT, _this, err2);\n          } else if (!_this._writableState.errorEmitted) {\n            _this._writableState.errorEmitted = true;\n            process.nextTick(emitErrorAndCloseNT, _this, err2);\n          } else {\n            process.nextTick(emitCloseNT, _this);\n          }\n        } else if (cb) {\n          process.nextTick(emitCloseNT, _this);\n          cb(err2);\n        } else {\n          process.nextTick(emitCloseNT, _this);\n        }\n      });\n      return this;\n    }\n    function emitErrorAndCloseNT(self2, err) {\n      emitErrorNT(self2, err);\n      emitCloseNT(self2);\n    }\n    function emitCloseNT(self2) {\n      if (self2._writableState && !self2._writableState.emitClose)\n        return;\n      if (self2._readableState && !self2._readableState.emitClose)\n        return;\n      self2.emit(\"close\");\n    }\n    function undestroy() {\n      if (this._readableState) {\n        this._readableState.destroyed = false;\n        this._readableState.reading = false;\n        this._readableState.ended = false;\n        this._readableState.endEmitted = false;\n      }\n      if (this._writableState) {\n        this._writableState.destroyed = false;\n        this._writableState.ended = false;\n        this._writableState.ending = false;\n        this._writableState.finalCalled = false;\n        this._writableState.prefinished = false;\n        this._writableState.finished = false;\n        this._writableState.errorEmitted = false;\n      }\n    }\n    function emitErrorNT(self2, err) {\n      self2.emit(\"error\", err);\n    }\n    function errorOrDestroy(stream, err) {\n      var rState = stream._readableState;\n      var wState = stream._writableState;\n      if (rState && rState.autoDestroy || wState && wState.autoDestroy)\n        stream.destroy(err);\n      else\n        stream.emit(\"error\", err);\n    }\n    module.exports = {\n      destroy,\n      undestroy,\n      errorOrDestroy\n    };\n  }\n});\n\n// node_modules/readable-stream/errors-browser.js\nvar require_errors_browser = __commonJS({\n  \"node_modules/readable-stream/errors-browser.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    function _inheritsLoose(subClass, superClass) {\n      subClass.prototype = Object.create(superClass.prototype);\n      subClass.prototype.constructor = subClass;\n      subClass.__proto__ = superClass;\n    }\n    var codes = {};\n    function createErrorType(code, message, Base) {\n      if (!Base) {\n        Base = Error;\n      }\n      function getMessage(arg1, arg2, arg3) {\n        if (typeof message === \"string\") {\n          return message;\n        } else {\n          return message(arg1, arg2, arg3);\n        }\n      }\n      var NodeError = function(_Base) {\n        _inheritsLoose(NodeError2, _Base);\n        function NodeError2(arg1, arg2, arg3) {\n          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n        }\n        return NodeError2;\n      }(Base);\n      NodeError.prototype.name = Base.name;\n      NodeError.prototype.code = code;\n      codes[code] = NodeError;\n    }\n    function oneOf(expected, thing) {\n      if (Array.isArray(expected)) {\n        var len = expected.length;\n        expected = expected.map(function(i) {\n          return String(i);\n        });\n        if (len > 2) {\n          return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(\", \"), \", or \") + expected[len - 1];\n        } else if (len === 2) {\n          return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n        } else {\n          return \"of \".concat(thing, \" \").concat(expected[0]);\n        }\n      } else {\n        return \"of \".concat(thing, \" \").concat(String(expected));\n      }\n    }\n    function startsWith(str, search, pos) {\n      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n    }\n    function endsWith(str, search, this_len) {\n      if (this_len === void 0 || this_len > str.length) {\n        this_len = str.length;\n      }\n      return str.substring(this_len - search.length, this_len) === search;\n    }\n    function includes(str, search, start) {\n      if (typeof start !== \"number\") {\n        start = 0;\n      }\n      if (start + search.length > str.length) {\n        return false;\n      } else {\n        return str.indexOf(search, start) !== -1;\n      }\n    }\n    createErrorType(\"ERR_INVALID_OPT_VALUE\", function(name, value) {\n      return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n    }, TypeError);\n    createErrorType(\"ERR_INVALID_ARG_TYPE\", function(name, expected, actual) {\n      var determiner;\n      if (typeof expected === \"string\" && startsWith(expected, \"not \")) {\n        determiner = \"must not be\";\n        expected = expected.replace(/^not /, \"\");\n      } else {\n        determiner = \"must be\";\n      }\n      var msg;\n      if (endsWith(name, \" argument\")) {\n        msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, \"type\"));\n      } else {\n        var type = includes(name, \".\") ? \"property\" : \"argument\";\n        msg = 'The \"'.concat(name, '\" ').concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, \"type\"));\n      }\n      msg += \". Received type \".concat(typeof actual);\n      return msg;\n    }, TypeError);\n    createErrorType(\"ERR_STREAM_PUSH_AFTER_EOF\", \"stream.push() after EOF\");\n    createErrorType(\"ERR_METHOD_NOT_IMPLEMENTED\", function(name) {\n      return \"The \" + name + \" method is not implemented\";\n    });\n    createErrorType(\"ERR_STREAM_PREMATURE_CLOSE\", \"Premature close\");\n    createErrorType(\"ERR_STREAM_DESTROYED\", function(name) {\n      return \"Cannot call \" + name + \" after a stream was destroyed\";\n    });\n    createErrorType(\"ERR_MULTIPLE_CALLBACK\", \"Callback called multiple times\");\n    createErrorType(\"ERR_STREAM_CANNOT_PIPE\", \"Cannot pipe, not readable\");\n    createErrorType(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\");\n    createErrorType(\"ERR_STREAM_NULL_VALUES\", \"May not write null values to stream\", TypeError);\n    createErrorType(\"ERR_UNKNOWN_ENCODING\", function(arg) {\n      return \"Unknown encoding: \" + arg;\n    }, TypeError);\n    createErrorType(\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\", \"stream.unshift() after end event\");\n    module.exports.codes = codes;\n  }\n});\n\n// node_modules/readable-stream/lib/internal/streams/state.js\nvar require_state = __commonJS({\n  \"node_modules/readable-stream/lib/internal/streams/state.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;\n    function highWaterMarkFrom(options, isDuplex, duplexKey) {\n      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n    }\n    function getHighWaterMark(state, options, duplexKey, isDuplex) {\n      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n      if (hwm != null) {\n        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n          var name = isDuplex ? duplexKey : \"highWaterMark\";\n          throw new ERR_INVALID_OPT_VALUE(name, hwm);\n        }\n        return Math.floor(hwm);\n      }\n      return state.objectMode ? 16 : 16 * 1024;\n    }\n    module.exports = {\n      getHighWaterMark\n    };\n  }\n});\n\n// node_modules/util-deprecate/browser.js\nvar require_browser2 = __commonJS({\n  \"node_modules/util-deprecate/browser.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = deprecate;\n    function deprecate(fn, msg) {\n      if (config(\"noDeprecation\")) {\n        return fn;\n      }\n      var warned = false;\n      function deprecated() {\n        if (!warned) {\n          if (config(\"throwDeprecation\")) {\n            throw new Error(msg);\n          } else if (config(\"traceDeprecation\")) {\n            console.trace(msg);\n          } else {\n            console.warn(msg);\n          }\n          warned = true;\n        }\n        return fn.apply(this, arguments);\n      }\n      return deprecated;\n    }\n    function config(name) {\n      try {\n        if (!global.localStorage)\n          return false;\n      } catch (_) {\n        return false;\n      }\n      var val = global.localStorage[name];\n      if (null == val)\n        return false;\n      return String(val).toLowerCase() === \"true\";\n    }\n  }\n});\n\n// node_modules/readable-stream/lib/_stream_writable.js\nvar require_stream_writable = __commonJS({\n  \"node_modules/readable-stream/lib/_stream_writable.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = Writable;\n    function CorkedRequest(state) {\n      var _this = this;\n      this.next = null;\n      this.entry = null;\n      this.finish = function() {\n        onCorkedFinish(_this, state);\n      };\n    }\n    var Duplex;\n    Writable.WritableState = WritableState;\n    var internalUtil = {\n      deprecate: require_browser2()\n    };\n    var Stream = require_stream_browser();\n    var Buffer2 = require_buffer_polyfill().Buffer;\n    var OurUint8Array = (typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : typeof self !== \"undefined\" ? self : {}).Uint8Array || function() {\n    };\n    function _uint8ArrayToBuffer(chunk) {\n      return Buffer2.from(chunk);\n    }\n    function _isUint8Array(obj) {\n      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;\n    }\n    var destroyImpl = require_destroy();\n    var _require = require_state();\n    var getHighWaterMark = _require.getHighWaterMark;\n    var _require$codes = require_errors_browser().codes;\n    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;\n    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;\n    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;\n    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;\n    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;\n    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;\n    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n    var errorOrDestroy = destroyImpl.errorOrDestroy;\n    require_inherits_browser()(Writable, Stream);\n    function nop() {\n    }\n    function WritableState(options, stream, isDuplex) {\n      Duplex = Duplex || require_stream_duplex();\n      options = options || {};\n      if (typeof isDuplex !== \"boolean\")\n        isDuplex = stream instanceof Duplex;\n      this.objectMode = !!options.objectMode;\n      if (isDuplex)\n        this.objectMode = this.objectMode || !!options.writableObjectMode;\n      this.highWaterMark = getHighWaterMark(this, options, \"writableHighWaterMark\", isDuplex);\n      this.finalCalled = false;\n      this.needDrain = false;\n      this.ending = false;\n      this.ended = false;\n      this.finished = false;\n      this.destroyed = false;\n      var noDecode = options.decodeStrings === false;\n      this.decodeStrings = !noDecode;\n      this.defaultEncoding = options.defaultEncoding || \"utf8\";\n      this.length = 0;\n      this.writing = false;\n      this.corked = 0;\n      this.sync = true;\n      this.bufferProcessing = false;\n      this.onwrite = function(er) {\n        onwrite(stream, er);\n      };\n      this.writecb = null;\n      this.writelen = 0;\n      this.bufferedRequest = null;\n      this.lastBufferedRequest = null;\n      this.pendingcb = 0;\n      this.prefinished = false;\n      this.errorEmitted = false;\n      this.emitClose = options.emitClose !== false;\n      this.autoDestroy = !!options.autoDestroy;\n      this.bufferedRequestCount = 0;\n      this.corkedRequestsFree = new CorkedRequest(this);\n    }\n    WritableState.prototype.getBuffer = function getBuffer() {\n      var current = this.bufferedRequest;\n      var out = [];\n      while (current) {\n        out.push(current);\n        current = current.next;\n      }\n      return out;\n    };\n    (function() {\n      try {\n        Object.defineProperty(WritableState.prototype, \"buffer\", {\n          get: internalUtil.deprecate(function writableStateBufferGetter() {\n            return this.getBuffer();\n          }, \"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.\", \"DEP0003\")\n        });\n      } catch (_) {\n      }\n    })();\n    var realHasInstance;\n    if (typeof Symbol === \"function\" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === \"function\") {\n      realHasInstance = Function.prototype[Symbol.hasInstance];\n      Object.defineProperty(Writable, Symbol.hasInstance, {\n        value: function value(object) {\n          if (realHasInstance.call(this, object))\n            return true;\n          if (this !== Writable)\n            return false;\n          return object && object._writableState instanceof WritableState;\n        }\n      });\n    } else {\n      realHasInstance = function realHasInstance2(object) {\n        return object instanceof this;\n      };\n    }\n    function Writable(options) {\n      Duplex = Duplex || require_stream_duplex();\n      var isDuplex = this instanceof Duplex;\n      if (!isDuplex && !realHasInstance.call(Writable, this))\n        return new Writable(options);\n      this._writableState = new WritableState(options, this, isDuplex);\n      this.writable = true;\n      if (options) {\n        if (typeof options.write === \"function\")\n          this._write = options.write;\n        if (typeof options.writev === \"function\")\n          this._writev = options.writev;\n        if (typeof options.destroy === \"function\")\n          this._destroy = options.destroy;\n        if (typeof options.final === \"function\")\n          this._final = options.final;\n      }\n      Stream.call(this);\n    }\n    Writable.prototype.pipe = function() {\n      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n    };\n    function writeAfterEnd(stream, cb) {\n      var er = new ERR_STREAM_WRITE_AFTER_END();\n      errorOrDestroy(stream, er);\n      process.nextTick(cb, er);\n    }\n    function validChunk(stream, state, chunk, cb) {\n      var er;\n      if (chunk === null) {\n        er = new ERR_STREAM_NULL_VALUES();\n      } else if (typeof chunk !== \"string\" && !state.objectMode) {\n        er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\"string\", \"Buffer\"], chunk);\n      }\n      if (er) {\n        errorOrDestroy(stream, er);\n        process.nextTick(cb, er);\n        return false;\n      }\n      return true;\n    }\n    Writable.prototype.write = function(chunk, encoding, cb) {\n      var state = this._writableState;\n      var ret = false;\n      var isBuf = !state.objectMode && _isUint8Array(chunk);\n      if (isBuf && !Buffer2.isBuffer(chunk)) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n      if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n      }\n      if (isBuf)\n        encoding = \"buffer\";\n      else if (!encoding)\n        encoding = state.defaultEncoding;\n      if (typeof cb !== \"function\")\n        cb = nop;\n      if (state.ending)\n        writeAfterEnd(this, cb);\n      else if (isBuf || validChunk(this, state, chunk, cb)) {\n        state.pendingcb++;\n        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n      }\n      return ret;\n    };\n    Writable.prototype.cork = function() {\n      this._writableState.corked++;\n    };\n    Writable.prototype.uncork = function() {\n      var state = this._writableState;\n      if (state.corked) {\n        state.corked--;\n        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)\n          clearBuffer(this, state);\n      }\n    };\n    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n      if (typeof encoding === \"string\")\n        encoding = encoding.toLowerCase();\n      if (!([\"hex\", \"utf8\", \"utf-8\", \"ascii\", \"binary\", \"base64\", \"ucs2\", \"ucs-2\", \"utf16le\", \"utf-16le\", \"raw\"].indexOf((encoding + \"\").toLowerCase()) > -1))\n        throw new ERR_UNKNOWN_ENCODING(encoding);\n      this._writableState.defaultEncoding = encoding;\n      return this;\n    };\n    Object.defineProperty(Writable.prototype, \"writableBuffer\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._writableState && this._writableState.getBuffer();\n      }\n    });\n    function decodeChunk(state, chunk, encoding) {\n      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === \"string\") {\n        chunk = Buffer2.from(chunk, encoding);\n      }\n      return chunk;\n    }\n    Object.defineProperty(Writable.prototype, \"writableHighWaterMark\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._writableState.highWaterMark;\n      }\n    });\n    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n      if (!isBuf) {\n        var newChunk = decodeChunk(state, chunk, encoding);\n        if (chunk !== newChunk) {\n          isBuf = true;\n          encoding = \"buffer\";\n          chunk = newChunk;\n        }\n      }\n      var len = state.objectMode ? 1 : chunk.length;\n      state.length += len;\n      var ret = state.length < state.highWaterMark;\n      if (!ret)\n        state.needDrain = true;\n      if (state.writing || state.corked) {\n        var last = state.lastBufferedRequest;\n        state.lastBufferedRequest = {\n          chunk,\n          encoding,\n          isBuf,\n          callback: cb,\n          next: null\n        };\n        if (last) {\n          last.next = state.lastBufferedRequest;\n        } else {\n          state.bufferedRequest = state.lastBufferedRequest;\n        }\n        state.bufferedRequestCount += 1;\n      } else {\n        doWrite(stream, state, false, len, chunk, encoding, cb);\n      }\n      return ret;\n    }\n    function doWrite(stream, state, writev, len, chunk, encoding, cb) {\n      state.writelen = len;\n      state.writecb = cb;\n      state.writing = true;\n      state.sync = true;\n      if (state.destroyed)\n        state.onwrite(new ERR_STREAM_DESTROYED(\"write\"));\n      else if (writev)\n        stream._writev(chunk, state.onwrite);\n      else\n        stream._write(chunk, encoding, state.onwrite);\n      state.sync = false;\n    }\n    function onwriteError(stream, state, sync, er, cb) {\n      --state.pendingcb;\n      if (sync) {\n        process.nextTick(cb, er);\n        process.nextTick(finishMaybe, stream, state);\n        stream._writableState.errorEmitted = true;\n        errorOrDestroy(stream, er);\n      } else {\n        cb(er);\n        stream._writableState.errorEmitted = true;\n        errorOrDestroy(stream, er);\n        finishMaybe(stream, state);\n      }\n    }\n    function onwriteStateUpdate(state) {\n      state.writing = false;\n      state.writecb = null;\n      state.length -= state.writelen;\n      state.writelen = 0;\n    }\n    function onwrite(stream, er) {\n      var state = stream._writableState;\n      var sync = state.sync;\n      var cb = state.writecb;\n      if (typeof cb !== \"function\")\n        throw new ERR_MULTIPLE_CALLBACK();\n      onwriteStateUpdate(state);\n      if (er)\n        onwriteError(stream, state, sync, er, cb);\n      else {\n        var finished = needFinish(state) || stream.destroyed;\n        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n          clearBuffer(stream, state);\n        }\n        if (sync) {\n          process.nextTick(afterWrite, stream, state, finished, cb);\n        } else {\n          afterWrite(stream, state, finished, cb);\n        }\n      }\n    }\n    function afterWrite(stream, state, finished, cb) {\n      if (!finished)\n        onwriteDrain(stream, state);\n      state.pendingcb--;\n      cb();\n      finishMaybe(stream, state);\n    }\n    function onwriteDrain(stream, state) {\n      if (state.length === 0 && state.needDrain) {\n        state.needDrain = false;\n        stream.emit(\"drain\");\n      }\n    }\n    function clearBuffer(stream, state) {\n      state.bufferProcessing = true;\n      var entry = state.bufferedRequest;\n      if (stream._writev && entry && entry.next) {\n        var l = state.bufferedRequestCount;\n        var buffer = new Array(l);\n        var holder = state.corkedRequestsFree;\n        holder.entry = entry;\n        var count = 0;\n        var allBuffers = true;\n        while (entry) {\n          buffer[count] = entry;\n          if (!entry.isBuf)\n            allBuffers = false;\n          entry = entry.next;\n          count += 1;\n        }\n        buffer.allBuffers = allBuffers;\n        doWrite(stream, state, true, state.length, buffer, \"\", holder.finish);\n        state.pendingcb++;\n        state.lastBufferedRequest = null;\n        if (holder.next) {\n          state.corkedRequestsFree = holder.next;\n          holder.next = null;\n        } else {\n          state.corkedRequestsFree = new CorkedRequest(state);\n        }\n        state.bufferedRequestCount = 0;\n      } else {\n        while (entry) {\n          var chunk = entry.chunk;\n          var encoding = entry.encoding;\n          var cb = entry.callback;\n          var len = state.objectMode ? 1 : chunk.length;\n          doWrite(stream, state, false, len, chunk, encoding, cb);\n          entry = entry.next;\n          state.bufferedRequestCount--;\n          if (state.writing) {\n            break;\n          }\n        }\n        if (entry === null)\n          state.lastBufferedRequest = null;\n      }\n      state.bufferedRequest = entry;\n      state.bufferProcessing = false;\n    }\n    Writable.prototype._write = function(chunk, encoding, cb) {\n      cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_write()\"));\n    };\n    Writable.prototype._writev = null;\n    Writable.prototype.end = function(chunk, encoding, cb) {\n      var state = this._writableState;\n      if (typeof chunk === \"function\") {\n        cb = chunk;\n        chunk = null;\n        encoding = null;\n      } else if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n      }\n      if (chunk !== null && chunk !== void 0)\n        this.write(chunk, encoding);\n      if (state.corked) {\n        state.corked = 1;\n        this.uncork();\n      }\n      if (!state.ending)\n        endWritable(this, state, cb);\n      return this;\n    };\n    Object.defineProperty(Writable.prototype, \"writableLength\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._writableState.length;\n      }\n    });\n    function needFinish(state) {\n      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n    }\n    function callFinal(stream, state) {\n      stream._final(function(err) {\n        state.pendingcb--;\n        if (err) {\n          errorOrDestroy(stream, err);\n        }\n        state.prefinished = true;\n        stream.emit(\"prefinish\");\n        finishMaybe(stream, state);\n      });\n    }\n    function prefinish(stream, state) {\n      if (!state.prefinished && !state.finalCalled) {\n        if (typeof stream._final === \"function\" && !state.destroyed) {\n          state.pendingcb++;\n          state.finalCalled = true;\n          process.nextTick(callFinal, stream, state);\n        } else {\n          state.prefinished = true;\n          stream.emit(\"prefinish\");\n        }\n      }\n    }\n    function finishMaybe(stream, state) {\n      var need = needFinish(state);\n      if (need) {\n        prefinish(stream, state);\n        if (state.pendingcb === 0) {\n          state.finished = true;\n          stream.emit(\"finish\");\n          if (state.autoDestroy) {\n            var rState = stream._readableState;\n            if (!rState || rState.autoDestroy && rState.endEmitted) {\n              stream.destroy();\n            }\n          }\n        }\n      }\n      return need;\n    }\n    function endWritable(stream, state, cb) {\n      state.ending = true;\n      finishMaybe(stream, state);\n      if (cb) {\n        if (state.finished)\n          process.nextTick(cb);\n        else\n          stream.once(\"finish\", cb);\n      }\n      state.ended = true;\n      stream.writable = false;\n    }\n    function onCorkedFinish(corkReq, state, err) {\n      var entry = corkReq.entry;\n      corkReq.entry = null;\n      while (entry) {\n        var cb = entry.callback;\n        state.pendingcb--;\n        cb(err);\n        entry = entry.next;\n      }\n      state.corkedRequestsFree.next = corkReq;\n    }\n    Object.defineProperty(Writable.prototype, \"destroyed\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        if (this._writableState === void 0) {\n          return false;\n        }\n        return this._writableState.destroyed;\n      },\n      set: function set(value) {\n        if (!this._writableState) {\n          return;\n        }\n        this._writableState.destroyed = value;\n      }\n    });\n    Writable.prototype.destroy = destroyImpl.destroy;\n    Writable.prototype._undestroy = destroyImpl.undestroy;\n    Writable.prototype._destroy = function(err, cb) {\n      cb(err);\n    };\n  }\n});\n\n// node_modules/readable-stream/lib/_stream_duplex.js\nvar require_stream_duplex = __commonJS({\n  \"node_modules/readable-stream/lib/_stream_duplex.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var objectKeys = Object.keys || function(obj) {\n      var keys2 = [];\n      for (var key in obj)\n        keys2.push(key);\n      return keys2;\n    };\n    module.exports = Duplex;\n    var Readable = require_stream_readable();\n    var Writable = require_stream_writable();\n    require_inherits_browser()(Duplex, Readable);\n    {\n      keys = objectKeys(Writable.prototype);\n      for (v = 0; v < keys.length; v++) {\n        method = keys[v];\n        if (!Duplex.prototype[method])\n          Duplex.prototype[method] = Writable.prototype[method];\n      }\n    }\n    var keys;\n    var method;\n    var v;\n    function Duplex(options) {\n      if (!(this instanceof Duplex))\n        return new Duplex(options);\n      Readable.call(this, options);\n      Writable.call(this, options);\n      this.allowHalfOpen = true;\n      if (options) {\n        if (options.readable === false)\n          this.readable = false;\n        if (options.writable === false)\n          this.writable = false;\n        if (options.allowHalfOpen === false) {\n          this.allowHalfOpen = false;\n          this.once(\"end\", onend);\n        }\n      }\n    }\n    Object.defineProperty(Duplex.prototype, \"writableHighWaterMark\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._writableState.highWaterMark;\n      }\n    });\n    Object.defineProperty(Duplex.prototype, \"writableBuffer\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._writableState && this._writableState.getBuffer();\n      }\n    });\n    Object.defineProperty(Duplex.prototype, \"writableLength\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._writableState.length;\n      }\n    });\n    function onend() {\n      if (this._writableState.ended)\n        return;\n      process.nextTick(onEndNT, this);\n    }\n    function onEndNT(self2) {\n      self2.end();\n    }\n    Object.defineProperty(Duplex.prototype, \"destroyed\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        if (this._readableState === void 0 || this._writableState === void 0) {\n          return false;\n        }\n        return this._readableState.destroyed && this._writableState.destroyed;\n      },\n      set: function set(value) {\n        if (this._readableState === void 0 || this._writableState === void 0) {\n          return;\n        }\n        this._readableState.destroyed = value;\n        this._writableState.destroyed = value;\n      }\n    });\n  }\n});\n\n// node_modules/string_decoder/lib/string_decoder.js\nvar require_string_decoder = __commonJS({\n  \"node_modules/string_decoder/lib/string_decoder.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var isEncoding = Buffer2.isEncoding || function(encoding) {\n      encoding = \"\" + encoding;\n      switch (encoding && encoding.toLowerCase()) {\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n        case \"raw\":\n          return true;\n        default:\n          return false;\n      }\n    };\n    function _normalizeEncoding(enc) {\n      if (!enc)\n        return \"utf8\";\n      var retried;\n      while (true) {\n        switch (enc) {\n          case \"utf8\":\n          case \"utf-8\":\n            return \"utf8\";\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return \"utf16le\";\n          case \"latin1\":\n          case \"binary\":\n            return \"latin1\";\n          case \"base64\":\n          case \"ascii\":\n          case \"hex\":\n            return enc;\n          default:\n            if (retried)\n              return;\n            enc = (\"\" + enc).toLowerCase();\n            retried = true;\n        }\n      }\n    }\n    function normalizeEncoding(enc) {\n      var nenc = _normalizeEncoding(enc);\n      if (typeof nenc !== \"string\" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))\n        throw new Error(\"Unknown encoding: \" + enc);\n      return nenc || enc;\n    }\n    exports.StringDecoder = StringDecoder;\n    function StringDecoder(encoding) {\n      this.encoding = normalizeEncoding(encoding);\n      var nb;\n      switch (this.encoding) {\n        case \"utf16le\":\n          this.text = utf16Text;\n          this.end = utf16End;\n          nb = 4;\n          break;\n        case \"utf8\":\n          this.fillLast = utf8FillLast;\n          nb = 4;\n          break;\n        case \"base64\":\n          this.text = base64Text;\n          this.end = base64End;\n          nb = 3;\n          break;\n        default:\n          this.write = simpleWrite;\n          this.end = simpleEnd;\n          return;\n      }\n      this.lastNeed = 0;\n      this.lastTotal = 0;\n      this.lastChar = Buffer2.allocUnsafe(nb);\n    }\n    StringDecoder.prototype.write = function(buf) {\n      if (buf.length === 0)\n        return \"\";\n      var r;\n      var i;\n      if (this.lastNeed) {\n        r = this.fillLast(buf);\n        if (r === void 0)\n          return \"\";\n        i = this.lastNeed;\n        this.lastNeed = 0;\n      } else {\n        i = 0;\n      }\n      if (i < buf.length)\n        return r ? r + this.text(buf, i) : this.text(buf, i);\n      return r || \"\";\n    };\n    StringDecoder.prototype.end = utf8End;\n    StringDecoder.prototype.text = utf8Text;\n    StringDecoder.prototype.fillLast = function(buf) {\n      if (this.lastNeed <= buf.length) {\n        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n        return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n      }\n      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n      this.lastNeed -= buf.length;\n    };\n    function utf8CheckByte(byte) {\n      if (byte <= 127)\n        return 0;\n      else if (byte >> 5 === 6)\n        return 2;\n      else if (byte >> 4 === 14)\n        return 3;\n      else if (byte >> 3 === 30)\n        return 4;\n      return byte >> 6 === 2 ? -1 : -2;\n    }\n    function utf8CheckIncomplete(self2, buf, i) {\n      var j = buf.length - 1;\n      if (j < i)\n        return 0;\n      var nb = utf8CheckByte(buf[j]);\n      if (nb >= 0) {\n        if (nb > 0)\n          self2.lastNeed = nb - 1;\n        return nb;\n      }\n      if (--j < i || nb === -2)\n        return 0;\n      nb = utf8CheckByte(buf[j]);\n      if (nb >= 0) {\n        if (nb > 0)\n          self2.lastNeed = nb - 2;\n        return nb;\n      }\n      if (--j < i || nb === -2)\n        return 0;\n      nb = utf8CheckByte(buf[j]);\n      if (nb >= 0) {\n        if (nb > 0) {\n          if (nb === 2)\n            nb = 0;\n          else\n            self2.lastNeed = nb - 3;\n        }\n        return nb;\n      }\n      return 0;\n    }\n    function utf8CheckExtraBytes(self2, buf, p) {\n      if ((buf[0] & 192) !== 128) {\n        self2.lastNeed = 0;\n        return \"�\";\n      }\n      if (self2.lastNeed > 1 && buf.length > 1) {\n        if ((buf[1] & 192) !== 128) {\n          self2.lastNeed = 1;\n          return \"�\";\n        }\n        if (self2.lastNeed > 2 && buf.length > 2) {\n          if ((buf[2] & 192) !== 128) {\n            self2.lastNeed = 2;\n            return \"�\";\n          }\n        }\n      }\n    }\n    function utf8FillLast(buf) {\n      var p = this.lastTotal - this.lastNeed;\n      var r = utf8CheckExtraBytes(this, buf, p);\n      if (r !== void 0)\n        return r;\n      if (this.lastNeed <= buf.length) {\n        buf.copy(this.lastChar, p, 0, this.lastNeed);\n        return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n      }\n      buf.copy(this.lastChar, p, 0, buf.length);\n      this.lastNeed -= buf.length;\n    }\n    function utf8Text(buf, i) {\n      var total = utf8CheckIncomplete(this, buf, i);\n      if (!this.lastNeed)\n        return buf.toString(\"utf8\", i);\n      this.lastTotal = total;\n      var end = buf.length - (total - this.lastNeed);\n      buf.copy(this.lastChar, 0, end);\n      return buf.toString(\"utf8\", i, end);\n    }\n    function utf8End(buf) {\n      var r = buf && buf.length ? this.write(buf) : \"\";\n      if (this.lastNeed)\n        return r + \"�\";\n      return r;\n    }\n    function utf16Text(buf, i) {\n      if ((buf.length - i) % 2 === 0) {\n        var r = buf.toString(\"utf16le\", i);\n        if (r) {\n          var c = r.charCodeAt(r.length - 1);\n          if (c >= 55296 && c <= 56319) {\n            this.lastNeed = 2;\n            this.lastTotal = 4;\n            this.lastChar[0] = buf[buf.length - 2];\n            this.lastChar[1] = buf[buf.length - 1];\n            return r.slice(0, -1);\n          }\n        }\n        return r;\n      }\n      this.lastNeed = 1;\n      this.lastTotal = 2;\n      this.lastChar[0] = buf[buf.length - 1];\n      return buf.toString(\"utf16le\", i, buf.length - 1);\n    }\n    function utf16End(buf) {\n      var r = buf && buf.length ? this.write(buf) : \"\";\n      if (this.lastNeed) {\n        var end = this.lastTotal - this.lastNeed;\n        return r + this.lastChar.toString(\"utf16le\", 0, end);\n      }\n      return r;\n    }\n    function base64Text(buf, i) {\n      var n = (buf.length - i) % 3;\n      if (n === 0)\n        return buf.toString(\"base64\", i);\n      this.lastNeed = 3 - n;\n      this.lastTotal = 3;\n      if (n === 1) {\n        this.lastChar[0] = buf[buf.length - 1];\n      } else {\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n      }\n      return buf.toString(\"base64\", i, buf.length - n);\n    }\n    function base64End(buf) {\n      var r = buf && buf.length ? this.write(buf) : \"\";\n      if (this.lastNeed)\n        return r + this.lastChar.toString(\"base64\", 0, 3 - this.lastNeed);\n      return r;\n    }\n    function simpleWrite(buf) {\n      return buf.toString(this.encoding);\n    }\n    function simpleEnd(buf) {\n      return buf && buf.length ? this.write(buf) : \"\";\n    }\n  }\n});\n\n// node_modules/readable-stream/lib/internal/streams/end-of-stream.js\nvar require_end_of_stream = __commonJS({\n  \"node_modules/readable-stream/lib/internal/streams/end-of-stream.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;\n    function once(callback) {\n      var called = false;\n      return function() {\n        if (called)\n          return;\n        called = true;\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        callback.apply(this, args);\n      };\n    }\n    function noop() {\n    }\n    function isRequest(stream) {\n      return stream.setHeader && typeof stream.abort === \"function\";\n    }\n    function eos(stream, opts, callback) {\n      if (typeof opts === \"function\")\n        return eos(stream, null, opts);\n      if (!opts)\n        opts = {};\n      callback = once(callback || noop);\n      var readable = opts.readable || opts.readable !== false && stream.readable;\n      var writable = opts.writable || opts.writable !== false && stream.writable;\n      var onlegacyfinish = function onlegacyfinish2() {\n        if (!stream.writable)\n          onfinish();\n      };\n      var writableEnded = stream._writableState && stream._writableState.finished;\n      var onfinish = function onfinish2() {\n        writable = false;\n        writableEnded = true;\n        if (!readable)\n          callback.call(stream);\n      };\n      var readableEnded = stream._readableState && stream._readableState.endEmitted;\n      var onend = function onend2() {\n        readable = false;\n        readableEnded = true;\n        if (!writable)\n          callback.call(stream);\n      };\n      var onerror = function onerror2(err) {\n        callback.call(stream, err);\n      };\n      var onclose = function onclose2() {\n        var err;\n        if (readable && !readableEnded) {\n          if (!stream._readableState || !stream._readableState.ended)\n            err = new ERR_STREAM_PREMATURE_CLOSE();\n          return callback.call(stream, err);\n        }\n        if (writable && !writableEnded) {\n          if (!stream._writableState || !stream._writableState.ended)\n            err = new ERR_STREAM_PREMATURE_CLOSE();\n          return callback.call(stream, err);\n        }\n      };\n      var onrequest = function onrequest2() {\n        stream.req.on(\"finish\", onfinish);\n      };\n      if (isRequest(stream)) {\n        stream.on(\"complete\", onfinish);\n        stream.on(\"abort\", onclose);\n        if (stream.req)\n          onrequest();\n        else\n          stream.on(\"request\", onrequest);\n      } else if (writable && !stream._writableState) {\n        stream.on(\"end\", onlegacyfinish);\n        stream.on(\"close\", onlegacyfinish);\n      }\n      stream.on(\"end\", onend);\n      stream.on(\"finish\", onfinish);\n      if (opts.error !== false)\n        stream.on(\"error\", onerror);\n      stream.on(\"close\", onclose);\n      return function() {\n        stream.removeListener(\"complete\", onfinish);\n        stream.removeListener(\"abort\", onclose);\n        stream.removeListener(\"request\", onrequest);\n        if (stream.req)\n          stream.req.removeListener(\"finish\", onfinish);\n        stream.removeListener(\"end\", onlegacyfinish);\n        stream.removeListener(\"close\", onlegacyfinish);\n        stream.removeListener(\"finish\", onfinish);\n        stream.removeListener(\"end\", onend);\n        stream.removeListener(\"error\", onerror);\n        stream.removeListener(\"close\", onclose);\n      };\n    }\n    module.exports = eos;\n  }\n});\n\n// node_modules/readable-stream/lib/internal/streams/async_iterator.js\nvar require_async_iterator = __commonJS({\n  \"node_modules/readable-stream/lib/internal/streams/async_iterator.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var _Object$setPrototypeO;\n    function _defineProperty(obj, key, value) {\n      key = _toPropertyKey(key);\n      if (key in obj) {\n        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });\n      } else {\n        obj[key] = value;\n      }\n      return obj;\n    }\n    function _toPropertyKey(arg) {\n      var key = _toPrimitive(arg, \"string\");\n      return typeof key === \"symbol\" ? key : String(key);\n    }\n    function _toPrimitive(input, hint) {\n      if (typeof input !== \"object\" || input === null)\n        return input;\n      var prim = input[Symbol.toPrimitive];\n      if (prim !== void 0) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\")\n          return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n      }\n      return (hint === \"string\" ? String : Number)(input);\n    }\n    var finished = require_end_of_stream();\n    var kLastResolve = Symbol(\"lastResolve\");\n    var kLastReject = Symbol(\"lastReject\");\n    var kError = Symbol(\"error\");\n    var kEnded = Symbol(\"ended\");\n    var kLastPromise = Symbol(\"lastPromise\");\n    var kHandlePromise = Symbol(\"handlePromise\");\n    var kStream = Symbol(\"stream\");\n    function createIterResult(value, done) {\n      return {\n        value,\n        done\n      };\n    }\n    function readAndResolve(iter) {\n      var resolve = iter[kLastResolve];\n      if (resolve !== null) {\n        var data = iter[kStream].read();\n        if (data !== null) {\n          iter[kLastPromise] = null;\n          iter[kLastResolve] = null;\n          iter[kLastReject] = null;\n          resolve(createIterResult(data, false));\n        }\n      }\n    }\n    function onReadable(iter) {\n      process.nextTick(readAndResolve, iter);\n    }\n    function wrapForNext(lastPromise, iter) {\n      return function(resolve, reject) {\n        lastPromise.then(function() {\n          if (iter[kEnded]) {\n            resolve(createIterResult(void 0, true));\n            return;\n          }\n          iter[kHandlePromise](resolve, reject);\n        }, reject);\n      };\n    }\n    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {\n    });\n    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n      get stream() {\n        return this[kStream];\n      },\n      next: function next() {\n        var _this = this;\n        var error = this[kError];\n        if (error !== null) {\n          return Promise.reject(error);\n        }\n        if (this[kEnded]) {\n          return Promise.resolve(createIterResult(void 0, true));\n        }\n        if (this[kStream].destroyed) {\n          return new Promise(function(resolve, reject) {\n            process.nextTick(function() {\n              if (_this[kError]) {\n                reject(_this[kError]);\n              } else {\n                resolve(createIterResult(void 0, true));\n              }\n            });\n          });\n        }\n        var lastPromise = this[kLastPromise];\n        var promise;\n        if (lastPromise) {\n          promise = new Promise(wrapForNext(lastPromise, this));\n        } else {\n          var data = this[kStream].read();\n          if (data !== null) {\n            return Promise.resolve(createIterResult(data, false));\n          }\n          promise = new Promise(this[kHandlePromise]);\n        }\n        this[kLastPromise] = promise;\n        return promise;\n      }\n    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {\n      return this;\n    }), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n      var _this2 = this;\n      return new Promise(function(resolve, reject) {\n        _this2[kStream].destroy(null, function(err) {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(createIterResult(void 0, true));\n        });\n      });\n    }), _Object$setPrototypeO), AsyncIteratorPrototype);\n    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {\n      var _Object$create;\n      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n        value: stream,\n        writable: true\n      }), _defineProperty(_Object$create, kLastResolve, {\n        value: null,\n        writable: true\n      }), _defineProperty(_Object$create, kLastReject, {\n        value: null,\n        writable: true\n      }), _defineProperty(_Object$create, kError, {\n        value: null,\n        writable: true\n      }), _defineProperty(_Object$create, kEnded, {\n        value: stream._readableState.endEmitted,\n        writable: true\n      }), _defineProperty(_Object$create, kHandlePromise, {\n        value: function value(resolve, reject) {\n          var data = iterator[kStream].read();\n          if (data) {\n            iterator[kLastPromise] = null;\n            iterator[kLastResolve] = null;\n            iterator[kLastReject] = null;\n            resolve(createIterResult(data, false));\n          } else {\n            iterator[kLastResolve] = resolve;\n            iterator[kLastReject] = reject;\n          }\n        },\n        writable: true\n      }), _Object$create));\n      iterator[kLastPromise] = null;\n      finished(stream, function(err) {\n        if (err && err.code !== \"ERR_STREAM_PREMATURE_CLOSE\") {\n          var reject = iterator[kLastReject];\n          if (reject !== null) {\n            iterator[kLastPromise] = null;\n            iterator[kLastResolve] = null;\n            iterator[kLastReject] = null;\n            reject(err);\n          }\n          iterator[kError] = err;\n          return;\n        }\n        var resolve = iterator[kLastResolve];\n        if (resolve !== null) {\n          iterator[kLastPromise] = null;\n          iterator[kLastResolve] = null;\n          iterator[kLastReject] = null;\n          resolve(createIterResult(void 0, true));\n        }\n        iterator[kEnded] = true;\n      });\n      stream.on(\"readable\", onReadable.bind(null, iterator));\n      return iterator;\n    };\n    module.exports = createReadableStreamAsyncIterator;\n  }\n});\n\n// node_modules/readable-stream/lib/internal/streams/from-browser.js\nvar require_from_browser = __commonJS({\n  \"node_modules/readable-stream/lib/internal/streams/from-browser.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = function() {\n      throw new Error(\"Readable.from is not available in the browser\");\n    };\n  }\n});\n\n// node_modules/readable-stream/lib/_stream_readable.js\nvar require_stream_readable = __commonJS({\n  \"node_modules/readable-stream/lib/_stream_readable.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = Readable;\n    var Duplex;\n    Readable.ReadableState = ReadableState;\n    var EE = require_events().EventEmitter;\n    var EElistenerCount = function EElistenerCount2(emitter, type) {\n      return emitter.listeners(type).length;\n    };\n    var Stream = require_stream_browser();\n    var Buffer2 = require_buffer_polyfill().Buffer;\n    var OurUint8Array = (typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : typeof self !== \"undefined\" ? self : {}).Uint8Array || function() {\n    };\n    function _uint8ArrayToBuffer(chunk) {\n      return Buffer2.from(chunk);\n    }\n    function _isUint8Array(obj) {\n      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;\n    }\n    var debugUtil = require_util();\n    var debug;\n    if (debugUtil && debugUtil.debuglog) {\n      debug = debugUtil.debuglog(\"stream\");\n    } else {\n      debug = function debug2() {\n      };\n    }\n    var BufferList = require_buffer_list();\n    var destroyImpl = require_destroy();\n    var _require = require_state();\n    var getHighWaterMark = _require.getHighWaterMark;\n    var _require$codes = require_errors_browser().codes;\n    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;\n    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;\n    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;\n    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n    var StringDecoder;\n    var createReadableStreamAsyncIterator;\n    var from;\n    require_inherits_browser()(Readable, Stream);\n    var errorOrDestroy = destroyImpl.errorOrDestroy;\n    var kProxyEvents = [\"error\", \"close\", \"destroy\", \"pause\", \"resume\"];\n    function prependListener(emitter, event, fn) {\n      if (typeof emitter.prependListener === \"function\")\n        return emitter.prependListener(event, fn);\n      if (!emitter._events || !emitter._events[event])\n        emitter.on(event, fn);\n      else if (Array.isArray(emitter._events[event]))\n        emitter._events[event].unshift(fn);\n      else\n        emitter._events[event] = [fn, emitter._events[event]];\n    }\n    function ReadableState(options, stream, isDuplex) {\n      Duplex = Duplex || require_stream_duplex();\n      options = options || {};\n      if (typeof isDuplex !== \"boolean\")\n        isDuplex = stream instanceof Duplex;\n      this.objectMode = !!options.objectMode;\n      if (isDuplex)\n        this.objectMode = this.objectMode || !!options.readableObjectMode;\n      this.highWaterMark = getHighWaterMark(this, options, \"readableHighWaterMark\", isDuplex);\n      this.buffer = new BufferList();\n      this.length = 0;\n      this.pipes = null;\n      this.pipesCount = 0;\n      this.flowing = null;\n      this.ended = false;\n      this.endEmitted = false;\n      this.reading = false;\n      this.sync = true;\n      this.needReadable = false;\n      this.emittedReadable = false;\n      this.readableListening = false;\n      this.resumeScheduled = false;\n      this.paused = true;\n      this.emitClose = options.emitClose !== false;\n      this.autoDestroy = !!options.autoDestroy;\n      this.destroyed = false;\n      this.defaultEncoding = options.defaultEncoding || \"utf8\";\n      this.awaitDrain = 0;\n      this.readingMore = false;\n      this.decoder = null;\n      this.encoding = null;\n      if (options.encoding) {\n        if (!StringDecoder)\n          StringDecoder = require_string_decoder().StringDecoder;\n        this.decoder = new StringDecoder(options.encoding);\n        this.encoding = options.encoding;\n      }\n    }\n    function Readable(options) {\n      Duplex = Duplex || require_stream_duplex();\n      if (!(this instanceof Readable))\n        return new Readable(options);\n      var isDuplex = this instanceof Duplex;\n      this._readableState = new ReadableState(options, this, isDuplex);\n      this.readable = true;\n      if (options) {\n        if (typeof options.read === \"function\")\n          this._read = options.read;\n        if (typeof options.destroy === \"function\")\n          this._destroy = options.destroy;\n      }\n      Stream.call(this);\n    }\n    Object.defineProperty(Readable.prototype, \"destroyed\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        if (this._readableState === void 0) {\n          return false;\n        }\n        return this._readableState.destroyed;\n      },\n      set: function set(value) {\n        if (!this._readableState) {\n          return;\n        }\n        this._readableState.destroyed = value;\n      }\n    });\n    Readable.prototype.destroy = destroyImpl.destroy;\n    Readable.prototype._undestroy = destroyImpl.undestroy;\n    Readable.prototype._destroy = function(err, cb) {\n      cb(err);\n    };\n    Readable.prototype.push = function(chunk, encoding) {\n      var state = this._readableState;\n      var skipChunkCheck;\n      if (!state.objectMode) {\n        if (typeof chunk === \"string\") {\n          encoding = encoding || state.defaultEncoding;\n          if (encoding !== state.encoding) {\n            chunk = Buffer2.from(chunk, encoding);\n            encoding = \"\";\n          }\n          skipChunkCheck = true;\n        }\n      } else {\n        skipChunkCheck = true;\n      }\n      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n    };\n    Readable.prototype.unshift = function(chunk) {\n      return readableAddChunk(this, chunk, null, true, false);\n    };\n    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n      debug(\"readableAddChunk\", chunk);\n      var state = stream._readableState;\n      if (chunk === null) {\n        state.reading = false;\n        onEofChunk(stream, state);\n      } else {\n        var er;\n        if (!skipChunkCheck)\n          er = chunkInvalid(state, chunk);\n        if (er) {\n          errorOrDestroy(stream, er);\n        } else if (state.objectMode || chunk && chunk.length > 0) {\n          if (typeof chunk !== \"string\" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {\n            chunk = _uint8ArrayToBuffer(chunk);\n          }\n          if (addToFront) {\n            if (state.endEmitted)\n              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());\n            else\n              addChunk(stream, state, chunk, true);\n          } else if (state.ended) {\n            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n          } else if (state.destroyed) {\n            return false;\n          } else {\n            state.reading = false;\n            if (state.decoder && !encoding) {\n              chunk = state.decoder.write(chunk);\n              if (state.objectMode || chunk.length !== 0)\n                addChunk(stream, state, chunk, false);\n              else\n                maybeReadMore(stream, state);\n            } else {\n              addChunk(stream, state, chunk, false);\n            }\n          }\n        } else if (!addToFront) {\n          state.reading = false;\n          maybeReadMore(stream, state);\n        }\n      }\n      return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n    }\n    function addChunk(stream, state, chunk, addToFront) {\n      if (state.flowing && state.length === 0 && !state.sync) {\n        state.awaitDrain = 0;\n        stream.emit(\"data\", chunk);\n      } else {\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront)\n          state.buffer.unshift(chunk);\n        else\n          state.buffer.push(chunk);\n        if (state.needReadable)\n          emitReadable(stream);\n      }\n      maybeReadMore(stream, state);\n    }\n    function chunkInvalid(state, chunk) {\n      var er;\n      if (!_isUint8Array(chunk) && typeof chunk !== \"string\" && chunk !== void 0 && !state.objectMode) {\n        er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\"string\", \"Buffer\", \"Uint8Array\"], chunk);\n      }\n      return er;\n    }\n    Readable.prototype.isPaused = function() {\n      return this._readableState.flowing === false;\n    };\n    Readable.prototype.setEncoding = function(enc) {\n      if (!StringDecoder)\n        StringDecoder = require_string_decoder().StringDecoder;\n      var decoder = new StringDecoder(enc);\n      this._readableState.decoder = decoder;\n      this._readableState.encoding = this._readableState.decoder.encoding;\n      var p = this._readableState.buffer.head;\n      var content = \"\";\n      while (p !== null) {\n        content += decoder.write(p.data);\n        p = p.next;\n      }\n      this._readableState.buffer.clear();\n      if (content !== \"\")\n        this._readableState.buffer.push(content);\n      this._readableState.length = content.length;\n      return this;\n    };\n    var MAX_HWM = 1073741824;\n    function computeNewHighWaterMark(n) {\n      if (n >= MAX_HWM) {\n        n = MAX_HWM;\n      } else {\n        n--;\n        n |= n >>> 1;\n        n |= n >>> 2;\n        n |= n >>> 4;\n        n |= n >>> 8;\n        n |= n >>> 16;\n        n++;\n      }\n      return n;\n    }\n    function howMuchToRead(n, state) {\n      if (n <= 0 || state.length === 0 && state.ended)\n        return 0;\n      if (state.objectMode)\n        return 1;\n      if (n !== n) {\n        if (state.flowing && state.length)\n          return state.buffer.head.data.length;\n        else\n          return state.length;\n      }\n      if (n > state.highWaterMark)\n        state.highWaterMark = computeNewHighWaterMark(n);\n      if (n <= state.length)\n        return n;\n      if (!state.ended) {\n        state.needReadable = true;\n        return 0;\n      }\n      return state.length;\n    }\n    Readable.prototype.read = function(n) {\n      debug(\"read\", n);\n      n = parseInt(n, 10);\n      var state = this._readableState;\n      var nOrig = n;\n      if (n !== 0)\n        state.emittedReadable = false;\n      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n        debug(\"read: emitReadable\", state.length, state.ended);\n        if (state.length === 0 && state.ended)\n          endReadable(this);\n        else\n          emitReadable(this);\n        return null;\n      }\n      n = howMuchToRead(n, state);\n      if (n === 0 && state.ended) {\n        if (state.length === 0)\n          endReadable(this);\n        return null;\n      }\n      var doRead = state.needReadable;\n      debug(\"need readable\", doRead);\n      if (state.length === 0 || state.length - n < state.highWaterMark) {\n        doRead = true;\n        debug(\"length less than watermark\", doRead);\n      }\n      if (state.ended || state.reading) {\n        doRead = false;\n        debug(\"reading or ended\", doRead);\n      } else if (doRead) {\n        debug(\"do read\");\n        state.reading = true;\n        state.sync = true;\n        if (state.length === 0)\n          state.needReadable = true;\n        this._read(state.highWaterMark);\n        state.sync = false;\n        if (!state.reading)\n          n = howMuchToRead(nOrig, state);\n      }\n      var ret;\n      if (n > 0)\n        ret = fromList(n, state);\n      else\n        ret = null;\n      if (ret === null) {\n        state.needReadable = state.length <= state.highWaterMark;\n        n = 0;\n      } else {\n        state.length -= n;\n        state.awaitDrain = 0;\n      }\n      if (state.length === 0) {\n        if (!state.ended)\n          state.needReadable = true;\n        if (nOrig !== n && state.ended)\n          endReadable(this);\n      }\n      if (ret !== null)\n        this.emit(\"data\", ret);\n      return ret;\n    };\n    function onEofChunk(stream, state) {\n      debug(\"onEofChunk\");\n      if (state.ended)\n        return;\n      if (state.decoder) {\n        var chunk = state.decoder.end();\n        if (chunk && chunk.length) {\n          state.buffer.push(chunk);\n          state.length += state.objectMode ? 1 : chunk.length;\n        }\n      }\n      state.ended = true;\n      if (state.sync) {\n        emitReadable(stream);\n      } else {\n        state.needReadable = false;\n        if (!state.emittedReadable) {\n          state.emittedReadable = true;\n          emitReadable_(stream);\n        }\n      }\n    }\n    function emitReadable(stream) {\n      var state = stream._readableState;\n      debug(\"emitReadable\", state.needReadable, state.emittedReadable);\n      state.needReadable = false;\n      if (!state.emittedReadable) {\n        debug(\"emitReadable\", state.flowing);\n        state.emittedReadable = true;\n        process.nextTick(emitReadable_, stream);\n      }\n    }\n    function emitReadable_(stream) {\n      var state = stream._readableState;\n      debug(\"emitReadable_\", state.destroyed, state.length, state.ended);\n      if (!state.destroyed && (state.length || state.ended)) {\n        stream.emit(\"readable\");\n        state.emittedReadable = false;\n      }\n      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n      flow(stream);\n    }\n    function maybeReadMore(stream, state) {\n      if (!state.readingMore) {\n        state.readingMore = true;\n        process.nextTick(maybeReadMore_, stream, state);\n      }\n    }\n    function maybeReadMore_(stream, state) {\n      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n        var len = state.length;\n        debug(\"maybeReadMore read 0\");\n        stream.read(0);\n        if (len === state.length)\n          break;\n      }\n      state.readingMore = false;\n    }\n    Readable.prototype._read = function(n) {\n      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED(\"_read()\"));\n    };\n    Readable.prototype.pipe = function(dest, pipeOpts) {\n      var src = this;\n      var state = this._readableState;\n      switch (state.pipesCount) {\n        case 0:\n          state.pipes = dest;\n          break;\n        case 1:\n          state.pipes = [state.pipes, dest];\n          break;\n        default:\n          state.pipes.push(dest);\n          break;\n      }\n      state.pipesCount += 1;\n      debug(\"pipe count=%d opts=%j\", state.pipesCount, pipeOpts);\n      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n      var endFn = doEnd ? onend : unpipe;\n      if (state.endEmitted)\n        process.nextTick(endFn);\n      else\n        src.once(\"end\", endFn);\n      dest.on(\"unpipe\", onunpipe);\n      function onunpipe(readable, unpipeInfo) {\n        debug(\"onunpipe\");\n        if (readable === src) {\n          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n            unpipeInfo.hasUnpiped = true;\n            cleanup();\n          }\n        }\n      }\n      function onend() {\n        debug(\"onend\");\n        dest.end();\n      }\n      var ondrain = pipeOnDrain(src);\n      dest.on(\"drain\", ondrain);\n      var cleanedUp = false;\n      function cleanup() {\n        debug(\"cleanup\");\n        dest.removeListener(\"close\", onclose);\n        dest.removeListener(\"finish\", onfinish);\n        dest.removeListener(\"drain\", ondrain);\n        dest.removeListener(\"error\", onerror);\n        dest.removeListener(\"unpipe\", onunpipe);\n        src.removeListener(\"end\", onend);\n        src.removeListener(\"end\", unpipe);\n        src.removeListener(\"data\", ondata);\n        cleanedUp = true;\n        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))\n          ondrain();\n      }\n      src.on(\"data\", ondata);\n      function ondata(chunk) {\n        debug(\"ondata\");\n        var ret = dest.write(chunk);\n        debug(\"dest.write\", ret);\n        if (ret === false) {\n          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n            debug(\"false write response, pause\", state.awaitDrain);\n            state.awaitDrain++;\n          }\n          src.pause();\n        }\n      }\n      function onerror(er) {\n        debug(\"onerror\", er);\n        unpipe();\n        dest.removeListener(\"error\", onerror);\n        if (EElistenerCount(dest, \"error\") === 0)\n          errorOrDestroy(dest, er);\n      }\n      prependListener(dest, \"error\", onerror);\n      function onclose() {\n        dest.removeListener(\"finish\", onfinish);\n        unpipe();\n      }\n      dest.once(\"close\", onclose);\n      function onfinish() {\n        debug(\"onfinish\");\n        dest.removeListener(\"close\", onclose);\n        unpipe();\n      }\n      dest.once(\"finish\", onfinish);\n      function unpipe() {\n        debug(\"unpipe\");\n        src.unpipe(dest);\n      }\n      dest.emit(\"pipe\", src);\n      if (!state.flowing) {\n        debug(\"pipe resume\");\n        src.resume();\n      }\n      return dest;\n    };\n    function pipeOnDrain(src) {\n      return function pipeOnDrainFunctionResult() {\n        var state = src._readableState;\n        debug(\"pipeOnDrain\", state.awaitDrain);\n        if (state.awaitDrain)\n          state.awaitDrain--;\n        if (state.awaitDrain === 0 && EElistenerCount(src, \"data\")) {\n          state.flowing = true;\n          flow(src);\n        }\n      };\n    }\n    Readable.prototype.unpipe = function(dest) {\n      var state = this._readableState;\n      var unpipeInfo = {\n        hasUnpiped: false\n      };\n      if (state.pipesCount === 0)\n        return this;\n      if (state.pipesCount === 1) {\n        if (dest && dest !== state.pipes)\n          return this;\n        if (!dest)\n          dest = state.pipes;\n        state.pipes = null;\n        state.pipesCount = 0;\n        state.flowing = false;\n        if (dest)\n          dest.emit(\"unpipe\", this, unpipeInfo);\n        return this;\n      }\n      if (!dest) {\n        var dests = state.pipes;\n        var len = state.pipesCount;\n        state.pipes = null;\n        state.pipesCount = 0;\n        state.flowing = false;\n        for (var i = 0; i < len; i++)\n          dests[i].emit(\"unpipe\", this, {\n            hasUnpiped: false\n          });\n        return this;\n      }\n      var index = indexOf(state.pipes, dest);\n      if (index === -1)\n        return this;\n      state.pipes.splice(index, 1);\n      state.pipesCount -= 1;\n      if (state.pipesCount === 1)\n        state.pipes = state.pipes[0];\n      dest.emit(\"unpipe\", this, unpipeInfo);\n      return this;\n    };\n    Readable.prototype.on = function(ev, fn) {\n      var res = Stream.prototype.on.call(this, ev, fn);\n      var state = this._readableState;\n      if (ev === \"data\") {\n        state.readableListening = this.listenerCount(\"readable\") > 0;\n        if (state.flowing !== false)\n          this.resume();\n      } else if (ev === \"readable\") {\n        if (!state.endEmitted && !state.readableListening) {\n          state.readableListening = state.needReadable = true;\n          state.flowing = false;\n          state.emittedReadable = false;\n          debug(\"on readable\", state.length, state.reading);\n          if (state.length) {\n            emitReadable(this);\n          } else if (!state.reading) {\n            process.nextTick(nReadingNextTick, this);\n          }\n        }\n      }\n      return res;\n    };\n    Readable.prototype.addListener = Readable.prototype.on;\n    Readable.prototype.removeListener = function(ev, fn) {\n      var res = Stream.prototype.removeListener.call(this, ev, fn);\n      if (ev === \"readable\") {\n        process.nextTick(updateReadableListening, this);\n      }\n      return res;\n    };\n    Readable.prototype.removeAllListeners = function(ev) {\n      var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n      if (ev === \"readable\" || ev === void 0) {\n        process.nextTick(updateReadableListening, this);\n      }\n      return res;\n    };\n    function updateReadableListening(self2) {\n      var state = self2._readableState;\n      state.readableListening = self2.listenerCount(\"readable\") > 0;\n      if (state.resumeScheduled && !state.paused) {\n        state.flowing = true;\n      } else if (self2.listenerCount(\"data\") > 0) {\n        self2.resume();\n      }\n    }\n    function nReadingNextTick(self2) {\n      debug(\"readable nexttick read 0\");\n      self2.read(0);\n    }\n    Readable.prototype.resume = function() {\n      var state = this._readableState;\n      if (!state.flowing) {\n        debug(\"resume\");\n        state.flowing = !state.readableListening;\n        resume(this, state);\n      }\n      state.paused = false;\n      return this;\n    };\n    function resume(stream, state) {\n      if (!state.resumeScheduled) {\n        state.resumeScheduled = true;\n        process.nextTick(resume_, stream, state);\n      }\n    }\n    function resume_(stream, state) {\n      debug(\"resume\", state.reading);\n      if (!state.reading) {\n        stream.read(0);\n      }\n      state.resumeScheduled = false;\n      stream.emit(\"resume\");\n      flow(stream);\n      if (state.flowing && !state.reading)\n        stream.read(0);\n    }\n    Readable.prototype.pause = function() {\n      debug(\"call pause flowing=%j\", this._readableState.flowing);\n      if (this._readableState.flowing !== false) {\n        debug(\"pause\");\n        this._readableState.flowing = false;\n        this.emit(\"pause\");\n      }\n      this._readableState.paused = true;\n      return this;\n    };\n    function flow(stream) {\n      var state = stream._readableState;\n      debug(\"flow\", state.flowing);\n      while (state.flowing && stream.read() !== null)\n        ;\n    }\n    Readable.prototype.wrap = function(stream) {\n      var _this = this;\n      var state = this._readableState;\n      var paused = false;\n      stream.on(\"end\", function() {\n        debug(\"wrapped end\");\n        if (state.decoder && !state.ended) {\n          var chunk = state.decoder.end();\n          if (chunk && chunk.length)\n            _this.push(chunk);\n        }\n        _this.push(null);\n      });\n      stream.on(\"data\", function(chunk) {\n        debug(\"wrapped data\");\n        if (state.decoder)\n          chunk = state.decoder.write(chunk);\n        if (state.objectMode && (chunk === null || chunk === void 0))\n          return;\n        else if (!state.objectMode && (!chunk || !chunk.length))\n          return;\n        var ret = _this.push(chunk);\n        if (!ret) {\n          paused = true;\n          stream.pause();\n        }\n      });\n      for (var i in stream) {\n        if (this[i] === void 0 && typeof stream[i] === \"function\") {\n          this[i] = /* @__PURE__ */ function methodWrap(method) {\n            return function methodWrapReturnFunction() {\n              return stream[method].apply(stream, arguments);\n            };\n          }(i);\n        }\n      }\n      for (var n = 0; n < kProxyEvents.length; n++) {\n        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n      }\n      this._read = function(n2) {\n        debug(\"wrapped _read\", n2);\n        if (paused) {\n          paused = false;\n          stream.resume();\n        }\n      };\n      return this;\n    };\n    if (typeof Symbol === \"function\") {\n      Readable.prototype[Symbol.asyncIterator] = function() {\n        if (createReadableStreamAsyncIterator === void 0) {\n          createReadableStreamAsyncIterator = require_async_iterator();\n        }\n        return createReadableStreamAsyncIterator(this);\n      };\n    }\n    Object.defineProperty(Readable.prototype, \"readableHighWaterMark\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._readableState.highWaterMark;\n      }\n    });\n    Object.defineProperty(Readable.prototype, \"readableBuffer\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._readableState && this._readableState.buffer;\n      }\n    });\n    Object.defineProperty(Readable.prototype, \"readableFlowing\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._readableState.flowing;\n      },\n      set: function set(state) {\n        if (this._readableState) {\n          this._readableState.flowing = state;\n        }\n      }\n    });\n    Readable._fromList = fromList;\n    Object.defineProperty(Readable.prototype, \"readableLength\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._readableState.length;\n      }\n    });\n    function fromList(n, state) {\n      if (state.length === 0)\n        return null;\n      var ret;\n      if (state.objectMode)\n        ret = state.buffer.shift();\n      else if (!n || n >= state.length) {\n        if (state.decoder)\n          ret = state.buffer.join(\"\");\n        else if (state.buffer.length === 1)\n          ret = state.buffer.first();\n        else\n          ret = state.buffer.concat(state.length);\n        state.buffer.clear();\n      } else {\n        ret = state.buffer.consume(n, state.decoder);\n      }\n      return ret;\n    }\n    function endReadable(stream) {\n      var state = stream._readableState;\n      debug(\"endReadable\", state.endEmitted);\n      if (!state.endEmitted) {\n        state.ended = true;\n        process.nextTick(endReadableNT, state, stream);\n      }\n    }\n    function endReadableNT(state, stream) {\n      debug(\"endReadableNT\", state.endEmitted, state.length);\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit(\"end\");\n        if (state.autoDestroy) {\n          var wState = stream._writableState;\n          if (!wState || wState.autoDestroy && wState.finished) {\n            stream.destroy();\n          }\n        }\n      }\n    }\n    if (typeof Symbol === \"function\") {\n      Readable.from = function(iterable, opts) {\n        if (from === void 0) {\n          from = require_from_browser();\n        }\n        return from(Readable, iterable, opts);\n      };\n    }\n    function indexOf(xs, x) {\n      for (var i = 0, l = xs.length; i < l; i++) {\n        if (xs[i] === x)\n          return i;\n      }\n      return -1;\n    }\n  }\n});\n\n// node_modules/readable-stream/lib/_stream_transform.js\nvar require_stream_transform = __commonJS({\n  \"node_modules/readable-stream/lib/_stream_transform.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = Transform;\n    var _require$codes = require_errors_browser().codes;\n    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;\n    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;\n    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;\n    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n    var Duplex = require_stream_duplex();\n    require_inherits_browser()(Transform, Duplex);\n    function afterTransform(er, data) {\n      var ts = this._transformState;\n      ts.transforming = false;\n      var cb = ts.writecb;\n      if (cb === null) {\n        return this.emit(\"error\", new ERR_MULTIPLE_CALLBACK());\n      }\n      ts.writechunk = null;\n      ts.writecb = null;\n      if (data != null)\n        this.push(data);\n      cb(er);\n      var rs = this._readableState;\n      rs.reading = false;\n      if (rs.needReadable || rs.length < rs.highWaterMark) {\n        this._read(rs.highWaterMark);\n      }\n    }\n    function Transform(options) {\n      if (!(this instanceof Transform))\n        return new Transform(options);\n      Duplex.call(this, options);\n      this._transformState = {\n        afterTransform: afterTransform.bind(this),\n        needTransform: false,\n        transforming: false,\n        writecb: null,\n        writechunk: null,\n        writeencoding: null\n      };\n      this._readableState.needReadable = true;\n      this._readableState.sync = false;\n      if (options) {\n        if (typeof options.transform === \"function\")\n          this._transform = options.transform;\n        if (typeof options.flush === \"function\")\n          this._flush = options.flush;\n      }\n      this.on(\"prefinish\", prefinish);\n    }\n    function prefinish() {\n      var _this = this;\n      if (typeof this._flush === \"function\" && !this._readableState.destroyed) {\n        this._flush(function(er, data) {\n          done(_this, er, data);\n        });\n      } else {\n        done(this, null, null);\n      }\n    }\n    Transform.prototype.push = function(chunk, encoding) {\n      this._transformState.needTransform = false;\n      return Duplex.prototype.push.call(this, chunk, encoding);\n    };\n    Transform.prototype._transform = function(chunk, encoding, cb) {\n      cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_transform()\"));\n    };\n    Transform.prototype._write = function(chunk, encoding, cb) {\n      var ts = this._transformState;\n      ts.writecb = cb;\n      ts.writechunk = chunk;\n      ts.writeencoding = encoding;\n      if (!ts.transforming) {\n        var rs = this._readableState;\n        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)\n          this._read(rs.highWaterMark);\n      }\n    };\n    Transform.prototype._read = function(n) {\n      var ts = this._transformState;\n      if (ts.writechunk !== null && !ts.transforming) {\n        ts.transforming = true;\n        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n      } else {\n        ts.needTransform = true;\n      }\n    };\n    Transform.prototype._destroy = function(err, cb) {\n      Duplex.prototype._destroy.call(this, err, function(err2) {\n        cb(err2);\n      });\n    };\n    function done(stream, er, data) {\n      if (er)\n        return stream.emit(\"error\", er);\n      if (data != null)\n        stream.push(data);\n      if (stream._writableState.length)\n        throw new ERR_TRANSFORM_WITH_LENGTH_0();\n      if (stream._transformState.transforming)\n        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n      return stream.push(null);\n    }\n  }\n});\n\n// node_modules/readable-stream/lib/_stream_passthrough.js\nvar require_stream_passthrough = __commonJS({\n  \"node_modules/readable-stream/lib/_stream_passthrough.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = PassThrough;\n    var Transform = require_stream_transform();\n    require_inherits_browser()(PassThrough, Transform);\n    function PassThrough(options) {\n      if (!(this instanceof PassThrough))\n        return new PassThrough(options);\n      Transform.call(this, options);\n    }\n    PassThrough.prototype._transform = function(chunk, encoding, cb) {\n      cb(null, chunk);\n    };\n  }\n});\n\n// node_modules/readable-stream/lib/internal/streams/pipeline.js\nvar require_pipeline = __commonJS({\n  \"node_modules/readable-stream/lib/internal/streams/pipeline.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var eos;\n    function once(callback) {\n      var called = false;\n      return function() {\n        if (called)\n          return;\n        called = true;\n        callback.apply(void 0, arguments);\n      };\n    }\n    var _require$codes = require_errors_browser().codes;\n    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;\n    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n    function noop(err) {\n      if (err)\n        throw err;\n    }\n    function isRequest(stream) {\n      return stream.setHeader && typeof stream.abort === \"function\";\n    }\n    function destroyer(stream, reading, writing, callback) {\n      callback = once(callback);\n      var closed = false;\n      stream.on(\"close\", function() {\n        closed = true;\n      });\n      if (eos === void 0)\n        eos = require_end_of_stream();\n      eos(stream, {\n        readable: reading,\n        writable: writing\n      }, function(err) {\n        if (err)\n          return callback(err);\n        closed = true;\n        callback();\n      });\n      var destroyed = false;\n      return function(err) {\n        if (closed)\n          return;\n        if (destroyed)\n          return;\n        destroyed = true;\n        if (isRequest(stream))\n          return stream.abort();\n        if (typeof stream.destroy === \"function\")\n          return stream.destroy();\n        callback(err || new ERR_STREAM_DESTROYED(\"pipe\"));\n      };\n    }\n    function call(fn) {\n      fn();\n    }\n    function pipe(from, to) {\n      return from.pipe(to);\n    }\n    function popCallback(streams) {\n      if (!streams.length)\n        return noop;\n      if (typeof streams[streams.length - 1] !== \"function\")\n        return noop;\n      return streams.pop();\n    }\n    function pipeline() {\n      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n        streams[_key] = arguments[_key];\n      }\n      var callback = popCallback(streams);\n      if (Array.isArray(streams[0]))\n        streams = streams[0];\n      if (streams.length < 2) {\n        throw new ERR_MISSING_ARGS(\"streams\");\n      }\n      var error;\n      var destroys = streams.map(function(stream, i) {\n        var reading = i < streams.length - 1;\n        var writing = i > 0;\n        return destroyer(stream, reading, writing, function(err) {\n          if (!error)\n            error = err;\n          if (err)\n            destroys.forEach(call);\n          if (reading)\n            return;\n          destroys.forEach(call);\n          callback(error);\n        });\n      });\n      return streams.reduce(pipe);\n    }\n    module.exports = pipeline;\n  }\n});\n\n// node_modules/readable-stream/readable-browser.js\nvar require_readable_browser = __commonJS({\n  \"node_modules/readable-stream/readable-browser.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    exports = module.exports = require_stream_readable();\n    exports.Stream = exports;\n    exports.Readable = exports;\n    exports.Writable = require_stream_writable();\n    exports.Duplex = require_stream_duplex();\n    exports.Transform = require_stream_transform();\n    exports.PassThrough = require_stream_passthrough();\n    exports.finished = require_end_of_stream();\n    exports.pipeline = require_pipeline();\n  }\n});\n\n// node_modules/hash-base/index.js\nvar require_hash_base = __commonJS({\n  \"node_modules/hash-base/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var Transform = require_readable_browser().Transform;\n    var inherits = require_inherits_browser();\n    function throwIfNotStringOrBuffer(val, prefix) {\n      if (!Buffer2.isBuffer(val) && typeof val !== \"string\") {\n        throw new TypeError(prefix + \" must be a string or a buffer\");\n      }\n    }\n    function HashBase(blockSize) {\n      Transform.call(this);\n      this._block = Buffer2.allocUnsafe(blockSize);\n      this._blockSize = blockSize;\n      this._blockOffset = 0;\n      this._length = [0, 0, 0, 0];\n      this._finalized = false;\n    }\n    inherits(HashBase, Transform);\n    HashBase.prototype._transform = function(chunk, encoding, callback) {\n      var error = null;\n      try {\n        this.update(chunk, encoding);\n      } catch (err) {\n        error = err;\n      }\n      callback(error);\n    };\n    HashBase.prototype._flush = function(callback) {\n      var error = null;\n      try {\n        this.push(this.digest());\n      } catch (err) {\n        error = err;\n      }\n      callback(error);\n    };\n    HashBase.prototype.update = function(data, encoding) {\n      throwIfNotStringOrBuffer(data, \"Data\");\n      if (this._finalized)\n        throw new Error(\"Digest already called\");\n      if (!Buffer2.isBuffer(data))\n        data = Buffer2.from(data, encoding);\n      var block = this._block;\n      var offset = 0;\n      while (this._blockOffset + data.length - offset >= this._blockSize) {\n        for (var i = this._blockOffset; i < this._blockSize; )\n          block[i++] = data[offset++];\n        this._update();\n        this._blockOffset = 0;\n      }\n      while (offset < data.length)\n        block[this._blockOffset++] = data[offset++];\n      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\n        this._length[j] += carry;\n        carry = this._length[j] / 4294967296 | 0;\n        if (carry > 0)\n          this._length[j] -= 4294967296 * carry;\n      }\n      return this;\n    };\n    HashBase.prototype._update = function() {\n      throw new Error(\"_update is not implemented\");\n    };\n    HashBase.prototype.digest = function(encoding) {\n      if (this._finalized)\n        throw new Error(\"Digest already called\");\n      this._finalized = true;\n      var digest = this._digest();\n      if (encoding !== void 0)\n        digest = digest.toString(encoding);\n      this._block.fill(0);\n      this._blockOffset = 0;\n      for (var i = 0; i < 4; ++i)\n        this._length[i] = 0;\n      return digest;\n    };\n    HashBase.prototype._digest = function() {\n      throw new Error(\"_digest is not implemented\");\n    };\n    module.exports = HashBase;\n  }\n});\n\n// node_modules/md5.js/index.js\nvar require_md5 = __commonJS({\n  \"node_modules/md5.js/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var HashBase = require_hash_base();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var ARRAY16 = new Array(16);\n    function MD5() {\n      HashBase.call(this, 64);\n      this._a = 1732584193;\n      this._b = 4023233417;\n      this._c = 2562383102;\n      this._d = 271733878;\n    }\n    inherits(MD5, HashBase);\n    MD5.prototype._update = function() {\n      var M = ARRAY16;\n      for (var i = 0; i < 16; ++i)\n        M[i] = this._block.readInt32LE(i * 4);\n      var a = this._a;\n      var b = this._b;\n      var c = this._c;\n      var d = this._d;\n      a = fnF(a, b, c, d, M[0], 3614090360, 7);\n      d = fnF(d, a, b, c, M[1], 3905402710, 12);\n      c = fnF(c, d, a, b, M[2], 606105819, 17);\n      b = fnF(b, c, d, a, M[3], 3250441966, 22);\n      a = fnF(a, b, c, d, M[4], 4118548399, 7);\n      d = fnF(d, a, b, c, M[5], 1200080426, 12);\n      c = fnF(c, d, a, b, M[6], 2821735955, 17);\n      b = fnF(b, c, d, a, M[7], 4249261313, 22);\n      a = fnF(a, b, c, d, M[8], 1770035416, 7);\n      d = fnF(d, a, b, c, M[9], 2336552879, 12);\n      c = fnF(c, d, a, b, M[10], 4294925233, 17);\n      b = fnF(b, c, d, a, M[11], 2304563134, 22);\n      a = fnF(a, b, c, d, M[12], 1804603682, 7);\n      d = fnF(d, a, b, c, M[13], 4254626195, 12);\n      c = fnF(c, d, a, b, M[14], 2792965006, 17);\n      b = fnF(b, c, d, a, M[15], 1236535329, 22);\n      a = fnG(a, b, c, d, M[1], 4129170786, 5);\n      d = fnG(d, a, b, c, M[6], 3225465664, 9);\n      c = fnG(c, d, a, b, M[11], 643717713, 14);\n      b = fnG(b, c, d, a, M[0], 3921069994, 20);\n      a = fnG(a, b, c, d, M[5], 3593408605, 5);\n      d = fnG(d, a, b, c, M[10], 38016083, 9);\n      c = fnG(c, d, a, b, M[15], 3634488961, 14);\n      b = fnG(b, c, d, a, M[4], 3889429448, 20);\n      a = fnG(a, b, c, d, M[9], 568446438, 5);\n      d = fnG(d, a, b, c, M[14], 3275163606, 9);\n      c = fnG(c, d, a, b, M[3], 4107603335, 14);\n      b = fnG(b, c, d, a, M[8], 1163531501, 20);\n      a = fnG(a, b, c, d, M[13], 2850285829, 5);\n      d = fnG(d, a, b, c, M[2], 4243563512, 9);\n      c = fnG(c, d, a, b, M[7], 1735328473, 14);\n      b = fnG(b, c, d, a, M[12], 2368359562, 20);\n      a = fnH(a, b, c, d, M[5], 4294588738, 4);\n      d = fnH(d, a, b, c, M[8], 2272392833, 11);\n      c = fnH(c, d, a, b, M[11], 1839030562, 16);\n      b = fnH(b, c, d, a, M[14], 4259657740, 23);\n      a = fnH(a, b, c, d, M[1], 2763975236, 4);\n      d = fnH(d, a, b, c, M[4], 1272893353, 11);\n      c = fnH(c, d, a, b, M[7], 4139469664, 16);\n      b = fnH(b, c, d, a, M[10], 3200236656, 23);\n      a = fnH(a, b, c, d, M[13], 681279174, 4);\n      d = fnH(d, a, b, c, M[0], 3936430074, 11);\n      c = fnH(c, d, a, b, M[3], 3572445317, 16);\n      b = fnH(b, c, d, a, M[6], 76029189, 23);\n      a = fnH(a, b, c, d, M[9], 3654602809, 4);\n      d = fnH(d, a, b, c, M[12], 3873151461, 11);\n      c = fnH(c, d, a, b, M[15], 530742520, 16);\n      b = fnH(b, c, d, a, M[2], 3299628645, 23);\n      a = fnI(a, b, c, d, M[0], 4096336452, 6);\n      d = fnI(d, a, b, c, M[7], 1126891415, 10);\n      c = fnI(c, d, a, b, M[14], 2878612391, 15);\n      b = fnI(b, c, d, a, M[5], 4237533241, 21);\n      a = fnI(a, b, c, d, M[12], 1700485571, 6);\n      d = fnI(d, a, b, c, M[3], 2399980690, 10);\n      c = fnI(c, d, a, b, M[10], 4293915773, 15);\n      b = fnI(b, c, d, a, M[1], 2240044497, 21);\n      a = fnI(a, b, c, d, M[8], 1873313359, 6);\n      d = fnI(d, a, b, c, M[15], 4264355552, 10);\n      c = fnI(c, d, a, b, M[6], 2734768916, 15);\n      b = fnI(b, c, d, a, M[13], 1309151649, 21);\n      a = fnI(a, b, c, d, M[4], 4149444226, 6);\n      d = fnI(d, a, b, c, M[11], 3174756917, 10);\n      c = fnI(c, d, a, b, M[2], 718787259, 15);\n      b = fnI(b, c, d, a, M[9], 3951481745, 21);\n      this._a = this._a + a | 0;\n      this._b = this._b + b | 0;\n      this._c = this._c + c | 0;\n      this._d = this._d + d | 0;\n    };\n    MD5.prototype._digest = function() {\n      this._block[this._blockOffset++] = 128;\n      if (this._blockOffset > 56) {\n        this._block.fill(0, this._blockOffset, 64);\n        this._update();\n        this._blockOffset = 0;\n      }\n      this._block.fill(0, this._blockOffset, 56);\n      this._block.writeUInt32LE(this._length[0], 56);\n      this._block.writeUInt32LE(this._length[1], 60);\n      this._update();\n      var buffer = Buffer2.allocUnsafe(16);\n      buffer.writeInt32LE(this._a, 0);\n      buffer.writeInt32LE(this._b, 4);\n      buffer.writeInt32LE(this._c, 8);\n      buffer.writeInt32LE(this._d, 12);\n      return buffer;\n    };\n    function rotl(x, n) {\n      return x << n | x >>> 32 - n;\n    }\n    function fnF(a, b, c, d, m, k, s) {\n      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;\n    }\n    function fnG(a, b, c, d, m, k, s) {\n      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;\n    }\n    function fnH(a, b, c, d, m, k, s) {\n      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;\n    }\n    function fnI(a, b, c, d, m, k, s) {\n      return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;\n    }\n    module.exports = MD5;\n  }\n});\n\n// node_modules/ripemd160/index.js\nvar require_ripemd160 = __commonJS({\n  \"node_modules/ripemd160/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_buffer_polyfill().Buffer;\n    var inherits = require_inherits_browser();\n    var HashBase = require_hash_base();\n    var ARRAY16 = new Array(16);\n    var zl = [\n      0,\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10,\n      11,\n      12,\n      13,\n      14,\n      15,\n      7,\n      4,\n      13,\n      1,\n      10,\n      6,\n      15,\n      3,\n      12,\n      0,\n      9,\n      5,\n      2,\n      14,\n      11,\n      8,\n      3,\n      10,\n      14,\n      4,\n      9,\n      15,\n      8,\n      1,\n      2,\n      7,\n      0,\n      6,\n      13,\n      11,\n      5,\n      12,\n      1,\n      9,\n      11,\n      10,\n      0,\n      8,\n      12,\n      4,\n      13,\n      3,\n      7,\n      15,\n      14,\n      5,\n      6,\n      2,\n      4,\n      0,\n      5,\n      9,\n      7,\n      12,\n      2,\n      10,\n      14,\n      1,\n      3,\n      8,\n      11,\n      6,\n      15,\n      13\n    ];\n    var zr = [\n      5,\n      14,\n      7,\n      0,\n      9,\n      2,\n      11,\n      4,\n      13,\n      6,\n      15,\n      8,\n      1,\n      10,\n      3,\n      12,\n      6,\n      11,\n      3,\n      7,\n      0,\n      13,\n      5,\n      10,\n      14,\n      15,\n      8,\n      12,\n      4,\n      9,\n      1,\n      2,\n      15,\n      5,\n      1,\n      3,\n      7,\n      14,\n      6,\n      9,\n      11,\n      8,\n      12,\n      2,\n      10,\n      0,\n      4,\n      13,\n      8,\n      6,\n      4,\n      1,\n      3,\n      11,\n      15,\n      0,\n      5,\n      12,\n      2,\n      13,\n      9,\n      7,\n      10,\n      14,\n      12,\n      15,\n      10,\n      4,\n      1,\n      5,\n      8,\n      7,\n      6,\n      2,\n      13,\n      14,\n      0,\n      3,\n      9,\n      11\n    ];\n    var sl = [\n      11,\n      14,\n      15,\n      12,\n      5,\n      8,\n      7,\n      9,\n      11,\n      13,\n      14,\n      15,\n      6,\n      7,\n      9,\n      8,\n      7,\n      6,\n      8,\n      13,\n      11,\n      9,\n      7,\n      15,\n      7,\n      12,\n      15,\n      9,\n      11,\n      7,\n      13,\n      12,\n      11,\n      13,\n      6,\n      7,\n      14,\n      9,\n      13,\n      15,\n      14,\n      8,\n      13,\n      6,\n      5,\n      12,\n      7,\n      5,\n      11,\n      12,\n      14,\n      15,\n      14,\n      15,\n      9,\n      8,\n      9,\n      14,\n      5,\n      6,\n      8,\n      6,\n      5,\n      12,\n      9,\n      15,\n      5,\n      11,\n      6,\n      8,\n      13,\n      12,\n      5,\n      12,\n      13,\n      14,\n      11,\n      8,\n      5,\n      6\n    ];\n    var sr = [\n      8,\n      9,\n      9,\n      11,\n      13,\n      15,\n      15,\n      5,\n      7,\n      7,\n      8,\n      11,\n      14,\n      14,\n      12,\n      6,\n      9,\n      13,\n      15,\n      7,\n      12,\n      8,\n      9,\n      11,\n      7,\n      7,\n      12,\n      7,\n      6,\n      15,\n      13,\n      11,\n      9,\n      7,\n      15,\n      11,\n      8,\n      6,\n      6,\n      14,\n      12,\n      13,\n      5,\n      14,\n      13,\n      13,\n      7,\n      5,\n      15,\n      5,\n      8,\n      11,\n      14,\n      14,\n      6,\n      14,\n      6,\n      9,\n      12,\n      9,\n      12,\n      5,\n      15,\n      8,\n      8,\n      5,\n      12,\n      9,\n      12,\n      5,\n      14,\n      6,\n      8,\n      13,\n      6,\n      5,\n      15,\n      13,\n      11,\n      11\n    ];\n    var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];\n    var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];\n    function RIPEMD160() {\n      HashBase.call(this, 64);\n      this._a = 1732584193;\n      this._b = 4023233417;\n      this._c = 2562383102;\n      this._d = 271733878;\n      this._e = 3285377520;\n    }\n    inherits(RIPEMD160, HashBase);\n    RIPEMD160.prototype._update = function() {\n      var words = ARRAY16;\n      for (var j = 0; j < 16; ++j)\n        words[j] = this._block.readInt32LE(j * 4);\n      var al = this._a | 0;\n      var bl = this._b | 0;\n      var cl = this._c | 0;\n      var dl = this._d | 0;\n      var el = this._e | 0;\n      var ar = this._a | 0;\n      var br = this._b | 0;\n      var cr = this._c | 0;\n      var dr = this._d | 0;\n      var er = this._e | 0;\n      for (var i = 0; i < 80; i += 1) {\n        var tl;\n        var tr;\n        if (i < 16) {\n          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);\n          tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);\n        } else if (i < 32) {\n          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);\n          tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);\n        } else if (i < 48) {\n          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);\n          tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);\n        } else if (i < 64) {\n          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);\n          tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);\n        } else {\n          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);\n          tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);\n        }\n        al = el;\n        el = dl;\n        dl = rotl(cl, 10);\n        cl = bl;\n        bl = tl;\n        ar = er;\n        er = dr;\n        dr = rotl(cr, 10);\n        cr = br;\n        br = tr;\n      }\n      var t = this._b + cl + dr | 0;\n      this._b = this._c + dl + er | 0;\n      this._c = this._d + el + ar | 0;\n      this._d = this._e + al + br | 0;\n      this._e = this._a + bl + cr | 0;\n      this._a = t;\n    };\n    RIPEMD160.prototype._digest = function() {\n      this._block[this._blockOffset++] = 128;\n      if (this._blockOffset > 56) {\n        this._block.fill(0, this._blockOffset, 64);\n        this._update();\n        this._blockOffset = 0;\n      }\n      this._block.fill(0, this._blockOffset, 56);\n      this._block.writeUInt32LE(this._length[0], 56);\n      this._block.writeUInt32LE(this._length[1], 60);\n      this._update();\n      var buffer = Buffer2.alloc ? Buffer2.alloc(20) : new Buffer2(20);\n      buffer.writeInt32LE(this._a, 0);\n      buffer.writeInt32LE(this._b, 4);\n      buffer.writeInt32LE(this._c, 8);\n      buffer.writeInt32LE(this._d, 12);\n      buffer.writeInt32LE(this._e, 16);\n      return buffer;\n    };\n    function rotl(x, n) {\n      return x << n | x >>> 32 - n;\n    }\n    function fn1(a, b, c, d, e, m, k, s) {\n      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;\n    }\n    function fn2(a, b, c, d, e, m, k, s) {\n      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;\n    }\n    function fn3(a, b, c, d, e, m, k, s) {\n      return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;\n    }\n    function fn4(a, b, c, d, e, m, k, s) {\n      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;\n    }\n    function fn5(a, b, c, d, e, m, k, s) {\n      return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;\n    }\n    module.exports = RIPEMD160;\n  }\n});\n\n// node_modules/sha.js/hash.js\nvar require_hash = __commonJS({\n  \"node_modules/sha.js/hash.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    function Hash(blockSize, finalSize) {\n      this._block = Buffer2.alloc(blockSize);\n      this._finalSize = finalSize;\n      this._blockSize = blockSize;\n      this._len = 0;\n    }\n    Hash.prototype.update = function(data, enc) {\n      if (typeof data === \"string\") {\n        enc = enc || \"utf8\";\n        data = Buffer2.from(data, enc);\n      }\n      var block = this._block;\n      var blockSize = this._blockSize;\n      var length = data.length;\n      var accum = this._len;\n      for (var offset = 0; offset < length; ) {\n        var assigned = accum % blockSize;\n        var remainder = Math.min(length - offset, blockSize - assigned);\n        for (var i = 0; i < remainder; i++) {\n          block[assigned + i] = data[offset + i];\n        }\n        accum += remainder;\n        offset += remainder;\n        if (accum % blockSize === 0) {\n          this._update(block);\n        }\n      }\n      this._len += length;\n      return this;\n    };\n    Hash.prototype.digest = function(enc) {\n      var rem = this._len % this._blockSize;\n      this._block[rem] = 128;\n      this._block.fill(0, rem + 1);\n      if (rem >= this._finalSize) {\n        this._update(this._block);\n        this._block.fill(0);\n      }\n      var bits = this._len * 8;\n      if (bits <= 4294967295) {\n        this._block.writeUInt32BE(bits, this._blockSize - 4);\n      } else {\n        var lowBits = (bits & 4294967295) >>> 0;\n        var highBits = (bits - lowBits) / 4294967296;\n        this._block.writeUInt32BE(highBits, this._blockSize - 8);\n        this._block.writeUInt32BE(lowBits, this._blockSize - 4);\n      }\n      this._update(this._block);\n      var hash = this._hash();\n      return enc ? hash.toString(enc) : hash;\n    };\n    Hash.prototype._update = function() {\n      throw new Error(\"_update must be implemented by subclass\");\n    };\n    module.exports = Hash;\n  }\n});\n\n// node_modules/sha.js/sha.js\nvar require_sha = __commonJS({\n  \"node_modules/sha.js/sha.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Hash = require_hash();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var K = [\n      1518500249,\n      1859775393,\n      2400959708 | 0,\n      3395469782 | 0\n    ];\n    var W = new Array(80);\n    function Sha() {\n      this.init();\n      this._w = W;\n      Hash.call(this, 64, 56);\n    }\n    inherits(Sha, Hash);\n    Sha.prototype.init = function() {\n      this._a = 1732584193;\n      this._b = 4023233417;\n      this._c = 2562383102;\n      this._d = 271733878;\n      this._e = 3285377520;\n      return this;\n    };\n    function rotl5(num) {\n      return num << 5 | num >>> 27;\n    }\n    function rotl30(num) {\n      return num << 30 | num >>> 2;\n    }\n    function ft(s, b, c, d) {\n      if (s === 0)\n        return b & c | ~b & d;\n      if (s === 2)\n        return b & c | b & d | c & d;\n      return b ^ c ^ d;\n    }\n    Sha.prototype._update = function(M) {\n      var W2 = this._w;\n      var a = this._a | 0;\n      var b = this._b | 0;\n      var c = this._c | 0;\n      var d = this._d | 0;\n      var e = this._e | 0;\n      for (var i = 0; i < 16; ++i)\n        W2[i] = M.readInt32BE(i * 4);\n      for (; i < 80; ++i)\n        W2[i] = W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16];\n      for (var j = 0; j < 80; ++j) {\n        var s = ~~(j / 20);\n        var t = rotl5(a) + ft(s, b, c, d) + e + W2[j] + K[s] | 0;\n        e = d;\n        d = c;\n        c = rotl30(b);\n        b = a;\n        a = t;\n      }\n      this._a = a + this._a | 0;\n      this._b = b + this._b | 0;\n      this._c = c + this._c | 0;\n      this._d = d + this._d | 0;\n      this._e = e + this._e | 0;\n    };\n    Sha.prototype._hash = function() {\n      var H = Buffer2.allocUnsafe(20);\n      H.writeInt32BE(this._a | 0, 0);\n      H.writeInt32BE(this._b | 0, 4);\n      H.writeInt32BE(this._c | 0, 8);\n      H.writeInt32BE(this._d | 0, 12);\n      H.writeInt32BE(this._e | 0, 16);\n      return H;\n    };\n    module.exports = Sha;\n  }\n});\n\n// node_modules/sha.js/sha1.js\nvar require_sha1 = __commonJS({\n  \"node_modules/sha.js/sha1.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Hash = require_hash();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var K = [\n      1518500249,\n      1859775393,\n      2400959708 | 0,\n      3395469782 | 0\n    ];\n    var W = new Array(80);\n    function Sha1() {\n      this.init();\n      this._w = W;\n      Hash.call(this, 64, 56);\n    }\n    inherits(Sha1, Hash);\n    Sha1.prototype.init = function() {\n      this._a = 1732584193;\n      this._b = 4023233417;\n      this._c = 2562383102;\n      this._d = 271733878;\n      this._e = 3285377520;\n      return this;\n    };\n    function rotl1(num) {\n      return num << 1 | num >>> 31;\n    }\n    function rotl5(num) {\n      return num << 5 | num >>> 27;\n    }\n    function rotl30(num) {\n      return num << 30 | num >>> 2;\n    }\n    function ft(s, b, c, d) {\n      if (s === 0)\n        return b & c | ~b & d;\n      if (s === 2)\n        return b & c | b & d | c & d;\n      return b ^ c ^ d;\n    }\n    Sha1.prototype._update = function(M) {\n      var W2 = this._w;\n      var a = this._a | 0;\n      var b = this._b | 0;\n      var c = this._c | 0;\n      var d = this._d | 0;\n      var e = this._e | 0;\n      for (var i = 0; i < 16; ++i)\n        W2[i] = M.readInt32BE(i * 4);\n      for (; i < 80; ++i)\n        W2[i] = rotl1(W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16]);\n      for (var j = 0; j < 80; ++j) {\n        var s = ~~(j / 20);\n        var t = rotl5(a) + ft(s, b, c, d) + e + W2[j] + K[s] | 0;\n        e = d;\n        d = c;\n        c = rotl30(b);\n        b = a;\n        a = t;\n      }\n      this._a = a + this._a | 0;\n      this._b = b + this._b | 0;\n      this._c = c + this._c | 0;\n      this._d = d + this._d | 0;\n      this._e = e + this._e | 0;\n    };\n    Sha1.prototype._hash = function() {\n      var H = Buffer2.allocUnsafe(20);\n      H.writeInt32BE(this._a | 0, 0);\n      H.writeInt32BE(this._b | 0, 4);\n      H.writeInt32BE(this._c | 0, 8);\n      H.writeInt32BE(this._d | 0, 12);\n      H.writeInt32BE(this._e | 0, 16);\n      return H;\n    };\n    module.exports = Sha1;\n  }\n});\n\n// node_modules/sha.js/sha256.js\nvar require_sha256 = __commonJS({\n  \"node_modules/sha.js/sha256.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Hash = require_hash();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var K = [\n      1116352408,\n      1899447441,\n      3049323471,\n      3921009573,\n      961987163,\n      1508970993,\n      2453635748,\n      2870763221,\n      3624381080,\n      310598401,\n      607225278,\n      1426881987,\n      1925078388,\n      2162078206,\n      2614888103,\n      3248222580,\n      3835390401,\n      4022224774,\n      264347078,\n      604807628,\n      770255983,\n      1249150122,\n      1555081692,\n      1996064986,\n      2554220882,\n      2821834349,\n      2952996808,\n      3210313671,\n      3336571891,\n      3584528711,\n      113926993,\n      338241895,\n      666307205,\n      773529912,\n      1294757372,\n      1396182291,\n      1695183700,\n      1986661051,\n      2177026350,\n      2456956037,\n      2730485921,\n      2820302411,\n      3259730800,\n      3345764771,\n      3516065817,\n      3600352804,\n      4094571909,\n      275423344,\n      430227734,\n      506948616,\n      659060556,\n      883997877,\n      958139571,\n      1322822218,\n      1537002063,\n      1747873779,\n      1955562222,\n      2024104815,\n      2227730452,\n      2361852424,\n      2428436474,\n      2756734187,\n      3204031479,\n      3329325298\n    ];\n    var W = new Array(64);\n    function Sha256() {\n      this.init();\n      this._w = W;\n      Hash.call(this, 64, 56);\n    }\n    inherits(Sha256, Hash);\n    Sha256.prototype.init = function() {\n      this._a = 1779033703;\n      this._b = 3144134277;\n      this._c = 1013904242;\n      this._d = 2773480762;\n      this._e = 1359893119;\n      this._f = 2600822924;\n      this._g = 528734635;\n      this._h = 1541459225;\n      return this;\n    };\n    function ch(x, y, z) {\n      return z ^ x & (y ^ z);\n    }\n    function maj(x, y, z) {\n      return x & y | z & (x | y);\n    }\n    function sigma0(x) {\n      return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);\n    }\n    function sigma1(x) {\n      return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);\n    }\n    function gamma0(x) {\n      return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;\n    }\n    function gamma1(x) {\n      return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;\n    }\n    Sha256.prototype._update = function(M) {\n      var W2 = this._w;\n      var a = this._a | 0;\n      var b = this._b | 0;\n      var c = this._c | 0;\n      var d = this._d | 0;\n      var e = this._e | 0;\n      var f = this._f | 0;\n      var g = this._g | 0;\n      var h = this._h | 0;\n      for (var i = 0; i < 16; ++i)\n        W2[i] = M.readInt32BE(i * 4);\n      for (; i < 64; ++i)\n        W2[i] = gamma1(W2[i - 2]) + W2[i - 7] + gamma0(W2[i - 15]) + W2[i - 16] | 0;\n      for (var j = 0; j < 64; ++j) {\n        var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W2[j] | 0;\n        var T2 = sigma0(a) + maj(a, b, c) | 0;\n        h = g;\n        g = f;\n        f = e;\n        e = d + T1 | 0;\n        d = c;\n        c = b;\n        b = a;\n        a = T1 + T2 | 0;\n      }\n      this._a = a + this._a | 0;\n      this._b = b + this._b | 0;\n      this._c = c + this._c | 0;\n      this._d = d + this._d | 0;\n      this._e = e + this._e | 0;\n      this._f = f + this._f | 0;\n      this._g = g + this._g | 0;\n      this._h = h + this._h | 0;\n    };\n    Sha256.prototype._hash = function() {\n      var H = Buffer2.allocUnsafe(32);\n      H.writeInt32BE(this._a, 0);\n      H.writeInt32BE(this._b, 4);\n      H.writeInt32BE(this._c, 8);\n      H.writeInt32BE(this._d, 12);\n      H.writeInt32BE(this._e, 16);\n      H.writeInt32BE(this._f, 20);\n      H.writeInt32BE(this._g, 24);\n      H.writeInt32BE(this._h, 28);\n      return H;\n    };\n    module.exports = Sha256;\n  }\n});\n\n// node_modules/sha.js/sha224.js\nvar require_sha224 = __commonJS({\n  \"node_modules/sha.js/sha224.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Sha256 = require_sha256();\n    var Hash = require_hash();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var W = new Array(64);\n    function Sha224() {\n      this.init();\n      this._w = W;\n      Hash.call(this, 64, 56);\n    }\n    inherits(Sha224, Sha256);\n    Sha224.prototype.init = function() {\n      this._a = 3238371032;\n      this._b = 914150663;\n      this._c = 812702999;\n      this._d = 4144912697;\n      this._e = 4290775857;\n      this._f = 1750603025;\n      this._g = 1694076839;\n      this._h = 3204075428;\n      return this;\n    };\n    Sha224.prototype._hash = function() {\n      var H = Buffer2.allocUnsafe(28);\n      H.writeInt32BE(this._a, 0);\n      H.writeInt32BE(this._b, 4);\n      H.writeInt32BE(this._c, 8);\n      H.writeInt32BE(this._d, 12);\n      H.writeInt32BE(this._e, 16);\n      H.writeInt32BE(this._f, 20);\n      H.writeInt32BE(this._g, 24);\n      return H;\n    };\n    module.exports = Sha224;\n  }\n});\n\n// node_modules/sha.js/sha512.js\nvar require_sha512 = __commonJS({\n  \"node_modules/sha.js/sha512.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Hash = require_hash();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var K = [\n      1116352408,\n      3609767458,\n      1899447441,\n      602891725,\n      3049323471,\n      3964484399,\n      3921009573,\n      2173295548,\n      961987163,\n      4081628472,\n      1508970993,\n      3053834265,\n      2453635748,\n      2937671579,\n      2870763221,\n      3664609560,\n      3624381080,\n      2734883394,\n      310598401,\n      1164996542,\n      607225278,\n      1323610764,\n      1426881987,\n      3590304994,\n      1925078388,\n      4068182383,\n      2162078206,\n      991336113,\n      2614888103,\n      633803317,\n      3248222580,\n      3479774868,\n      3835390401,\n      2666613458,\n      4022224774,\n      944711139,\n      264347078,\n      2341262773,\n      604807628,\n      2007800933,\n      770255983,\n      1495990901,\n      1249150122,\n      1856431235,\n      1555081692,\n      3175218132,\n      1996064986,\n      2198950837,\n      2554220882,\n      3999719339,\n      2821834349,\n      766784016,\n      2952996808,\n      2566594879,\n      3210313671,\n      3203337956,\n      3336571891,\n      1034457026,\n      3584528711,\n      2466948901,\n      113926993,\n      3758326383,\n      338241895,\n      168717936,\n      666307205,\n      1188179964,\n      773529912,\n      1546045734,\n      1294757372,\n      1522805485,\n      1396182291,\n      2643833823,\n      1695183700,\n      2343527390,\n      1986661051,\n      1014477480,\n      2177026350,\n      1206759142,\n      2456956037,\n      344077627,\n      2730485921,\n      1290863460,\n      2820302411,\n      3158454273,\n      3259730800,\n      3505952657,\n      3345764771,\n      106217008,\n      3516065817,\n      3606008344,\n      3600352804,\n      1432725776,\n      4094571909,\n      1467031594,\n      275423344,\n      851169720,\n      430227734,\n      3100823752,\n      506948616,\n      1363258195,\n      659060556,\n      3750685593,\n      883997877,\n      3785050280,\n      958139571,\n      3318307427,\n      1322822218,\n      3812723403,\n      1537002063,\n      2003034995,\n      1747873779,\n      3602036899,\n      1955562222,\n      1575990012,\n      2024104815,\n      1125592928,\n      2227730452,\n      2716904306,\n      2361852424,\n      442776044,\n      2428436474,\n      593698344,\n      2756734187,\n      3733110249,\n      3204031479,\n      2999351573,\n      3329325298,\n      3815920427,\n      3391569614,\n      3928383900,\n      3515267271,\n      566280711,\n      3940187606,\n      3454069534,\n      4118630271,\n      4000239992,\n      116418474,\n      1914138554,\n      174292421,\n      2731055270,\n      289380356,\n      3203993006,\n      460393269,\n      320620315,\n      685471733,\n      587496836,\n      852142971,\n      1086792851,\n      1017036298,\n      365543100,\n      1126000580,\n      2618297676,\n      1288033470,\n      3409855158,\n      1501505948,\n      4234509866,\n      1607167915,\n      987167468,\n      1816402316,\n      1246189591\n    ];\n    var W = new Array(160);\n    function Sha512() {\n      this.init();\n      this._w = W;\n      Hash.call(this, 128, 112);\n    }\n    inherits(Sha512, Hash);\n    Sha512.prototype.init = function() {\n      this._ah = 1779033703;\n      this._bh = 3144134277;\n      this._ch = 1013904242;\n      this._dh = 2773480762;\n      this._eh = 1359893119;\n      this._fh = 2600822924;\n      this._gh = 528734635;\n      this._hh = 1541459225;\n      this._al = 4089235720;\n      this._bl = 2227873595;\n      this._cl = 4271175723;\n      this._dl = 1595750129;\n      this._el = 2917565137;\n      this._fl = 725511199;\n      this._gl = 4215389547;\n      this._hl = 327033209;\n      return this;\n    };\n    function Ch(x, y, z) {\n      return z ^ x & (y ^ z);\n    }\n    function maj(x, y, z) {\n      return x & y | z & (x | y);\n    }\n    function sigma0(x, xl) {\n      return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);\n    }\n    function sigma1(x, xl) {\n      return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);\n    }\n    function Gamma0(x, xl) {\n      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;\n    }\n    function Gamma0l(x, xl) {\n      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);\n    }\n    function Gamma1(x, xl) {\n      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;\n    }\n    function Gamma1l(x, xl) {\n      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);\n    }\n    function getCarry(a, b) {\n      return a >>> 0 < b >>> 0 ? 1 : 0;\n    }\n    Sha512.prototype._update = function(M) {\n      var W2 = this._w;\n      var ah = this._ah | 0;\n      var bh = this._bh | 0;\n      var ch = this._ch | 0;\n      var dh = this._dh | 0;\n      var eh = this._eh | 0;\n      var fh = this._fh | 0;\n      var gh = this._gh | 0;\n      var hh = this._hh | 0;\n      var al = this._al | 0;\n      var bl = this._bl | 0;\n      var cl = this._cl | 0;\n      var dl = this._dl | 0;\n      var el = this._el | 0;\n      var fl = this._fl | 0;\n      var gl = this._gl | 0;\n      var hl = this._hl | 0;\n      for (var i = 0; i < 32; i += 2) {\n        W2[i] = M.readInt32BE(i * 4);\n        W2[i + 1] = M.readInt32BE(i * 4 + 4);\n      }\n      for (; i < 160; i += 2) {\n        var xh = W2[i - 15 * 2];\n        var xl = W2[i - 15 * 2 + 1];\n        var gamma0 = Gamma0(xh, xl);\n        var gamma0l = Gamma0l(xl, xh);\n        xh = W2[i - 2 * 2];\n        xl = W2[i - 2 * 2 + 1];\n        var gamma1 = Gamma1(xh, xl);\n        var gamma1l = Gamma1l(xl, xh);\n        var Wi7h = W2[i - 7 * 2];\n        var Wi7l = W2[i - 7 * 2 + 1];\n        var Wi16h = W2[i - 16 * 2];\n        var Wi16l = W2[i - 16 * 2 + 1];\n        var Wil = gamma0l + Wi7l | 0;\n        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;\n        Wil = Wil + gamma1l | 0;\n        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;\n        Wil = Wil + Wi16l | 0;\n        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;\n        W2[i] = Wih;\n        W2[i + 1] = Wil;\n      }\n      for (var j = 0; j < 160; j += 2) {\n        Wih = W2[j];\n        Wil = W2[j + 1];\n        var majh = maj(ah, bh, ch);\n        var majl = maj(al, bl, cl);\n        var sigma0h = sigma0(ah, al);\n        var sigma0l = sigma0(al, ah);\n        var sigma1h = sigma1(eh, el);\n        var sigma1l = sigma1(el, eh);\n        var Kih = K[j];\n        var Kil = K[j + 1];\n        var chh = Ch(eh, fh, gh);\n        var chl = Ch(el, fl, gl);\n        var t1l = hl + sigma1l | 0;\n        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;\n        t1l = t1l + chl | 0;\n        t1h = t1h + chh + getCarry(t1l, chl) | 0;\n        t1l = t1l + Kil | 0;\n        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;\n        t1l = t1l + Wil | 0;\n        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;\n        var t2l = sigma0l + majl | 0;\n        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;\n        hh = gh;\n        hl = gl;\n        gh = fh;\n        gl = fl;\n        fh = eh;\n        fl = el;\n        el = dl + t1l | 0;\n        eh = dh + t1h + getCarry(el, dl) | 0;\n        dh = ch;\n        dl = cl;\n        ch = bh;\n        cl = bl;\n        bh = ah;\n        bl = al;\n        al = t1l + t2l | 0;\n        ah = t1h + t2h + getCarry(al, t1l) | 0;\n      }\n      this._al = this._al + al | 0;\n      this._bl = this._bl + bl | 0;\n      this._cl = this._cl + cl | 0;\n      this._dl = this._dl + dl | 0;\n      this._el = this._el + el | 0;\n      this._fl = this._fl + fl | 0;\n      this._gl = this._gl + gl | 0;\n      this._hl = this._hl + hl | 0;\n      this._ah = this._ah + ah + getCarry(this._al, al) | 0;\n      this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;\n      this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;\n      this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;\n      this._eh = this._eh + eh + getCarry(this._el, el) | 0;\n      this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;\n      this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;\n      this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;\n    };\n    Sha512.prototype._hash = function() {\n      var H = Buffer2.allocUnsafe(64);\n      function writeInt64BE(h, l, offset) {\n        H.writeInt32BE(h, offset);\n        H.writeInt32BE(l, offset + 4);\n      }\n      writeInt64BE(this._ah, this._al, 0);\n      writeInt64BE(this._bh, this._bl, 8);\n      writeInt64BE(this._ch, this._cl, 16);\n      writeInt64BE(this._dh, this._dl, 24);\n      writeInt64BE(this._eh, this._el, 32);\n      writeInt64BE(this._fh, this._fl, 40);\n      writeInt64BE(this._gh, this._gl, 48);\n      writeInt64BE(this._hh, this._hl, 56);\n      return H;\n    };\n    module.exports = Sha512;\n  }\n});\n\n// node_modules/sha.js/sha384.js\nvar require_sha384 = __commonJS({\n  \"node_modules/sha.js/sha384.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var SHA512 = require_sha512();\n    var Hash = require_hash();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var W = new Array(160);\n    function Sha384() {\n      this.init();\n      this._w = W;\n      Hash.call(this, 128, 112);\n    }\n    inherits(Sha384, SHA512);\n    Sha384.prototype.init = function() {\n      this._ah = 3418070365;\n      this._bh = 1654270250;\n      this._ch = 2438529370;\n      this._dh = 355462360;\n      this._eh = 1731405415;\n      this._fh = 2394180231;\n      this._gh = 3675008525;\n      this._hh = 1203062813;\n      this._al = 3238371032;\n      this._bl = 914150663;\n      this._cl = 812702999;\n      this._dl = 4144912697;\n      this._el = 4290775857;\n      this._fl = 1750603025;\n      this._gl = 1694076839;\n      this._hl = 3204075428;\n      return this;\n    };\n    Sha384.prototype._hash = function() {\n      var H = Buffer2.allocUnsafe(48);\n      function writeInt64BE(h, l, offset) {\n        H.writeInt32BE(h, offset);\n        H.writeInt32BE(l, offset + 4);\n      }\n      writeInt64BE(this._ah, this._al, 0);\n      writeInt64BE(this._bh, this._bl, 8);\n      writeInt64BE(this._ch, this._cl, 16);\n      writeInt64BE(this._dh, this._dl, 24);\n      writeInt64BE(this._eh, this._el, 32);\n      writeInt64BE(this._fh, this._fl, 40);\n      return H;\n    };\n    module.exports = Sha384;\n  }\n});\n\n// node_modules/sha.js/index.js\nvar require_sha2 = __commonJS({\n  \"node_modules/sha.js/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var exports = module.exports = function SHA(algorithm) {\n      algorithm = algorithm.toLowerCase();\n      var Algorithm = exports[algorithm];\n      if (!Algorithm)\n        throw new Error(algorithm + \" is not supported (we accept pull requests)\");\n      return new Algorithm();\n    };\n    exports.sha = require_sha();\n    exports.sha1 = require_sha1();\n    exports.sha224 = require_sha224();\n    exports.sha256 = require_sha256();\n    exports.sha384 = require_sha384();\n    exports.sha512 = require_sha512();\n  }\n});\n\n// node_modules/stream-browserify/index.js\nvar require_stream_browserify = __commonJS({\n  \"node_modules/stream-browserify/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = Stream;\n    var EE = require_events().EventEmitter;\n    var inherits = require_inherits_browser();\n    inherits(Stream, EE);\n    Stream.Readable = require_stream_readable();\n    Stream.Writable = require_stream_writable();\n    Stream.Duplex = require_stream_duplex();\n    Stream.Transform = require_stream_transform();\n    Stream.PassThrough = require_stream_passthrough();\n    Stream.finished = require_end_of_stream();\n    Stream.pipeline = require_pipeline();\n    Stream.Stream = Stream;\n    function Stream() {\n      EE.call(this);\n    }\n    Stream.prototype.pipe = function(dest, options) {\n      var source = this;\n      function ondata(chunk) {\n        if (dest.writable) {\n          if (false === dest.write(chunk) && source.pause) {\n            source.pause();\n          }\n        }\n      }\n      source.on(\"data\", ondata);\n      function ondrain() {\n        if (source.readable && source.resume) {\n          source.resume();\n        }\n      }\n      dest.on(\"drain\", ondrain);\n      if (!dest._isStdio && (!options || options.end !== false)) {\n        source.on(\"end\", onend);\n        source.on(\"close\", onclose);\n      }\n      var didOnEnd = false;\n      function onend() {\n        if (didOnEnd)\n          return;\n        didOnEnd = true;\n        dest.end();\n      }\n      function onclose() {\n        if (didOnEnd)\n          return;\n        didOnEnd = true;\n        if (typeof dest.destroy === \"function\")\n          dest.destroy();\n      }\n      function onerror(er) {\n        cleanup();\n        if (EE.listenerCount(this, \"error\") === 0) {\n          throw er;\n        }\n      }\n      source.on(\"error\", onerror);\n      dest.on(\"error\", onerror);\n      function cleanup() {\n        source.removeListener(\"data\", ondata);\n        dest.removeListener(\"drain\", ondrain);\n        source.removeListener(\"end\", onend);\n        source.removeListener(\"close\", onclose);\n        source.removeListener(\"error\", onerror);\n        dest.removeListener(\"error\", onerror);\n        source.removeListener(\"end\", cleanup);\n        source.removeListener(\"close\", cleanup);\n        dest.removeListener(\"close\", cleanup);\n      }\n      source.on(\"end\", cleanup);\n      source.on(\"close\", cleanup);\n      dest.on(\"close\", cleanup);\n      dest.emit(\"pipe\", source);\n      return dest;\n    };\n  }\n});\n\n// node_modules/cipher-base/index.js\nvar require_cipher_base = __commonJS({\n  \"node_modules/cipher-base/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var Transform = require_stream_browserify().Transform;\n    var StringDecoder = require_string_decoder().StringDecoder;\n    var inherits = require_inherits_browser();\n    function CipherBase(hashMode) {\n      Transform.call(this);\n      this.hashMode = typeof hashMode === \"string\";\n      if (this.hashMode) {\n        this[hashMode] = this._finalOrDigest;\n      } else {\n        this.final = this._finalOrDigest;\n      }\n      if (this._final) {\n        this.__final = this._final;\n        this._final = null;\n      }\n      this._decoder = null;\n      this._encoding = null;\n    }\n    inherits(CipherBase, Transform);\n    CipherBase.prototype.update = function(data, inputEnc, outputEnc) {\n      if (typeof data === \"string\") {\n        data = Buffer2.from(data, inputEnc);\n      }\n      var outData = this._update(data);\n      if (this.hashMode)\n        return this;\n      if (outputEnc) {\n        outData = this._toString(outData, outputEnc);\n      }\n      return outData;\n    };\n    CipherBase.prototype.setAutoPadding = function() {\n    };\n    CipherBase.prototype.getAuthTag = function() {\n      throw new Error(\"trying to get auth tag in unsupported state\");\n    };\n    CipherBase.prototype.setAuthTag = function() {\n      throw new Error(\"trying to set auth tag in unsupported state\");\n    };\n    CipherBase.prototype.setAAD = function() {\n      throw new Error(\"trying to set aad in unsupported state\");\n    };\n    CipherBase.prototype._transform = function(data, _, next) {\n      var err;\n      try {\n        if (this.hashMode) {\n          this._update(data);\n        } else {\n          this.push(this._update(data));\n        }\n      } catch (e) {\n        err = e;\n      } finally {\n        next(err);\n      }\n    };\n    CipherBase.prototype._flush = function(done) {\n      var err;\n      try {\n        this.push(this.__final());\n      } catch (e) {\n        err = e;\n      }\n      done(err);\n    };\n    CipherBase.prototype._finalOrDigest = function(outputEnc) {\n      var outData = this.__final() || Buffer2.alloc(0);\n      if (outputEnc) {\n        outData = this._toString(outData, outputEnc, true);\n      }\n      return outData;\n    };\n    CipherBase.prototype._toString = function(value, enc, fin) {\n      if (!this._decoder) {\n        this._decoder = new StringDecoder(enc);\n        this._encoding = enc;\n      }\n      if (this._encoding !== enc)\n        throw new Error(\"can't switch encodings\");\n      var out = this._decoder.write(value);\n      if (fin) {\n        out += this._decoder.end();\n      }\n      return out;\n    };\n    module.exports = CipherBase;\n  }\n});\n\n// node_modules/create-hash/browser.js\nvar require_browser3 = __commonJS({\n  \"node_modules/create-hash/browser.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var MD5 = require_md5();\n    var RIPEMD160 = require_ripemd160();\n    var sha = require_sha2();\n    var Base = require_cipher_base();\n    function Hash(hash) {\n      Base.call(this, \"digest\");\n      this._hash = hash;\n    }\n    inherits(Hash, Base);\n    Hash.prototype._update = function(data) {\n      this._hash.update(data);\n    };\n    Hash.prototype._final = function() {\n      return this._hash.digest();\n    };\n    module.exports = function createHash(alg) {\n      alg = alg.toLowerCase();\n      if (alg === \"md5\")\n        return new MD5();\n      if (alg === \"rmd160\" || alg === \"ripemd160\")\n        return new RIPEMD160();\n      return new Hash(sha(alg));\n    };\n  }\n});\n\n// node_modules/create-hmac/legacy.js\nvar require_legacy = __commonJS({\n  \"node_modules/create-hmac/legacy.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var Base = require_cipher_base();\n    var ZEROS = Buffer2.alloc(128);\n    var blocksize = 64;\n    function Hmac(alg, key) {\n      Base.call(this, \"digest\");\n      if (typeof key === \"string\") {\n        key = Buffer2.from(key);\n      }\n      this._alg = alg;\n      this._key = key;\n      if (key.length > blocksize) {\n        key = alg(key);\n      } else if (key.length < blocksize) {\n        key = Buffer2.concat([key, ZEROS], blocksize);\n      }\n      var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);\n      var opad = this._opad = Buffer2.allocUnsafe(blocksize);\n      for (var i = 0; i < blocksize; i++) {\n        ipad[i] = key[i] ^ 54;\n        opad[i] = key[i] ^ 92;\n      }\n      this._hash = [ipad];\n    }\n    inherits(Hmac, Base);\n    Hmac.prototype._update = function(data) {\n      this._hash.push(data);\n    };\n    Hmac.prototype._final = function() {\n      var h = this._alg(Buffer2.concat(this._hash));\n      return this._alg(Buffer2.concat([this._opad, h]));\n    };\n    module.exports = Hmac;\n  }\n});\n\n// node_modules/create-hash/md5.js\nvar require_md52 = __commonJS({\n  \"node_modules/create-hash/md5.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var MD5 = require_md5();\n    module.exports = function(buffer) {\n      return new MD5().update(buffer).digest();\n    };\n  }\n});\n\n// node_modules/create-hmac/browser.js\nvar require_browser4 = __commonJS({\n  \"node_modules/create-hmac/browser.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Legacy = require_legacy();\n    var Base = require_cipher_base();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var md5 = require_md52();\n    var RIPEMD160 = require_ripemd160();\n    var sha = require_sha2();\n    var ZEROS = Buffer2.alloc(128);\n    function Hmac(alg, key) {\n      Base.call(this, \"digest\");\n      if (typeof key === \"string\") {\n        key = Buffer2.from(key);\n      }\n      var blocksize = alg === \"sha512\" || alg === \"sha384\" ? 128 : 64;\n      this._alg = alg;\n      this._key = key;\n      if (key.length > blocksize) {\n        var hash = alg === \"rmd160\" ? new RIPEMD160() : sha(alg);\n        key = hash.update(key).digest();\n      } else if (key.length < blocksize) {\n        key = Buffer2.concat([key, ZEROS], blocksize);\n      }\n      var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);\n      var opad = this._opad = Buffer2.allocUnsafe(blocksize);\n      for (var i = 0; i < blocksize; i++) {\n        ipad[i] = key[i] ^ 54;\n        opad[i] = key[i] ^ 92;\n      }\n      this._hash = alg === \"rmd160\" ? new RIPEMD160() : sha(alg);\n      this._hash.update(ipad);\n    }\n    inherits(Hmac, Base);\n    Hmac.prototype._update = function(data) {\n      this._hash.update(data);\n    };\n    Hmac.prototype._final = function() {\n      var h = this._hash.digest();\n      var hash = this._alg === \"rmd160\" ? new RIPEMD160() : sha(this._alg);\n      return hash.update(this._opad).update(h).digest();\n    };\n    module.exports = function createHmac(alg, key) {\n      alg = alg.toLowerCase();\n      if (alg === \"rmd160\" || alg === \"ripemd160\") {\n        return new Hmac(\"rmd160\", key);\n      }\n      if (alg === \"md5\") {\n        return new Legacy(md5, key);\n      }\n      return new Hmac(alg, key);\n    };\n  }\n});\n\n// node_modules/browserify-sign/browser/algorithms.json\nvar require_algorithms = __commonJS({\n  \"node_modules/browserify-sign/browser/algorithms.json\"(exports, module) {\n    module.exports = {\n      sha224WithRSAEncryption: {\n        sign: \"rsa\",\n        hash: \"sha224\",\n        id: \"302d300d06096086480165030402040500041c\"\n      },\n      \"RSA-SHA224\": {\n        sign: \"ecdsa/rsa\",\n        hash: \"sha224\",\n        id: \"302d300d06096086480165030402040500041c\"\n      },\n      sha256WithRSAEncryption: {\n        sign: \"rsa\",\n        hash: \"sha256\",\n        id: \"3031300d060960864801650304020105000420\"\n      },\n      \"RSA-SHA256\": {\n        sign: \"ecdsa/rsa\",\n        hash: \"sha256\",\n        id: \"3031300d060960864801650304020105000420\"\n      },\n      sha384WithRSAEncryption: {\n        sign: \"rsa\",\n        hash: \"sha384\",\n        id: \"3041300d060960864801650304020205000430\"\n      },\n      \"RSA-SHA384\": {\n        sign: \"ecdsa/rsa\",\n        hash: \"sha384\",\n        id: \"3041300d060960864801650304020205000430\"\n      },\n      sha512WithRSAEncryption: {\n        sign: \"rsa\",\n        hash: \"sha512\",\n        id: \"3051300d060960864801650304020305000440\"\n      },\n      \"RSA-SHA512\": {\n        sign: \"ecdsa/rsa\",\n        hash: \"sha512\",\n        id: \"3051300d060960864801650304020305000440\"\n      },\n      \"RSA-SHA1\": {\n        sign: \"rsa\",\n        hash: \"sha1\",\n        id: \"3021300906052b0e03021a05000414\"\n      },\n      \"ecdsa-with-SHA1\": {\n        sign: \"ecdsa\",\n        hash: \"sha1\",\n        id: \"\"\n      },\n      sha256: {\n        sign: \"ecdsa\",\n        hash: \"sha256\",\n        id: \"\"\n      },\n      sha224: {\n        sign: \"ecdsa\",\n        hash: \"sha224\",\n        id: \"\"\n      },\n      sha384: {\n        sign: \"ecdsa\",\n        hash: \"sha384\",\n        id: \"\"\n      },\n      sha512: {\n        sign: \"ecdsa\",\n        hash: \"sha512\",\n        id: \"\"\n      },\n      \"DSA-SHA\": {\n        sign: \"dsa\",\n        hash: \"sha1\",\n        id: \"\"\n      },\n      \"DSA-SHA1\": {\n        sign: \"dsa\",\n        hash: \"sha1\",\n        id: \"\"\n      },\n      DSA: {\n        sign: \"dsa\",\n        hash: \"sha1\",\n        id: \"\"\n      },\n      \"DSA-WITH-SHA224\": {\n        sign: \"dsa\",\n        hash: \"sha224\",\n        id: \"\"\n      },\n      \"DSA-SHA224\": {\n        sign: \"dsa\",\n        hash: \"sha224\",\n        id: \"\"\n      },\n      \"DSA-WITH-SHA256\": {\n        sign: \"dsa\",\n        hash: \"sha256\",\n        id: \"\"\n      },\n      \"DSA-SHA256\": {\n        sign: \"dsa\",\n        hash: \"sha256\",\n        id: \"\"\n      },\n      \"DSA-WITH-SHA384\": {\n        sign: \"dsa\",\n        hash: \"sha384\",\n        id: \"\"\n      },\n      \"DSA-SHA384\": {\n        sign: \"dsa\",\n        hash: \"sha384\",\n        id: \"\"\n      },\n      \"DSA-WITH-SHA512\": {\n        sign: \"dsa\",\n        hash: \"sha512\",\n        id: \"\"\n      },\n      \"DSA-SHA512\": {\n        sign: \"dsa\",\n        hash: \"sha512\",\n        id: \"\"\n      },\n      \"DSA-RIPEMD160\": {\n        sign: \"dsa\",\n        hash: \"rmd160\",\n        id: \"\"\n      },\n      ripemd160WithRSA: {\n        sign: \"rsa\",\n        hash: \"rmd160\",\n        id: \"3021300906052b2403020105000414\"\n      },\n      \"RSA-RIPEMD160\": {\n        sign: \"rsa\",\n        hash: \"rmd160\",\n        id: \"3021300906052b2403020105000414\"\n      },\n      md5WithRSAEncryption: {\n        sign: \"rsa\",\n        hash: \"md5\",\n        id: \"3020300c06082a864886f70d020505000410\"\n      },\n      \"RSA-MD5\": {\n        sign: \"rsa\",\n        hash: \"md5\",\n        id: \"3020300c06082a864886f70d020505000410\"\n      }\n    };\n  }\n});\n\n// node_modules/browserify-sign/algos.js\nvar require_algos = __commonJS({\n  \"node_modules/browserify-sign/algos.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = require_algorithms();\n  }\n});\n\n// node_modules/pbkdf2/lib/precondition.js\nvar require_precondition = __commonJS({\n  \"node_modules/pbkdf2/lib/precondition.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var MAX_ALLOC = Math.pow(2, 30) - 1;\n    module.exports = function(iterations, keylen) {\n      if (typeof iterations !== \"number\") {\n        throw new TypeError(\"Iterations not a number\");\n      }\n      if (iterations < 0) {\n        throw new TypeError(\"Bad iterations\");\n      }\n      if (typeof keylen !== \"number\") {\n        throw new TypeError(\"Key length not a number\");\n      }\n      if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {\n        throw new TypeError(\"Bad key length\");\n      }\n    };\n  }\n});\n\n// node_modules/pbkdf2/lib/default-encoding.js\nvar require_default_encoding = __commonJS({\n  \"node_modules/pbkdf2/lib/default-encoding.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var defaultEncoding;\n    if (global.process && global.process.browser) {\n      defaultEncoding = \"utf-8\";\n    } else if (global.process && global.process.version) {\n      pVersionMajor = parseInt(process.version.split(\".\")[0].slice(1), 10);\n      defaultEncoding = pVersionMajor >= 6 ? \"utf-8\" : \"binary\";\n    } else {\n      defaultEncoding = \"utf-8\";\n    }\n    var pVersionMajor;\n    module.exports = defaultEncoding;\n  }\n});\n\n// node_modules/pbkdf2/lib/to-buffer.js\nvar require_to_buffer = __commonJS({\n  \"node_modules/pbkdf2/lib/to-buffer.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    module.exports = function(thing, encoding, name) {\n      if (Buffer2.isBuffer(thing)) {\n        return thing;\n      } else if (typeof thing === \"string\") {\n        return Buffer2.from(thing, encoding);\n      } else if (ArrayBuffer.isView(thing)) {\n        return Buffer2.from(thing.buffer);\n      } else {\n        throw new TypeError(name + \" must be a string, a Buffer, a typed array or a DataView\");\n      }\n    };\n  }\n});\n\n// node_modules/pbkdf2/lib/sync-browser.js\nvar require_sync_browser = __commonJS({\n  \"node_modules/pbkdf2/lib/sync-browser.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var md5 = require_md52();\n    var RIPEMD160 = require_ripemd160();\n    var sha = require_sha2();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var checkParameters = require_precondition();\n    var defaultEncoding = require_default_encoding();\n    var toBuffer = require_to_buffer();\n    var ZEROS = Buffer2.alloc(128);\n    var sizes = {\n      md5: 16,\n      sha1: 20,\n      sha224: 28,\n      sha256: 32,\n      sha384: 48,\n      sha512: 64,\n      rmd160: 20,\n      ripemd160: 20\n    };\n    function Hmac(alg, key, saltLen) {\n      var hash = getDigest(alg);\n      var blocksize = alg === \"sha512\" || alg === \"sha384\" ? 128 : 64;\n      if (key.length > blocksize) {\n        key = hash(key);\n      } else if (key.length < blocksize) {\n        key = Buffer2.concat([key, ZEROS], blocksize);\n      }\n      var ipad = Buffer2.allocUnsafe(blocksize + sizes[alg]);\n      var opad = Buffer2.allocUnsafe(blocksize + sizes[alg]);\n      for (var i = 0; i < blocksize; i++) {\n        ipad[i] = key[i] ^ 54;\n        opad[i] = key[i] ^ 92;\n      }\n      var ipad1 = Buffer2.allocUnsafe(blocksize + saltLen + 4);\n      ipad.copy(ipad1, 0, 0, blocksize);\n      this.ipad1 = ipad1;\n      this.ipad2 = ipad;\n      this.opad = opad;\n      this.alg = alg;\n      this.blocksize = blocksize;\n      this.hash = hash;\n      this.size = sizes[alg];\n    }\n    Hmac.prototype.run = function(data, ipad) {\n      data.copy(ipad, this.blocksize);\n      var h = this.hash(ipad);\n      h.copy(this.opad, this.blocksize);\n      return this.hash(this.opad);\n    };\n    function getDigest(alg) {\n      function shaFunc(data) {\n        return sha(alg).update(data).digest();\n      }\n      function rmd160Func(data) {\n        return new RIPEMD160().update(data).digest();\n      }\n      if (alg === \"rmd160\" || alg === \"ripemd160\")\n        return rmd160Func;\n      if (alg === \"md5\")\n        return md5;\n      return shaFunc;\n    }\n    function pbkdf2(password, salt, iterations, keylen, digest) {\n      checkParameters(iterations, keylen);\n      password = toBuffer(password, defaultEncoding, \"Password\");\n      salt = toBuffer(salt, defaultEncoding, \"Salt\");\n      digest = digest || \"sha1\";\n      var hmac = new Hmac(digest, password, salt.length);\n      var DK = Buffer2.allocUnsafe(keylen);\n      var block1 = Buffer2.allocUnsafe(salt.length + 4);\n      salt.copy(block1, 0, 0, salt.length);\n      var destPos = 0;\n      var hLen = sizes[digest];\n      var l = Math.ceil(keylen / hLen);\n      for (var i = 1; i <= l; i++) {\n        block1.writeUInt32BE(i, salt.length);\n        var T = hmac.run(block1, hmac.ipad1);\n        var U = T;\n        for (var j = 1; j < iterations; j++) {\n          U = hmac.run(U, hmac.ipad2);\n          for (var k = 0; k < hLen; k++)\n            T[k] ^= U[k];\n        }\n        T.copy(DK, destPos);\n        destPos += hLen;\n      }\n      return DK;\n    }\n    module.exports = pbkdf2;\n  }\n});\n\n// node_modules/pbkdf2/lib/async.js\nvar require_async = __commonJS({\n  \"node_modules/pbkdf2/lib/async.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var checkParameters = require_precondition();\n    var defaultEncoding = require_default_encoding();\n    var sync = require_sync_browser();\n    var toBuffer = require_to_buffer();\n    var ZERO_BUF;\n    var subtle = global.crypto && global.crypto.subtle;\n    var toBrowser = {\n      sha: \"SHA-1\",\n      \"sha-1\": \"SHA-1\",\n      sha1: \"SHA-1\",\n      sha256: \"SHA-256\",\n      \"sha-256\": \"SHA-256\",\n      sha384: \"SHA-384\",\n      \"sha-384\": \"SHA-384\",\n      \"sha-512\": \"SHA-512\",\n      sha512: \"SHA-512\"\n    };\n    var checks = [];\n    function checkNative(algo) {\n      if (global.process && !global.process.browser) {\n        return Promise.resolve(false);\n      }\n      if (!subtle || !subtle.importKey || !subtle.deriveBits) {\n        return Promise.resolve(false);\n      }\n      if (checks[algo] !== void 0) {\n        return checks[algo];\n      }\n      ZERO_BUF = ZERO_BUF || Buffer2.alloc(8);\n      var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {\n        return true;\n      }).catch(function() {\n        return false;\n      });\n      checks[algo] = prom;\n      return prom;\n    }\n    var nextTick;\n    function getNextTick() {\n      if (nextTick) {\n        return nextTick;\n      }\n      if (global.process && global.process.nextTick) {\n        nextTick = global.process.nextTick;\n      } else if (global.queueMicrotask) {\n        nextTick = global.queueMicrotask;\n      } else if (global.setImmediate) {\n        nextTick = global.setImmediate;\n      } else {\n        nextTick = global.setTimeout;\n      }\n      return nextTick;\n    }\n    function browserPbkdf2(password, salt, iterations, length, algo) {\n      return subtle.importKey(\n        \"raw\",\n        password,\n        { name: \"PBKDF2\" },\n        false,\n        [\"deriveBits\"]\n      ).then(function(key) {\n        return subtle.deriveBits({\n          name: \"PBKDF2\",\n          salt,\n          iterations,\n          hash: {\n            name: algo\n          }\n        }, key, length << 3);\n      }).then(function(res) {\n        return Buffer2.from(res);\n      });\n    }\n    function resolvePromise(promise, callback) {\n      promise.then(function(out) {\n        getNextTick()(function() {\n          callback(null, out);\n        });\n      }, function(e) {\n        getNextTick()(function() {\n          callback(e);\n        });\n      });\n    }\n    module.exports = function(password, salt, iterations, keylen, digest, callback) {\n      if (typeof digest === \"function\") {\n        callback = digest;\n        digest = void 0;\n      }\n      digest = digest || \"sha1\";\n      var algo = toBrowser[digest.toLowerCase()];\n      if (!algo || typeof global.Promise !== \"function\") {\n        getNextTick()(function() {\n          var out;\n          try {\n            out = sync(password, salt, iterations, keylen, digest);\n          } catch (e) {\n            return callback(e);\n          }\n          callback(null, out);\n        });\n        return;\n      }\n      checkParameters(iterations, keylen);\n      password = toBuffer(password, defaultEncoding, \"Password\");\n      salt = toBuffer(salt, defaultEncoding, \"Salt\");\n      if (typeof callback !== \"function\")\n        throw new Error(\"No callback provided to pbkdf2\");\n      resolvePromise(checkNative(algo).then(function(resp) {\n        if (resp)\n          return browserPbkdf2(password, salt, iterations, keylen, algo);\n        return sync(password, salt, iterations, keylen, digest);\n      }), callback);\n    };\n  }\n});\n\n// node_modules/pbkdf2/browser.js\nvar require_browser5 = __commonJS({\n  \"node_modules/pbkdf2/browser.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    exports.pbkdf2 = require_async();\n    exports.pbkdf2Sync = require_sync_browser();\n  }\n});\n\n// node_modules/des.js/lib/des/utils.js\nvar require_utils = __commonJS({\n  \"node_modules/des.js/lib/des/utils.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    exports.readUInt32BE = function readUInt32BE(bytes, off) {\n      var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];\n      return res >>> 0;\n    };\n    exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {\n      bytes[0 + off] = value >>> 24;\n      bytes[1 + off] = value >>> 16 & 255;\n      bytes[2 + off] = value >>> 8 & 255;\n      bytes[3 + off] = value & 255;\n    };\n    exports.ip = function ip(inL, inR, out, off) {\n      var outL = 0;\n      var outR = 0;\n      for (var i = 6; i >= 0; i -= 2) {\n        for (var j = 0; j <= 24; j += 8) {\n          outL <<= 1;\n          outL |= inR >>> j + i & 1;\n        }\n        for (var j = 0; j <= 24; j += 8) {\n          outL <<= 1;\n          outL |= inL >>> j + i & 1;\n        }\n      }\n      for (var i = 6; i >= 0; i -= 2) {\n        for (var j = 1; j <= 25; j += 8) {\n          outR <<= 1;\n          outR |= inR >>> j + i & 1;\n        }\n        for (var j = 1; j <= 25; j += 8) {\n          outR <<= 1;\n          outR |= inL >>> j + i & 1;\n        }\n      }\n      out[off + 0] = outL >>> 0;\n      out[off + 1] = outR >>> 0;\n    };\n    exports.rip = function rip(inL, inR, out, off) {\n      var outL = 0;\n      var outR = 0;\n      for (var i = 0; i < 4; i++) {\n        for (var j = 24; j >= 0; j -= 8) {\n          outL <<= 1;\n          outL |= inR >>> j + i & 1;\n          outL <<= 1;\n          outL |= inL >>> j + i & 1;\n        }\n      }\n      for (var i = 4; i < 8; i++) {\n        for (var j = 24; j >= 0; j -= 8) {\n          outR <<= 1;\n          outR |= inR >>> j + i & 1;\n          outR <<= 1;\n          outR |= inL >>> j + i & 1;\n        }\n      }\n      out[off + 0] = outL >>> 0;\n      out[off + 1] = outR >>> 0;\n    };\n    exports.pc1 = function pc1(inL, inR, out, off) {\n      var outL = 0;\n      var outR = 0;\n      for (var i = 7; i >= 5; i--) {\n        for (var j = 0; j <= 24; j += 8) {\n          outL <<= 1;\n          outL |= inR >> j + i & 1;\n        }\n        for (var j = 0; j <= 24; j += 8) {\n          outL <<= 1;\n          outL |= inL >> j + i & 1;\n        }\n      }\n      for (var j = 0; j <= 24; j += 8) {\n        outL <<= 1;\n        outL |= inR >> j + i & 1;\n      }\n      for (var i = 1; i <= 3; i++) {\n        for (var j = 0; j <= 24; j += 8) {\n          outR <<= 1;\n          outR |= inR >> j + i & 1;\n        }\n        for (var j = 0; j <= 24; j += 8) {\n          outR <<= 1;\n          outR |= inL >> j + i & 1;\n        }\n      }\n      for (var j = 0; j <= 24; j += 8) {\n        outR <<= 1;\n        outR |= inL >> j + i & 1;\n      }\n      out[off + 0] = outL >>> 0;\n      out[off + 1] = outR >>> 0;\n    };\n    exports.r28shl = function r28shl(num, shift) {\n      return num << shift & 268435455 | num >>> 28 - shift;\n    };\n    var pc2table = [\n      // inL => outL\n      14,\n      11,\n      17,\n      4,\n      27,\n      23,\n      25,\n      0,\n      13,\n      22,\n      7,\n      18,\n      5,\n      9,\n      16,\n      24,\n      2,\n      20,\n      12,\n      21,\n      1,\n      8,\n      15,\n      26,\n      // inR => outR\n      15,\n      4,\n      25,\n      19,\n      9,\n      1,\n      26,\n      16,\n      5,\n      11,\n      23,\n      8,\n      12,\n      7,\n      17,\n      0,\n      22,\n      3,\n      10,\n      14,\n      6,\n      20,\n      27,\n      24\n    ];\n    exports.pc2 = function pc2(inL, inR, out, off) {\n      var outL = 0;\n      var outR = 0;\n      var len = pc2table.length >>> 1;\n      for (var i = 0; i < len; i++) {\n        outL <<= 1;\n        outL |= inL >>> pc2table[i] & 1;\n      }\n      for (var i = len; i < pc2table.length; i++) {\n        outR <<= 1;\n        outR |= inR >>> pc2table[i] & 1;\n      }\n      out[off + 0] = outL >>> 0;\n      out[off + 1] = outR >>> 0;\n    };\n    exports.expand = function expand(r, out, off) {\n      var outL = 0;\n      var outR = 0;\n      outL = (r & 1) << 5 | r >>> 27;\n      for (var i = 23; i >= 15; i -= 4) {\n        outL <<= 6;\n        outL |= r >>> i & 63;\n      }\n      for (var i = 11; i >= 3; i -= 4) {\n        outR |= r >>> i & 63;\n        outR <<= 6;\n      }\n      outR |= (r & 31) << 1 | r >>> 31;\n      out[off + 0] = outL >>> 0;\n      out[off + 1] = outR >>> 0;\n    };\n    var sTable = [\n      14,\n      0,\n      4,\n      15,\n      13,\n      7,\n      1,\n      4,\n      2,\n      14,\n      15,\n      2,\n      11,\n      13,\n      8,\n      1,\n      3,\n      10,\n      10,\n      6,\n      6,\n      12,\n      12,\n      11,\n      5,\n      9,\n      9,\n      5,\n      0,\n      3,\n      7,\n      8,\n      4,\n      15,\n      1,\n      12,\n      14,\n      8,\n      8,\n      2,\n      13,\n      4,\n      6,\n      9,\n      2,\n      1,\n      11,\n      7,\n      15,\n      5,\n      12,\n      11,\n      9,\n      3,\n      7,\n      14,\n      3,\n      10,\n      10,\n      0,\n      5,\n      6,\n      0,\n      13,\n      15,\n      3,\n      1,\n      13,\n      8,\n      4,\n      14,\n      7,\n      6,\n      15,\n      11,\n      2,\n      3,\n      8,\n      4,\n      14,\n      9,\n      12,\n      7,\n      0,\n      2,\n      1,\n      13,\n      10,\n      12,\n      6,\n      0,\n      9,\n      5,\n      11,\n      10,\n      5,\n      0,\n      13,\n      14,\n      8,\n      7,\n      10,\n      11,\n      1,\n      10,\n      3,\n      4,\n      15,\n      13,\n      4,\n      1,\n      2,\n      5,\n      11,\n      8,\n      6,\n      12,\n      7,\n      6,\n      12,\n      9,\n      0,\n      3,\n      5,\n      2,\n      14,\n      15,\n      9,\n      10,\n      13,\n      0,\n      7,\n      9,\n      0,\n      14,\n      9,\n      6,\n      3,\n      3,\n      4,\n      15,\n      6,\n      5,\n      10,\n      1,\n      2,\n      13,\n      8,\n      12,\n      5,\n      7,\n      14,\n      11,\n      12,\n      4,\n      11,\n      2,\n      15,\n      8,\n      1,\n      13,\n      1,\n      6,\n      10,\n      4,\n      13,\n      9,\n      0,\n      8,\n      6,\n      15,\n      9,\n      3,\n      8,\n      0,\n      7,\n      11,\n      4,\n      1,\n      15,\n      2,\n      14,\n      12,\n      3,\n      5,\n      11,\n      10,\n      5,\n      14,\n      2,\n      7,\n      12,\n      7,\n      13,\n      13,\n      8,\n      14,\n      11,\n      3,\n      5,\n      0,\n      6,\n      6,\n      15,\n      9,\n      0,\n      10,\n      3,\n      1,\n      4,\n      2,\n      7,\n      8,\n      2,\n      5,\n      12,\n      11,\n      1,\n      12,\n      10,\n      4,\n      14,\n      15,\n      9,\n      10,\n      3,\n      6,\n      15,\n      9,\n      0,\n      0,\n      6,\n      12,\n      10,\n      11,\n      1,\n      7,\n      13,\n      13,\n      8,\n      15,\n      9,\n      1,\n      4,\n      3,\n      5,\n      14,\n      11,\n      5,\n      12,\n      2,\n      7,\n      8,\n      2,\n      4,\n      14,\n      2,\n      14,\n      12,\n      11,\n      4,\n      2,\n      1,\n      12,\n      7,\n      4,\n      10,\n      7,\n      11,\n      13,\n      6,\n      1,\n      8,\n      5,\n      5,\n      0,\n      3,\n      15,\n      15,\n      10,\n      13,\n      3,\n      0,\n      9,\n      14,\n      8,\n      9,\n      6,\n      4,\n      11,\n      2,\n      8,\n      1,\n      12,\n      11,\n      7,\n      10,\n      1,\n      13,\n      14,\n      7,\n      2,\n      8,\n      13,\n      15,\n      6,\n      9,\n      15,\n      12,\n      0,\n      5,\n      9,\n      6,\n      10,\n      3,\n      4,\n      0,\n      5,\n      14,\n      3,\n      12,\n      10,\n      1,\n      15,\n      10,\n      4,\n      15,\n      2,\n      9,\n      7,\n      2,\n      12,\n      6,\n      9,\n      8,\n      5,\n      0,\n      6,\n      13,\n      1,\n      3,\n      13,\n      4,\n      14,\n      14,\n      0,\n      7,\n      11,\n      5,\n      3,\n      11,\n      8,\n      9,\n      4,\n      14,\n      3,\n      15,\n      2,\n      5,\n      12,\n      2,\n      9,\n      8,\n      5,\n      12,\n      15,\n      3,\n      10,\n      7,\n      11,\n      0,\n      14,\n      4,\n      1,\n      10,\n      7,\n      1,\n      6,\n      13,\n      0,\n      11,\n      8,\n      6,\n      13,\n      4,\n      13,\n      11,\n      0,\n      2,\n      11,\n      14,\n      7,\n      15,\n      4,\n      0,\n      9,\n      8,\n      1,\n      13,\n      10,\n      3,\n      14,\n      12,\n      3,\n      9,\n      5,\n      7,\n      12,\n      5,\n      2,\n      10,\n      15,\n      6,\n      8,\n      1,\n      6,\n      1,\n      6,\n      4,\n      11,\n      11,\n      13,\n      13,\n      8,\n      12,\n      1,\n      3,\n      4,\n      7,\n      10,\n      14,\n      7,\n      10,\n      9,\n      15,\n      5,\n      6,\n      0,\n      8,\n      15,\n      0,\n      14,\n      5,\n      2,\n      9,\n      3,\n      2,\n      12,\n      13,\n      1,\n      2,\n      15,\n      8,\n      13,\n      4,\n      8,\n      6,\n      10,\n      15,\n      3,\n      11,\n      7,\n      1,\n      4,\n      10,\n      12,\n      9,\n      5,\n      3,\n      6,\n      14,\n      11,\n      5,\n      0,\n      0,\n      14,\n      12,\n      9,\n      7,\n      2,\n      7,\n      2,\n      11,\n      1,\n      4,\n      14,\n      1,\n      7,\n      9,\n      4,\n      12,\n      10,\n      14,\n      8,\n      2,\n      13,\n      0,\n      15,\n      6,\n      12,\n      10,\n      9,\n      13,\n      0,\n      15,\n      3,\n      3,\n      5,\n      5,\n      6,\n      8,\n      11\n    ];\n    exports.substitute = function substitute(inL, inR) {\n      var out = 0;\n      for (var i = 0; i < 4; i++) {\n        var b = inL >>> 18 - i * 6 & 63;\n        var sb = sTable[i * 64 + b];\n        out <<= 4;\n        out |= sb;\n      }\n      for (var i = 0; i < 4; i++) {\n        var b = inR >>> 18 - i * 6 & 63;\n        var sb = sTable[4 * 64 + i * 64 + b];\n        out <<= 4;\n        out |= sb;\n      }\n      return out >>> 0;\n    };\n    var permuteTable = [\n      16,\n      25,\n      12,\n      11,\n      3,\n      20,\n      4,\n      15,\n      31,\n      17,\n      9,\n      6,\n      27,\n      14,\n      1,\n      22,\n      30,\n      24,\n      8,\n      18,\n      0,\n      5,\n      29,\n      23,\n      13,\n      19,\n      2,\n      26,\n      10,\n      21,\n      28,\n      7\n    ];\n    exports.permute = function permute(num) {\n      var out = 0;\n      for (var i = 0; i < permuteTable.length; i++) {\n        out <<= 1;\n        out |= num >>> permuteTable[i] & 1;\n      }\n      return out >>> 0;\n    };\n    exports.padSplit = function padSplit(num, size, group) {\n      var str = num.toString(2);\n      while (str.length < size)\n        str = \"0\" + str;\n      var out = [];\n      for (var i = 0; i < size; i += group)\n        out.push(str.slice(i, i + group));\n      return out.join(\" \");\n    };\n  }\n});\n\n// node_modules/minimalistic-assert/index.js\nvar require_minimalistic_assert = __commonJS({\n  \"node_modules/minimalistic-assert/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = assert;\n    function assert(val, msg) {\n      if (!val)\n        throw new Error(msg || \"Assertion failed\");\n    }\n    assert.equal = function assertEqual(l, r, msg) {\n      if (l != r)\n        throw new Error(msg || \"Assertion failed: \" + l + \" != \" + r);\n    };\n  }\n});\n\n// node_modules/des.js/lib/des/cipher.js\nvar require_cipher = __commonJS({\n  \"node_modules/des.js/lib/des/cipher.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var assert = require_minimalistic_assert();\n    function Cipher(options) {\n      this.options = options;\n      this.type = this.options.type;\n      this.blockSize = 8;\n      this._init();\n      this.buffer = new Array(this.blockSize);\n      this.bufferOff = 0;\n      this.padding = options.padding !== false;\n    }\n    module.exports = Cipher;\n    Cipher.prototype._init = function _init() {\n    };\n    Cipher.prototype.update = function update(data) {\n      if (data.length === 0)\n        return [];\n      if (this.type === \"decrypt\")\n        return this._updateDecrypt(data);\n      else\n        return this._updateEncrypt(data);\n    };\n    Cipher.prototype._buffer = function _buffer(data, off) {\n      var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);\n      for (var i = 0; i < min; i++)\n        this.buffer[this.bufferOff + i] = data[off + i];\n      this.bufferOff += min;\n      return min;\n    };\n    Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {\n      this._update(this.buffer, 0, out, off);\n      this.bufferOff = 0;\n      return this.blockSize;\n    };\n    Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {\n      var inputOff = 0;\n      var outputOff = 0;\n      var count = (this.bufferOff + data.length) / this.blockSize | 0;\n      var out = new Array(count * this.blockSize);\n      if (this.bufferOff !== 0) {\n        inputOff += this._buffer(data, inputOff);\n        if (this.bufferOff === this.buffer.length)\n          outputOff += this._flushBuffer(out, outputOff);\n      }\n      var max = data.length - (data.length - inputOff) % this.blockSize;\n      for (; inputOff < max; inputOff += this.blockSize) {\n        this._update(data, inputOff, out, outputOff);\n        outputOff += this.blockSize;\n      }\n      for (; inputOff < data.length; inputOff++, this.bufferOff++)\n        this.buffer[this.bufferOff] = data[inputOff];\n      return out;\n    };\n    Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {\n      var inputOff = 0;\n      var outputOff = 0;\n      var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;\n      var out = new Array(count * this.blockSize);\n      for (; count > 0; count--) {\n        inputOff += this._buffer(data, inputOff);\n        outputOff += this._flushBuffer(out, outputOff);\n      }\n      inputOff += this._buffer(data, inputOff);\n      return out;\n    };\n    Cipher.prototype.final = function final(buffer) {\n      var first;\n      if (buffer)\n        first = this.update(buffer);\n      var last;\n      if (this.type === \"encrypt\")\n        last = this._finalEncrypt();\n      else\n        last = this._finalDecrypt();\n      if (first)\n        return first.concat(last);\n      else\n        return last;\n    };\n    Cipher.prototype._pad = function _pad(buffer, off) {\n      if (off === 0)\n        return false;\n      while (off < buffer.length)\n        buffer[off++] = 0;\n      return true;\n    };\n    Cipher.prototype._finalEncrypt = function _finalEncrypt() {\n      if (!this._pad(this.buffer, this.bufferOff))\n        return [];\n      var out = new Array(this.blockSize);\n      this._update(this.buffer, 0, out, 0);\n      return out;\n    };\n    Cipher.prototype._unpad = function _unpad(buffer) {\n      return buffer;\n    };\n    Cipher.prototype._finalDecrypt = function _finalDecrypt() {\n      assert.equal(this.bufferOff, this.blockSize, \"Not enough data to decrypt\");\n      var out = new Array(this.blockSize);\n      this._flushBuffer(out, 0);\n      return this._unpad(out);\n    };\n  }\n});\n\n// node_modules/des.js/lib/des/des.js\nvar require_des = __commonJS({\n  \"node_modules/des.js/lib/des/des.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var assert = require_minimalistic_assert();\n    var inherits = require_inherits_browser();\n    var utils = require_utils();\n    var Cipher = require_cipher();\n    function DESState() {\n      this.tmp = new Array(2);\n      this.keys = null;\n    }\n    function DES(options) {\n      Cipher.call(this, options);\n      var state = new DESState();\n      this._desState = state;\n      this.deriveKeys(state, options.key);\n    }\n    inherits(DES, Cipher);\n    module.exports = DES;\n    DES.create = function create(options) {\n      return new DES(options);\n    };\n    var shiftTable = [\n      1,\n      1,\n      2,\n      2,\n      2,\n      2,\n      2,\n      2,\n      1,\n      2,\n      2,\n      2,\n      2,\n      2,\n      2,\n      1\n    ];\n    DES.prototype.deriveKeys = function deriveKeys(state, key) {\n      state.keys = new Array(16 * 2);\n      assert.equal(key.length, this.blockSize, \"Invalid key length\");\n      var kL = utils.readUInt32BE(key, 0);\n      var kR = utils.readUInt32BE(key, 4);\n      utils.pc1(kL, kR, state.tmp, 0);\n      kL = state.tmp[0];\n      kR = state.tmp[1];\n      for (var i = 0; i < state.keys.length; i += 2) {\n        var shift = shiftTable[i >>> 1];\n        kL = utils.r28shl(kL, shift);\n        kR = utils.r28shl(kR, shift);\n        utils.pc2(kL, kR, state.keys, i);\n      }\n    };\n    DES.prototype._update = function _update(inp, inOff, out, outOff) {\n      var state = this._desState;\n      var l = utils.readUInt32BE(inp, inOff);\n      var r = utils.readUInt32BE(inp, inOff + 4);\n      utils.ip(l, r, state.tmp, 0);\n      l = state.tmp[0];\n      r = state.tmp[1];\n      if (this.type === \"encrypt\")\n        this._encrypt(state, l, r, state.tmp, 0);\n      else\n        this._decrypt(state, l, r, state.tmp, 0);\n      l = state.tmp[0];\n      r = state.tmp[1];\n      utils.writeUInt32BE(out, l, outOff);\n      utils.writeUInt32BE(out, r, outOff + 4);\n    };\n    DES.prototype._pad = function _pad(buffer, off) {\n      if (this.padding === false) {\n        return false;\n      }\n      var value = buffer.length - off;\n      for (var i = off; i < buffer.length; i++)\n        buffer[i] = value;\n      return true;\n    };\n    DES.prototype._unpad = function _unpad(buffer) {\n      if (this.padding === false) {\n        return buffer;\n      }\n      var pad = buffer[buffer.length - 1];\n      for (var i = buffer.length - pad; i < buffer.length; i++)\n        assert.equal(buffer[i], pad);\n      return buffer.slice(0, buffer.length - pad);\n    };\n    DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {\n      var l = lStart;\n      var r = rStart;\n      for (var i = 0; i < state.keys.length; i += 2) {\n        var keyL = state.keys[i];\n        var keyR = state.keys[i + 1];\n        utils.expand(r, state.tmp, 0);\n        keyL ^= state.tmp[0];\n        keyR ^= state.tmp[1];\n        var s = utils.substitute(keyL, keyR);\n        var f = utils.permute(s);\n        var t = r;\n        r = (l ^ f) >>> 0;\n        l = t;\n      }\n      utils.rip(r, l, out, off);\n    };\n    DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {\n      var l = rStart;\n      var r = lStart;\n      for (var i = state.keys.length - 2; i >= 0; i -= 2) {\n        var keyL = state.keys[i];\n        var keyR = state.keys[i + 1];\n        utils.expand(l, state.tmp, 0);\n        keyL ^= state.tmp[0];\n        keyR ^= state.tmp[1];\n        var s = utils.substitute(keyL, keyR);\n        var f = utils.permute(s);\n        var t = l;\n        l = (r ^ f) >>> 0;\n        r = t;\n      }\n      utils.rip(l, r, out, off);\n    };\n  }\n});\n\n// node_modules/des.js/lib/des/cbc.js\nvar require_cbc = __commonJS({\n  \"node_modules/des.js/lib/des/cbc.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var assert = require_minimalistic_assert();\n    var inherits = require_inherits_browser();\n    var proto = {};\n    function CBCState(iv) {\n      assert.equal(iv.length, 8, \"Invalid IV length\");\n      this.iv = new Array(8);\n      for (var i = 0; i < this.iv.length; i++)\n        this.iv[i] = iv[i];\n    }\n    function instantiate(Base) {\n      function CBC(options) {\n        Base.call(this, options);\n        this._cbcInit();\n      }\n      inherits(CBC, Base);\n      var keys = Object.keys(proto);\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        CBC.prototype[key] = proto[key];\n      }\n      CBC.create = function create(options) {\n        return new CBC(options);\n      };\n      return CBC;\n    }\n    exports.instantiate = instantiate;\n    proto._cbcInit = function _cbcInit() {\n      var state = new CBCState(this.options.iv);\n      this._cbcState = state;\n    };\n    proto._update = function _update(inp, inOff, out, outOff) {\n      var state = this._cbcState;\n      var superProto = this.constructor.super_.prototype;\n      var iv = state.iv;\n      if (this.type === \"encrypt\") {\n        for (var i = 0; i < this.blockSize; i++)\n          iv[i] ^= inp[inOff + i];\n        superProto._update.call(this, iv, 0, out, outOff);\n        for (var i = 0; i < this.blockSize; i++)\n          iv[i] = out[outOff + i];\n      } else {\n        superProto._update.call(this, inp, inOff, out, outOff);\n        for (var i = 0; i < this.blockSize; i++)\n          out[outOff + i] ^= iv[i];\n        for (var i = 0; i < this.blockSize; i++)\n          iv[i] = inp[inOff + i];\n      }\n    };\n  }\n});\n\n// node_modules/des.js/lib/des/ede.js\nvar require_ede = __commonJS({\n  \"node_modules/des.js/lib/des/ede.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var assert = require_minimalistic_assert();\n    var inherits = require_inherits_browser();\n    var Cipher = require_cipher();\n    var DES = require_des();\n    function EDEState(type, key) {\n      assert.equal(key.length, 24, \"Invalid key length\");\n      var k1 = key.slice(0, 8);\n      var k2 = key.slice(8, 16);\n      var k3 = key.slice(16, 24);\n      if (type === \"encrypt\") {\n        this.ciphers = [\n          DES.create({ type: \"encrypt\", key: k1 }),\n          DES.create({ type: \"decrypt\", key: k2 }),\n          DES.create({ type: \"encrypt\", key: k3 })\n        ];\n      } else {\n        this.ciphers = [\n          DES.create({ type: \"decrypt\", key: k3 }),\n          DES.create({ type: \"encrypt\", key: k2 }),\n          DES.create({ type: \"decrypt\", key: k1 })\n        ];\n      }\n    }\n    function EDE(options) {\n      Cipher.call(this, options);\n      var state = new EDEState(this.type, this.options.key);\n      this._edeState = state;\n    }\n    inherits(EDE, Cipher);\n    module.exports = EDE;\n    EDE.create = function create(options) {\n      return new EDE(options);\n    };\n    EDE.prototype._update = function _update(inp, inOff, out, outOff) {\n      var state = this._edeState;\n      state.ciphers[0]._update(inp, inOff, out, outOff);\n      state.ciphers[1]._update(out, outOff, out, outOff);\n      state.ciphers[2]._update(out, outOff, out, outOff);\n    };\n    EDE.prototype._pad = DES.prototype._pad;\n    EDE.prototype._unpad = DES.prototype._unpad;\n  }\n});\n\n// node_modules/des.js/lib/des.js\nvar require_des2 = __commonJS({\n  \"node_modules/des.js/lib/des.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    exports.utils = require_utils();\n    exports.Cipher = require_cipher();\n    exports.DES = require_des();\n    exports.CBC = require_cbc();\n    exports.EDE = require_ede();\n  }\n});\n\n// node_modules/browserify-des/index.js\nvar require_browserify_des = __commonJS({\n  \"node_modules/browserify-des/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var CipherBase = require_cipher_base();\n    var des = require_des2();\n    var inherits = require_inherits_browser();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var modes = {\n      \"des-ede3-cbc\": des.CBC.instantiate(des.EDE),\n      \"des-ede3\": des.EDE,\n      \"des-ede-cbc\": des.CBC.instantiate(des.EDE),\n      \"des-ede\": des.EDE,\n      \"des-cbc\": des.CBC.instantiate(des.DES),\n      \"des-ecb\": des.DES\n    };\n    modes.des = modes[\"des-cbc\"];\n    modes.des3 = modes[\"des-ede3-cbc\"];\n    module.exports = DES;\n    inherits(DES, CipherBase);\n    function DES(opts) {\n      CipherBase.call(this);\n      var modeName = opts.mode.toLowerCase();\n      var mode = modes[modeName];\n      var type;\n      if (opts.decrypt) {\n        type = \"decrypt\";\n      } else {\n        type = \"encrypt\";\n      }\n      var key = opts.key;\n      if (!Buffer2.isBuffer(key)) {\n        key = Buffer2.from(key);\n      }\n      if (modeName === \"des-ede\" || modeName === \"des-ede-cbc\") {\n        key = Buffer2.concat([key, key.slice(0, 8)]);\n      }\n      var iv = opts.iv;\n      if (!Buffer2.isBuffer(iv)) {\n        iv = Buffer2.from(iv);\n      }\n      this._des = mode.create({\n        key,\n        iv,\n        type\n      });\n    }\n    DES.prototype._update = function(data) {\n      return Buffer2.from(this._des.update(data));\n    };\n    DES.prototype._final = function() {\n      return Buffer2.from(this._des.final());\n    };\n  }\n});\n\n// node_modules/browserify-aes/modes/ecb.js\nvar require_ecb = __commonJS({\n  \"node_modules/browserify-aes/modes/ecb.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    exports.encrypt = function(self2, block) {\n      return self2._cipher.encryptBlock(block);\n    };\n    exports.decrypt = function(self2, block) {\n      return self2._cipher.decryptBlock(block);\n    };\n  }\n});\n\n// node_modules/buffer-xor/index.js\nvar require_buffer_xor = __commonJS({\n  \"node_modules/buffer-xor/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = function xor(a, b) {\n      var length = Math.min(a.length, b.length);\n      var buffer = new Buffer(length);\n      for (var i = 0; i < length; ++i) {\n        buffer[i] = a[i] ^ b[i];\n      }\n      return buffer;\n    };\n  }\n});\n\n// node_modules/browserify-aes/modes/cbc.js\nvar require_cbc2 = __commonJS({\n  \"node_modules/browserify-aes/modes/cbc.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var xor = require_buffer_xor();\n    exports.encrypt = function(self2, block) {\n      var data = xor(block, self2._prev);\n      self2._prev = self2._cipher.encryptBlock(data);\n      return self2._prev;\n    };\n    exports.decrypt = function(self2, block) {\n      var pad = self2._prev;\n      self2._prev = block;\n      var out = self2._cipher.decryptBlock(block);\n      return xor(out, pad);\n    };\n  }\n});\n\n// node_modules/browserify-aes/modes/cfb.js\nvar require_cfb = __commonJS({\n  \"node_modules/browserify-aes/modes/cfb.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var xor = require_buffer_xor();\n    function encryptStart(self2, data, decrypt) {\n      var len = data.length;\n      var out = xor(data, self2._cache);\n      self2._cache = self2._cache.slice(len);\n      self2._prev = Buffer2.concat([self2._prev, decrypt ? data : out]);\n      return out;\n    }\n    exports.encrypt = function(self2, data, decrypt) {\n      var out = Buffer2.allocUnsafe(0);\n      var len;\n      while (data.length) {\n        if (self2._cache.length === 0) {\n          self2._cache = self2._cipher.encryptBlock(self2._prev);\n          self2._prev = Buffer2.allocUnsafe(0);\n        }\n        if (self2._cache.length <= data.length) {\n          len = self2._cache.length;\n          out = Buffer2.concat([out, encryptStart(self2, data.slice(0, len), decrypt)]);\n          data = data.slice(len);\n        } else {\n          out = Buffer2.concat([out, encryptStart(self2, data, decrypt)]);\n          break;\n        }\n      }\n      return out;\n    };\n  }\n});\n\n// node_modules/browserify-aes/modes/cfb8.js\nvar require_cfb8 = __commonJS({\n  \"node_modules/browserify-aes/modes/cfb8.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    function encryptByte(self2, byteParam, decrypt) {\n      var pad = self2._cipher.encryptBlock(self2._prev);\n      var out = pad[0] ^ byteParam;\n      self2._prev = Buffer2.concat([\n        self2._prev.slice(1),\n        Buffer2.from([decrypt ? byteParam : out])\n      ]);\n      return out;\n    }\n    exports.encrypt = function(self2, chunk, decrypt) {\n      var len = chunk.length;\n      var out = Buffer2.allocUnsafe(len);\n      var i = -1;\n      while (++i < len) {\n        out[i] = encryptByte(self2, chunk[i], decrypt);\n      }\n      return out;\n    };\n  }\n});\n\n// node_modules/browserify-aes/modes/cfb1.js\nvar require_cfb1 = __commonJS({\n  \"node_modules/browserify-aes/modes/cfb1.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    function encryptByte(self2, byteParam, decrypt) {\n      var pad;\n      var i = -1;\n      var len = 8;\n      var out = 0;\n      var bit, value;\n      while (++i < len) {\n        pad = self2._cipher.encryptBlock(self2._prev);\n        bit = byteParam & 1 << 7 - i ? 128 : 0;\n        value = pad[0] ^ bit;\n        out += (value & 128) >> i % 8;\n        self2._prev = shiftIn(self2._prev, decrypt ? bit : value);\n      }\n      return out;\n    }\n    function shiftIn(buffer, value) {\n      var len = buffer.length;\n      var i = -1;\n      var out = Buffer2.allocUnsafe(buffer.length);\n      buffer = Buffer2.concat([buffer, Buffer2.from([value])]);\n      while (++i < len) {\n        out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;\n      }\n      return out;\n    }\n    exports.encrypt = function(self2, chunk, decrypt) {\n      var len = chunk.length;\n      var out = Buffer2.allocUnsafe(len);\n      var i = -1;\n      while (++i < len) {\n        out[i] = encryptByte(self2, chunk[i], decrypt);\n      }\n      return out;\n    };\n  }\n});\n\n// node_modules/browserify-aes/modes/ofb.js\nvar require_ofb = __commonJS({\n  \"node_modules/browserify-aes/modes/ofb.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var xor = require_buffer_xor();\n    function getBlock(self2) {\n      self2._prev = self2._cipher.encryptBlock(self2._prev);\n      return self2._prev;\n    }\n    exports.encrypt = function(self2, chunk) {\n      while (self2._cache.length < chunk.length) {\n        self2._cache = Buffer.concat([self2._cache, getBlock(self2)]);\n      }\n      var pad = self2._cache.slice(0, chunk.length);\n      self2._cache = self2._cache.slice(chunk.length);\n      return xor(chunk, pad);\n    };\n  }\n});\n\n// node_modules/browserify-aes/incr32.js\nvar require_incr32 = __commonJS({\n  \"node_modules/browserify-aes/incr32.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    function incr32(iv) {\n      var len = iv.length;\n      var item;\n      while (len--) {\n        item = iv.readUInt8(len);\n        if (item === 255) {\n          iv.writeUInt8(0, len);\n        } else {\n          item++;\n          iv.writeUInt8(item, len);\n          break;\n        }\n      }\n    }\n    module.exports = incr32;\n  }\n});\n\n// node_modules/browserify-aes/modes/ctr.js\nvar require_ctr = __commonJS({\n  \"node_modules/browserify-aes/modes/ctr.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var xor = require_buffer_xor();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var incr32 = require_incr32();\n    function getBlock(self2) {\n      var out = self2._cipher.encryptBlockRaw(self2._prev);\n      incr32(self2._prev);\n      return out;\n    }\n    var blockSize = 16;\n    exports.encrypt = function(self2, chunk) {\n      var chunkNum = Math.ceil(chunk.length / blockSize);\n      var start = self2._cache.length;\n      self2._cache = Buffer2.concat([\n        self2._cache,\n        Buffer2.allocUnsafe(chunkNum * blockSize)\n      ]);\n      for (var i = 0; i < chunkNum; i++) {\n        var out = getBlock(self2);\n        var offset = start + i * blockSize;\n        self2._cache.writeUInt32BE(out[0], offset + 0);\n        self2._cache.writeUInt32BE(out[1], offset + 4);\n        self2._cache.writeUInt32BE(out[2], offset + 8);\n        self2._cache.writeUInt32BE(out[3], offset + 12);\n      }\n      var pad = self2._cache.slice(0, chunk.length);\n      self2._cache = self2._cache.slice(chunk.length);\n      return xor(chunk, pad);\n    };\n  }\n});\n\n// node_modules/browserify-aes/modes/list.json\nvar require_list = __commonJS({\n  \"node_modules/browserify-aes/modes/list.json\"(exports, module) {\n    module.exports = {\n      \"aes-128-ecb\": {\n        cipher: \"AES\",\n        key: 128,\n        iv: 0,\n        mode: \"ECB\",\n        type: \"block\"\n      },\n      \"aes-192-ecb\": {\n        cipher: \"AES\",\n        key: 192,\n        iv: 0,\n        mode: \"ECB\",\n        type: \"block\"\n      },\n      \"aes-256-ecb\": {\n        cipher: \"AES\",\n        key: 256,\n        iv: 0,\n        mode: \"ECB\",\n        type: \"block\"\n      },\n      \"aes-128-cbc\": {\n        cipher: \"AES\",\n        key: 128,\n        iv: 16,\n        mode: \"CBC\",\n        type: \"block\"\n      },\n      \"aes-192-cbc\": {\n        cipher: \"AES\",\n        key: 192,\n        iv: 16,\n        mode: \"CBC\",\n        type: \"block\"\n      },\n      \"aes-256-cbc\": {\n        cipher: \"AES\",\n        key: 256,\n        iv: 16,\n        mode: \"CBC\",\n        type: \"block\"\n      },\n      aes128: {\n        cipher: \"AES\",\n        key: 128,\n        iv: 16,\n        mode: \"CBC\",\n        type: \"block\"\n      },\n      aes192: {\n        cipher: \"AES\",\n        key: 192,\n        iv: 16,\n        mode: \"CBC\",\n        type: \"block\"\n      },\n      aes256: {\n        cipher: \"AES\",\n        key: 256,\n        iv: 16,\n        mode: \"CBC\",\n        type: \"block\"\n      },\n      \"aes-128-cfb\": {\n        cipher: \"AES\",\n        key: 128,\n        iv: 16,\n        mode: \"CFB\",\n        type: \"stream\"\n      },\n      \"aes-192-cfb\": {\n        cipher: \"AES\",\n        key: 192,\n        iv: 16,\n        mode: \"CFB\",\n        type: \"stream\"\n      },\n      \"aes-256-cfb\": {\n        cipher: \"AES\",\n        key: 256,\n        iv: 16,\n        mode: \"CFB\",\n        type: \"stream\"\n      },\n      \"aes-128-cfb8\": {\n        cipher: \"AES\",\n        key: 128,\n        iv: 16,\n        mode: \"CFB8\",\n        type: \"stream\"\n      },\n      \"aes-192-cfb8\": {\n        cipher: \"AES\",\n        key: 192,\n        iv: 16,\n        mode: \"CFB8\",\n        type: \"stream\"\n      },\n      \"aes-256-cfb8\": {\n        cipher: \"AES\",\n        key: 256,\n        iv: 16,\n        mode: \"CFB8\",\n        type: \"stream\"\n      },\n      \"aes-128-cfb1\": {\n        cipher: \"AES\",\n        key: 128,\n        iv: 16,\n        mode: \"CFB1\",\n        type: \"stream\"\n      },\n      \"aes-192-cfb1\": {\n        cipher: \"AES\",\n        key: 192,\n        iv: 16,\n        mode: \"CFB1\",\n        type: \"stream\"\n      },\n      \"aes-256-cfb1\": {\n        cipher: \"AES\",\n        key: 256,\n        iv: 16,\n        mode: \"CFB1\",\n        type: \"stream\"\n      },\n      \"aes-128-ofb\": {\n        cipher: \"AES\",\n        key: 128,\n        iv: 16,\n        mode: \"OFB\",\n        type: \"stream\"\n      },\n      \"aes-192-ofb\": {\n        cipher: \"AES\",\n        key: 192,\n        iv: 16,\n        mode: \"OFB\",\n        type: \"stream\"\n      },\n      \"aes-256-ofb\": {\n        cipher: \"AES\",\n        key: 256,\n        iv: 16,\n        mode: \"OFB\",\n        type: \"stream\"\n      },\n      \"aes-128-ctr\": {\n        cipher: \"AES\",\n        key: 128,\n        iv: 16,\n        mode: \"CTR\",\n        type: \"stream\"\n      },\n      \"aes-192-ctr\": {\n        cipher: \"AES\",\n        key: 192,\n        iv: 16,\n        mode: \"CTR\",\n        type: \"stream\"\n      },\n      \"aes-256-ctr\": {\n        cipher: \"AES\",\n        key: 256,\n        iv: 16,\n        mode: \"CTR\",\n        type: \"stream\"\n      },\n      \"aes-128-gcm\": {\n        cipher: \"AES\",\n        key: 128,\n        iv: 12,\n        mode: \"GCM\",\n        type: \"auth\"\n      },\n      \"aes-192-gcm\": {\n        cipher: \"AES\",\n        key: 192,\n        iv: 12,\n        mode: \"GCM\",\n        type: \"auth\"\n      },\n      \"aes-256-gcm\": {\n        cipher: \"AES\",\n        key: 256,\n        iv: 12,\n        mode: \"GCM\",\n        type: \"auth\"\n      }\n    };\n  }\n});\n\n// node_modules/browserify-aes/modes/index.js\nvar require_modes = __commonJS({\n  \"node_modules/browserify-aes/modes/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var modeModules = {\n      ECB: require_ecb(),\n      CBC: require_cbc2(),\n      CFB: require_cfb(),\n      CFB8: require_cfb8(),\n      CFB1: require_cfb1(),\n      OFB: require_ofb(),\n      CTR: require_ctr(),\n      GCM: require_ctr()\n    };\n    var modes = require_list();\n    for (key in modes) {\n      modes[key].module = modeModules[modes[key].mode];\n    }\n    var key;\n    module.exports = modes;\n  }\n});\n\n// node_modules/browserify-aes/aes.js\nvar require_aes = __commonJS({\n  \"node_modules/browserify-aes/aes.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    function asUInt32Array(buf) {\n      if (!Buffer2.isBuffer(buf))\n        buf = Buffer2.from(buf);\n      var len = buf.length / 4 | 0;\n      var out = new Array(len);\n      for (var i = 0; i < len; i++) {\n        out[i] = buf.readUInt32BE(i * 4);\n      }\n      return out;\n    }\n    function scrubVec(v) {\n      for (var i = 0; i < v.length; v++) {\n        v[i] = 0;\n      }\n    }\n    function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {\n      var SUB_MIX0 = SUB_MIX[0];\n      var SUB_MIX1 = SUB_MIX[1];\n      var SUB_MIX2 = SUB_MIX[2];\n      var SUB_MIX3 = SUB_MIX[3];\n      var s0 = M[0] ^ keySchedule[0];\n      var s1 = M[1] ^ keySchedule[1];\n      var s2 = M[2] ^ keySchedule[2];\n      var s3 = M[3] ^ keySchedule[3];\n      var t0, t1, t2, t3;\n      var ksRow = 4;\n      for (var round = 1; round < nRounds; round++) {\n        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s2 >>> 8 & 255] ^ SUB_MIX3[s3 & 255] ^ keySchedule[ksRow++];\n        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 255] ^ SUB_MIX2[s3 >>> 8 & 255] ^ SUB_MIX3[s0 & 255] ^ keySchedule[ksRow++];\n        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[s1 & 255] ^ keySchedule[ksRow++];\n        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[s2 & 255] ^ keySchedule[ksRow++];\n        s0 = t0;\n        s1 = t1;\n        s2 = t2;\n        s3 = t3;\n      }\n      t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];\n      t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];\n      t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];\n      t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s2 & 255]) ^ keySchedule[ksRow++];\n      t0 = t0 >>> 0;\n      t1 = t1 >>> 0;\n      t2 = t2 >>> 0;\n      t3 = t3 >>> 0;\n      return [t0, t1, t2, t3];\n    }\n    var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];\n    var G = function() {\n      var d = new Array(256);\n      for (var j = 0; j < 256; j++) {\n        if (j < 128) {\n          d[j] = j << 1;\n        } else {\n          d[j] = j << 1 ^ 283;\n        }\n      }\n      var SBOX = [];\n      var INV_SBOX = [];\n      var SUB_MIX = [[], [], [], []];\n      var INV_SUB_MIX = [[], [], [], []];\n      var x = 0;\n      var xi = 0;\n      for (var i = 0; i < 256; ++i) {\n        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;\n        sx = sx >>> 8 ^ sx & 255 ^ 99;\n        SBOX[x] = sx;\n        INV_SBOX[sx] = x;\n        var x2 = d[x];\n        var x4 = d[x2];\n        var x8 = d[x4];\n        var t = d[sx] * 257 ^ sx * 16843008;\n        SUB_MIX[0][x] = t << 24 | t >>> 8;\n        SUB_MIX[1][x] = t << 16 | t >>> 16;\n        SUB_MIX[2][x] = t << 8 | t >>> 24;\n        SUB_MIX[3][x] = t;\n        t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;\n        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;\n        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;\n        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;\n        INV_SUB_MIX[3][sx] = t;\n        if (x === 0) {\n          x = xi = 1;\n        } else {\n          x = x2 ^ d[d[d[x8 ^ x2]]];\n          xi ^= d[d[xi]];\n        }\n      }\n      return {\n        SBOX,\n        INV_SBOX,\n        SUB_MIX,\n        INV_SUB_MIX\n      };\n    }();\n    function AES(key) {\n      this._key = asUInt32Array(key);\n      this._reset();\n    }\n    AES.blockSize = 4 * 4;\n    AES.keySize = 256 / 8;\n    AES.prototype.blockSize = AES.blockSize;\n    AES.prototype.keySize = AES.keySize;\n    AES.prototype._reset = function() {\n      var keyWords = this._key;\n      var keySize = keyWords.length;\n      var nRounds = keySize + 6;\n      var ksRows = (nRounds + 1) * 4;\n      var keySchedule = [];\n      for (var k = 0; k < keySize; k++) {\n        keySchedule[k] = keyWords[k];\n      }\n      for (k = keySize; k < ksRows; k++) {\n        var t = keySchedule[k - 1];\n        if (k % keySize === 0) {\n          t = t << 8 | t >>> 24;\n          t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[t & 255];\n          t ^= RCON[k / keySize | 0] << 24;\n        } else if (keySize > 6 && k % keySize === 4) {\n          t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[t & 255];\n        }\n        keySchedule[k] = keySchedule[k - keySize] ^ t;\n      }\n      var invKeySchedule = [];\n      for (var ik = 0; ik < ksRows; ik++) {\n        var ksR = ksRows - ik;\n        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];\n        if (ik < 4 || ksR <= 4) {\n          invKeySchedule[ik] = tt;\n        } else {\n          invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 255]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 255]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 255]];\n        }\n      }\n      this._nRounds = nRounds;\n      this._keySchedule = keySchedule;\n      this._invKeySchedule = invKeySchedule;\n    };\n    AES.prototype.encryptBlockRaw = function(M) {\n      M = asUInt32Array(M);\n      return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);\n    };\n    AES.prototype.encryptBlock = function(M) {\n      var out = this.encryptBlockRaw(M);\n      var buf = Buffer2.allocUnsafe(16);\n      buf.writeUInt32BE(out[0], 0);\n      buf.writeUInt32BE(out[1], 4);\n      buf.writeUInt32BE(out[2], 8);\n      buf.writeUInt32BE(out[3], 12);\n      return buf;\n    };\n    AES.prototype.decryptBlock = function(M) {\n      M = asUInt32Array(M);\n      var m1 = M[1];\n      M[1] = M[3];\n      M[3] = m1;\n      var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);\n      var buf = Buffer2.allocUnsafe(16);\n      buf.writeUInt32BE(out[0], 0);\n      buf.writeUInt32BE(out[3], 4);\n      buf.writeUInt32BE(out[2], 8);\n      buf.writeUInt32BE(out[1], 12);\n      return buf;\n    };\n    AES.prototype.scrub = function() {\n      scrubVec(this._keySchedule);\n      scrubVec(this._invKeySchedule);\n      scrubVec(this._key);\n    };\n    module.exports.AES = AES;\n  }\n});\n\n// node_modules/browserify-aes/ghash.js\nvar require_ghash = __commonJS({\n  \"node_modules/browserify-aes/ghash.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var ZEROES = Buffer2.alloc(16, 0);\n    function toArray(buf) {\n      return [\n        buf.readUInt32BE(0),\n        buf.readUInt32BE(4),\n        buf.readUInt32BE(8),\n        buf.readUInt32BE(12)\n      ];\n    }\n    function fromArray(out) {\n      var buf = Buffer2.allocUnsafe(16);\n      buf.writeUInt32BE(out[0] >>> 0, 0);\n      buf.writeUInt32BE(out[1] >>> 0, 4);\n      buf.writeUInt32BE(out[2] >>> 0, 8);\n      buf.writeUInt32BE(out[3] >>> 0, 12);\n      return buf;\n    }\n    function GHASH(key) {\n      this.h = key;\n      this.state = Buffer2.alloc(16, 0);\n      this.cache = Buffer2.allocUnsafe(0);\n    }\n    GHASH.prototype.ghash = function(block) {\n      var i = -1;\n      while (++i < block.length) {\n        this.state[i] ^= block[i];\n      }\n      this._multiply();\n    };\n    GHASH.prototype._multiply = function() {\n      var Vi = toArray(this.h);\n      var Zi = [0, 0, 0, 0];\n      var j, xi, lsbVi;\n      var i = -1;\n      while (++i < 128) {\n        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;\n        if (xi) {\n          Zi[0] ^= Vi[0];\n          Zi[1] ^= Vi[1];\n          Zi[2] ^= Vi[2];\n          Zi[3] ^= Vi[3];\n        }\n        lsbVi = (Vi[3] & 1) !== 0;\n        for (j = 3; j > 0; j--) {\n          Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;\n        }\n        Vi[0] = Vi[0] >>> 1;\n        if (lsbVi) {\n          Vi[0] = Vi[0] ^ 225 << 24;\n        }\n      }\n      this.state = fromArray(Zi);\n    };\n    GHASH.prototype.update = function(buf) {\n      this.cache = Buffer2.concat([this.cache, buf]);\n      var chunk;\n      while (this.cache.length >= 16) {\n        chunk = this.cache.slice(0, 16);\n        this.cache = this.cache.slice(16);\n        this.ghash(chunk);\n      }\n    };\n    GHASH.prototype.final = function(abl, bl) {\n      if (this.cache.length) {\n        this.ghash(Buffer2.concat([this.cache, ZEROES], 16));\n      }\n      this.ghash(fromArray([0, abl, 0, bl]));\n      return this.state;\n    };\n    module.exports = GHASH;\n  }\n});\n\n// node_modules/browserify-aes/authCipher.js\nvar require_authCipher = __commonJS({\n  \"node_modules/browserify-aes/authCipher.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var aes = require_aes();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var Transform = require_cipher_base();\n    var inherits = require_inherits_browser();\n    var GHASH = require_ghash();\n    var xor = require_buffer_xor();\n    var incr32 = require_incr32();\n    function xorTest(a, b) {\n      var out = 0;\n      if (a.length !== b.length)\n        out++;\n      var len = Math.min(a.length, b.length);\n      for (var i = 0; i < len; ++i) {\n        out += a[i] ^ b[i];\n      }\n      return out;\n    }\n    function calcIv(self2, iv, ck) {\n      if (iv.length === 12) {\n        self2._finID = Buffer2.concat([iv, Buffer2.from([0, 0, 0, 1])]);\n        return Buffer2.concat([iv, Buffer2.from([0, 0, 0, 2])]);\n      }\n      var ghash = new GHASH(ck);\n      var len = iv.length;\n      var toPad = len % 16;\n      ghash.update(iv);\n      if (toPad) {\n        toPad = 16 - toPad;\n        ghash.update(Buffer2.alloc(toPad, 0));\n      }\n      ghash.update(Buffer2.alloc(8, 0));\n      var ivBits = len * 8;\n      var tail = Buffer2.alloc(8);\n      tail.writeUIntBE(ivBits, 0, 8);\n      ghash.update(tail);\n      self2._finID = ghash.state;\n      var out = Buffer2.from(self2._finID);\n      incr32(out);\n      return out;\n    }\n    function StreamCipher(mode, key, iv, decrypt) {\n      Transform.call(this);\n      var h = Buffer2.alloc(4, 0);\n      this._cipher = new aes.AES(key);\n      var ck = this._cipher.encryptBlock(h);\n      this._ghash = new GHASH(ck);\n      iv = calcIv(this, iv, ck);\n      this._prev = Buffer2.from(iv);\n      this._cache = Buffer2.allocUnsafe(0);\n      this._secCache = Buffer2.allocUnsafe(0);\n      this._decrypt = decrypt;\n      this._alen = 0;\n      this._len = 0;\n      this._mode = mode;\n      this._authTag = null;\n      this._called = false;\n    }\n    inherits(StreamCipher, Transform);\n    StreamCipher.prototype._update = function(chunk) {\n      if (!this._called && this._alen) {\n        var rump = 16 - this._alen % 16;\n        if (rump < 16) {\n          rump = Buffer2.alloc(rump, 0);\n          this._ghash.update(rump);\n        }\n      }\n      this._called = true;\n      var out = this._mode.encrypt(this, chunk);\n      if (this._decrypt) {\n        this._ghash.update(chunk);\n      } else {\n        this._ghash.update(out);\n      }\n      this._len += chunk.length;\n      return out;\n    };\n    StreamCipher.prototype._final = function() {\n      if (this._decrypt && !this._authTag)\n        throw new Error(\"Unsupported state or unable to authenticate data\");\n      var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));\n      if (this._decrypt && xorTest(tag, this._authTag))\n        throw new Error(\"Unsupported state or unable to authenticate data\");\n      this._authTag = tag;\n      this._cipher.scrub();\n    };\n    StreamCipher.prototype.getAuthTag = function getAuthTag() {\n      if (this._decrypt || !Buffer2.isBuffer(this._authTag))\n        throw new Error(\"Attempting to get auth tag in unsupported state\");\n      return this._authTag;\n    };\n    StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {\n      if (!this._decrypt)\n        throw new Error(\"Attempting to set auth tag in unsupported state\");\n      this._authTag = tag;\n    };\n    StreamCipher.prototype.setAAD = function setAAD(buf) {\n      if (this._called)\n        throw new Error(\"Attempting to set AAD in unsupported state\");\n      this._ghash.update(buf);\n      this._alen += buf.length;\n    };\n    module.exports = StreamCipher;\n  }\n});\n\n// node_modules/browserify-aes/streamCipher.js\nvar require_streamCipher = __commonJS({\n  \"node_modules/browserify-aes/streamCipher.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var aes = require_aes();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var Transform = require_cipher_base();\n    var inherits = require_inherits_browser();\n    function StreamCipher(mode, key, iv, decrypt) {\n      Transform.call(this);\n      this._cipher = new aes.AES(key);\n      this._prev = Buffer2.from(iv);\n      this._cache = Buffer2.allocUnsafe(0);\n      this._secCache = Buffer2.allocUnsafe(0);\n      this._decrypt = decrypt;\n      this._mode = mode;\n    }\n    inherits(StreamCipher, Transform);\n    StreamCipher.prototype._update = function(chunk) {\n      return this._mode.encrypt(this, chunk, this._decrypt);\n    };\n    StreamCipher.prototype._final = function() {\n      this._cipher.scrub();\n    };\n    module.exports = StreamCipher;\n  }\n});\n\n// node_modules/evp_bytestokey/index.js\nvar require_evp_bytestokey = __commonJS({\n  \"node_modules/evp_bytestokey/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var MD5 = require_md5();\n    function EVP_BytesToKey(password, salt, keyBits, ivLen) {\n      if (!Buffer2.isBuffer(password))\n        password = Buffer2.from(password, \"binary\");\n      if (salt) {\n        if (!Buffer2.isBuffer(salt))\n          salt = Buffer2.from(salt, \"binary\");\n        if (salt.length !== 8)\n          throw new RangeError(\"salt should be Buffer with 8 byte length\");\n      }\n      var keyLen = keyBits / 8;\n      var key = Buffer2.alloc(keyLen);\n      var iv = Buffer2.alloc(ivLen || 0);\n      var tmp = Buffer2.alloc(0);\n      while (keyLen > 0 || ivLen > 0) {\n        var hash = new MD5();\n        hash.update(tmp);\n        hash.update(password);\n        if (salt)\n          hash.update(salt);\n        tmp = hash.digest();\n        var used = 0;\n        if (keyLen > 0) {\n          var keyStart = key.length - keyLen;\n          used = Math.min(keyLen, tmp.length);\n          tmp.copy(key, keyStart, 0, used);\n          keyLen -= used;\n        }\n        if (used < tmp.length && ivLen > 0) {\n          var ivStart = iv.length - ivLen;\n          var length = Math.min(ivLen, tmp.length - used);\n          tmp.copy(iv, ivStart, used, used + length);\n          ivLen -= length;\n        }\n      }\n      tmp.fill(0);\n      return { key, iv };\n    }\n    module.exports = EVP_BytesToKey;\n  }\n});\n\n// node_modules/browserify-aes/encrypter.js\nvar require_encrypter = __commonJS({\n  \"node_modules/browserify-aes/encrypter.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var MODES = require_modes();\n    var AuthCipher = require_authCipher();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var StreamCipher = require_streamCipher();\n    var Transform = require_cipher_base();\n    var aes = require_aes();\n    var ebtk = require_evp_bytestokey();\n    var inherits = require_inherits_browser();\n    function Cipher(mode, key, iv) {\n      Transform.call(this);\n      this._cache = new Splitter();\n      this._cipher = new aes.AES(key);\n      this._prev = Buffer2.from(iv);\n      this._mode = mode;\n      this._autopadding = true;\n    }\n    inherits(Cipher, Transform);\n    Cipher.prototype._update = function(data) {\n      this._cache.add(data);\n      var chunk;\n      var thing;\n      var out = [];\n      while (chunk = this._cache.get()) {\n        thing = this._mode.encrypt(this, chunk);\n        out.push(thing);\n      }\n      return Buffer2.concat(out);\n    };\n    var PADDING = Buffer2.alloc(16, 16);\n    Cipher.prototype._final = function() {\n      var chunk = this._cache.flush();\n      if (this._autopadding) {\n        chunk = this._mode.encrypt(this, chunk);\n        this._cipher.scrub();\n        return chunk;\n      }\n      if (!chunk.equals(PADDING)) {\n        this._cipher.scrub();\n        throw new Error(\"data not multiple of block length\");\n      }\n    };\n    Cipher.prototype.setAutoPadding = function(setTo) {\n      this._autopadding = !!setTo;\n      return this;\n    };\n    function Splitter() {\n      this.cache = Buffer2.allocUnsafe(0);\n    }\n    Splitter.prototype.add = function(data) {\n      this.cache = Buffer2.concat([this.cache, data]);\n    };\n    Splitter.prototype.get = function() {\n      if (this.cache.length > 15) {\n        var out = this.cache.slice(0, 16);\n        this.cache = this.cache.slice(16);\n        return out;\n      }\n      return null;\n    };\n    Splitter.prototype.flush = function() {\n      var len = 16 - this.cache.length;\n      var padBuff = Buffer2.allocUnsafe(len);\n      var i = -1;\n      while (++i < len) {\n        padBuff.writeUInt8(len, i);\n      }\n      return Buffer2.concat([this.cache, padBuff]);\n    };\n    function createCipheriv(suite, password, iv) {\n      var config = MODES[suite.toLowerCase()];\n      if (!config)\n        throw new TypeError(\"invalid suite type\");\n      if (typeof password === \"string\")\n        password = Buffer2.from(password);\n      if (password.length !== config.key / 8)\n        throw new TypeError(\"invalid key length \" + password.length);\n      if (typeof iv === \"string\")\n        iv = Buffer2.from(iv);\n      if (config.mode !== \"GCM\" && iv.length !== config.iv)\n        throw new TypeError(\"invalid iv length \" + iv.length);\n      if (config.type === \"stream\") {\n        return new StreamCipher(config.module, password, iv);\n      } else if (config.type === \"auth\") {\n        return new AuthCipher(config.module, password, iv);\n      }\n      return new Cipher(config.module, password, iv);\n    }\n    function createCipher(suite, password) {\n      var config = MODES[suite.toLowerCase()];\n      if (!config)\n        throw new TypeError(\"invalid suite type\");\n      var keys = ebtk(password, false, config.key, config.iv);\n      return createCipheriv(suite, keys.key, keys.iv);\n    }\n    exports.createCipheriv = createCipheriv;\n    exports.createCipher = createCipher;\n  }\n});\n\n// node_modules/browserify-aes/decrypter.js\nvar require_decrypter = __commonJS({\n  \"node_modules/browserify-aes/decrypter.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var AuthCipher = require_authCipher();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var MODES = require_modes();\n    var StreamCipher = require_streamCipher();\n    var Transform = require_cipher_base();\n    var aes = require_aes();\n    var ebtk = require_evp_bytestokey();\n    var inherits = require_inherits_browser();\n    function Decipher(mode, key, iv) {\n      Transform.call(this);\n      this._cache = new Splitter();\n      this._last = void 0;\n      this._cipher = new aes.AES(key);\n      this._prev = Buffer2.from(iv);\n      this._mode = mode;\n      this._autopadding = true;\n    }\n    inherits(Decipher, Transform);\n    Decipher.prototype._update = function(data) {\n      this._cache.add(data);\n      var chunk;\n      var thing;\n      var out = [];\n      while (chunk = this._cache.get(this._autopadding)) {\n        thing = this._mode.decrypt(this, chunk);\n        out.push(thing);\n      }\n      return Buffer2.concat(out);\n    };\n    Decipher.prototype._final = function() {\n      var chunk = this._cache.flush();\n      if (this._autopadding) {\n        return unpad(this._mode.decrypt(this, chunk));\n      } else if (chunk) {\n        throw new Error(\"data not multiple of block length\");\n      }\n    };\n    Decipher.prototype.setAutoPadding = function(setTo) {\n      this._autopadding = !!setTo;\n      return this;\n    };\n    function Splitter() {\n      this.cache = Buffer2.allocUnsafe(0);\n    }\n    Splitter.prototype.add = function(data) {\n      this.cache = Buffer2.concat([this.cache, data]);\n    };\n    Splitter.prototype.get = function(autoPadding) {\n      var out;\n      if (autoPadding) {\n        if (this.cache.length > 16) {\n          out = this.cache.slice(0, 16);\n          this.cache = this.cache.slice(16);\n          return out;\n        }\n      } else {\n        if (this.cache.length >= 16) {\n          out = this.cache.slice(0, 16);\n          this.cache = this.cache.slice(16);\n          return out;\n        }\n      }\n      return null;\n    };\n    Splitter.prototype.flush = function() {\n      if (this.cache.length)\n        return this.cache;\n    };\n    function unpad(last) {\n      var padded = last[15];\n      if (padded < 1 || padded > 16) {\n        throw new Error(\"unable to decrypt data\");\n      }\n      var i = -1;\n      while (++i < padded) {\n        if (last[i + (16 - padded)] !== padded) {\n          throw new Error(\"unable to decrypt data\");\n        }\n      }\n      if (padded === 16)\n        return;\n      return last.slice(0, 16 - padded);\n    }\n    function createDecipheriv(suite, password, iv) {\n      var config = MODES[suite.toLowerCase()];\n      if (!config)\n        throw new TypeError(\"invalid suite type\");\n      if (typeof iv === \"string\")\n        iv = Buffer2.from(iv);\n      if (config.mode !== \"GCM\" && iv.length !== config.iv)\n        throw new TypeError(\"invalid iv length \" + iv.length);\n      if (typeof password === \"string\")\n        password = Buffer2.from(password);\n      if (password.length !== config.key / 8)\n        throw new TypeError(\"invalid key length \" + password.length);\n      if (config.type === \"stream\") {\n        return new StreamCipher(config.module, password, iv, true);\n      } else if (config.type === \"auth\") {\n        return new AuthCipher(config.module, password, iv, true);\n      }\n      return new Decipher(config.module, password, iv);\n    }\n    function createDecipher(suite, password) {\n      var config = MODES[suite.toLowerCase()];\n      if (!config)\n        throw new TypeError(\"invalid suite type\");\n      var keys = ebtk(password, false, config.key, config.iv);\n      return createDecipheriv(suite, keys.key, keys.iv);\n    }\n    exports.createDecipher = createDecipher;\n    exports.createDecipheriv = createDecipheriv;\n  }\n});\n\n// node_modules/browserify-aes/browser.js\nvar require_browser6 = __commonJS({\n  \"node_modules/browserify-aes/browser.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var ciphers = require_encrypter();\n    var deciphers = require_decrypter();\n    var modes = require_list();\n    function getCiphers() {\n      return Object.keys(modes);\n    }\n    exports.createCipher = exports.Cipher = ciphers.createCipher;\n    exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;\n    exports.createDecipher = exports.Decipher = deciphers.createDecipher;\n    exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;\n    exports.listCiphers = exports.getCiphers = getCiphers;\n  }\n});\n\n// node_modules/browserify-des/modes.js\nvar require_modes2 = __commonJS({\n  \"node_modules/browserify-des/modes.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    exports[\"des-ecb\"] = {\n      key: 8,\n      iv: 0\n    };\n    exports[\"des-cbc\"] = exports.des = {\n      key: 8,\n      iv: 8\n    };\n    exports[\"des-ede3-cbc\"] = exports.des3 = {\n      key: 24,\n      iv: 8\n    };\n    exports[\"des-ede3\"] = {\n      key: 24,\n      iv: 0\n    };\n    exports[\"des-ede-cbc\"] = {\n      key: 16,\n      iv: 8\n    };\n    exports[\"des-ede\"] = {\n      key: 16,\n      iv: 0\n    };\n  }\n});\n\n// node_modules/browserify-cipher/browser.js\nvar require_browser7 = __commonJS({\n  \"node_modules/browserify-cipher/browser.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var DES = require_browserify_des();\n    var aes = require_browser6();\n    var aesModes = require_modes();\n    var desModes = require_modes2();\n    var ebtk = require_evp_bytestokey();\n    function createCipher(suite, password) {\n      suite = suite.toLowerCase();\n      var keyLen, ivLen;\n      if (aesModes[suite]) {\n        keyLen = aesModes[suite].key;\n        ivLen = aesModes[suite].iv;\n      } else if (desModes[suite]) {\n        keyLen = desModes[suite].key * 8;\n        ivLen = desModes[suite].iv;\n      } else {\n        throw new TypeError(\"invalid suite type\");\n      }\n      var keys = ebtk(password, false, keyLen, ivLen);\n      return createCipheriv(suite, keys.key, keys.iv);\n    }\n    function createDecipher(suite, password) {\n      suite = suite.toLowerCase();\n      var keyLen, ivLen;\n      if (aesModes[suite]) {\n        keyLen = aesModes[suite].key;\n        ivLen = aesModes[suite].iv;\n      } else if (desModes[suite]) {\n        keyLen = desModes[suite].key * 8;\n        ivLen = desModes[suite].iv;\n      } else {\n        throw new TypeError(\"invalid suite type\");\n      }\n      var keys = ebtk(password, false, keyLen, ivLen);\n      return createDecipheriv(suite, keys.key, keys.iv);\n    }\n    function createCipheriv(suite, key, iv) {\n      suite = suite.toLowerCase();\n      if (aesModes[suite])\n        return aes.createCipheriv(suite, key, iv);\n      if (desModes[suite])\n        return new DES({ key, iv, mode: suite });\n      throw new TypeError(\"invalid suite type\");\n    }\n    function createDecipheriv(suite, key, iv) {\n      suite = suite.toLowerCase();\n      if (aesModes[suite])\n        return aes.createDecipheriv(suite, key, iv);\n      if (desModes[suite])\n        return new DES({ key, iv, mode: suite, decrypt: true });\n      throw new TypeError(\"invalid suite type\");\n    }\n    function getCiphers() {\n      return Object.keys(desModes).concat(aes.getCiphers());\n    }\n    exports.createCipher = exports.Cipher = createCipher;\n    exports.createCipheriv = exports.Cipheriv = createCipheriv;\n    exports.createDecipher = exports.Decipher = createDecipher;\n    exports.createDecipheriv = exports.Decipheriv = createDecipheriv;\n    exports.listCiphers = exports.getCiphers = getCiphers;\n  }\n});\n\n// node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js\nvar require_bn = __commonJS({\n  \"node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    (function(module2, exports2) {\n      \"use strict\";\n      function assert(val, msg) {\n        if (!val)\n          throw new Error(msg || \"Assertion failed\");\n      }\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {\n        };\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      }\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        this.red = null;\n        if (number !== null) {\n          if (base === \"le\" || base === \"be\") {\n            endian = base;\n            base = 10;\n          }\n          this._init(number || 0, base || 10, endian || \"be\");\n        }\n      }\n      if (typeof module2 === \"object\") {\n        module2.exports = BN;\n      } else {\n        exports2.BN = BN;\n      }\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer2;\n      try {\n        if (typeof window !== \"undefined\" && typeof window.Buffer !== \"undefined\") {\n          Buffer2 = window.Buffer;\n        } else {\n          Buffer2 = require_buffer_polyfill().Buffer;\n        }\n      } catch (e) {\n      }\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0)\n          return left;\n        return right;\n      };\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0)\n          return left;\n        return right;\n      };\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n          return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n          return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n          base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n          start++;\n          this.negative = 1;\n        }\n        if (start < number.length) {\n          if (base === 16) {\n            this._parseHex(number, start, endian);\n          } else {\n            this._parseBase(number, base, start);\n            if (endian === \"le\") {\n              this._initArray(this.toArray(), base, endian);\n            }\n          }\n        }\n      };\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n        if (number < 67108864) {\n          this.words = [number & 67108863];\n          this.length = 1;\n        } else if (number < 4503599627370496) {\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863\n          ];\n          this.length = 2;\n        } else {\n          assert(number < 9007199254740992);\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863,\n            1\n          ];\n          this.length = 3;\n        }\n        if (endian !== \"le\")\n          return;\n        this._initArray(this.toArray(), base, endian);\n      };\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === \"le\") {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n        return this.strip();\n      };\n      function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        if (c >= 65 && c <= 70) {\n          return c - 55;\n        } else if (c >= 97 && c <= 102) {\n          return c - 87;\n        } else {\n          return c - 48 & 15;\n        }\n      }\n      function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n          r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n      }\n      BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n          for (i = number.length - 1; i >= start; i -= 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        } else {\n          var parseLength = number.length - start;\n          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        }\n        this.strip();\n      };\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul;\n          if (c >= 49) {\n            r += c - 49 + 10;\n          } else if (c >= 17) {\n            r += c - 17 + 10;\n          } else {\n            r += c;\n          }\n        }\n        return r;\n      }\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        this.words = [0];\n        this.length = 1;\n        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {\n          limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n          this.imuln(pow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        this.strip();\n      };\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n        return this;\n      };\n      BN.prototype.strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n        return this._normSign();\n      };\n      BN.prototype._normSign = function _normSign() {\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n        return this;\n      };\n      BN.prototype.inspect = function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      };\n      var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ];\n      var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ];\n      var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n          out = \"\";\n          var off = 0;\n          var carry = 0;\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 16777215).toString(16);\n            carry = w >>> 24 - off & 16777215;\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n            off += 2;\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n          }\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          var groupSize = groupSizes[base];\n          var groupBase = groupBases[base];\n          out = \"\";\n          var c = this.clone();\n          c.negative = 0;\n          while (!c.isZero()) {\n            var r = c.modn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n          if (this.isZero()) {\n            out = \"0\" + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n      };\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n          ret += this.words[1] * 67108864;\n        } else if (this.length === 3 && this.words[2] === 1) {\n          ret += 4503599627370496 + this.words[1] * 67108864;\n        } else if (this.length > 2) {\n          assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n      };\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n      };\n      BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer2 !== \"undefined\");\n        return this.toArrayLike(Buffer2, endian, length);\n      };\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        this.strip();\n        var littleEndian = endian === \"le\";\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n        if (!littleEndian) {\n          for (i = 0; i < reqLength - byteLength; i++) {\n            res[i] = 0;\n          }\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[reqLength - i - 1] = b;\n          }\n        } else {\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[i] = b;\n          }\n          for (; i < reqLength; i++) {\n            res[i] = 0;\n          }\n        }\n        return res;\n      };\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n          if (t >= 4096) {\n            r += 13;\n            t >>>= 13;\n          }\n          if (t >= 64) {\n            r += 7;\n            t >>>= 7;\n          }\n          if (t >= 8) {\n            r += 4;\n            t >>>= 4;\n          }\n          if (t >= 2) {\n            r += 2;\n            t >>>= 2;\n          }\n          return r + t;\n        };\n      }\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        if (w === 0)\n          return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 8191) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n        if ((t & 127) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n        if ((t & 15) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n        if ((t & 3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n        if ((t & 1) === 0) {\n          r++;\n        }\n        return r;\n      };\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n      };\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n        return w;\n      }\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero())\n          return 0;\n        var r = 0;\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n          r += b;\n          if (b !== 26)\n            break;\n        }\n        return r;\n      };\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n      };\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n      };\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      };\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n        return this;\n      };\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n        return this.strip();\n      };\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      };\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length)\n          return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length)\n          return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      };\n      BN.prototype.iuand = function iuand(num) {\n        var b;\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this.strip();\n      };\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      };\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length)\n          return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length)\n          return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      };\n      BN.prototype.iuxor = function iuxor(num) {\n        var a;\n        var b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = a.length;\n        return this.strip();\n      };\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      };\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length)\n          return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length)\n          return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      };\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        }\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 67108863;\n        }\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;\n        }\n        return this.strip();\n      };\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      };\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this.strip();\n      };\n      BN.prototype.iadd = function iadd(num) {\n        var r;\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign();\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        }\n        var a, b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++;\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        return this;\n      };\n      BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n        if (this.length > num.length)\n          return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      };\n      BN.prototype.isub = function isub(num) {\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign();\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        }\n        var cmp = this.cmp(num);\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        }\n        var a, b;\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n          this.negative = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n      function smallMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        var len = self2.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        var a = self2.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 67108863;\n        var carry = r / 67108864 | 0;\n        out.words[0] = lo;\n        for (var k = 1; k < len; k++) {\n          var ncarry = carry >>> 26;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self2.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 67108864 | 0;\n            rword = r & 67108863;\n          }\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      var comb10MulTo = function comb10MulTo2(self2, num, out) {\n        var a = self2.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 8191;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 8191;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 8191;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 8191;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 8191;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 8191;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 8191;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 8191;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 8191;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 8191;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 8191;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 8191;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 8191;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 8191;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 8191;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 8191;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 8191;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 8191;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 8191;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 8191;\n        var bh9 = b9 >>> 13;\n        out.negative = self2.negative ^ num.negative;\n        out.length = 19;\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 67108863;\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 67108863;\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 67108863;\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 67108863;\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 67108863;\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 67108863;\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 67108863;\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 67108863;\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 67108863;\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 67108863;\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 67108863;\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 67108863;\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 67108863;\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 67108863;\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 67108863;\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 67108863;\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 67108863;\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 67108863;\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 67108863;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n        return out;\n      };\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n      function bigMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        out.length = self2.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for (var k = 0; k < out.length - 1; k++) {\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self2.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 67108863;\n            ncarry = ncarry + (r / 67108864 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 67108863;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 67108863;\n          }\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      function jumboMulTo(self2, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self2, num, out);\n      }\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n        return res;\n      };\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n        return t;\n      };\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1)\n          return x;\n        var rb = 0;\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n        return rb;\n      };\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n        return 1 << i + 1 + odd;\n      };\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1)\n          return;\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 67108863;\n          if (w < 67108864) {\n            carry = 0;\n          } else {\n            carry = w / 67108864 | 0;\n          }\n        }\n        return ws;\n      };\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 8191;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 8191;\n          carry = carry >>> 13;\n        }\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~8191) === 0);\n      };\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n        return ph;\n      };\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n      };\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      };\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      };\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n      BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        var carry = 0;\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 67108863) + (carry & 67108863);\n          carry >>= 26;\n          carry += w / 67108864 | 0;\n          carry += lo >>> 26;\n          this.words[i] = lo & 67108863;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      };\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      };\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      };\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0)\n          return new BN(1);\n        var res = this;\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0)\n            break;\n        }\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0)\n              continue;\n            res = res.mul(q);\n          }\n        }\n        return res;\n      };\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 67108863 >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n          var carry = 0;\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n          this.length += s;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishln = function ishln(bits) {\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      };\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 67108863 ^ 67108863 >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n          maskedWords.length = s;\n        }\n        if (s === 0) {\n        } else if (this.length > s) {\n          this.length -= s;\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        }\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      };\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      };\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      };\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s)\n          return false;\n        var w = this.words[s];\n        return !!(w & q);\n      };\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n          return this;\n        }\n        if (r !== 0) {\n          s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n          var mask = 67108863 ^ 67108863 >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n        return this.strip();\n      };\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      };\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.isubn(-num);\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) < num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        }\n        return this._iaddn(num);\n      };\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {\n          this.words[i] -= 67108864;\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      };\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.iaddn(-num);\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 67108864;\n            this.words[i + 1] -= 1;\n          }\n        }\n        return this.strip();\n      };\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 67108863;\n          carry = (w >> 26) - (right / 67108864 | 0);\n          this.words[i + shift] = w & 67108863;\n        }\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 67108863;\n        }\n        if (carry === 0)\n          return this.strip();\n        assert(carry === -1);\n        carry = 0;\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 67108863;\n        }\n        this.negative = 1;\n        return this.strip();\n      };\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        }\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n          a = diff;\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);\n          qj = Math.min(qj / bhi | 0, 67108863);\n          a._ishlnsubmul(b, qj, j);\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n            a._ishlnsubmul(b, 1, j);\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n        if (q) {\n          q.strip();\n        }\n        a.strip();\n        if (mode !== \"div\" && shift !== 0) {\n          a.iushrn(shift);\n        }\n        return {\n          div: q || null,\n          mod: a\n        };\n      };\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n          return {\n            div,\n            mod\n          };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          return {\n            div,\n            mod: res.mod\n          };\n        }\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n          return {\n            div: res.div,\n            mod\n          };\n        }\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        }\n        if (num.length === 1) {\n          if (mode === \"div\") {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n          if (mode === \"mod\") {\n            return {\n              div: null,\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n        return this._wordDiv(num, mode);\n      };\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n      };\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n      };\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n      };\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        if (dm.mod.isZero())\n          return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        if (cmp < 0 || r2 === 1 && cmp === 0)\n          return dm.div;\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n      BN.prototype.modn = function modn(num) {\n        assert(num <= 67108863);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return acc;\n      };\n      BN.prototype.idivn = function idivn(num) {\n        assert(num <= 67108863);\n        var carry = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 67108864;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n        return this.strip();\n      };\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        }\n        var A = new BN(1);\n        var B = new BN(0);\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            x.iushrn(i);\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            y.iushrn(j);\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      };\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            a.iushrn(i);\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n              x1.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            b.iushrn(j);\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n              x2.iushrn(1);\n            }\n          }\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n        return res;\n      };\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero())\n          return num.abs();\n        if (num.isZero())\n          return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n          var r = a.cmp(b);\n          if (r < 0) {\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n          a.isub(b);\n        } while (true);\n        return b.iushln(shift);\n      };\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      };\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      };\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s) {\n          this._expand(s + 1);\n          this.words[s] |= q;\n          return this;\n        }\n        var carry = q;\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 67108863;\n          this.words[i] = w;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative)\n          return -1;\n        if (this.negative === 0 && negative)\n          return 1;\n        this.strip();\n        var res;\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n          assert(num <= 67108863, \"Number is too big\");\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0)\n          return -1;\n        if (this.negative === 0 && num.negative !== 0)\n          return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.ucmp = function ucmp(num) {\n        if (this.length > num.length)\n          return 1;\n        if (this.length < num.length)\n          return -1;\n        var res = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b)\n            continue;\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n          break;\n        }\n        return res;\n      };\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      };\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n      };\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n      };\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n      };\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n      };\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n      };\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n      };\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n      };\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n      };\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n      };\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n      };\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n      };\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n      };\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n      };\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n      };\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n      };\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function MPrime(name, p) {\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n      MPrime.prototype.ireduce = function ireduce(num) {\n        var r = num;\n        var rlen;\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== void 0) {\n            r.strip();\n          } else {\n            r._strip();\n          }\n        }\n        return r;\n      };\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n      function K256() {\n        MPrime.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      inherits(K256, MPrime);\n      K256.prototype.split = function split(input, output) {\n        var mask = 4194303;\n        var outLen = Math.min(input.length, 9);\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        }\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n      K256.prototype.imulK = function imulK(num) {\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        var lo = 0;\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 977;\n          num.words[i] = lo & 67108863;\n          lo = w * 64 + (lo / 67108864 | 0);\n        }\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n        return num;\n      };\n      function P224() {\n        MPrime.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      inherits(P224, MPrime);\n      function P192() {\n        MPrime.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      inherits(P192, MPrime);\n      function P25519() {\n        MPrime.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      inherits(P25519, MPrime);\n      P25519.prototype.imulK = function imulK(num) {\n        var carry = 0;\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 19 + carry;\n          var lo = hi & 67108863;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n        return num;\n      };\n      BN._prime = function prime(name) {\n        if (primes[name])\n          return primes[name];\n        var prime2;\n        if (name === \"k256\") {\n          prime2 = new K256();\n        } else if (name === \"p224\") {\n          prime2 = new P224();\n        } else if (name === \"p192\") {\n          prime2 = new P192();\n        } else if (name === \"p25519\") {\n          prime2 = new P25519();\n        } else {\n          throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime2;\n        return prime2;\n      };\n      function Red(m) {\n        if (typeof m === \"string\") {\n          var prime = BN._prime(m);\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), \"modulus must be greater than 1\");\n          this.m = m;\n          this.prime = null;\n        }\n      }\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n      };\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(\n          a.red && a.red === b.red,\n          \"red works only with red numbers\"\n        );\n      };\n      Red.prototype.imod = function imod(a) {\n        if (this.prime)\n          return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n      };\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n      };\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res;\n      };\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res;\n      };\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n      };\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n      };\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n      };\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero())\n          return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        }\n        var q = this.m.subn(1);\n        var s = 0;\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n        return r;\n      };\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero())\n          return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0)\n          return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n          start = 26;\n        }\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0))\n              continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n          start = 26;\n        }\n        return res;\n      };\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      };\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n      inherits(Mont, Red);\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero())\n          return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.invm = function invm(a) {\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(typeof module === \"undefined\" || module, exports);\n  }\n});\n\n// node_modules/miller-rabin/node_modules/bn.js/lib/bn.js\nvar require_bn2 = __commonJS({\n  \"node_modules/miller-rabin/node_modules/bn.js/lib/bn.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    (function(module2, exports2) {\n      \"use strict\";\n      function assert(val, msg) {\n        if (!val)\n          throw new Error(msg || \"Assertion failed\");\n      }\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {\n        };\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      }\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        this.red = null;\n        if (number !== null) {\n          if (base === \"le\" || base === \"be\") {\n            endian = base;\n            base = 10;\n          }\n          this._init(number || 0, base || 10, endian || \"be\");\n        }\n      }\n      if (typeof module2 === \"object\") {\n        module2.exports = BN;\n      } else {\n        exports2.BN = BN;\n      }\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer2;\n      try {\n        if (typeof window !== \"undefined\" && typeof window.Buffer !== \"undefined\") {\n          Buffer2 = window.Buffer;\n        } else {\n          Buffer2 = require_buffer_polyfill().Buffer;\n        }\n      } catch (e) {\n      }\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0)\n          return left;\n        return right;\n      };\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0)\n          return left;\n        return right;\n      };\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n          return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n          return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n          base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n          start++;\n          this.negative = 1;\n        }\n        if (start < number.length) {\n          if (base === 16) {\n            this._parseHex(number, start, endian);\n          } else {\n            this._parseBase(number, base, start);\n            if (endian === \"le\") {\n              this._initArray(this.toArray(), base, endian);\n            }\n          }\n        }\n      };\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n        if (number < 67108864) {\n          this.words = [number & 67108863];\n          this.length = 1;\n        } else if (number < 4503599627370496) {\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863\n          ];\n          this.length = 2;\n        } else {\n          assert(number < 9007199254740992);\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863,\n            1\n          ];\n          this.length = 3;\n        }\n        if (endian !== \"le\")\n          return;\n        this._initArray(this.toArray(), base, endian);\n      };\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === \"le\") {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n        return this.strip();\n      };\n      function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        if (c >= 65 && c <= 70) {\n          return c - 55;\n        } else if (c >= 97 && c <= 102) {\n          return c - 87;\n        } else {\n          return c - 48 & 15;\n        }\n      }\n      function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n          r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n      }\n      BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n          for (i = number.length - 1; i >= start; i -= 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        } else {\n          var parseLength = number.length - start;\n          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        }\n        this.strip();\n      };\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul;\n          if (c >= 49) {\n            r += c - 49 + 10;\n          } else if (c >= 17) {\n            r += c - 17 + 10;\n          } else {\n            r += c;\n          }\n        }\n        return r;\n      }\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        this.words = [0];\n        this.length = 1;\n        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {\n          limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n          this.imuln(pow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        this.strip();\n      };\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n        return this;\n      };\n      BN.prototype.strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n        return this._normSign();\n      };\n      BN.prototype._normSign = function _normSign() {\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n        return this;\n      };\n      BN.prototype.inspect = function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      };\n      var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ];\n      var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ];\n      var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n          out = \"\";\n          var off = 0;\n          var carry = 0;\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 16777215).toString(16);\n            carry = w >>> 24 - off & 16777215;\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n            off += 2;\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n          }\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          var groupSize = groupSizes[base];\n          var groupBase = groupBases[base];\n          out = \"\";\n          var c = this.clone();\n          c.negative = 0;\n          while (!c.isZero()) {\n            var r = c.modn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n          if (this.isZero()) {\n            out = \"0\" + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n      };\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n          ret += this.words[1] * 67108864;\n        } else if (this.length === 3 && this.words[2] === 1) {\n          ret += 4503599627370496 + this.words[1] * 67108864;\n        } else if (this.length > 2) {\n          assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n      };\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n      };\n      BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer2 !== \"undefined\");\n        return this.toArrayLike(Buffer2, endian, length);\n      };\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        this.strip();\n        var littleEndian = endian === \"le\";\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n        if (!littleEndian) {\n          for (i = 0; i < reqLength - byteLength; i++) {\n            res[i] = 0;\n          }\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[reqLength - i - 1] = b;\n          }\n        } else {\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[i] = b;\n          }\n          for (; i < reqLength; i++) {\n            res[i] = 0;\n          }\n        }\n        return res;\n      };\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n          if (t >= 4096) {\n            r += 13;\n            t >>>= 13;\n          }\n          if (t >= 64) {\n            r += 7;\n            t >>>= 7;\n          }\n          if (t >= 8) {\n            r += 4;\n            t >>>= 4;\n          }\n          if (t >= 2) {\n            r += 2;\n            t >>>= 2;\n          }\n          return r + t;\n        };\n      }\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        if (w === 0)\n          return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 8191) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n        if ((t & 127) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n        if ((t & 15) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n        if ((t & 3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n        if ((t & 1) === 0) {\n          r++;\n        }\n        return r;\n      };\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n      };\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n        return w;\n      }\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero())\n          return 0;\n        var r = 0;\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n          r += b;\n          if (b !== 26)\n            break;\n        }\n        return r;\n      };\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n      };\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n      };\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      };\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n        return this;\n      };\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n        return this.strip();\n      };\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      };\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length)\n          return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length)\n          return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      };\n      BN.prototype.iuand = function iuand(num) {\n        var b;\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this.strip();\n      };\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      };\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length)\n          return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length)\n          return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      };\n      BN.prototype.iuxor = function iuxor(num) {\n        var a;\n        var b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = a.length;\n        return this.strip();\n      };\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      };\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length)\n          return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length)\n          return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      };\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        }\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 67108863;\n        }\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;\n        }\n        return this.strip();\n      };\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      };\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this.strip();\n      };\n      BN.prototype.iadd = function iadd(num) {\n        var r;\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign();\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        }\n        var a, b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++;\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        return this;\n      };\n      BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n        if (this.length > num.length)\n          return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      };\n      BN.prototype.isub = function isub(num) {\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign();\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        }\n        var cmp = this.cmp(num);\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        }\n        var a, b;\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n          this.negative = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n      function smallMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        var len = self2.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        var a = self2.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 67108863;\n        var carry = r / 67108864 | 0;\n        out.words[0] = lo;\n        for (var k = 1; k < len; k++) {\n          var ncarry = carry >>> 26;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self2.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 67108864 | 0;\n            rword = r & 67108863;\n          }\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      var comb10MulTo = function comb10MulTo2(self2, num, out) {\n        var a = self2.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 8191;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 8191;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 8191;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 8191;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 8191;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 8191;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 8191;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 8191;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 8191;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 8191;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 8191;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 8191;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 8191;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 8191;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 8191;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 8191;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 8191;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 8191;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 8191;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 8191;\n        var bh9 = b9 >>> 13;\n        out.negative = self2.negative ^ num.negative;\n        out.length = 19;\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 67108863;\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 67108863;\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 67108863;\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 67108863;\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 67108863;\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 67108863;\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 67108863;\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 67108863;\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 67108863;\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 67108863;\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 67108863;\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 67108863;\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 67108863;\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 67108863;\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 67108863;\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 67108863;\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 67108863;\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 67108863;\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 67108863;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n        return out;\n      };\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n      function bigMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        out.length = self2.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for (var k = 0; k < out.length - 1; k++) {\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self2.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 67108863;\n            ncarry = ncarry + (r / 67108864 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 67108863;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 67108863;\n          }\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      function jumboMulTo(self2, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self2, num, out);\n      }\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n        return res;\n      };\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n        return t;\n      };\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1)\n          return x;\n        var rb = 0;\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n        return rb;\n      };\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n        return 1 << i + 1 + odd;\n      };\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1)\n          return;\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 67108863;\n          if (w < 67108864) {\n            carry = 0;\n          } else {\n            carry = w / 67108864 | 0;\n          }\n        }\n        return ws;\n      };\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 8191;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 8191;\n          carry = carry >>> 13;\n        }\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~8191) === 0);\n      };\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n        return ph;\n      };\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n      };\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      };\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      };\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n      BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        var carry = 0;\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 67108863) + (carry & 67108863);\n          carry >>= 26;\n          carry += w / 67108864 | 0;\n          carry += lo >>> 26;\n          this.words[i] = lo & 67108863;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      };\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      };\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      };\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0)\n          return new BN(1);\n        var res = this;\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0)\n            break;\n        }\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0)\n              continue;\n            res = res.mul(q);\n          }\n        }\n        return res;\n      };\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 67108863 >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n          var carry = 0;\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n          this.length += s;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishln = function ishln(bits) {\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      };\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 67108863 ^ 67108863 >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n          maskedWords.length = s;\n        }\n        if (s === 0) {\n        } else if (this.length > s) {\n          this.length -= s;\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        }\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      };\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      };\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      };\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s)\n          return false;\n        var w = this.words[s];\n        return !!(w & q);\n      };\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n          return this;\n        }\n        if (r !== 0) {\n          s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n          var mask = 67108863 ^ 67108863 >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n        return this.strip();\n      };\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      };\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.isubn(-num);\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) < num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        }\n        return this._iaddn(num);\n      };\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {\n          this.words[i] -= 67108864;\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      };\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.iaddn(-num);\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 67108864;\n            this.words[i + 1] -= 1;\n          }\n        }\n        return this.strip();\n      };\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 67108863;\n          carry = (w >> 26) - (right / 67108864 | 0);\n          this.words[i + shift] = w & 67108863;\n        }\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 67108863;\n        }\n        if (carry === 0)\n          return this.strip();\n        assert(carry === -1);\n        carry = 0;\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 67108863;\n        }\n        this.negative = 1;\n        return this.strip();\n      };\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        }\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n          a = diff;\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);\n          qj = Math.min(qj / bhi | 0, 67108863);\n          a._ishlnsubmul(b, qj, j);\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n            a._ishlnsubmul(b, 1, j);\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n        if (q) {\n          q.strip();\n        }\n        a.strip();\n        if (mode !== \"div\" && shift !== 0) {\n          a.iushrn(shift);\n        }\n        return {\n          div: q || null,\n          mod: a\n        };\n      };\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n          return {\n            div,\n            mod\n          };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          return {\n            div,\n            mod: res.mod\n          };\n        }\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n          return {\n            div: res.div,\n            mod\n          };\n        }\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        }\n        if (num.length === 1) {\n          if (mode === \"div\") {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n          if (mode === \"mod\") {\n            return {\n              div: null,\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n        return this._wordDiv(num, mode);\n      };\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n      };\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n      };\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n      };\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        if (dm.mod.isZero())\n          return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        if (cmp < 0 || r2 === 1 && cmp === 0)\n          return dm.div;\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n      BN.prototype.modn = function modn(num) {\n        assert(num <= 67108863);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return acc;\n      };\n      BN.prototype.idivn = function idivn(num) {\n        assert(num <= 67108863);\n        var carry = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 67108864;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n        return this.strip();\n      };\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        }\n        var A = new BN(1);\n        var B = new BN(0);\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            x.iushrn(i);\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            y.iushrn(j);\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      };\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            a.iushrn(i);\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n              x1.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            b.iushrn(j);\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n              x2.iushrn(1);\n            }\n          }\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n        return res;\n      };\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero())\n          return num.abs();\n        if (num.isZero())\n          return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n          var r = a.cmp(b);\n          if (r < 0) {\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n          a.isub(b);\n        } while (true);\n        return b.iushln(shift);\n      };\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      };\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      };\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s) {\n          this._expand(s + 1);\n          this.words[s] |= q;\n          return this;\n        }\n        var carry = q;\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 67108863;\n          this.words[i] = w;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative)\n          return -1;\n        if (this.negative === 0 && negative)\n          return 1;\n        this.strip();\n        var res;\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n          assert(num <= 67108863, \"Number is too big\");\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0)\n          return -1;\n        if (this.negative === 0 && num.negative !== 0)\n          return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.ucmp = function ucmp(num) {\n        if (this.length > num.length)\n          return 1;\n        if (this.length < num.length)\n          return -1;\n        var res = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b)\n            continue;\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n          break;\n        }\n        return res;\n      };\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      };\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n      };\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n      };\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n      };\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n      };\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n      };\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n      };\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n      };\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n      };\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n      };\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n      };\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n      };\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n      };\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n      };\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n      };\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n      };\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function MPrime(name, p) {\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n      MPrime.prototype.ireduce = function ireduce(num) {\n        var r = num;\n        var rlen;\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== void 0) {\n            r.strip();\n          } else {\n            r._strip();\n          }\n        }\n        return r;\n      };\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n      function K256() {\n        MPrime.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      inherits(K256, MPrime);\n      K256.prototype.split = function split(input, output) {\n        var mask = 4194303;\n        var outLen = Math.min(input.length, 9);\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        }\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n      K256.prototype.imulK = function imulK(num) {\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        var lo = 0;\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 977;\n          num.words[i] = lo & 67108863;\n          lo = w * 64 + (lo / 67108864 | 0);\n        }\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n        return num;\n      };\n      function P224() {\n        MPrime.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      inherits(P224, MPrime);\n      function P192() {\n        MPrime.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      inherits(P192, MPrime);\n      function P25519() {\n        MPrime.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      inherits(P25519, MPrime);\n      P25519.prototype.imulK = function imulK(num) {\n        var carry = 0;\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 19 + carry;\n          var lo = hi & 67108863;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n        return num;\n      };\n      BN._prime = function prime(name) {\n        if (primes[name])\n          return primes[name];\n        var prime2;\n        if (name === \"k256\") {\n          prime2 = new K256();\n        } else if (name === \"p224\") {\n          prime2 = new P224();\n        } else if (name === \"p192\") {\n          prime2 = new P192();\n        } else if (name === \"p25519\") {\n          prime2 = new P25519();\n        } else {\n          throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime2;\n        return prime2;\n      };\n      function Red(m) {\n        if (typeof m === \"string\") {\n          var prime = BN._prime(m);\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), \"modulus must be greater than 1\");\n          this.m = m;\n          this.prime = null;\n        }\n      }\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n      };\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(\n          a.red && a.red === b.red,\n          \"red works only with red numbers\"\n        );\n      };\n      Red.prototype.imod = function imod(a) {\n        if (this.prime)\n          return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n      };\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n      };\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res;\n      };\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res;\n      };\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n      };\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n      };\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n      };\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero())\n          return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        }\n        var q = this.m.subn(1);\n        var s = 0;\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n        return r;\n      };\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero())\n          return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0)\n          return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n          start = 26;\n        }\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0))\n              continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n          start = 26;\n        }\n        return res;\n      };\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      };\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n      inherits(Mont, Red);\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero())\n          return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.invm = function invm(a) {\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(typeof module === \"undefined\" || module, exports);\n  }\n});\n\n// node_modules/brorand/index.js\nvar require_brorand = __commonJS({\n  \"node_modules/brorand/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var r;\n    module.exports = function rand(len) {\n      if (!r)\n        r = new Rand(null);\n      return r.generate(len);\n    };\n    function Rand(rand) {\n      this.rand = rand;\n    }\n    module.exports.Rand = Rand;\n    Rand.prototype.generate = function generate(len) {\n      return this._rand(len);\n    };\n    Rand.prototype._rand = function _rand(n) {\n      if (this.rand.getBytes)\n        return this.rand.getBytes(n);\n      var res = new Uint8Array(n);\n      for (var i = 0; i < res.length; i++)\n        res[i] = this.rand.getByte();\n      return res;\n    };\n    if (typeof self === \"object\") {\n      if (self.crypto && self.crypto.getRandomValues) {\n        Rand.prototype._rand = function _rand(n) {\n          var arr = new Uint8Array(n);\n          self.crypto.getRandomValues(arr);\n          return arr;\n        };\n      } else if (self.msCrypto && self.msCrypto.getRandomValues) {\n        Rand.prototype._rand = function _rand(n) {\n          var arr = new Uint8Array(n);\n          self.msCrypto.getRandomValues(arr);\n          return arr;\n        };\n      } else if (typeof window === \"object\") {\n        Rand.prototype._rand = function() {\n          throw new Error(\"Not implemented yet\");\n        };\n      }\n    } else {\n      try {\n        crypto = require_crypto_browserify();\n        if (typeof crypto.randomBytes !== \"function\")\n          throw new Error(\"Not supported\");\n        Rand.prototype._rand = function _rand(n) {\n          return crypto.randomBytes(n);\n        };\n      } catch (e) {\n      }\n    }\n    var crypto;\n  }\n});\n\n// node_modules/miller-rabin/lib/mr.js\nvar require_mr = __commonJS({\n  \"node_modules/miller-rabin/lib/mr.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var bn = require_bn2();\n    var brorand = require_brorand();\n    function MillerRabin(rand) {\n      this.rand = rand || new brorand.Rand();\n    }\n    module.exports = MillerRabin;\n    MillerRabin.create = function create(rand) {\n      return new MillerRabin(rand);\n    };\n    MillerRabin.prototype._randbelow = function _randbelow(n) {\n      var len = n.bitLength();\n      var min_bytes = Math.ceil(len / 8);\n      do\n        var a = new bn(this.rand.generate(min_bytes));\n      while (a.cmp(n) >= 0);\n      return a;\n    };\n    MillerRabin.prototype._randrange = function _randrange(start, stop) {\n      var size = stop.sub(start);\n      return start.add(this._randbelow(size));\n    };\n    MillerRabin.prototype.test = function test(n, k, cb) {\n      var len = n.bitLength();\n      var red = bn.mont(n);\n      var rone = new bn(1).toRed(red);\n      if (!k)\n        k = Math.max(1, len / 48 | 0);\n      var n1 = n.subn(1);\n      for (var s = 0; !n1.testn(s); s++) {\n      }\n      var d = n.shrn(s);\n      var rn1 = n1.toRed(red);\n      var prime = true;\n      for (; k > 0; k--) {\n        var a = this._randrange(new bn(2), n1);\n        if (cb)\n          cb(a);\n        var x = a.toRed(red).redPow(d);\n        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)\n          continue;\n        for (var i = 1; i < s; i++) {\n          x = x.redSqr();\n          if (x.cmp(rone) === 0)\n            return false;\n          if (x.cmp(rn1) === 0)\n            break;\n        }\n        if (i === s)\n          return false;\n      }\n      return prime;\n    };\n    MillerRabin.prototype.getDivisor = function getDivisor(n, k) {\n      var len = n.bitLength();\n      var red = bn.mont(n);\n      var rone = new bn(1).toRed(red);\n      if (!k)\n        k = Math.max(1, len / 48 | 0);\n      var n1 = n.subn(1);\n      for (var s = 0; !n1.testn(s); s++) {\n      }\n      var d = n.shrn(s);\n      var rn1 = n1.toRed(red);\n      for (; k > 0; k--) {\n        var a = this._randrange(new bn(2), n1);\n        var g = n.gcd(a);\n        if (g.cmpn(1) !== 0)\n          return g;\n        var x = a.toRed(red).redPow(d);\n        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)\n          continue;\n        for (var i = 1; i < s; i++) {\n          x = x.redSqr();\n          if (x.cmp(rone) === 0)\n            return x.fromRed().subn(1).gcd(n);\n          if (x.cmp(rn1) === 0)\n            break;\n        }\n        if (i === s) {\n          x = x.redSqr();\n          return x.fromRed().subn(1).gcd(n);\n        }\n      }\n      return false;\n    };\n  }\n});\n\n// node_modules/diffie-hellman/lib/generatePrime.js\nvar require_generatePrime = __commonJS({\n  \"node_modules/diffie-hellman/lib/generatePrime.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var randomBytes = require_browser();\n    module.exports = findPrime;\n    findPrime.simpleSieve = simpleSieve;\n    findPrime.fermatTest = fermatTest;\n    var BN = require_bn();\n    var TWENTYFOUR = new BN(24);\n    var MillerRabin = require_mr();\n    var millerRabin = new MillerRabin();\n    var ONE = new BN(1);\n    var TWO = new BN(2);\n    var FIVE = new BN(5);\n    var SIXTEEN = new BN(16);\n    var EIGHT = new BN(8);\n    var TEN = new BN(10);\n    var THREE = new BN(3);\n    var SEVEN = new BN(7);\n    var ELEVEN = new BN(11);\n    var FOUR = new BN(4);\n    var TWELVE = new BN(12);\n    var primes = null;\n    function _getPrimes() {\n      if (primes !== null)\n        return primes;\n      var limit = 1048576;\n      var res = [];\n      res[0] = 2;\n      for (var i = 1, k = 3; k < limit; k += 2) {\n        var sqrt = Math.ceil(Math.sqrt(k));\n        for (var j = 0; j < i && res[j] <= sqrt; j++)\n          if (k % res[j] === 0)\n            break;\n        if (i !== j && res[j] <= sqrt)\n          continue;\n        res[i++] = k;\n      }\n      primes = res;\n      return res;\n    }\n    function simpleSieve(p) {\n      var primes2 = _getPrimes();\n      for (var i = 0; i < primes2.length; i++)\n        if (p.modn(primes2[i]) === 0) {\n          if (p.cmpn(primes2[i]) === 0) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      return true;\n    }\n    function fermatTest(p) {\n      var red = BN.mont(p);\n      return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;\n    }\n    function findPrime(bits, gen) {\n      if (bits < 16) {\n        if (gen === 2 || gen === 5) {\n          return new BN([140, 123]);\n        } else {\n          return new BN([140, 39]);\n        }\n      }\n      gen = new BN(gen);\n      var num, n2;\n      while (true) {\n        num = new BN(randomBytes(Math.ceil(bits / 8)));\n        while (num.bitLength() > bits) {\n          num.ishrn(1);\n        }\n        if (num.isEven()) {\n          num.iadd(ONE);\n        }\n        if (!num.testn(1)) {\n          num.iadd(TWO);\n        }\n        if (!gen.cmp(TWO)) {\n          while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {\n            num.iadd(FOUR);\n          }\n        } else if (!gen.cmp(FIVE)) {\n          while (num.mod(TEN).cmp(THREE)) {\n            num.iadd(FOUR);\n          }\n        }\n        n2 = num.shrn(1);\n        if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {\n          return num;\n        }\n      }\n    }\n  }\n});\n\n// node_modules/diffie-hellman/lib/primes.json\nvar require_primes = __commonJS({\n  \"node_modules/diffie-hellman/lib/primes.json\"(exports, module) {\n    module.exports = {\n      modp1: {\n        gen: \"02\",\n        prime: \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"\n      },\n      modp2: {\n        gen: \"02\",\n        prime: \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"\n      },\n      modp5: {\n        gen: \"02\",\n        prime: \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"\n      },\n      modp14: {\n        gen: \"02\",\n        prime: \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"\n      },\n      modp15: {\n        gen: \"02\",\n        prime: \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"\n      },\n      modp16: {\n        gen: \"02\",\n        prime: \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"\n      },\n      modp17: {\n        gen: \"02\",\n        prime: \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"\n      },\n      modp18: {\n        gen: \"02\",\n        prime: \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"\n      }\n    };\n  }\n});\n\n// node_modules/diffie-hellman/lib/dh.js\nvar require_dh = __commonJS({\n  \"node_modules/diffie-hellman/lib/dh.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn();\n    var MillerRabin = require_mr();\n    var millerRabin = new MillerRabin();\n    var TWENTYFOUR = new BN(24);\n    var ELEVEN = new BN(11);\n    var TEN = new BN(10);\n    var THREE = new BN(3);\n    var SEVEN = new BN(7);\n    var primes = require_generatePrime();\n    var randomBytes = require_browser();\n    module.exports = DH;\n    function setPublicKey(pub, enc) {\n      enc = enc || \"utf8\";\n      if (!Buffer.isBuffer(pub)) {\n        pub = new Buffer(pub, enc);\n      }\n      this._pub = new BN(pub);\n      return this;\n    }\n    function setPrivateKey(priv, enc) {\n      enc = enc || \"utf8\";\n      if (!Buffer.isBuffer(priv)) {\n        priv = new Buffer(priv, enc);\n      }\n      this._priv = new BN(priv);\n      return this;\n    }\n    var primeCache = {};\n    function checkPrime(prime, generator) {\n      var gen = generator.toString(\"hex\");\n      var hex = [gen, prime.toString(16)].join(\"_\");\n      if (hex in primeCache) {\n        return primeCache[hex];\n      }\n      var error = 0;\n      if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {\n        error += 1;\n        if (gen === \"02\" || gen === \"05\") {\n          error += 8;\n        } else {\n          error += 4;\n        }\n        primeCache[hex] = error;\n        return error;\n      }\n      if (!millerRabin.test(prime.shrn(1))) {\n        error += 2;\n      }\n      var rem;\n      switch (gen) {\n        case \"02\":\n          if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {\n            error += 8;\n          }\n          break;\n        case \"05\":\n          rem = prime.mod(TEN);\n          if (rem.cmp(THREE) && rem.cmp(SEVEN)) {\n            error += 8;\n          }\n          break;\n        default:\n          error += 4;\n      }\n      primeCache[hex] = error;\n      return error;\n    }\n    function DH(prime, generator, malleable) {\n      this.setGenerator(generator);\n      this.__prime = new BN(prime);\n      this._prime = BN.mont(this.__prime);\n      this._primeLen = prime.length;\n      this._pub = void 0;\n      this._priv = void 0;\n      this._primeCode = void 0;\n      if (malleable) {\n        this.setPublicKey = setPublicKey;\n        this.setPrivateKey = setPrivateKey;\n      } else {\n        this._primeCode = 8;\n      }\n    }\n    Object.defineProperty(DH.prototype, \"verifyError\", {\n      enumerable: true,\n      get: function() {\n        if (typeof this._primeCode !== \"number\") {\n          this._primeCode = checkPrime(this.__prime, this.__gen);\n        }\n        return this._primeCode;\n      }\n    });\n    DH.prototype.generateKeys = function() {\n      if (!this._priv) {\n        this._priv = new BN(randomBytes(this._primeLen));\n      }\n      this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();\n      return this.getPublicKey();\n    };\n    DH.prototype.computeSecret = function(other) {\n      other = new BN(other);\n      other = other.toRed(this._prime);\n      var secret = other.redPow(this._priv).fromRed();\n      var out = new Buffer(secret.toArray());\n      var prime = this.getPrime();\n      if (out.length < prime.length) {\n        var front = new Buffer(prime.length - out.length);\n        front.fill(0);\n        out = Buffer.concat([front, out]);\n      }\n      return out;\n    };\n    DH.prototype.getPublicKey = function getPublicKey(enc) {\n      return formatReturnValue(this._pub, enc);\n    };\n    DH.prototype.getPrivateKey = function getPrivateKey(enc) {\n      return formatReturnValue(this._priv, enc);\n    };\n    DH.prototype.getPrime = function(enc) {\n      return formatReturnValue(this.__prime, enc);\n    };\n    DH.prototype.getGenerator = function(enc) {\n      return formatReturnValue(this._gen, enc);\n    };\n    DH.prototype.setGenerator = function(gen, enc) {\n      enc = enc || \"utf8\";\n      if (!Buffer.isBuffer(gen)) {\n        gen = new Buffer(gen, enc);\n      }\n      this.__gen = gen;\n      this._gen = new BN(gen);\n      return this;\n    };\n    function formatReturnValue(bn, enc) {\n      var buf = new Buffer(bn.toArray());\n      if (!enc) {\n        return buf;\n      } else {\n        return buf.toString(enc);\n      }\n    }\n  }\n});\n\n// node_modules/diffie-hellman/browser.js\nvar require_browser8 = __commonJS({\n  \"node_modules/diffie-hellman/browser.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var generatePrime = require_generatePrime();\n    var primes = require_primes();\n    var DH = require_dh();\n    function getDiffieHellman(mod) {\n      var prime = new Buffer(primes[mod].prime, \"hex\");\n      var gen = new Buffer(primes[mod].gen, \"hex\");\n      return new DH(prime, gen);\n    }\n    var ENCODINGS = {\n      \"binary\": true,\n      \"hex\": true,\n      \"base64\": true\n    };\n    function createDiffieHellman(prime, enc, generator, genc) {\n      if (Buffer.isBuffer(enc) || ENCODINGS[enc] === void 0) {\n        return createDiffieHellman(prime, \"binary\", enc, generator);\n      }\n      enc = enc || \"binary\";\n      genc = genc || \"binary\";\n      generator = generator || new Buffer([2]);\n      if (!Buffer.isBuffer(generator)) {\n        generator = new Buffer(generator, genc);\n      }\n      if (typeof prime === \"number\") {\n        return new DH(generatePrime(prime, generator), generator, true);\n      }\n      if (!Buffer.isBuffer(prime)) {\n        prime = new Buffer(prime, enc);\n      }\n      return new DH(prime, generator, true);\n    }\n    exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;\n    exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;\n  }\n});\n\n// node_modules/bn.js/lib/bn.js\nvar require_bn3 = __commonJS({\n  \"node_modules/bn.js/lib/bn.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    (function(module2, exports2) {\n      \"use strict\";\n      function assert(val, msg) {\n        if (!val)\n          throw new Error(msg || \"Assertion failed\");\n      }\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {\n        };\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      }\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        this.red = null;\n        if (number !== null) {\n          if (base === \"le\" || base === \"be\") {\n            endian = base;\n            base = 10;\n          }\n          this._init(number || 0, base || 10, endian || \"be\");\n        }\n      }\n      if (typeof module2 === \"object\") {\n        module2.exports = BN;\n      } else {\n        exports2.BN = BN;\n      }\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer2;\n      try {\n        if (typeof window !== \"undefined\" && typeof window.Buffer !== \"undefined\") {\n          Buffer2 = window.Buffer;\n        } else {\n          Buffer2 = require_buffer_polyfill().Buffer;\n        }\n      } catch (e) {\n      }\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0)\n          return left;\n        return right;\n      };\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0)\n          return left;\n        return right;\n      };\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n          return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n          return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n          base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n          start++;\n          this.negative = 1;\n        }\n        if (start < number.length) {\n          if (base === 16) {\n            this._parseHex(number, start, endian);\n          } else {\n            this._parseBase(number, base, start);\n            if (endian === \"le\") {\n              this._initArray(this.toArray(), base, endian);\n            }\n          }\n        }\n      };\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n        if (number < 67108864) {\n          this.words = [number & 67108863];\n          this.length = 1;\n        } else if (number < 4503599627370496) {\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863\n          ];\n          this.length = 2;\n        } else {\n          assert(number < 9007199254740992);\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863,\n            1\n          ];\n          this.length = 3;\n        }\n        if (endian !== \"le\")\n          return;\n        this._initArray(this.toArray(), base, endian);\n      };\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === \"le\") {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n        return this._strip();\n      };\n      function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        if (c >= 48 && c <= 57) {\n          return c - 48;\n        } else if (c >= 65 && c <= 70) {\n          return c - 55;\n        } else if (c >= 97 && c <= 102) {\n          return c - 87;\n        } else {\n          assert(false, \"Invalid character in \" + string);\n        }\n      }\n      function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n          r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n      }\n      BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n          for (i = number.length - 1; i >= start; i -= 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        } else {\n          var parseLength = number.length - start;\n          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        }\n        this._strip();\n      };\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var b = 0;\n        var len = Math.min(str.length, end);\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul;\n          if (c >= 49) {\n            b = c - 49 + 10;\n          } else if (c >= 17) {\n            b = c - 17 + 10;\n          } else {\n            b = c;\n          }\n          assert(c >= 0 && b < mul, \"Invalid character\");\n          r += b;\n        }\n        return r;\n      }\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        this.words = [0];\n        this.length = 1;\n        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {\n          limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n          this.imuln(pow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        this._strip();\n      };\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n      function move(dest, src) {\n        dest.words = src.words;\n        dest.length = src.length;\n        dest.negative = src.negative;\n        dest.red = src.red;\n      }\n      BN.prototype._move = function _move(dest) {\n        move(dest, this);\n      };\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n        return this;\n      };\n      BN.prototype._strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n        return this._normSign();\n      };\n      BN.prototype._normSign = function _normSign() {\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n        return this;\n      };\n      if (typeof Symbol !== \"undefined\" && typeof Symbol.for === \"function\") {\n        try {\n          BN.prototype[Symbol.for(\"nodejs.util.inspect.custom\")] = inspect;\n        } catch (e) {\n          BN.prototype.inspect = inspect;\n        }\n      } else {\n        BN.prototype.inspect = inspect;\n      }\n      function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      }\n      var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ];\n      var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ];\n      var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n          out = \"\";\n          var off = 0;\n          var carry = 0;\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 16777215).toString(16);\n            carry = w >>> 24 - off & 16777215;\n            off += 2;\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n          }\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          var groupSize = groupSizes[base];\n          var groupBase = groupBases[base];\n          out = \"\";\n          var c = this.clone();\n          c.negative = 0;\n          while (!c.isZero()) {\n            var r = c.modrn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n          if (this.isZero()) {\n            out = \"0\" + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n      };\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n          ret += this.words[1] * 67108864;\n        } else if (this.length === 3 && this.words[2] === 1) {\n          ret += 4503599627370496 + this.words[1] * 67108864;\n        } else if (this.length > 2) {\n          assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n      };\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16, 2);\n      };\n      if (Buffer2) {\n        BN.prototype.toBuffer = function toBuffer(endian, length) {\n          return this.toArrayLike(Buffer2, endian, length);\n        };\n      }\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n      var allocate = function allocate2(ArrayType, size) {\n        if (ArrayType.allocUnsafe) {\n          return ArrayType.allocUnsafe(size);\n        }\n        return new ArrayType(size);\n      };\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        this._strip();\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        var res = allocate(ArrayType, reqLength);\n        var postfix = endian === \"le\" ? \"LE\" : \"BE\";\n        this[\"_toArrayLike\" + postfix](res, byteLength);\n        return res;\n      };\n      BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {\n        var position = 0;\n        var carry = 0;\n        for (var i = 0, shift = 0; i < this.length; i++) {\n          var word = this.words[i] << shift | carry;\n          res[position++] = word & 255;\n          if (position < res.length) {\n            res[position++] = word >> 8 & 255;\n          }\n          if (position < res.length) {\n            res[position++] = word >> 16 & 255;\n          }\n          if (shift === 6) {\n            if (position < res.length) {\n              res[position++] = word >> 24 & 255;\n            }\n            carry = 0;\n            shift = 0;\n          } else {\n            carry = word >>> 24;\n            shift += 2;\n          }\n        }\n        if (position < res.length) {\n          res[position++] = carry;\n          while (position < res.length) {\n            res[position++] = 0;\n          }\n        }\n      };\n      BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {\n        var position = res.length - 1;\n        var carry = 0;\n        for (var i = 0, shift = 0; i < this.length; i++) {\n          var word = this.words[i] << shift | carry;\n          res[position--] = word & 255;\n          if (position >= 0) {\n            res[position--] = word >> 8 & 255;\n          }\n          if (position >= 0) {\n            res[position--] = word >> 16 & 255;\n          }\n          if (shift === 6) {\n            if (position >= 0) {\n              res[position--] = word >> 24 & 255;\n            }\n            carry = 0;\n            shift = 0;\n          } else {\n            carry = word >>> 24;\n            shift += 2;\n          }\n        }\n        if (position >= 0) {\n          res[position--] = carry;\n          while (position >= 0) {\n            res[position--] = 0;\n          }\n        }\n      };\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n          if (t >= 4096) {\n            r += 13;\n            t >>>= 13;\n          }\n          if (t >= 64) {\n            r += 7;\n            t >>>= 7;\n          }\n          if (t >= 8) {\n            r += 4;\n            t >>>= 4;\n          }\n          if (t >= 2) {\n            r += 2;\n            t >>>= 2;\n          }\n          return r + t;\n        };\n      }\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        if (w === 0)\n          return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 8191) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n        if ((t & 127) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n        if ((t & 15) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n        if ((t & 3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n        if ((t & 1) === 0) {\n          r++;\n        }\n        return r;\n      };\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n      };\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = num.words[off] >>> wbit & 1;\n        }\n        return w;\n      }\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero())\n          return 0;\n        var r = 0;\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n          r += b;\n          if (b !== 26)\n            break;\n        }\n        return r;\n      };\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n      };\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n      };\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      };\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n        return this;\n      };\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n        return this._strip();\n      };\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      };\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length)\n          return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length)\n          return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      };\n      BN.prototype.iuand = function iuand(num) {\n        var b;\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this._strip();\n      };\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      };\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length)\n          return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length)\n          return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      };\n      BN.prototype.iuxor = function iuxor(num) {\n        var a;\n        var b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = a.length;\n        return this._strip();\n      };\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      };\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length)\n          return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length)\n          return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      };\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        }\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 67108863;\n        }\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;\n        }\n        return this._strip();\n      };\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      };\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this._strip();\n      };\n      BN.prototype.iadd = function iadd(num) {\n        var r;\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign();\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        }\n        var a, b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++;\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        return this;\n      };\n      BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n        if (this.length > num.length)\n          return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      };\n      BN.prototype.isub = function isub(num) {\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign();\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        }\n        var cmp = this.cmp(num);\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        }\n        var a, b;\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n          this.negative = 1;\n        }\n        return this._strip();\n      };\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n      function smallMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        var len = self2.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        var a = self2.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 67108863;\n        var carry = r / 67108864 | 0;\n        out.words[0] = lo;\n        for (var k = 1; k < len; k++) {\n          var ncarry = carry >>> 26;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self2.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 67108864 | 0;\n            rword = r & 67108863;\n          }\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n        return out._strip();\n      }\n      var comb10MulTo = function comb10MulTo2(self2, num, out) {\n        var a = self2.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 8191;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 8191;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 8191;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 8191;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 8191;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 8191;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 8191;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 8191;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 8191;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 8191;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 8191;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 8191;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 8191;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 8191;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 8191;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 8191;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 8191;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 8191;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 8191;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 8191;\n        var bh9 = b9 >>> 13;\n        out.negative = self2.negative ^ num.negative;\n        out.length = 19;\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 67108863;\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 67108863;\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 67108863;\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 67108863;\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 67108863;\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 67108863;\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 67108863;\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 67108863;\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 67108863;\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 67108863;\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 67108863;\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 67108863;\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 67108863;\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 67108863;\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 67108863;\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 67108863;\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 67108863;\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 67108863;\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 67108863;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n        return out;\n      };\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n      function bigMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        out.length = self2.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for (var k = 0; k < out.length - 1; k++) {\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self2.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 67108863;\n            ncarry = ncarry + (r / 67108864 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 67108863;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 67108863;\n          }\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n        return out._strip();\n      }\n      function jumboMulTo(self2, num, out) {\n        return bigMulTo(self2, num, out);\n      }\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n        return res;\n      };\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n        return t;\n      };\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1)\n          return x;\n        var rb = 0;\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n        return rb;\n      };\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n        return 1 << i + 1 + odd;\n      };\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1)\n          return;\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 67108863;\n          if (w < 67108864) {\n            carry = 0;\n          } else {\n            carry = w / 67108864 | 0;\n          }\n        }\n        return ws;\n      };\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 8191;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 8191;\n          carry = carry >>> 13;\n        }\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~8191) === 0);\n      };\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n        return ph;\n      };\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out._strip();\n      };\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      };\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      };\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n      BN.prototype.imuln = function imuln(num) {\n        var isNegNum = num < 0;\n        if (isNegNum)\n          num = -num;\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        var carry = 0;\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 67108863) + (carry & 67108863);\n          carry >>= 26;\n          carry += w / 67108864 | 0;\n          carry += lo >>> 26;\n          this.words[i] = lo & 67108863;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return isNegNum ? this.ineg() : this;\n      };\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      };\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      };\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      };\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0)\n          return new BN(1);\n        var res = this;\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0)\n            break;\n        }\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0)\n              continue;\n            res = res.mul(q);\n          }\n        }\n        return res;\n      };\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 67108863 >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n          var carry = 0;\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n          this.length += s;\n        }\n        return this._strip();\n      };\n      BN.prototype.ishln = function ishln(bits) {\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      };\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 67108863 ^ 67108863 >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n          maskedWords.length = s;\n        }\n        if (s === 0) {\n        } else if (this.length > s) {\n          this.length -= s;\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        }\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        return this._strip();\n      };\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      };\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      };\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      };\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s)\n          return false;\n        var w = this.words[s];\n        return !!(w & q);\n      };\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n          return this;\n        }\n        if (r !== 0) {\n          s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n          var mask = 67108863 ^ 67108863 >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n        return this._strip();\n      };\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      };\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.isubn(-num);\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) <= num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        }\n        return this._iaddn(num);\n      };\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {\n          this.words[i] -= 67108864;\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      };\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.iaddn(-num);\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 67108864;\n            this.words[i + 1] -= 1;\n          }\n        }\n        return this._strip();\n      };\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 67108863;\n          carry = (w >> 26) - (right / 67108864 | 0);\n          this.words[i + shift] = w & 67108863;\n        }\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 67108863;\n        }\n        if (carry === 0)\n          return this._strip();\n        assert(carry === -1);\n        carry = 0;\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 67108863;\n        }\n        this.negative = 1;\n        return this._strip();\n      };\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        }\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n          a = diff;\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);\n          qj = Math.min(qj / bhi | 0, 67108863);\n          a._ishlnsubmul(b, qj, j);\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n            a._ishlnsubmul(b, 1, j);\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n        if (q) {\n          q._strip();\n        }\n        a._strip();\n        if (mode !== \"div\" && shift !== 0) {\n          a.iushrn(shift);\n        }\n        return {\n          div: q || null,\n          mod: a\n        };\n      };\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n          return {\n            div,\n            mod\n          };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          return {\n            div,\n            mod: res.mod\n          };\n        }\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n          return {\n            div: res.div,\n            mod\n          };\n        }\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        }\n        if (num.length === 1) {\n          if (mode === \"div\") {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n          if (mode === \"mod\") {\n            return {\n              div: null,\n              mod: new BN(this.modrn(num.words[0]))\n            };\n          }\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modrn(num.words[0]))\n          };\n        }\n        return this._wordDiv(num, mode);\n      };\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n      };\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n      };\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n      };\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        if (dm.mod.isZero())\n          return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        if (cmp < 0 || r2 === 1 && cmp === 0)\n          return dm.div;\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n      BN.prototype.modrn = function modrn(num) {\n        var isNegNum = num < 0;\n        if (isNegNum)\n          num = -num;\n        assert(num <= 67108863);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return isNegNum ? -acc : acc;\n      };\n      BN.prototype.modn = function modn(num) {\n        return this.modrn(num);\n      };\n      BN.prototype.idivn = function idivn(num) {\n        var isNegNum = num < 0;\n        if (isNegNum)\n          num = -num;\n        assert(num <= 67108863);\n        var carry = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 67108864;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n        this._strip();\n        return isNegNum ? this.ineg() : this;\n      };\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        }\n        var A = new BN(1);\n        var B = new BN(0);\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            x.iushrn(i);\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            y.iushrn(j);\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      };\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            a.iushrn(i);\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n              x1.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            b.iushrn(j);\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n              x2.iushrn(1);\n            }\n          }\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n        return res;\n      };\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero())\n          return num.abs();\n        if (num.isZero())\n          return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n          var r = a.cmp(b);\n          if (r < 0) {\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n          a.isub(b);\n        } while (true);\n        return b.iushln(shift);\n      };\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      };\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      };\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s) {\n          this._expand(s + 1);\n          this.words[s] |= q;\n          return this;\n        }\n        var carry = q;\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 67108863;\n          this.words[i] = w;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative)\n          return -1;\n        if (this.negative === 0 && negative)\n          return 1;\n        this._strip();\n        var res;\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n          assert(num <= 67108863, \"Number is too big\");\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0)\n          return -1;\n        if (this.negative === 0 && num.negative !== 0)\n          return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.ucmp = function ucmp(num) {\n        if (this.length > num.length)\n          return 1;\n        if (this.length < num.length)\n          return -1;\n        var res = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b)\n            continue;\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n          break;\n        }\n        return res;\n      };\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      };\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n      };\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n      };\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n      };\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n      };\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n      };\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n      };\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n      };\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n      };\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n      };\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n      };\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n      };\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n      };\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n      };\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n      };\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n      };\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function MPrime(name, p) {\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n      MPrime.prototype.ireduce = function ireduce(num) {\n        var r = num;\n        var rlen;\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== void 0) {\n            r.strip();\n          } else {\n            r._strip();\n          }\n        }\n        return r;\n      };\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n      function K256() {\n        MPrime.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      inherits(K256, MPrime);\n      K256.prototype.split = function split(input, output) {\n        var mask = 4194303;\n        var outLen = Math.min(input.length, 9);\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        }\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n      K256.prototype.imulK = function imulK(num) {\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        var lo = 0;\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 977;\n          num.words[i] = lo & 67108863;\n          lo = w * 64 + (lo / 67108864 | 0);\n        }\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n        return num;\n      };\n      function P224() {\n        MPrime.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      inherits(P224, MPrime);\n      function P192() {\n        MPrime.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      inherits(P192, MPrime);\n      function P25519() {\n        MPrime.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      inherits(P25519, MPrime);\n      P25519.prototype.imulK = function imulK(num) {\n        var carry = 0;\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 19 + carry;\n          var lo = hi & 67108863;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n        return num;\n      };\n      BN._prime = function prime(name) {\n        if (primes[name])\n          return primes[name];\n        var prime2;\n        if (name === \"k256\") {\n          prime2 = new K256();\n        } else if (name === \"p224\") {\n          prime2 = new P224();\n        } else if (name === \"p192\") {\n          prime2 = new P192();\n        } else if (name === \"p25519\") {\n          prime2 = new P25519();\n        } else {\n          throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime2;\n        return prime2;\n      };\n      function Red(m) {\n        if (typeof m === \"string\") {\n          var prime = BN._prime(m);\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), \"modulus must be greater than 1\");\n          this.m = m;\n          this.prime = null;\n        }\n      }\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n      };\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(\n          a.red && a.red === b.red,\n          \"red works only with red numbers\"\n        );\n      };\n      Red.prototype.imod = function imod(a) {\n        if (this.prime)\n          return this.prime.ireduce(a)._forceRed(this);\n        move(a, a.umod(this.m)._forceRed(this));\n        return a;\n      };\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n      };\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res;\n      };\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res;\n      };\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n      };\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n      };\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n      };\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero())\n          return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        }\n        var q = this.m.subn(1);\n        var s = 0;\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n        return r;\n      };\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero())\n          return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0)\n          return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n          start = 26;\n        }\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0))\n              continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n          start = 26;\n        }\n        return res;\n      };\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      };\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n      inherits(Mont, Red);\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero())\n          return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.invm = function invm(a) {\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(typeof module === \"undefined\" || module, exports);\n  }\n});\n\n// node_modules/browserify-rsa/index.js\nvar require_browserify_rsa = __commonJS({\n  \"node_modules/browserify-rsa/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn3();\n    var randomBytes = require_browser();\n    function blind(priv) {\n      var r = getr(priv);\n      var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();\n      return { blinder, unblinder: r.invm(priv.modulus) };\n    }\n    function getr(priv) {\n      var len = priv.modulus.byteLength();\n      var r;\n      do {\n        r = new BN(randomBytes(len));\n      } while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2));\n      return r;\n    }\n    function crt(msg, priv) {\n      var blinds = blind(priv);\n      var len = priv.modulus.byteLength();\n      var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);\n      var c1 = blinded.toRed(BN.mont(priv.prime1));\n      var c2 = blinded.toRed(BN.mont(priv.prime2));\n      var qinv = priv.coefficient;\n      var p = priv.prime1;\n      var q = priv.prime2;\n      var m1 = c1.redPow(priv.exponent1).fromRed();\n      var m2 = c2.redPow(priv.exponent2).fromRed();\n      var h = m1.isub(m2).imul(qinv).umod(p).imul(q);\n      return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, \"be\", len);\n    }\n    crt.getr = getr;\n    module.exports = crt;\n  }\n});\n\n// node_modules/elliptic/package.json\nvar require_package = __commonJS({\n  \"node_modules/elliptic/package.json\"(exports, module) {\n    module.exports = {\n      name: \"elliptic\",\n      version: \"6.5.4\",\n      description: \"EC cryptography\",\n      main: \"lib/elliptic.js\",\n      files: [\n        \"lib\"\n      ],\n      scripts: {\n        lint: \"eslint lib test\",\n        \"lint:fix\": \"npm run lint -- --fix\",\n        unit: \"istanbul test _mocha --reporter=spec test/index.js\",\n        test: \"npm run lint && npm run unit\",\n        version: \"grunt dist && git add dist/\"\n      },\n      repository: {\n        type: \"git\",\n        url: \"git@github.com:indutny/elliptic\"\n      },\n      keywords: [\n        \"EC\",\n        \"Elliptic\",\n        \"curve\",\n        \"Cryptography\"\n      ],\n      author: \"Fedor Indutny <fedor@indutny.com>\",\n      license: \"MIT\",\n      bugs: {\n        url: \"https://github.com/indutny/elliptic/issues\"\n      },\n      homepage: \"https://github.com/indutny/elliptic\",\n      devDependencies: {\n        brfs: \"^2.0.2\",\n        coveralls: \"^3.1.0\",\n        eslint: \"^7.6.0\",\n        grunt: \"^1.2.1\",\n        \"grunt-browserify\": \"^5.3.0\",\n        \"grunt-cli\": \"^1.3.2\",\n        \"grunt-contrib-connect\": \"^3.0.0\",\n        \"grunt-contrib-copy\": \"^1.0.0\",\n        \"grunt-contrib-uglify\": \"^5.0.0\",\n        \"grunt-mocha-istanbul\": \"^5.0.2\",\n        \"grunt-saucelabs\": \"^9.0.1\",\n        istanbul: \"^0.4.5\",\n        mocha: \"^8.0.1\"\n      },\n      dependencies: {\n        \"bn.js\": \"^4.11.9\",\n        brorand: \"^1.1.0\",\n        \"hash.js\": \"^1.0.0\",\n        \"hmac-drbg\": \"^1.0.1\",\n        inherits: \"^2.0.4\",\n        \"minimalistic-assert\": \"^1.0.1\",\n        \"minimalistic-crypto-utils\": \"^1.0.1\"\n      }\n    };\n  }\n});\n\n// node_modules/elliptic/node_modules/bn.js/lib/bn.js\nvar require_bn4 = __commonJS({\n  \"node_modules/elliptic/node_modules/bn.js/lib/bn.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    (function(module2, exports2) {\n      \"use strict\";\n      function assert(val, msg) {\n        if (!val)\n          throw new Error(msg || \"Assertion failed\");\n      }\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {\n        };\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      }\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        this.red = null;\n        if (number !== null) {\n          if (base === \"le\" || base === \"be\") {\n            endian = base;\n            base = 10;\n          }\n          this._init(number || 0, base || 10, endian || \"be\");\n        }\n      }\n      if (typeof module2 === \"object\") {\n        module2.exports = BN;\n      } else {\n        exports2.BN = BN;\n      }\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer2;\n      try {\n        if (typeof window !== \"undefined\" && typeof window.Buffer !== \"undefined\") {\n          Buffer2 = window.Buffer;\n        } else {\n          Buffer2 = require_buffer_polyfill().Buffer;\n        }\n      } catch (e) {\n      }\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0)\n          return left;\n        return right;\n      };\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0)\n          return left;\n        return right;\n      };\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n          return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n          return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n          base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n          start++;\n          this.negative = 1;\n        }\n        if (start < number.length) {\n          if (base === 16) {\n            this._parseHex(number, start, endian);\n          } else {\n            this._parseBase(number, base, start);\n            if (endian === \"le\") {\n              this._initArray(this.toArray(), base, endian);\n            }\n          }\n        }\n      };\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n        if (number < 67108864) {\n          this.words = [number & 67108863];\n          this.length = 1;\n        } else if (number < 4503599627370496) {\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863\n          ];\n          this.length = 2;\n        } else {\n          assert(number < 9007199254740992);\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863,\n            1\n          ];\n          this.length = 3;\n        }\n        if (endian !== \"le\")\n          return;\n        this._initArray(this.toArray(), base, endian);\n      };\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === \"le\") {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n        return this.strip();\n      };\n      function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        if (c >= 65 && c <= 70) {\n          return c - 55;\n        } else if (c >= 97 && c <= 102) {\n          return c - 87;\n        } else {\n          return c - 48 & 15;\n        }\n      }\n      function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n          r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n      }\n      BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n          for (i = number.length - 1; i >= start; i -= 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        } else {\n          var parseLength = number.length - start;\n          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        }\n        this.strip();\n      };\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul;\n          if (c >= 49) {\n            r += c - 49 + 10;\n          } else if (c >= 17) {\n            r += c - 17 + 10;\n          } else {\n            r += c;\n          }\n        }\n        return r;\n      }\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        this.words = [0];\n        this.length = 1;\n        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {\n          limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n          this.imuln(pow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        this.strip();\n      };\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n        return this;\n      };\n      BN.prototype.strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n        return this._normSign();\n      };\n      BN.prototype._normSign = function _normSign() {\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n        return this;\n      };\n      BN.prototype.inspect = function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      };\n      var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ];\n      var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ];\n      var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n          out = \"\";\n          var off = 0;\n          var carry = 0;\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 16777215).toString(16);\n            carry = w >>> 24 - off & 16777215;\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n            off += 2;\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n          }\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          var groupSize = groupSizes[base];\n          var groupBase = groupBases[base];\n          out = \"\";\n          var c = this.clone();\n          c.negative = 0;\n          while (!c.isZero()) {\n            var r = c.modn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n          if (this.isZero()) {\n            out = \"0\" + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n      };\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n          ret += this.words[1] * 67108864;\n        } else if (this.length === 3 && this.words[2] === 1) {\n          ret += 4503599627370496 + this.words[1] * 67108864;\n        } else if (this.length > 2) {\n          assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n      };\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n      };\n      BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer2 !== \"undefined\");\n        return this.toArrayLike(Buffer2, endian, length);\n      };\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        this.strip();\n        var littleEndian = endian === \"le\";\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n        if (!littleEndian) {\n          for (i = 0; i < reqLength - byteLength; i++) {\n            res[i] = 0;\n          }\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[reqLength - i - 1] = b;\n          }\n        } else {\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[i] = b;\n          }\n          for (; i < reqLength; i++) {\n            res[i] = 0;\n          }\n        }\n        return res;\n      };\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n          if (t >= 4096) {\n            r += 13;\n            t >>>= 13;\n          }\n          if (t >= 64) {\n            r += 7;\n            t >>>= 7;\n          }\n          if (t >= 8) {\n            r += 4;\n            t >>>= 4;\n          }\n          if (t >= 2) {\n            r += 2;\n            t >>>= 2;\n          }\n          return r + t;\n        };\n      }\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        if (w === 0)\n          return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 8191) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n        if ((t & 127) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n        if ((t & 15) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n        if ((t & 3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n        if ((t & 1) === 0) {\n          r++;\n        }\n        return r;\n      };\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n      };\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n        return w;\n      }\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero())\n          return 0;\n        var r = 0;\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n          r += b;\n          if (b !== 26)\n            break;\n        }\n        return r;\n      };\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n      };\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n      };\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      };\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n        return this;\n      };\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n        return this.strip();\n      };\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      };\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length)\n          return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length)\n          return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      };\n      BN.prototype.iuand = function iuand(num) {\n        var b;\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this.strip();\n      };\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      };\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length)\n          return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length)\n          return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      };\n      BN.prototype.iuxor = function iuxor(num) {\n        var a;\n        var b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = a.length;\n        return this.strip();\n      };\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      };\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length)\n          return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length)\n          return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      };\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        }\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 67108863;\n        }\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;\n        }\n        return this.strip();\n      };\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      };\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this.strip();\n      };\n      BN.prototype.iadd = function iadd(num) {\n        var r;\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign();\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        }\n        var a, b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++;\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        return this;\n      };\n      BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n        if (this.length > num.length)\n          return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      };\n      BN.prototype.isub = function isub(num) {\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign();\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        }\n        var cmp = this.cmp(num);\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        }\n        var a, b;\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n          this.negative = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n      function smallMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        var len = self2.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        var a = self2.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 67108863;\n        var carry = r / 67108864 | 0;\n        out.words[0] = lo;\n        for (var k = 1; k < len; k++) {\n          var ncarry = carry >>> 26;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self2.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 67108864 | 0;\n            rword = r & 67108863;\n          }\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      var comb10MulTo = function comb10MulTo2(self2, num, out) {\n        var a = self2.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 8191;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 8191;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 8191;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 8191;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 8191;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 8191;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 8191;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 8191;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 8191;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 8191;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 8191;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 8191;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 8191;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 8191;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 8191;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 8191;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 8191;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 8191;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 8191;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 8191;\n        var bh9 = b9 >>> 13;\n        out.negative = self2.negative ^ num.negative;\n        out.length = 19;\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 67108863;\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 67108863;\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 67108863;\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 67108863;\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 67108863;\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 67108863;\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 67108863;\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 67108863;\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 67108863;\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 67108863;\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 67108863;\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 67108863;\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 67108863;\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 67108863;\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 67108863;\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 67108863;\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 67108863;\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 67108863;\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 67108863;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n        return out;\n      };\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n      function bigMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        out.length = self2.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for (var k = 0; k < out.length - 1; k++) {\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self2.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 67108863;\n            ncarry = ncarry + (r / 67108864 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 67108863;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 67108863;\n          }\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      function jumboMulTo(self2, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self2, num, out);\n      }\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n        return res;\n      };\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n        return t;\n      };\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1)\n          return x;\n        var rb = 0;\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n        return rb;\n      };\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n        return 1 << i + 1 + odd;\n      };\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1)\n          return;\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 67108863;\n          if (w < 67108864) {\n            carry = 0;\n          } else {\n            carry = w / 67108864 | 0;\n          }\n        }\n        return ws;\n      };\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 8191;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 8191;\n          carry = carry >>> 13;\n        }\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~8191) === 0);\n      };\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n        return ph;\n      };\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n      };\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      };\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      };\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n      BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        var carry = 0;\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 67108863) + (carry & 67108863);\n          carry >>= 26;\n          carry += w / 67108864 | 0;\n          carry += lo >>> 26;\n          this.words[i] = lo & 67108863;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      };\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      };\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      };\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0)\n          return new BN(1);\n        var res = this;\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0)\n            break;\n        }\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0)\n              continue;\n            res = res.mul(q);\n          }\n        }\n        return res;\n      };\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 67108863 >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n          var carry = 0;\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n          this.length += s;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishln = function ishln(bits) {\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      };\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 67108863 ^ 67108863 >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n          maskedWords.length = s;\n        }\n        if (s === 0) {\n        } else if (this.length > s) {\n          this.length -= s;\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        }\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      };\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      };\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      };\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s)\n          return false;\n        var w = this.words[s];\n        return !!(w & q);\n      };\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n          return this;\n        }\n        if (r !== 0) {\n          s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n          var mask = 67108863 ^ 67108863 >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n        return this.strip();\n      };\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      };\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.isubn(-num);\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) < num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        }\n        return this._iaddn(num);\n      };\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {\n          this.words[i] -= 67108864;\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      };\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.iaddn(-num);\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 67108864;\n            this.words[i + 1] -= 1;\n          }\n        }\n        return this.strip();\n      };\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 67108863;\n          carry = (w >> 26) - (right / 67108864 | 0);\n          this.words[i + shift] = w & 67108863;\n        }\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 67108863;\n        }\n        if (carry === 0)\n          return this.strip();\n        assert(carry === -1);\n        carry = 0;\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 67108863;\n        }\n        this.negative = 1;\n        return this.strip();\n      };\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        }\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n          a = diff;\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);\n          qj = Math.min(qj / bhi | 0, 67108863);\n          a._ishlnsubmul(b, qj, j);\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n            a._ishlnsubmul(b, 1, j);\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n        if (q) {\n          q.strip();\n        }\n        a.strip();\n        if (mode !== \"div\" && shift !== 0) {\n          a.iushrn(shift);\n        }\n        return {\n          div: q || null,\n          mod: a\n        };\n      };\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n          return {\n            div,\n            mod\n          };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          return {\n            div,\n            mod: res.mod\n          };\n        }\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n          return {\n            div: res.div,\n            mod\n          };\n        }\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        }\n        if (num.length === 1) {\n          if (mode === \"div\") {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n          if (mode === \"mod\") {\n            return {\n              div: null,\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n        return this._wordDiv(num, mode);\n      };\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n      };\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n      };\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n      };\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        if (dm.mod.isZero())\n          return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        if (cmp < 0 || r2 === 1 && cmp === 0)\n          return dm.div;\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n      BN.prototype.modn = function modn(num) {\n        assert(num <= 67108863);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return acc;\n      };\n      BN.prototype.idivn = function idivn(num) {\n        assert(num <= 67108863);\n        var carry = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 67108864;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n        return this.strip();\n      };\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        }\n        var A = new BN(1);\n        var B = new BN(0);\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            x.iushrn(i);\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            y.iushrn(j);\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      };\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            a.iushrn(i);\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n              x1.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            b.iushrn(j);\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n              x2.iushrn(1);\n            }\n          }\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n        return res;\n      };\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero())\n          return num.abs();\n        if (num.isZero())\n          return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n          var r = a.cmp(b);\n          if (r < 0) {\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n          a.isub(b);\n        } while (true);\n        return b.iushln(shift);\n      };\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      };\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      };\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s) {\n          this._expand(s + 1);\n          this.words[s] |= q;\n          return this;\n        }\n        var carry = q;\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 67108863;\n          this.words[i] = w;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative)\n          return -1;\n        if (this.negative === 0 && negative)\n          return 1;\n        this.strip();\n        var res;\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n          assert(num <= 67108863, \"Number is too big\");\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0)\n          return -1;\n        if (this.negative === 0 && num.negative !== 0)\n          return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.ucmp = function ucmp(num) {\n        if (this.length > num.length)\n          return 1;\n        if (this.length < num.length)\n          return -1;\n        var res = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b)\n            continue;\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n          break;\n        }\n        return res;\n      };\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      };\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n      };\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n      };\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n      };\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n      };\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n      };\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n      };\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n      };\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n      };\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n      };\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n      };\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n      };\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n      };\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n      };\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n      };\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n      };\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function MPrime(name, p) {\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n      MPrime.prototype.ireduce = function ireduce(num) {\n        var r = num;\n        var rlen;\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== void 0) {\n            r.strip();\n          } else {\n            r._strip();\n          }\n        }\n        return r;\n      };\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n      function K256() {\n        MPrime.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      inherits(K256, MPrime);\n      K256.prototype.split = function split(input, output) {\n        var mask = 4194303;\n        var outLen = Math.min(input.length, 9);\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        }\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n      K256.prototype.imulK = function imulK(num) {\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        var lo = 0;\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 977;\n          num.words[i] = lo & 67108863;\n          lo = w * 64 + (lo / 67108864 | 0);\n        }\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n        return num;\n      };\n      function P224() {\n        MPrime.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      inherits(P224, MPrime);\n      function P192() {\n        MPrime.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      inherits(P192, MPrime);\n      function P25519() {\n        MPrime.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      inherits(P25519, MPrime);\n      P25519.prototype.imulK = function imulK(num) {\n        var carry = 0;\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 19 + carry;\n          var lo = hi & 67108863;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n        return num;\n      };\n      BN._prime = function prime(name) {\n        if (primes[name])\n          return primes[name];\n        var prime2;\n        if (name === \"k256\") {\n          prime2 = new K256();\n        } else if (name === \"p224\") {\n          prime2 = new P224();\n        } else if (name === \"p192\") {\n          prime2 = new P192();\n        } else if (name === \"p25519\") {\n          prime2 = new P25519();\n        } else {\n          throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime2;\n        return prime2;\n      };\n      function Red(m) {\n        if (typeof m === \"string\") {\n          var prime = BN._prime(m);\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), \"modulus must be greater than 1\");\n          this.m = m;\n          this.prime = null;\n        }\n      }\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n      };\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(\n          a.red && a.red === b.red,\n          \"red works only with red numbers\"\n        );\n      };\n      Red.prototype.imod = function imod(a) {\n        if (this.prime)\n          return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n      };\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n      };\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res;\n      };\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res;\n      };\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n      };\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n      };\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n      };\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero())\n          return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        }\n        var q = this.m.subn(1);\n        var s = 0;\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n        return r;\n      };\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero())\n          return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0)\n          return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n          start = 26;\n        }\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0))\n              continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n          start = 26;\n        }\n        return res;\n      };\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      };\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n      inherits(Mont, Red);\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero())\n          return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.invm = function invm(a) {\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(typeof module === \"undefined\" || module, exports);\n  }\n});\n\n// node_modules/minimalistic-crypto-utils/lib/utils.js\nvar require_utils2 = __commonJS({\n  \"node_modules/minimalistic-crypto-utils/lib/utils.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = exports;\n    function toArray(msg, enc) {\n      if (Array.isArray(msg))\n        return msg.slice();\n      if (!msg)\n        return [];\n      var res = [];\n      if (typeof msg !== \"string\") {\n        for (var i = 0; i < msg.length; i++)\n          res[i] = msg[i] | 0;\n        return res;\n      }\n      if (enc === \"hex\") {\n        msg = msg.replace(/[^a-z0-9]+/ig, \"\");\n        if (msg.length % 2 !== 0)\n          msg = \"0\" + msg;\n        for (var i = 0; i < msg.length; i += 2)\n          res.push(parseInt(msg[i] + msg[i + 1], 16));\n      } else {\n        for (var i = 0; i < msg.length; i++) {\n          var c = msg.charCodeAt(i);\n          var hi = c >> 8;\n          var lo = c & 255;\n          if (hi)\n            res.push(hi, lo);\n          else\n            res.push(lo);\n        }\n      }\n      return res;\n    }\n    utils.toArray = toArray;\n    function zero2(word) {\n      if (word.length === 1)\n        return \"0\" + word;\n      else\n        return word;\n    }\n    utils.zero2 = zero2;\n    function toHex(msg) {\n      var res = \"\";\n      for (var i = 0; i < msg.length; i++)\n        res += zero2(msg[i].toString(16));\n      return res;\n    }\n    utils.toHex = toHex;\n    utils.encode = function encode(arr, enc) {\n      if (enc === \"hex\")\n        return toHex(arr);\n      else\n        return arr;\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/utils.js\nvar require_utils3 = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/utils.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = exports;\n    var BN = require_bn4();\n    var minAssert = require_minimalistic_assert();\n    var minUtils = require_utils2();\n    utils.assert = minAssert;\n    utils.toArray = minUtils.toArray;\n    utils.zero2 = minUtils.zero2;\n    utils.toHex = minUtils.toHex;\n    utils.encode = minUtils.encode;\n    function getNAF(num, w, bits) {\n      var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n      naf.fill(0);\n      var ws = 1 << w + 1;\n      var k = num.clone();\n      for (var i = 0; i < naf.length; i++) {\n        var z;\n        var mod = k.andln(ws - 1);\n        if (k.isOdd()) {\n          if (mod > (ws >> 1) - 1)\n            z = (ws >> 1) - mod;\n          else\n            z = mod;\n          k.isubn(z);\n        } else {\n          z = 0;\n        }\n        naf[i] = z;\n        k.iushrn(1);\n      }\n      return naf;\n    }\n    utils.getNAF = getNAF;\n    function getJSF(k1, k2) {\n      var jsf = [\n        [],\n        []\n      ];\n      k1 = k1.clone();\n      k2 = k2.clone();\n      var d1 = 0;\n      var d2 = 0;\n      var m8;\n      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n        var m14 = k1.andln(3) + d1 & 3;\n        var m24 = k2.andln(3) + d2 & 3;\n        if (m14 === 3)\n          m14 = -1;\n        if (m24 === 3)\n          m24 = -1;\n        var u1;\n        if ((m14 & 1) === 0) {\n          u1 = 0;\n        } else {\n          m8 = k1.andln(7) + d1 & 7;\n          if ((m8 === 3 || m8 === 5) && m24 === 2)\n            u1 = -m14;\n          else\n            u1 = m14;\n        }\n        jsf[0].push(u1);\n        var u2;\n        if ((m24 & 1) === 0) {\n          u2 = 0;\n        } else {\n          m8 = k2.andln(7) + d2 & 7;\n          if ((m8 === 3 || m8 === 5) && m14 === 2)\n            u2 = -m24;\n          else\n            u2 = m24;\n        }\n        jsf[1].push(u2);\n        if (2 * d1 === u1 + 1)\n          d1 = 1 - d1;\n        if (2 * d2 === u2 + 1)\n          d2 = 1 - d2;\n        k1.iushrn(1);\n        k2.iushrn(1);\n      }\n      return jsf;\n    }\n    utils.getJSF = getJSF;\n    function cachedProperty(obj, name, computer) {\n      var key = \"_\" + name;\n      obj.prototype[name] = function cachedProperty2() {\n        return this[key] !== void 0 ? this[key] : this[key] = computer.call(this);\n      };\n    }\n    utils.cachedProperty = cachedProperty;\n    function parseBytes(bytes) {\n      return typeof bytes === \"string\" ? utils.toArray(bytes, \"hex\") : bytes;\n    }\n    utils.parseBytes = parseBytes;\n    function intFromLE(bytes) {\n      return new BN(bytes, \"hex\", \"le\");\n    }\n    utils.intFromLE = intFromLE;\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/curve/base.js\nvar require_base = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/curve/base.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn4();\n    var utils = require_utils3();\n    var getNAF = utils.getNAF;\n    var getJSF = utils.getJSF;\n    var assert = utils.assert;\n    function BaseCurve(type, conf) {\n      this.type = type;\n      this.p = new BN(conf.p, 16);\n      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n      this.zero = new BN(0).toRed(this.red);\n      this.one = new BN(1).toRed(this.red);\n      this.two = new BN(2).toRed(this.red);\n      this.n = conf.n && new BN(conf.n, 16);\n      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n      this._wnafT1 = new Array(4);\n      this._wnafT2 = new Array(4);\n      this._wnafT3 = new Array(4);\n      this._wnafT4 = new Array(4);\n      this._bitLength = this.n ? this.n.bitLength() : 0;\n      var adjustCount = this.n && this.p.div(this.n);\n      if (!adjustCount || adjustCount.cmpn(100) > 0) {\n        this.redN = null;\n      } else {\n        this._maxwellTrick = true;\n        this.redN = this.n.toRed(this.red);\n      }\n    }\n    module.exports = BaseCurve;\n    BaseCurve.prototype.point = function point() {\n      throw new Error(\"Not implemented\");\n    };\n    BaseCurve.prototype.validate = function validate() {\n      throw new Error(\"Not implemented\");\n    };\n    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n      assert(p.precomputed);\n      var doubles = p._getDoubles();\n      var naf = getNAF(k, 1, this._bitLength);\n      var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);\n      I /= 3;\n      var repr = [];\n      var j;\n      var nafW;\n      for (j = 0; j < naf.length; j += doubles.step) {\n        nafW = 0;\n        for (var l = j + doubles.step - 1; l >= j; l--)\n          nafW = (nafW << 1) + naf[l];\n        repr.push(nafW);\n      }\n      var a = this.jpoint(null, null, null);\n      var b = this.jpoint(null, null, null);\n      for (var i = I; i > 0; i--) {\n        for (j = 0; j < repr.length; j++) {\n          nafW = repr[j];\n          if (nafW === i)\n            b = b.mixedAdd(doubles.points[j]);\n          else if (nafW === -i)\n            b = b.mixedAdd(doubles.points[j].neg());\n        }\n        a = a.add(b);\n      }\n      return a.toP();\n    };\n    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n      var w = 4;\n      var nafPoints = p._getNAFPoints(w);\n      w = nafPoints.wnd;\n      var wnd = nafPoints.points;\n      var naf = getNAF(k, w, this._bitLength);\n      var acc = this.jpoint(null, null, null);\n      for (var i = naf.length - 1; i >= 0; i--) {\n        for (var l = 0; i >= 0 && naf[i] === 0; i--)\n          l++;\n        if (i >= 0)\n          l++;\n        acc = acc.dblp(l);\n        if (i < 0)\n          break;\n        var z = naf[i];\n        assert(z !== 0);\n        if (p.type === \"affine\") {\n          if (z > 0)\n            acc = acc.mixedAdd(wnd[z - 1 >> 1]);\n          else\n            acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());\n        } else {\n          if (z > 0)\n            acc = acc.add(wnd[z - 1 >> 1]);\n          else\n            acc = acc.add(wnd[-z - 1 >> 1].neg());\n        }\n      }\n      return p.type === \"affine\" ? acc.toP() : acc;\n    };\n    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {\n      var wndWidth = this._wnafT1;\n      var wnd = this._wnafT2;\n      var naf = this._wnafT3;\n      var max = 0;\n      var i;\n      var j;\n      var p;\n      for (i = 0; i < len; i++) {\n        p = points[i];\n        var nafPoints = p._getNAFPoints(defW);\n        wndWidth[i] = nafPoints.wnd;\n        wnd[i] = nafPoints.points;\n      }\n      for (i = len - 1; i >= 1; i -= 2) {\n        var a = i - 1;\n        var b = i;\n        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n          max = Math.max(naf[a].length, max);\n          max = Math.max(naf[b].length, max);\n          continue;\n        }\n        var comb = [\n          points[a],\n          /* 1 */\n          null,\n          /* 3 */\n          null,\n          /* 5 */\n          points[b]\n          /* 7 */\n        ];\n        if (points[a].y.cmp(points[b].y) === 0) {\n          comb[1] = points[a].add(points[b]);\n          comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n          comb[1] = points[a].toJ().mixedAdd(points[b]);\n          comb[2] = points[a].add(points[b].neg());\n        } else {\n          comb[1] = points[a].toJ().mixedAdd(points[b]);\n          comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n        }\n        var index = [\n          -3,\n          /* -1 -1 */\n          -1,\n          /* -1 0 */\n          -5,\n          /* -1 1 */\n          -7,\n          /* 0 -1 */\n          0,\n          /* 0 0 */\n          7,\n          /* 0 1 */\n          5,\n          /* 1 -1 */\n          1,\n          /* 1 0 */\n          3\n          /* 1 1 */\n        ];\n        var jsf = getJSF(coeffs[a], coeffs[b]);\n        max = Math.max(jsf[0].length, max);\n        naf[a] = new Array(max);\n        naf[b] = new Array(max);\n        for (j = 0; j < max; j++) {\n          var ja = jsf[0][j] | 0;\n          var jb = jsf[1][j] | 0;\n          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n          naf[b][j] = 0;\n          wnd[a] = comb;\n        }\n      }\n      var acc = this.jpoint(null, null, null);\n      var tmp = this._wnafT4;\n      for (i = max; i >= 0; i--) {\n        var k = 0;\n        while (i >= 0) {\n          var zero = true;\n          for (j = 0; j < len; j++) {\n            tmp[j] = naf[j][i] | 0;\n            if (tmp[j] !== 0)\n              zero = false;\n          }\n          if (!zero)\n            break;\n          k++;\n          i--;\n        }\n        if (i >= 0)\n          k++;\n        acc = acc.dblp(k);\n        if (i < 0)\n          break;\n        for (j = 0; j < len; j++) {\n          var z = tmp[j];\n          p;\n          if (z === 0)\n            continue;\n          else if (z > 0)\n            p = wnd[j][z - 1 >> 1];\n          else if (z < 0)\n            p = wnd[j][-z - 1 >> 1].neg();\n          if (p.type === \"affine\")\n            acc = acc.mixedAdd(p);\n          else\n            acc = acc.add(p);\n        }\n      }\n      for (i = 0; i < len; i++)\n        wnd[i] = null;\n      if (jacobianResult)\n        return acc;\n      else\n        return acc.toP();\n    };\n    function BasePoint(curve, type) {\n      this.curve = curve;\n      this.type = type;\n      this.precomputed = null;\n    }\n    BaseCurve.BasePoint = BasePoint;\n    BasePoint.prototype.eq = function eq() {\n      throw new Error(\"Not implemented\");\n    };\n    BasePoint.prototype.validate = function validate() {\n      return this.curve.validate(this);\n    };\n    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n      bytes = utils.toArray(bytes, enc);\n      var len = this.p.byteLength();\n      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {\n        if (bytes[0] === 6)\n          assert(bytes[bytes.length - 1] % 2 === 0);\n        else if (bytes[0] === 7)\n          assert(bytes[bytes.length - 1] % 2 === 1);\n        var res = this.point(\n          bytes.slice(1, 1 + len),\n          bytes.slice(1 + len, 1 + 2 * len)\n        );\n        return res;\n      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {\n        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);\n      }\n      throw new Error(\"Unknown point format\");\n    };\n    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n      return this.encode(enc, true);\n    };\n    BasePoint.prototype._encode = function _encode(compact) {\n      var len = this.curve.p.byteLength();\n      var x = this.getX().toArray(\"be\", len);\n      if (compact)\n        return [this.getY().isEven() ? 2 : 3].concat(x);\n      return [4].concat(x, this.getY().toArray(\"be\", len));\n    };\n    BasePoint.prototype.encode = function encode(enc, compact) {\n      return utils.encode(this._encode(compact), enc);\n    };\n    BasePoint.prototype.precompute = function precompute(power) {\n      if (this.precomputed)\n        return this;\n      var precomputed = {\n        doubles: null,\n        naf: null,\n        beta: null\n      };\n      precomputed.naf = this._getNAFPoints(8);\n      precomputed.doubles = this._getDoubles(4, power);\n      precomputed.beta = this._getBeta();\n      this.precomputed = precomputed;\n      return this;\n    };\n    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n      if (!this.precomputed)\n        return false;\n      var doubles = this.precomputed.doubles;\n      if (!doubles)\n        return false;\n      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n    };\n    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n      if (this.precomputed && this.precomputed.doubles)\n        return this.precomputed.doubles;\n      var doubles = [this];\n      var acc = this;\n      for (var i = 0; i < power; i += step) {\n        for (var j = 0; j < step; j++)\n          acc = acc.dbl();\n        doubles.push(acc);\n      }\n      return {\n        step,\n        points: doubles\n      };\n    };\n    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n      if (this.precomputed && this.precomputed.naf)\n        return this.precomputed.naf;\n      var res = [this];\n      var max = (1 << wnd) - 1;\n      var dbl = max === 1 ? null : this.dbl();\n      for (var i = 1; i < max; i++)\n        res[i] = res[i - 1].add(dbl);\n      return {\n        wnd,\n        points: res\n      };\n    };\n    BasePoint.prototype._getBeta = function _getBeta() {\n      return null;\n    };\n    BasePoint.prototype.dblp = function dblp(k) {\n      var r = this;\n      for (var i = 0; i < k; i++)\n        r = r.dbl();\n      return r;\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/curve/short.js\nvar require_short = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/curve/short.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils3();\n    var BN = require_bn4();\n    var inherits = require_inherits_browser();\n    var Base = require_base();\n    var assert = utils.assert;\n    function ShortCurve(conf) {\n      Base.call(this, \"short\", conf);\n      this.a = new BN(conf.a, 16).toRed(this.red);\n      this.b = new BN(conf.b, 16).toRed(this.red);\n      this.tinv = this.two.redInvm();\n      this.zeroA = this.a.fromRed().cmpn(0) === 0;\n      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n      this.endo = this._getEndomorphism(conf);\n      this._endoWnafT1 = new Array(4);\n      this._endoWnafT2 = new Array(4);\n    }\n    inherits(ShortCurve, Base);\n    module.exports = ShortCurve;\n    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)\n        return;\n      var beta;\n      var lambda;\n      if (conf.beta) {\n        beta = new BN(conf.beta, 16).toRed(this.red);\n      } else {\n        var betas = this._getEndoRoots(this.p);\n        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n        beta = beta.toRed(this.red);\n      }\n      if (conf.lambda) {\n        lambda = new BN(conf.lambda, 16);\n      } else {\n        var lambdas = this._getEndoRoots(this.n);\n        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n          lambda = lambdas[0];\n        } else {\n          lambda = lambdas[1];\n          assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n        }\n      }\n      var basis;\n      if (conf.basis) {\n        basis = conf.basis.map(function(vec) {\n          return {\n            a: new BN(vec.a, 16),\n            b: new BN(vec.b, 16)\n          };\n        });\n      } else {\n        basis = this._getEndoBasis(lambda);\n      }\n      return {\n        beta,\n        lambda,\n        basis\n      };\n    };\n    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n      var red = num === this.p ? this.red : BN.mont(num);\n      var tinv = new BN(2).toRed(red).redInvm();\n      var ntinv = tinv.redNeg();\n      var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n      var l1 = ntinv.redAdd(s).fromRed();\n      var l2 = ntinv.redSub(s).fromRed();\n      return [l1, l2];\n    };\n    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n      var u = lambda;\n      var v = this.n.clone();\n      var x1 = new BN(1);\n      var y1 = new BN(0);\n      var x2 = new BN(0);\n      var y2 = new BN(1);\n      var a0;\n      var b0;\n      var a1;\n      var b1;\n      var a2;\n      var b2;\n      var prevR;\n      var i = 0;\n      var r;\n      var x;\n      while (u.cmpn(0) !== 0) {\n        var q = v.div(u);\n        r = v.sub(q.mul(u));\n        x = x2.sub(q.mul(x1));\n        var y = y2.sub(q.mul(y1));\n        if (!a1 && r.cmp(aprxSqrt) < 0) {\n          a0 = prevR.neg();\n          b0 = x1;\n          a1 = r.neg();\n          b1 = x;\n        } else if (a1 && ++i === 2) {\n          break;\n        }\n        prevR = r;\n        v = u;\n        u = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n      }\n      a2 = r.neg();\n      b2 = x;\n      var len1 = a1.sqr().add(b1.sqr());\n      var len2 = a2.sqr().add(b2.sqr());\n      if (len2.cmp(len1) >= 0) {\n        a2 = a0;\n        b2 = b0;\n      }\n      if (a1.negative) {\n        a1 = a1.neg();\n        b1 = b1.neg();\n      }\n      if (a2.negative) {\n        a2 = a2.neg();\n        b2 = b2.neg();\n      }\n      return [\n        { a: a1, b: b1 },\n        { a: a2, b: b2 }\n      ];\n    };\n    ShortCurve.prototype._endoSplit = function _endoSplit(k) {\n      var basis = this.endo.basis;\n      var v1 = basis[0];\n      var v2 = basis[1];\n      var c1 = v2.b.mul(k).divRound(this.n);\n      var c2 = v1.b.neg().mul(k).divRound(this.n);\n      var p1 = c1.mul(v1.a);\n      var p2 = c2.mul(v2.a);\n      var q1 = c1.mul(v1.b);\n      var q2 = c2.mul(v2.b);\n      var k1 = k.sub(p1).sub(p2);\n      var k2 = q1.add(q2).neg();\n      return { k1, k2 };\n    };\n    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n      x = new BN(x, 16);\n      if (!x.red)\n        x = x.toRed(this.red);\n      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n      var y = y2.redSqrt();\n      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n        throw new Error(\"invalid point\");\n      var isOdd = y.fromRed().isOdd();\n      if (odd && !isOdd || !odd && isOdd)\n        y = y.redNeg();\n      return this.point(x, y);\n    };\n    ShortCurve.prototype.validate = function validate(point) {\n      if (point.inf)\n        return true;\n      var x = point.x;\n      var y = point.y;\n      var ax = this.a.redMul(x);\n      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n      return y.redSqr().redISub(rhs).cmpn(0) === 0;\n    };\n    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n      var npoints = this._endoWnafT1;\n      var ncoeffs = this._endoWnafT2;\n      for (var i = 0; i < points.length; i++) {\n        var split = this._endoSplit(coeffs[i]);\n        var p = points[i];\n        var beta = p._getBeta();\n        if (split.k1.negative) {\n          split.k1.ineg();\n          p = p.neg(true);\n        }\n        if (split.k2.negative) {\n          split.k2.ineg();\n          beta = beta.neg(true);\n        }\n        npoints[i * 2] = p;\n        npoints[i * 2 + 1] = beta;\n        ncoeffs[i * 2] = split.k1;\n        ncoeffs[i * 2 + 1] = split.k2;\n      }\n      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n      for (var j = 0; j < i * 2; j++) {\n        npoints[j] = null;\n        ncoeffs[j] = null;\n      }\n      return res;\n    };\n    function Point(curve, x, y, isRed) {\n      Base.BasePoint.call(this, curve, \"affine\");\n      if (x === null && y === null) {\n        this.x = null;\n        this.y = null;\n        this.inf = true;\n      } else {\n        this.x = new BN(x, 16);\n        this.y = new BN(y, 16);\n        if (isRed) {\n          this.x.forceRed(this.curve.red);\n          this.y.forceRed(this.curve.red);\n        }\n        if (!this.x.red)\n          this.x = this.x.toRed(this.curve.red);\n        if (!this.y.red)\n          this.y = this.y.toRed(this.curve.red);\n        this.inf = false;\n      }\n    }\n    inherits(Point, Base.BasePoint);\n    ShortCurve.prototype.point = function point(x, y, isRed) {\n      return new Point(this, x, y, isRed);\n    };\n    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n      return Point.fromJSON(this, obj, red);\n    };\n    Point.prototype._getBeta = function _getBeta() {\n      if (!this.curve.endo)\n        return;\n      var pre = this.precomputed;\n      if (pre && pre.beta)\n        return pre.beta;\n      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n      if (pre) {\n        var curve = this.curve;\n        var endoMul = function(p) {\n          return curve.point(p.x.redMul(curve.endo.beta), p.y);\n        };\n        pre.beta = beta;\n        beta.precomputed = {\n          beta: null,\n          naf: pre.naf && {\n            wnd: pre.naf.wnd,\n            points: pre.naf.points.map(endoMul)\n          },\n          doubles: pre.doubles && {\n            step: pre.doubles.step,\n            points: pre.doubles.points.map(endoMul)\n          }\n        };\n      }\n      return beta;\n    };\n    Point.prototype.toJSON = function toJSON() {\n      if (!this.precomputed)\n        return [this.x, this.y];\n      return [this.x, this.y, this.precomputed && {\n        doubles: this.precomputed.doubles && {\n          step: this.precomputed.doubles.step,\n          points: this.precomputed.doubles.points.slice(1)\n        },\n        naf: this.precomputed.naf && {\n          wnd: this.precomputed.naf.wnd,\n          points: this.precomputed.naf.points.slice(1)\n        }\n      }];\n    };\n    Point.fromJSON = function fromJSON(curve, obj, red) {\n      if (typeof obj === \"string\")\n        obj = JSON.parse(obj);\n      var res = curve.point(obj[0], obj[1], red);\n      if (!obj[2])\n        return res;\n      function obj2point(obj2) {\n        return curve.point(obj2[0], obj2[1], red);\n      }\n      var pre = obj[2];\n      res.precomputed = {\n        beta: null,\n        doubles: pre.doubles && {\n          step: pre.doubles.step,\n          points: [res].concat(pre.doubles.points.map(obj2point))\n        },\n        naf: pre.naf && {\n          wnd: pre.naf.wnd,\n          points: [res].concat(pre.naf.points.map(obj2point))\n        }\n      };\n      return res;\n    };\n    Point.prototype.inspect = function inspect() {\n      if (this.isInfinity())\n        return \"<EC Point Infinity>\";\n      return \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" y: \" + this.y.fromRed().toString(16, 2) + \">\";\n    };\n    Point.prototype.isInfinity = function isInfinity() {\n      return this.inf;\n    };\n    Point.prototype.add = function add(p) {\n      if (this.inf)\n        return p;\n      if (p.inf)\n        return this;\n      if (this.eq(p))\n        return this.dbl();\n      if (this.neg().eq(p))\n        return this.curve.point(null, null);\n      if (this.x.cmp(p.x) === 0)\n        return this.curve.point(null, null);\n      var c = this.y.redSub(p.y);\n      if (c.cmpn(0) !== 0)\n        c = c.redMul(this.x.redSub(p.x).redInvm());\n      var nx = c.redSqr().redISub(this.x).redISub(p.x);\n      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n      return this.curve.point(nx, ny);\n    };\n    Point.prototype.dbl = function dbl() {\n      if (this.inf)\n        return this;\n      var ys1 = this.y.redAdd(this.y);\n      if (ys1.cmpn(0) === 0)\n        return this.curve.point(null, null);\n      var a = this.curve.a;\n      var x2 = this.x.redSqr();\n      var dyinv = ys1.redInvm();\n      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n      var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n      return this.curve.point(nx, ny);\n    };\n    Point.prototype.getX = function getX() {\n      return this.x.fromRed();\n    };\n    Point.prototype.getY = function getY() {\n      return this.y.fromRed();\n    };\n    Point.prototype.mul = function mul(k) {\n      k = new BN(k, 16);\n      if (this.isInfinity())\n        return this;\n      else if (this._hasDoubles(k))\n        return this.curve._fixedNafMul(this, k);\n      else if (this.curve.endo)\n        return this.curve._endoWnafMulAdd([this], [k]);\n      else\n        return this.curve._wnafMul(this, k);\n    };\n    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n      var points = [this, p2];\n      var coeffs = [k1, k2];\n      if (this.curve.endo)\n        return this.curve._endoWnafMulAdd(points, coeffs);\n      else\n        return this.curve._wnafMulAdd(1, points, coeffs, 2);\n    };\n    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n      var points = [this, p2];\n      var coeffs = [k1, k2];\n      if (this.curve.endo)\n        return this.curve._endoWnafMulAdd(points, coeffs, true);\n      else\n        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n    };\n    Point.prototype.eq = function eq(p) {\n      return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n    };\n    Point.prototype.neg = function neg(_precompute) {\n      if (this.inf)\n        return this;\n      var res = this.curve.point(this.x, this.y.redNeg());\n      if (_precompute && this.precomputed) {\n        var pre = this.precomputed;\n        var negate = function(p) {\n          return p.neg();\n        };\n        res.precomputed = {\n          naf: pre.naf && {\n            wnd: pre.naf.wnd,\n            points: pre.naf.points.map(negate)\n          },\n          doubles: pre.doubles && {\n            step: pre.doubles.step,\n            points: pre.doubles.points.map(negate)\n          }\n        };\n      }\n      return res;\n    };\n    Point.prototype.toJ = function toJ() {\n      if (this.inf)\n        return this.curve.jpoint(null, null, null);\n      var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n      return res;\n    };\n    function JPoint(curve, x, y, z) {\n      Base.BasePoint.call(this, curve, \"jacobian\");\n      if (x === null && y === null && z === null) {\n        this.x = this.curve.one;\n        this.y = this.curve.one;\n        this.z = new BN(0);\n      } else {\n        this.x = new BN(x, 16);\n        this.y = new BN(y, 16);\n        this.z = new BN(z, 16);\n      }\n      if (!this.x.red)\n        this.x = this.x.toRed(this.curve.red);\n      if (!this.y.red)\n        this.y = this.y.toRed(this.curve.red);\n      if (!this.z.red)\n        this.z = this.z.toRed(this.curve.red);\n      this.zOne = this.z === this.curve.one;\n    }\n    inherits(JPoint, Base.BasePoint);\n    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n      return new JPoint(this, x, y, z);\n    };\n    JPoint.prototype.toP = function toP() {\n      if (this.isInfinity())\n        return this.curve.point(null, null);\n      var zinv = this.z.redInvm();\n      var zinv2 = zinv.redSqr();\n      var ax = this.x.redMul(zinv2);\n      var ay = this.y.redMul(zinv2).redMul(zinv);\n      return this.curve.point(ax, ay);\n    };\n    JPoint.prototype.neg = function neg() {\n      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n    };\n    JPoint.prototype.add = function add(p) {\n      if (this.isInfinity())\n        return p;\n      if (p.isInfinity())\n        return this;\n      var pz2 = p.z.redSqr();\n      var z2 = this.z.redSqr();\n      var u1 = this.x.redMul(pz2);\n      var u2 = p.x.redMul(z2);\n      var s1 = this.y.redMul(pz2.redMul(p.z));\n      var s2 = p.y.redMul(z2.redMul(this.z));\n      var h = u1.redSub(u2);\n      var r = s1.redSub(s2);\n      if (h.cmpn(0) === 0) {\n        if (r.cmpn(0) !== 0)\n          return this.curve.jpoint(null, null, null);\n        else\n          return this.dbl();\n      }\n      var h2 = h.redSqr();\n      var h3 = h2.redMul(h);\n      var v = u1.redMul(h2);\n      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n      var nz = this.z.redMul(p.z).redMul(h);\n      return this.curve.jpoint(nx, ny, nz);\n    };\n    JPoint.prototype.mixedAdd = function mixedAdd(p) {\n      if (this.isInfinity())\n        return p.toJ();\n      if (p.isInfinity())\n        return this;\n      var z2 = this.z.redSqr();\n      var u1 = this.x;\n      var u2 = p.x.redMul(z2);\n      var s1 = this.y;\n      var s2 = p.y.redMul(z2).redMul(this.z);\n      var h = u1.redSub(u2);\n      var r = s1.redSub(s2);\n      if (h.cmpn(0) === 0) {\n        if (r.cmpn(0) !== 0)\n          return this.curve.jpoint(null, null, null);\n        else\n          return this.dbl();\n      }\n      var h2 = h.redSqr();\n      var h3 = h2.redMul(h);\n      var v = u1.redMul(h2);\n      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n      var nz = this.z.redMul(h);\n      return this.curve.jpoint(nx, ny, nz);\n    };\n    JPoint.prototype.dblp = function dblp(pow) {\n      if (pow === 0)\n        return this;\n      if (this.isInfinity())\n        return this;\n      if (!pow)\n        return this.dbl();\n      var i;\n      if (this.curve.zeroA || this.curve.threeA) {\n        var r = this;\n        for (i = 0; i < pow; i++)\n          r = r.dbl();\n        return r;\n      }\n      var a = this.curve.a;\n      var tinv = this.curve.tinv;\n      var jx = this.x;\n      var jy = this.y;\n      var jz = this.z;\n      var jz4 = jz.redSqr().redSqr();\n      var jyd = jy.redAdd(jy);\n      for (i = 0; i < pow; i++) {\n        var jx2 = jx.redSqr();\n        var jyd2 = jyd.redSqr();\n        var jyd4 = jyd2.redSqr();\n        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n        var t1 = jx.redMul(jyd2);\n        var nx = c.redSqr().redISub(t1.redAdd(t1));\n        var t2 = t1.redISub(nx);\n        var dny = c.redMul(t2);\n        dny = dny.redIAdd(dny).redISub(jyd4);\n        var nz = jyd.redMul(jz);\n        if (i + 1 < pow)\n          jz4 = jz4.redMul(jyd4);\n        jx = nx;\n        jz = nz;\n        jyd = dny;\n      }\n      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n    };\n    JPoint.prototype.dbl = function dbl() {\n      if (this.isInfinity())\n        return this;\n      if (this.curve.zeroA)\n        return this._zeroDbl();\n      else if (this.curve.threeA)\n        return this._threeDbl();\n      else\n        return this._dbl();\n    };\n    JPoint.prototype._zeroDbl = function _zeroDbl() {\n      var nx;\n      var ny;\n      var nz;\n      if (this.zOne) {\n        var xx = this.x.redSqr();\n        var yy = this.y.redSqr();\n        var yyyy = yy.redSqr();\n        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n        s = s.redIAdd(s);\n        var m = xx.redAdd(xx).redIAdd(xx);\n        var t = m.redSqr().redISub(s).redISub(s);\n        var yyyy8 = yyyy.redIAdd(yyyy);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        nx = t;\n        ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n        nz = this.y.redAdd(this.y);\n      } else {\n        var a = this.x.redSqr();\n        var b = this.y.redSqr();\n        var c = b.redSqr();\n        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n        d = d.redIAdd(d);\n        var e = a.redAdd(a).redIAdd(a);\n        var f = e.redSqr();\n        var c8 = c.redIAdd(c);\n        c8 = c8.redIAdd(c8);\n        c8 = c8.redIAdd(c8);\n        nx = f.redISub(d).redISub(d);\n        ny = e.redMul(d.redISub(nx)).redISub(c8);\n        nz = this.y.redMul(this.z);\n        nz = nz.redIAdd(nz);\n      }\n      return this.curve.jpoint(nx, ny, nz);\n    };\n    JPoint.prototype._threeDbl = function _threeDbl() {\n      var nx;\n      var ny;\n      var nz;\n      if (this.zOne) {\n        var xx = this.x.redSqr();\n        var yy = this.y.redSqr();\n        var yyyy = yy.redSqr();\n        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n        s = s.redIAdd(s);\n        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n        var t = m.redSqr().redISub(s).redISub(s);\n        nx = t;\n        var yyyy8 = yyyy.redIAdd(yyyy);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n        nz = this.y.redAdd(this.y);\n      } else {\n        var delta = this.z.redSqr();\n        var gamma = this.y.redSqr();\n        var beta = this.x.redMul(gamma);\n        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n        alpha = alpha.redAdd(alpha).redIAdd(alpha);\n        var beta4 = beta.redIAdd(beta);\n        beta4 = beta4.redIAdd(beta4);\n        var beta8 = beta4.redAdd(beta4);\n        nx = alpha.redSqr().redISub(beta8);\n        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n        var ggamma8 = gamma.redSqr();\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n      }\n      return this.curve.jpoint(nx, ny, nz);\n    };\n    JPoint.prototype._dbl = function _dbl() {\n      var a = this.curve.a;\n      var jx = this.x;\n      var jy = this.y;\n      var jz = this.z;\n      var jz4 = jz.redSqr().redSqr();\n      var jx2 = jx.redSqr();\n      var jy2 = jy.redSqr();\n      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n      var jxd4 = jx.redAdd(jx);\n      jxd4 = jxd4.redIAdd(jxd4);\n      var t1 = jxd4.redMul(jy2);\n      var nx = c.redSqr().redISub(t1.redAdd(t1));\n      var t2 = t1.redISub(nx);\n      var jyd8 = jy2.redSqr();\n      jyd8 = jyd8.redIAdd(jyd8);\n      jyd8 = jyd8.redIAdd(jyd8);\n      jyd8 = jyd8.redIAdd(jyd8);\n      var ny = c.redMul(t2).redISub(jyd8);\n      var nz = jy.redAdd(jy).redMul(jz);\n      return this.curve.jpoint(nx, ny, nz);\n    };\n    JPoint.prototype.trpl = function trpl() {\n      if (!this.curve.zeroA)\n        return this.dbl().add(this);\n      var xx = this.x.redSqr();\n      var yy = this.y.redSqr();\n      var zz = this.z.redSqr();\n      var yyyy = yy.redSqr();\n      var m = xx.redAdd(xx).redIAdd(xx);\n      var mm = m.redSqr();\n      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n      e = e.redIAdd(e);\n      e = e.redAdd(e).redIAdd(e);\n      e = e.redISub(mm);\n      var ee = e.redSqr();\n      var t = yyyy.redIAdd(yyyy);\n      t = t.redIAdd(t);\n      t = t.redIAdd(t);\n      t = t.redIAdd(t);\n      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n      var yyu4 = yy.redMul(u);\n      yyu4 = yyu4.redIAdd(yyu4);\n      yyu4 = yyu4.redIAdd(yyu4);\n      var nx = this.x.redMul(ee).redISub(yyu4);\n      nx = nx.redIAdd(nx);\n      nx = nx.redIAdd(nx);\n      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n      ny = ny.redIAdd(ny);\n      ny = ny.redIAdd(ny);\n      ny = ny.redIAdd(ny);\n      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n      return this.curve.jpoint(nx, ny, nz);\n    };\n    JPoint.prototype.mul = function mul(k, kbase) {\n      k = new BN(k, kbase);\n      return this.curve._wnafMul(this, k);\n    };\n    JPoint.prototype.eq = function eq(p) {\n      if (p.type === \"affine\")\n        return this.eq(p.toJ());\n      if (this === p)\n        return true;\n      var z2 = this.z.redSqr();\n      var pz2 = p.z.redSqr();\n      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)\n        return false;\n      var z3 = z2.redMul(this.z);\n      var pz3 = pz2.redMul(p.z);\n      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n    };\n    JPoint.prototype.eqXToP = function eqXToP(x) {\n      var zs = this.z.redSqr();\n      var rx = x.toRed(this.curve.red).redMul(zs);\n      if (this.x.cmp(rx) === 0)\n        return true;\n      var xc = x.clone();\n      var t = this.curve.redN.redMul(zs);\n      for (; ; ) {\n        xc.iadd(this.curve.n);\n        if (xc.cmp(this.curve.p) >= 0)\n          return false;\n        rx.redIAdd(t);\n        if (this.x.cmp(rx) === 0)\n          return true;\n      }\n    };\n    JPoint.prototype.inspect = function inspect() {\n      if (this.isInfinity())\n        return \"<EC JPoint Infinity>\";\n      return \"<EC JPoint x: \" + this.x.toString(16, 2) + \" y: \" + this.y.toString(16, 2) + \" z: \" + this.z.toString(16, 2) + \">\";\n    };\n    JPoint.prototype.isInfinity = function isInfinity() {\n      return this.z.cmpn(0) === 0;\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/curve/mont.js\nvar require_mont = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/curve/mont.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn4();\n    var inherits = require_inherits_browser();\n    var Base = require_base();\n    var utils = require_utils3();\n    function MontCurve(conf) {\n      Base.call(this, \"mont\", conf);\n      this.a = new BN(conf.a, 16).toRed(this.red);\n      this.b = new BN(conf.b, 16).toRed(this.red);\n      this.i4 = new BN(4).toRed(this.red).redInvm();\n      this.two = new BN(2).toRed(this.red);\n      this.a24 = this.i4.redMul(this.a.redAdd(this.two));\n    }\n    inherits(MontCurve, Base);\n    module.exports = MontCurve;\n    MontCurve.prototype.validate = function validate(point) {\n      var x = point.normalize().x;\n      var x2 = x.redSqr();\n      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\n      var y = rhs.redSqrt();\n      return y.redSqr().cmp(rhs) === 0;\n    };\n    function Point(curve, x, z) {\n      Base.BasePoint.call(this, curve, \"projective\");\n      if (x === null && z === null) {\n        this.x = this.curve.one;\n        this.z = this.curve.zero;\n      } else {\n        this.x = new BN(x, 16);\n        this.z = new BN(z, 16);\n        if (!this.x.red)\n          this.x = this.x.toRed(this.curve.red);\n        if (!this.z.red)\n          this.z = this.z.toRed(this.curve.red);\n      }\n    }\n    inherits(Point, Base.BasePoint);\n    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n      return this.point(utils.toArray(bytes, enc), 1);\n    };\n    MontCurve.prototype.point = function point(x, z) {\n      return new Point(this, x, z);\n    };\n    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n      return Point.fromJSON(this, obj);\n    };\n    Point.prototype.precompute = function precompute() {\n    };\n    Point.prototype._encode = function _encode() {\n      return this.getX().toArray(\"be\", this.curve.p.byteLength());\n    };\n    Point.fromJSON = function fromJSON(curve, obj) {\n      return new Point(curve, obj[0], obj[1] || curve.one);\n    };\n    Point.prototype.inspect = function inspect() {\n      if (this.isInfinity())\n        return \"<EC Point Infinity>\";\n      return \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" z: \" + this.z.fromRed().toString(16, 2) + \">\";\n    };\n    Point.prototype.isInfinity = function isInfinity() {\n      return this.z.cmpn(0) === 0;\n    };\n    Point.prototype.dbl = function dbl() {\n      var a = this.x.redAdd(this.z);\n      var aa = a.redSqr();\n      var b = this.x.redSub(this.z);\n      var bb = b.redSqr();\n      var c = aa.redSub(bb);\n      var nx = aa.redMul(bb);\n      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\n      return this.curve.point(nx, nz);\n    };\n    Point.prototype.add = function add() {\n      throw new Error(\"Not supported on Montgomery curve\");\n    };\n    Point.prototype.diffAdd = function diffAdd(p, diff) {\n      var a = this.x.redAdd(this.z);\n      var b = this.x.redSub(this.z);\n      var c = p.x.redAdd(p.z);\n      var d = p.x.redSub(p.z);\n      var da = d.redMul(a);\n      var cb = c.redMul(b);\n      var nx = diff.z.redMul(da.redAdd(cb).redSqr());\n      var nz = diff.x.redMul(da.redISub(cb).redSqr());\n      return this.curve.point(nx, nz);\n    };\n    Point.prototype.mul = function mul(k) {\n      var t = k.clone();\n      var a = this;\n      var b = this.curve.point(null, null);\n      var c = this;\n      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))\n        bits.push(t.andln(1));\n      for (var i = bits.length - 1; i >= 0; i--) {\n        if (bits[i] === 0) {\n          a = a.diffAdd(b, c);\n          b = b.dbl();\n        } else {\n          b = a.diffAdd(b, c);\n          a = a.dbl();\n        }\n      }\n      return b;\n    };\n    Point.prototype.mulAdd = function mulAdd() {\n      throw new Error(\"Not supported on Montgomery curve\");\n    };\n    Point.prototype.jumlAdd = function jumlAdd() {\n      throw new Error(\"Not supported on Montgomery curve\");\n    };\n    Point.prototype.eq = function eq(other) {\n      return this.getX().cmp(other.getX()) === 0;\n    };\n    Point.prototype.normalize = function normalize() {\n      this.x = this.x.redMul(this.z.redInvm());\n      this.z = this.curve.one;\n      return this;\n    };\n    Point.prototype.getX = function getX() {\n      this.normalize();\n      return this.x.fromRed();\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/curve/edwards.js\nvar require_edwards = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/curve/edwards.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils3();\n    var BN = require_bn4();\n    var inherits = require_inherits_browser();\n    var Base = require_base();\n    var assert = utils.assert;\n    function EdwardsCurve(conf) {\n      this.twisted = (conf.a | 0) !== 1;\n      this.mOneA = this.twisted && (conf.a | 0) === -1;\n      this.extended = this.mOneA;\n      Base.call(this, \"edwards\", conf);\n      this.a = new BN(conf.a, 16).umod(this.red.m);\n      this.a = this.a.toRed(this.red);\n      this.c = new BN(conf.c, 16).toRed(this.red);\n      this.c2 = this.c.redSqr();\n      this.d = new BN(conf.d, 16).toRed(this.red);\n      this.dd = this.d.redAdd(this.d);\n      assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);\n      this.oneC = (conf.c | 0) === 1;\n    }\n    inherits(EdwardsCurve, Base);\n    module.exports = EdwardsCurve;\n    EdwardsCurve.prototype._mulA = function _mulA(num) {\n      if (this.mOneA)\n        return num.redNeg();\n      else\n        return this.a.redMul(num);\n    };\n    EdwardsCurve.prototype._mulC = function _mulC(num) {\n      if (this.oneC)\n        return num;\n      else\n        return this.c.redMul(num);\n    };\n    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\n      return this.point(x, y, z, t);\n    };\n    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\n      x = new BN(x, 16);\n      if (!x.red)\n        x = x.toRed(this.red);\n      var x2 = x.redSqr();\n      var rhs = this.c2.redSub(this.a.redMul(x2));\n      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\n      var y2 = rhs.redMul(lhs.redInvm());\n      var y = y2.redSqrt();\n      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n        throw new Error(\"invalid point\");\n      var isOdd = y.fromRed().isOdd();\n      if (odd && !isOdd || !odd && isOdd)\n        y = y.redNeg();\n      return this.point(x, y);\n    };\n    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\n      y = new BN(y, 16);\n      if (!y.red)\n        y = y.toRed(this.red);\n      var y2 = y.redSqr();\n      var lhs = y2.redSub(this.c2);\n      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);\n      var x2 = lhs.redMul(rhs.redInvm());\n      if (x2.cmp(this.zero) === 0) {\n        if (odd)\n          throw new Error(\"invalid point\");\n        else\n          return this.point(this.zero, y);\n      }\n      var x = x2.redSqrt();\n      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)\n        throw new Error(\"invalid point\");\n      if (x.fromRed().isOdd() !== odd)\n        x = x.redNeg();\n      return this.point(x, y);\n    };\n    EdwardsCurve.prototype.validate = function validate(point) {\n      if (point.isInfinity())\n        return true;\n      point.normalize();\n      var x2 = point.x.redSqr();\n      var y2 = point.y.redSqr();\n      var lhs = x2.redMul(this.a).redAdd(y2);\n      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\n      return lhs.cmp(rhs) === 0;\n    };\n    function Point(curve, x, y, z, t) {\n      Base.BasePoint.call(this, curve, \"projective\");\n      if (x === null && y === null && z === null) {\n        this.x = this.curve.zero;\n        this.y = this.curve.one;\n        this.z = this.curve.one;\n        this.t = this.curve.zero;\n        this.zOne = true;\n      } else {\n        this.x = new BN(x, 16);\n        this.y = new BN(y, 16);\n        this.z = z ? new BN(z, 16) : this.curve.one;\n        this.t = t && new BN(t, 16);\n        if (!this.x.red)\n          this.x = this.x.toRed(this.curve.red);\n        if (!this.y.red)\n          this.y = this.y.toRed(this.curve.red);\n        if (!this.z.red)\n          this.z = this.z.toRed(this.curve.red);\n        if (this.t && !this.t.red)\n          this.t = this.t.toRed(this.curve.red);\n        this.zOne = this.z === this.curve.one;\n        if (this.curve.extended && !this.t) {\n          this.t = this.x.redMul(this.y);\n          if (!this.zOne)\n            this.t = this.t.redMul(this.z.redInvm());\n        }\n      }\n    }\n    inherits(Point, Base.BasePoint);\n    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n      return Point.fromJSON(this, obj);\n    };\n    EdwardsCurve.prototype.point = function point(x, y, z, t) {\n      return new Point(this, x, y, z, t);\n    };\n    Point.fromJSON = function fromJSON(curve, obj) {\n      return new Point(curve, obj[0], obj[1], obj[2]);\n    };\n    Point.prototype.inspect = function inspect() {\n      if (this.isInfinity())\n        return \"<EC Point Infinity>\";\n      return \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" y: \" + this.y.fromRed().toString(16, 2) + \" z: \" + this.z.fromRed().toString(16, 2) + \">\";\n    };\n    Point.prototype.isInfinity = function isInfinity() {\n      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);\n    };\n    Point.prototype._extDbl = function _extDbl() {\n      var a = this.x.redSqr();\n      var b = this.y.redSqr();\n      var c = this.z.redSqr();\n      c = c.redIAdd(c);\n      var d = this.curve._mulA(a);\n      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\n      var g = d.redAdd(b);\n      var f = g.redSub(c);\n      var h = d.redSub(b);\n      var nx = e.redMul(f);\n      var ny = g.redMul(h);\n      var nt = e.redMul(h);\n      var nz = f.redMul(g);\n      return this.curve.point(nx, ny, nz, nt);\n    };\n    Point.prototype._projDbl = function _projDbl() {\n      var b = this.x.redAdd(this.y).redSqr();\n      var c = this.x.redSqr();\n      var d = this.y.redSqr();\n      var nx;\n      var ny;\n      var nz;\n      var e;\n      var h;\n      var j;\n      if (this.curve.twisted) {\n        e = this.curve._mulA(c);\n        var f = e.redAdd(d);\n        if (this.zOne) {\n          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));\n          ny = f.redMul(e.redSub(d));\n          nz = f.redSqr().redSub(f).redSub(f);\n        } else {\n          h = this.z.redSqr();\n          j = f.redSub(h).redISub(h);\n          nx = b.redSub(c).redISub(d).redMul(j);\n          ny = f.redMul(e.redSub(d));\n          nz = f.redMul(j);\n        }\n      } else {\n        e = c.redAdd(d);\n        h = this.curve._mulC(this.z).redSqr();\n        j = e.redSub(h).redSub(h);\n        nx = this.curve._mulC(b.redISub(e)).redMul(j);\n        ny = this.curve._mulC(e).redMul(c.redISub(d));\n        nz = e.redMul(j);\n      }\n      return this.curve.point(nx, ny, nz);\n    };\n    Point.prototype.dbl = function dbl() {\n      if (this.isInfinity())\n        return this;\n      if (this.curve.extended)\n        return this._extDbl();\n      else\n        return this._projDbl();\n    };\n    Point.prototype._extAdd = function _extAdd(p) {\n      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\n      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\n      var c = this.t.redMul(this.curve.dd).redMul(p.t);\n      var d = this.z.redMul(p.z.redAdd(p.z));\n      var e = b.redSub(a);\n      var f = d.redSub(c);\n      var g = d.redAdd(c);\n      var h = b.redAdd(a);\n      var nx = e.redMul(f);\n      var ny = g.redMul(h);\n      var nt = e.redMul(h);\n      var nz = f.redMul(g);\n      return this.curve.point(nx, ny, nz, nt);\n    };\n    Point.prototype._projAdd = function _projAdd(p) {\n      var a = this.z.redMul(p.z);\n      var b = a.redSqr();\n      var c = this.x.redMul(p.x);\n      var d = this.y.redMul(p.y);\n      var e = this.curve.d.redMul(c).redMul(d);\n      var f = b.redSub(e);\n      var g = b.redAdd(e);\n      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\n      var nx = a.redMul(f).redMul(tmp);\n      var ny;\n      var nz;\n      if (this.curve.twisted) {\n        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));\n        nz = f.redMul(g);\n      } else {\n        ny = a.redMul(g).redMul(d.redSub(c));\n        nz = this.curve._mulC(f).redMul(g);\n      }\n      return this.curve.point(nx, ny, nz);\n    };\n    Point.prototype.add = function add(p) {\n      if (this.isInfinity())\n        return p;\n      if (p.isInfinity())\n        return this;\n      if (this.curve.extended)\n        return this._extAdd(p);\n      else\n        return this._projAdd(p);\n    };\n    Point.prototype.mul = function mul(k) {\n      if (this._hasDoubles(k))\n        return this.curve._fixedNafMul(this, k);\n      else\n        return this.curve._wnafMul(this, k);\n    };\n    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {\n      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);\n    };\n    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\n      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);\n    };\n    Point.prototype.normalize = function normalize() {\n      if (this.zOne)\n        return this;\n      var zi = this.z.redInvm();\n      this.x = this.x.redMul(zi);\n      this.y = this.y.redMul(zi);\n      if (this.t)\n        this.t = this.t.redMul(zi);\n      this.z = this.curve.one;\n      this.zOne = true;\n      return this;\n    };\n    Point.prototype.neg = function neg() {\n      return this.curve.point(\n        this.x.redNeg(),\n        this.y,\n        this.z,\n        this.t && this.t.redNeg()\n      );\n    };\n    Point.prototype.getX = function getX() {\n      this.normalize();\n      return this.x.fromRed();\n    };\n    Point.prototype.getY = function getY() {\n      this.normalize();\n      return this.y.fromRed();\n    };\n    Point.prototype.eq = function eq(other) {\n      return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;\n    };\n    Point.prototype.eqXToP = function eqXToP(x) {\n      var rx = x.toRed(this.curve.red).redMul(this.z);\n      if (this.x.cmp(rx) === 0)\n        return true;\n      var xc = x.clone();\n      var t = this.curve.redN.redMul(this.z);\n      for (; ; ) {\n        xc.iadd(this.curve.n);\n        if (xc.cmp(this.curve.p) >= 0)\n          return false;\n        rx.redIAdd(t);\n        if (this.x.cmp(rx) === 0)\n          return true;\n      }\n    };\n    Point.prototype.toP = Point.prototype.normalize;\n    Point.prototype.mixedAdd = Point.prototype.add;\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/curve/index.js\nvar require_curve = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/curve/index.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var curve = exports;\n    curve.base = require_base();\n    curve.short = require_short();\n    curve.mont = require_mont();\n    curve.edwards = require_edwards();\n  }\n});\n\n// node_modules/hash.js/lib/hash/utils.js\nvar require_utils4 = __commonJS({\n  \"node_modules/hash.js/lib/hash/utils.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var assert = require_minimalistic_assert();\n    var inherits = require_inherits_browser();\n    exports.inherits = inherits;\n    function isSurrogatePair(msg, i) {\n      if ((msg.charCodeAt(i) & 64512) !== 55296) {\n        return false;\n      }\n      if (i < 0 || i + 1 >= msg.length) {\n        return false;\n      }\n      return (msg.charCodeAt(i + 1) & 64512) === 56320;\n    }\n    function toArray(msg, enc) {\n      if (Array.isArray(msg))\n        return msg.slice();\n      if (!msg)\n        return [];\n      var res = [];\n      if (typeof msg === \"string\") {\n        if (!enc) {\n          var p = 0;\n          for (var i = 0; i < msg.length; i++) {\n            var c = msg.charCodeAt(i);\n            if (c < 128) {\n              res[p++] = c;\n            } else if (c < 2048) {\n              res[p++] = c >> 6 | 192;\n              res[p++] = c & 63 | 128;\n            } else if (isSurrogatePair(msg, i)) {\n              c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);\n              res[p++] = c >> 18 | 240;\n              res[p++] = c >> 12 & 63 | 128;\n              res[p++] = c >> 6 & 63 | 128;\n              res[p++] = c & 63 | 128;\n            } else {\n              res[p++] = c >> 12 | 224;\n              res[p++] = c >> 6 & 63 | 128;\n              res[p++] = c & 63 | 128;\n            }\n          }\n        } else if (enc === \"hex\") {\n          msg = msg.replace(/[^a-z0-9]+/ig, \"\");\n          if (msg.length % 2 !== 0)\n            msg = \"0\" + msg;\n          for (i = 0; i < msg.length; i += 2)\n            res.push(parseInt(msg[i] + msg[i + 1], 16));\n        }\n      } else {\n        for (i = 0; i < msg.length; i++)\n          res[i] = msg[i] | 0;\n      }\n      return res;\n    }\n    exports.toArray = toArray;\n    function toHex(msg) {\n      var res = \"\";\n      for (var i = 0; i < msg.length; i++)\n        res += zero2(msg[i].toString(16));\n      return res;\n    }\n    exports.toHex = toHex;\n    function htonl(w) {\n      var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;\n      return res >>> 0;\n    }\n    exports.htonl = htonl;\n    function toHex32(msg, endian) {\n      var res = \"\";\n      for (var i = 0; i < msg.length; i++) {\n        var w = msg[i];\n        if (endian === \"little\")\n          w = htonl(w);\n        res += zero8(w.toString(16));\n      }\n      return res;\n    }\n    exports.toHex32 = toHex32;\n    function zero2(word) {\n      if (word.length === 1)\n        return \"0\" + word;\n      else\n        return word;\n    }\n    exports.zero2 = zero2;\n    function zero8(word) {\n      if (word.length === 7)\n        return \"0\" + word;\n      else if (word.length === 6)\n        return \"00\" + word;\n      else if (word.length === 5)\n        return \"000\" + word;\n      else if (word.length === 4)\n        return \"0000\" + word;\n      else if (word.length === 3)\n        return \"00000\" + word;\n      else if (word.length === 2)\n        return \"000000\" + word;\n      else if (word.length === 1)\n        return \"0000000\" + word;\n      else\n        return word;\n    }\n    exports.zero8 = zero8;\n    function join32(msg, start, end, endian) {\n      var len = end - start;\n      assert(len % 4 === 0);\n      var res = new Array(len / 4);\n      for (var i = 0, k = start; i < res.length; i++, k += 4) {\n        var w;\n        if (endian === \"big\")\n          w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];\n        else\n          w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n        res[i] = w >>> 0;\n      }\n      return res;\n    }\n    exports.join32 = join32;\n    function split32(msg, endian) {\n      var res = new Array(msg.length * 4);\n      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n        var m = msg[i];\n        if (endian === \"big\") {\n          res[k] = m >>> 24;\n          res[k + 1] = m >>> 16 & 255;\n          res[k + 2] = m >>> 8 & 255;\n          res[k + 3] = m & 255;\n        } else {\n          res[k + 3] = m >>> 24;\n          res[k + 2] = m >>> 16 & 255;\n          res[k + 1] = m >>> 8 & 255;\n          res[k] = m & 255;\n        }\n      }\n      return res;\n    }\n    exports.split32 = split32;\n    function rotr32(w, b) {\n      return w >>> b | w << 32 - b;\n    }\n    exports.rotr32 = rotr32;\n    function rotl32(w, b) {\n      return w << b | w >>> 32 - b;\n    }\n    exports.rotl32 = rotl32;\n    function sum32(a, b) {\n      return a + b >>> 0;\n    }\n    exports.sum32 = sum32;\n    function sum32_3(a, b, c) {\n      return a + b + c >>> 0;\n    }\n    exports.sum32_3 = sum32_3;\n    function sum32_4(a, b, c, d) {\n      return a + b + c + d >>> 0;\n    }\n    exports.sum32_4 = sum32_4;\n    function sum32_5(a, b, c, d, e) {\n      return a + b + c + d + e >>> 0;\n    }\n    exports.sum32_5 = sum32_5;\n    function sum64(buf, pos, ah, al) {\n      var bh = buf[pos];\n      var bl = buf[pos + 1];\n      var lo = al + bl >>> 0;\n      var hi = (lo < al ? 1 : 0) + ah + bh;\n      buf[pos] = hi >>> 0;\n      buf[pos + 1] = lo;\n    }\n    exports.sum64 = sum64;\n    function sum64_hi(ah, al, bh, bl) {\n      var lo = al + bl >>> 0;\n      var hi = (lo < al ? 1 : 0) + ah + bh;\n      return hi >>> 0;\n    }\n    exports.sum64_hi = sum64_hi;\n    function sum64_lo(ah, al, bh, bl) {\n      var lo = al + bl;\n      return lo >>> 0;\n    }\n    exports.sum64_lo = sum64_lo;\n    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n      var carry = 0;\n      var lo = al;\n      lo = lo + bl >>> 0;\n      carry += lo < al ? 1 : 0;\n      lo = lo + cl >>> 0;\n      carry += lo < cl ? 1 : 0;\n      lo = lo + dl >>> 0;\n      carry += lo < dl ? 1 : 0;\n      var hi = ah + bh + ch + dh + carry;\n      return hi >>> 0;\n    }\n    exports.sum64_4_hi = sum64_4_hi;\n    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n      var lo = al + bl + cl + dl;\n      return lo >>> 0;\n    }\n    exports.sum64_4_lo = sum64_4_lo;\n    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n      var carry = 0;\n      var lo = al;\n      lo = lo + bl >>> 0;\n      carry += lo < al ? 1 : 0;\n      lo = lo + cl >>> 0;\n      carry += lo < cl ? 1 : 0;\n      lo = lo + dl >>> 0;\n      carry += lo < dl ? 1 : 0;\n      lo = lo + el >>> 0;\n      carry += lo < el ? 1 : 0;\n      var hi = ah + bh + ch + dh + eh + carry;\n      return hi >>> 0;\n    }\n    exports.sum64_5_hi = sum64_5_hi;\n    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n      var lo = al + bl + cl + dl + el;\n      return lo >>> 0;\n    }\n    exports.sum64_5_lo = sum64_5_lo;\n    function rotr64_hi(ah, al, num) {\n      var r = al << 32 - num | ah >>> num;\n      return r >>> 0;\n    }\n    exports.rotr64_hi = rotr64_hi;\n    function rotr64_lo(ah, al, num) {\n      var r = ah << 32 - num | al >>> num;\n      return r >>> 0;\n    }\n    exports.rotr64_lo = rotr64_lo;\n    function shr64_hi(ah, al, num) {\n      return ah >>> num;\n    }\n    exports.shr64_hi = shr64_hi;\n    function shr64_lo(ah, al, num) {\n      var r = ah << 32 - num | al >>> num;\n      return r >>> 0;\n    }\n    exports.shr64_lo = shr64_lo;\n  }\n});\n\n// node_modules/hash.js/lib/hash/common.js\nvar require_common = __commonJS({\n  \"node_modules/hash.js/lib/hash/common.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var assert = require_minimalistic_assert();\n    function BlockHash() {\n      this.pending = null;\n      this.pendingTotal = 0;\n      this.blockSize = this.constructor.blockSize;\n      this.outSize = this.constructor.outSize;\n      this.hmacStrength = this.constructor.hmacStrength;\n      this.padLength = this.constructor.padLength / 8;\n      this.endian = \"big\";\n      this._delta8 = this.blockSize / 8;\n      this._delta32 = this.blockSize / 32;\n    }\n    exports.BlockHash = BlockHash;\n    BlockHash.prototype.update = function update(msg, enc) {\n      msg = utils.toArray(msg, enc);\n      if (!this.pending)\n        this.pending = msg;\n      else\n        this.pending = this.pending.concat(msg);\n      this.pendingTotal += msg.length;\n      if (this.pending.length >= this._delta8) {\n        msg = this.pending;\n        var r = msg.length % this._delta8;\n        this.pending = msg.slice(msg.length - r, msg.length);\n        if (this.pending.length === 0)\n          this.pending = null;\n        msg = utils.join32(msg, 0, msg.length - r, this.endian);\n        for (var i = 0; i < msg.length; i += this._delta32)\n          this._update(msg, i, i + this._delta32);\n      }\n      return this;\n    };\n    BlockHash.prototype.digest = function digest(enc) {\n      this.update(this._pad());\n      assert(this.pending === null);\n      return this._digest(enc);\n    };\n    BlockHash.prototype._pad = function pad() {\n      var len = this.pendingTotal;\n      var bytes = this._delta8;\n      var k = bytes - (len + this.padLength) % bytes;\n      var res = new Array(k + this.padLength);\n      res[0] = 128;\n      for (var i = 1; i < k; i++)\n        res[i] = 0;\n      len <<= 3;\n      if (this.endian === \"big\") {\n        for (var t = 8; t < this.padLength; t++)\n          res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = len >>> 24 & 255;\n        res[i++] = len >>> 16 & 255;\n        res[i++] = len >>> 8 & 255;\n        res[i++] = len & 255;\n      } else {\n        res[i++] = len & 255;\n        res[i++] = len >>> 8 & 255;\n        res[i++] = len >>> 16 & 255;\n        res[i++] = len >>> 24 & 255;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        for (t = 8; t < this.padLength; t++)\n          res[i++] = 0;\n      }\n      return res;\n    };\n  }\n});\n\n// node_modules/hash.js/lib/hash/sha/common.js\nvar require_common2 = __commonJS({\n  \"node_modules/hash.js/lib/hash/sha/common.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var rotr32 = utils.rotr32;\n    function ft_1(s, x, y, z) {\n      if (s === 0)\n        return ch32(x, y, z);\n      if (s === 1 || s === 3)\n        return p32(x, y, z);\n      if (s === 2)\n        return maj32(x, y, z);\n    }\n    exports.ft_1 = ft_1;\n    function ch32(x, y, z) {\n      return x & y ^ ~x & z;\n    }\n    exports.ch32 = ch32;\n    function maj32(x, y, z) {\n      return x & y ^ x & z ^ y & z;\n    }\n    exports.maj32 = maj32;\n    function p32(x, y, z) {\n      return x ^ y ^ z;\n    }\n    exports.p32 = p32;\n    function s0_256(x) {\n      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n    }\n    exports.s0_256 = s0_256;\n    function s1_256(x) {\n      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n    }\n    exports.s1_256 = s1_256;\n    function g0_256(x) {\n      return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n    }\n    exports.g0_256 = g0_256;\n    function g1_256(x) {\n      return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n    }\n    exports.g1_256 = g1_256;\n  }\n});\n\n// node_modules/hash.js/lib/hash/sha/1.js\nvar require__ = __commonJS({\n  \"node_modules/hash.js/lib/hash/sha/1.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var common = require_common();\n    var shaCommon = require_common2();\n    var rotl32 = utils.rotl32;\n    var sum32 = utils.sum32;\n    var sum32_5 = utils.sum32_5;\n    var ft_1 = shaCommon.ft_1;\n    var BlockHash = common.BlockHash;\n    var sha1_K = [\n      1518500249,\n      1859775393,\n      2400959708,\n      3395469782\n    ];\n    function SHA1() {\n      if (!(this instanceof SHA1))\n        return new SHA1();\n      BlockHash.call(this);\n      this.h = [\n        1732584193,\n        4023233417,\n        2562383102,\n        271733878,\n        3285377520\n      ];\n      this.W = new Array(80);\n    }\n    utils.inherits(SHA1, BlockHash);\n    module.exports = SHA1;\n    SHA1.blockSize = 512;\n    SHA1.outSize = 160;\n    SHA1.hmacStrength = 80;\n    SHA1.padLength = 64;\n    SHA1.prototype._update = function _update(msg, start) {\n      var W = this.W;\n      for (var i = 0; i < 16; i++)\n        W[i] = msg[start + i];\n      for (; i < W.length; i++)\n        W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n      var a = this.h[0];\n      var b = this.h[1];\n      var c = this.h[2];\n      var d = this.h[3];\n      var e = this.h[4];\n      for (i = 0; i < W.length; i++) {\n        var s = ~~(i / 20);\n        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n        e = d;\n        d = c;\n        c = rotl32(b, 30);\n        b = a;\n        a = t;\n      }\n      this.h[0] = sum32(this.h[0], a);\n      this.h[1] = sum32(this.h[1], b);\n      this.h[2] = sum32(this.h[2], c);\n      this.h[3] = sum32(this.h[3], d);\n      this.h[4] = sum32(this.h[4], e);\n    };\n    SHA1.prototype._digest = function digest(enc) {\n      if (enc === \"hex\")\n        return utils.toHex32(this.h, \"big\");\n      else\n        return utils.split32(this.h, \"big\");\n    };\n  }\n});\n\n// node_modules/hash.js/lib/hash/sha/256.js\nvar require__2 = __commonJS({\n  \"node_modules/hash.js/lib/hash/sha/256.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var common = require_common();\n    var shaCommon = require_common2();\n    var assert = require_minimalistic_assert();\n    var sum32 = utils.sum32;\n    var sum32_4 = utils.sum32_4;\n    var sum32_5 = utils.sum32_5;\n    var ch32 = shaCommon.ch32;\n    var maj32 = shaCommon.maj32;\n    var s0_256 = shaCommon.s0_256;\n    var s1_256 = shaCommon.s1_256;\n    var g0_256 = shaCommon.g0_256;\n    var g1_256 = shaCommon.g1_256;\n    var BlockHash = common.BlockHash;\n    var sha256_K = [\n      1116352408,\n      1899447441,\n      3049323471,\n      3921009573,\n      961987163,\n      1508970993,\n      2453635748,\n      2870763221,\n      3624381080,\n      310598401,\n      607225278,\n      1426881987,\n      1925078388,\n      2162078206,\n      2614888103,\n      3248222580,\n      3835390401,\n      4022224774,\n      264347078,\n      604807628,\n      770255983,\n      1249150122,\n      1555081692,\n      1996064986,\n      2554220882,\n      2821834349,\n      2952996808,\n      3210313671,\n      3336571891,\n      3584528711,\n      113926993,\n      338241895,\n      666307205,\n      773529912,\n      1294757372,\n      1396182291,\n      1695183700,\n      1986661051,\n      2177026350,\n      2456956037,\n      2730485921,\n      2820302411,\n      3259730800,\n      3345764771,\n      3516065817,\n      3600352804,\n      4094571909,\n      275423344,\n      430227734,\n      506948616,\n      659060556,\n      883997877,\n      958139571,\n      1322822218,\n      1537002063,\n      1747873779,\n      1955562222,\n      2024104815,\n      2227730452,\n      2361852424,\n      2428436474,\n      2756734187,\n      3204031479,\n      3329325298\n    ];\n    function SHA256() {\n      if (!(this instanceof SHA256))\n        return new SHA256();\n      BlockHash.call(this);\n      this.h = [\n        1779033703,\n        3144134277,\n        1013904242,\n        2773480762,\n        1359893119,\n        2600822924,\n        528734635,\n        1541459225\n      ];\n      this.k = sha256_K;\n      this.W = new Array(64);\n    }\n    utils.inherits(SHA256, BlockHash);\n    module.exports = SHA256;\n    SHA256.blockSize = 512;\n    SHA256.outSize = 256;\n    SHA256.hmacStrength = 192;\n    SHA256.padLength = 64;\n    SHA256.prototype._update = function _update(msg, start) {\n      var W = this.W;\n      for (var i = 0; i < 16; i++)\n        W[i] = msg[start + i];\n      for (; i < W.length; i++)\n        W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n      var a = this.h[0];\n      var b = this.h[1];\n      var c = this.h[2];\n      var d = this.h[3];\n      var e = this.h[4];\n      var f = this.h[5];\n      var g = this.h[6];\n      var h = this.h[7];\n      assert(this.k.length === W.length);\n      for (i = 0; i < W.length; i++) {\n        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n        var T2 = sum32(s0_256(a), maj32(a, b, c));\n        h = g;\n        g = f;\n        f = e;\n        e = sum32(d, T1);\n        d = c;\n        c = b;\n        b = a;\n        a = sum32(T1, T2);\n      }\n      this.h[0] = sum32(this.h[0], a);\n      this.h[1] = sum32(this.h[1], b);\n      this.h[2] = sum32(this.h[2], c);\n      this.h[3] = sum32(this.h[3], d);\n      this.h[4] = sum32(this.h[4], e);\n      this.h[5] = sum32(this.h[5], f);\n      this.h[6] = sum32(this.h[6], g);\n      this.h[7] = sum32(this.h[7], h);\n    };\n    SHA256.prototype._digest = function digest(enc) {\n      if (enc === \"hex\")\n        return utils.toHex32(this.h, \"big\");\n      else\n        return utils.split32(this.h, \"big\");\n    };\n  }\n});\n\n// node_modules/hash.js/lib/hash/sha/224.js\nvar require__3 = __commonJS({\n  \"node_modules/hash.js/lib/hash/sha/224.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var SHA256 = require__2();\n    function SHA224() {\n      if (!(this instanceof SHA224))\n        return new SHA224();\n      SHA256.call(this);\n      this.h = [\n        3238371032,\n        914150663,\n        812702999,\n        4144912697,\n        4290775857,\n        1750603025,\n        1694076839,\n        3204075428\n      ];\n    }\n    utils.inherits(SHA224, SHA256);\n    module.exports = SHA224;\n    SHA224.blockSize = 512;\n    SHA224.outSize = 224;\n    SHA224.hmacStrength = 192;\n    SHA224.padLength = 64;\n    SHA224.prototype._digest = function digest(enc) {\n      if (enc === \"hex\")\n        return utils.toHex32(this.h.slice(0, 7), \"big\");\n      else\n        return utils.split32(this.h.slice(0, 7), \"big\");\n    };\n  }\n});\n\n// node_modules/hash.js/lib/hash/sha/512.js\nvar require__4 = __commonJS({\n  \"node_modules/hash.js/lib/hash/sha/512.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var common = require_common();\n    var assert = require_minimalistic_assert();\n    var rotr64_hi = utils.rotr64_hi;\n    var rotr64_lo = utils.rotr64_lo;\n    var shr64_hi = utils.shr64_hi;\n    var shr64_lo = utils.shr64_lo;\n    var sum64 = utils.sum64;\n    var sum64_hi = utils.sum64_hi;\n    var sum64_lo = utils.sum64_lo;\n    var sum64_4_hi = utils.sum64_4_hi;\n    var sum64_4_lo = utils.sum64_4_lo;\n    var sum64_5_hi = utils.sum64_5_hi;\n    var sum64_5_lo = utils.sum64_5_lo;\n    var BlockHash = common.BlockHash;\n    var sha512_K = [\n      1116352408,\n      3609767458,\n      1899447441,\n      602891725,\n      3049323471,\n      3964484399,\n      3921009573,\n      2173295548,\n      961987163,\n      4081628472,\n      1508970993,\n      3053834265,\n      2453635748,\n      2937671579,\n      2870763221,\n      3664609560,\n      3624381080,\n      2734883394,\n      310598401,\n      1164996542,\n      607225278,\n      1323610764,\n      1426881987,\n      3590304994,\n      1925078388,\n      4068182383,\n      2162078206,\n      991336113,\n      2614888103,\n      633803317,\n      3248222580,\n      3479774868,\n      3835390401,\n      2666613458,\n      4022224774,\n      944711139,\n      264347078,\n      2341262773,\n      604807628,\n      2007800933,\n      770255983,\n      1495990901,\n      1249150122,\n      1856431235,\n      1555081692,\n      3175218132,\n      1996064986,\n      2198950837,\n      2554220882,\n      3999719339,\n      2821834349,\n      766784016,\n      2952996808,\n      2566594879,\n      3210313671,\n      3203337956,\n      3336571891,\n      1034457026,\n      3584528711,\n      2466948901,\n      113926993,\n      3758326383,\n      338241895,\n      168717936,\n      666307205,\n      1188179964,\n      773529912,\n      1546045734,\n      1294757372,\n      1522805485,\n      1396182291,\n      2643833823,\n      1695183700,\n      2343527390,\n      1986661051,\n      1014477480,\n      2177026350,\n      1206759142,\n      2456956037,\n      344077627,\n      2730485921,\n      1290863460,\n      2820302411,\n      3158454273,\n      3259730800,\n      3505952657,\n      3345764771,\n      106217008,\n      3516065817,\n      3606008344,\n      3600352804,\n      1432725776,\n      4094571909,\n      1467031594,\n      275423344,\n      851169720,\n      430227734,\n      3100823752,\n      506948616,\n      1363258195,\n      659060556,\n      3750685593,\n      883997877,\n      3785050280,\n      958139571,\n      3318307427,\n      1322822218,\n      3812723403,\n      1537002063,\n      2003034995,\n      1747873779,\n      3602036899,\n      1955562222,\n      1575990012,\n      2024104815,\n      1125592928,\n      2227730452,\n      2716904306,\n      2361852424,\n      442776044,\n      2428436474,\n      593698344,\n      2756734187,\n      3733110249,\n      3204031479,\n      2999351573,\n      3329325298,\n      3815920427,\n      3391569614,\n      3928383900,\n      3515267271,\n      566280711,\n      3940187606,\n      3454069534,\n      4118630271,\n      4000239992,\n      116418474,\n      1914138554,\n      174292421,\n      2731055270,\n      289380356,\n      3203993006,\n      460393269,\n      320620315,\n      685471733,\n      587496836,\n      852142971,\n      1086792851,\n      1017036298,\n      365543100,\n      1126000580,\n      2618297676,\n      1288033470,\n      3409855158,\n      1501505948,\n      4234509866,\n      1607167915,\n      987167468,\n      1816402316,\n      1246189591\n    ];\n    function SHA512() {\n      if (!(this instanceof SHA512))\n        return new SHA512();\n      BlockHash.call(this);\n      this.h = [\n        1779033703,\n        4089235720,\n        3144134277,\n        2227873595,\n        1013904242,\n        4271175723,\n        2773480762,\n        1595750129,\n        1359893119,\n        2917565137,\n        2600822924,\n        725511199,\n        528734635,\n        4215389547,\n        1541459225,\n        327033209\n      ];\n      this.k = sha512_K;\n      this.W = new Array(160);\n    }\n    utils.inherits(SHA512, BlockHash);\n    module.exports = SHA512;\n    SHA512.blockSize = 1024;\n    SHA512.outSize = 512;\n    SHA512.hmacStrength = 192;\n    SHA512.padLength = 128;\n    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n      var W = this.W;\n      for (var i = 0; i < 32; i++)\n        W[i] = msg[start + i];\n      for (; i < W.length; i += 2) {\n        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);\n        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n        var c1_hi = W[i - 14];\n        var c1_lo = W[i - 13];\n        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);\n        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n        var c3_hi = W[i - 32];\n        var c3_lo = W[i - 31];\n        W[i] = sum64_4_hi(\n          c0_hi,\n          c0_lo,\n          c1_hi,\n          c1_lo,\n          c2_hi,\n          c2_lo,\n          c3_hi,\n          c3_lo\n        );\n        W[i + 1] = sum64_4_lo(\n          c0_hi,\n          c0_lo,\n          c1_hi,\n          c1_lo,\n          c2_hi,\n          c2_lo,\n          c3_hi,\n          c3_lo\n        );\n      }\n    };\n    SHA512.prototype._update = function _update(msg, start) {\n      this._prepareBlock(msg, start);\n      var W = this.W;\n      var ah = this.h[0];\n      var al = this.h[1];\n      var bh = this.h[2];\n      var bl = this.h[3];\n      var ch = this.h[4];\n      var cl = this.h[5];\n      var dh = this.h[6];\n      var dl = this.h[7];\n      var eh = this.h[8];\n      var el = this.h[9];\n      var fh = this.h[10];\n      var fl = this.h[11];\n      var gh = this.h[12];\n      var gl = this.h[13];\n      var hh = this.h[14];\n      var hl = this.h[15];\n      assert(this.k.length === W.length);\n      for (var i = 0; i < W.length; i += 2) {\n        var c0_hi = hh;\n        var c0_lo = hl;\n        var c1_hi = s1_512_hi(eh, el);\n        var c1_lo = s1_512_lo(eh, el);\n        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n        var c3_hi = this.k[i];\n        var c3_lo = this.k[i + 1];\n        var c4_hi = W[i];\n        var c4_lo = W[i + 1];\n        var T1_hi = sum64_5_hi(\n          c0_hi,\n          c0_lo,\n          c1_hi,\n          c1_lo,\n          c2_hi,\n          c2_lo,\n          c3_hi,\n          c3_lo,\n          c4_hi,\n          c4_lo\n        );\n        var T1_lo = sum64_5_lo(\n          c0_hi,\n          c0_lo,\n          c1_hi,\n          c1_lo,\n          c2_hi,\n          c2_lo,\n          c3_hi,\n          c3_lo,\n          c4_hi,\n          c4_lo\n        );\n        c0_hi = s0_512_hi(ah, al);\n        c0_lo = s0_512_lo(ah, al);\n        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n        hh = gh;\n        hl = gl;\n        gh = fh;\n        gl = fl;\n        fh = eh;\n        fl = el;\n        eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n        el = sum64_lo(dl, dl, T1_hi, T1_lo);\n        dh = ch;\n        dl = cl;\n        ch = bh;\n        cl = bl;\n        bh = ah;\n        bl = al;\n        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n      }\n      sum64(this.h, 0, ah, al);\n      sum64(this.h, 2, bh, bl);\n      sum64(this.h, 4, ch, cl);\n      sum64(this.h, 6, dh, dl);\n      sum64(this.h, 8, eh, el);\n      sum64(this.h, 10, fh, fl);\n      sum64(this.h, 12, gh, gl);\n      sum64(this.h, 14, hh, hl);\n    };\n    SHA512.prototype._digest = function digest(enc) {\n      if (enc === \"hex\")\n        return utils.toHex32(this.h, \"big\");\n      else\n        return utils.split32(this.h, \"big\");\n    };\n    function ch64_hi(xh, xl, yh, yl, zh) {\n      var r = xh & yh ^ ~xh & zh;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function ch64_lo(xh, xl, yh, yl, zh, zl) {\n      var r = xl & yl ^ ~xl & zl;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function maj64_hi(xh, xl, yh, yl, zh) {\n      var r = xh & yh ^ xh & zh ^ yh & zh;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function maj64_lo(xh, xl, yh, yl, zh, zl) {\n      var r = xl & yl ^ xl & zl ^ yl & zl;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function s0_512_hi(xh, xl) {\n      var c0_hi = rotr64_hi(xh, xl, 28);\n      var c1_hi = rotr64_hi(xl, xh, 2);\n      var c2_hi = rotr64_hi(xl, xh, 7);\n      var r = c0_hi ^ c1_hi ^ c2_hi;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function s0_512_lo(xh, xl) {\n      var c0_lo = rotr64_lo(xh, xl, 28);\n      var c1_lo = rotr64_lo(xl, xh, 2);\n      var c2_lo = rotr64_lo(xl, xh, 7);\n      var r = c0_lo ^ c1_lo ^ c2_lo;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function s1_512_hi(xh, xl) {\n      var c0_hi = rotr64_hi(xh, xl, 14);\n      var c1_hi = rotr64_hi(xh, xl, 18);\n      var c2_hi = rotr64_hi(xl, xh, 9);\n      var r = c0_hi ^ c1_hi ^ c2_hi;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function s1_512_lo(xh, xl) {\n      var c0_lo = rotr64_lo(xh, xl, 14);\n      var c1_lo = rotr64_lo(xh, xl, 18);\n      var c2_lo = rotr64_lo(xl, xh, 9);\n      var r = c0_lo ^ c1_lo ^ c2_lo;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function g0_512_hi(xh, xl) {\n      var c0_hi = rotr64_hi(xh, xl, 1);\n      var c1_hi = rotr64_hi(xh, xl, 8);\n      var c2_hi = shr64_hi(xh, xl, 7);\n      var r = c0_hi ^ c1_hi ^ c2_hi;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function g0_512_lo(xh, xl) {\n      var c0_lo = rotr64_lo(xh, xl, 1);\n      var c1_lo = rotr64_lo(xh, xl, 8);\n      var c2_lo = shr64_lo(xh, xl, 7);\n      var r = c0_lo ^ c1_lo ^ c2_lo;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function g1_512_hi(xh, xl) {\n      var c0_hi = rotr64_hi(xh, xl, 19);\n      var c1_hi = rotr64_hi(xl, xh, 29);\n      var c2_hi = shr64_hi(xh, xl, 6);\n      var r = c0_hi ^ c1_hi ^ c2_hi;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function g1_512_lo(xh, xl) {\n      var c0_lo = rotr64_lo(xh, xl, 19);\n      var c1_lo = rotr64_lo(xl, xh, 29);\n      var c2_lo = shr64_lo(xh, xl, 6);\n      var r = c0_lo ^ c1_lo ^ c2_lo;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n  }\n});\n\n// node_modules/hash.js/lib/hash/sha/384.js\nvar require__5 = __commonJS({\n  \"node_modules/hash.js/lib/hash/sha/384.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var SHA512 = require__4();\n    function SHA384() {\n      if (!(this instanceof SHA384))\n        return new SHA384();\n      SHA512.call(this);\n      this.h = [\n        3418070365,\n        3238371032,\n        1654270250,\n        914150663,\n        2438529370,\n        812702999,\n        355462360,\n        4144912697,\n        1731405415,\n        4290775857,\n        2394180231,\n        1750603025,\n        3675008525,\n        1694076839,\n        1203062813,\n        3204075428\n      ];\n    }\n    utils.inherits(SHA384, SHA512);\n    module.exports = SHA384;\n    SHA384.blockSize = 1024;\n    SHA384.outSize = 384;\n    SHA384.hmacStrength = 192;\n    SHA384.padLength = 128;\n    SHA384.prototype._digest = function digest(enc) {\n      if (enc === \"hex\")\n        return utils.toHex32(this.h.slice(0, 12), \"big\");\n      else\n        return utils.split32(this.h.slice(0, 12), \"big\");\n    };\n  }\n});\n\n// node_modules/hash.js/lib/hash/sha.js\nvar require_sha3 = __commonJS({\n  \"node_modules/hash.js/lib/hash/sha.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    exports.sha1 = require__();\n    exports.sha224 = require__3();\n    exports.sha256 = require__2();\n    exports.sha384 = require__5();\n    exports.sha512 = require__4();\n  }\n});\n\n// node_modules/hash.js/lib/hash/ripemd.js\nvar require_ripemd = __commonJS({\n  \"node_modules/hash.js/lib/hash/ripemd.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var common = require_common();\n    var rotl32 = utils.rotl32;\n    var sum32 = utils.sum32;\n    var sum32_3 = utils.sum32_3;\n    var sum32_4 = utils.sum32_4;\n    var BlockHash = common.BlockHash;\n    function RIPEMD160() {\n      if (!(this instanceof RIPEMD160))\n        return new RIPEMD160();\n      BlockHash.call(this);\n      this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];\n      this.endian = \"little\";\n    }\n    utils.inherits(RIPEMD160, BlockHash);\n    exports.ripemd160 = RIPEMD160;\n    RIPEMD160.blockSize = 512;\n    RIPEMD160.outSize = 160;\n    RIPEMD160.hmacStrength = 192;\n    RIPEMD160.padLength = 64;\n    RIPEMD160.prototype._update = function update(msg, start) {\n      var A = this.h[0];\n      var B = this.h[1];\n      var C = this.h[2];\n      var D = this.h[3];\n      var E = this.h[4];\n      var Ah = A;\n      var Bh = B;\n      var Ch = C;\n      var Dh = D;\n      var Eh = E;\n      for (var j = 0; j < 80; j++) {\n        var T = sum32(\n          rotl32(\n            sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n            s[j]\n          ),\n          E\n        );\n        A = E;\n        E = D;\n        D = rotl32(C, 10);\n        C = B;\n        B = T;\n        T = sum32(\n          rotl32(\n            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n            sh[j]\n          ),\n          Eh\n        );\n        Ah = Eh;\n        Eh = Dh;\n        Dh = rotl32(Ch, 10);\n        Ch = Bh;\n        Bh = T;\n      }\n      T = sum32_3(this.h[1], C, Dh);\n      this.h[1] = sum32_3(this.h[2], D, Eh);\n      this.h[2] = sum32_3(this.h[3], E, Ah);\n      this.h[3] = sum32_3(this.h[4], A, Bh);\n      this.h[4] = sum32_3(this.h[0], B, Ch);\n      this.h[0] = T;\n    };\n    RIPEMD160.prototype._digest = function digest(enc) {\n      if (enc === \"hex\")\n        return utils.toHex32(this.h, \"little\");\n      else\n        return utils.split32(this.h, \"little\");\n    };\n    function f(j, x, y, z) {\n      if (j <= 15)\n        return x ^ y ^ z;\n      else if (j <= 31)\n        return x & y | ~x & z;\n      else if (j <= 47)\n        return (x | ~y) ^ z;\n      else if (j <= 63)\n        return x & z | y & ~z;\n      else\n        return x ^ (y | ~z);\n    }\n    function K(j) {\n      if (j <= 15)\n        return 0;\n      else if (j <= 31)\n        return 1518500249;\n      else if (j <= 47)\n        return 1859775393;\n      else if (j <= 63)\n        return 2400959708;\n      else\n        return 2840853838;\n    }\n    function Kh(j) {\n      if (j <= 15)\n        return 1352829926;\n      else if (j <= 31)\n        return 1548603684;\n      else if (j <= 47)\n        return 1836072691;\n      else if (j <= 63)\n        return 2053994217;\n      else\n        return 0;\n    }\n    var r = [\n      0,\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10,\n      11,\n      12,\n      13,\n      14,\n      15,\n      7,\n      4,\n      13,\n      1,\n      10,\n      6,\n      15,\n      3,\n      12,\n      0,\n      9,\n      5,\n      2,\n      14,\n      11,\n      8,\n      3,\n      10,\n      14,\n      4,\n      9,\n      15,\n      8,\n      1,\n      2,\n      7,\n      0,\n      6,\n      13,\n      11,\n      5,\n      12,\n      1,\n      9,\n      11,\n      10,\n      0,\n      8,\n      12,\n      4,\n      13,\n      3,\n      7,\n      15,\n      14,\n      5,\n      6,\n      2,\n      4,\n      0,\n      5,\n      9,\n      7,\n      12,\n      2,\n      10,\n      14,\n      1,\n      3,\n      8,\n      11,\n      6,\n      15,\n      13\n    ];\n    var rh = [\n      5,\n      14,\n      7,\n      0,\n      9,\n      2,\n      11,\n      4,\n      13,\n      6,\n      15,\n      8,\n      1,\n      10,\n      3,\n      12,\n      6,\n      11,\n      3,\n      7,\n      0,\n      13,\n      5,\n      10,\n      14,\n      15,\n      8,\n      12,\n      4,\n      9,\n      1,\n      2,\n      15,\n      5,\n      1,\n      3,\n      7,\n      14,\n      6,\n      9,\n      11,\n      8,\n      12,\n      2,\n      10,\n      0,\n      4,\n      13,\n      8,\n      6,\n      4,\n      1,\n      3,\n      11,\n      15,\n      0,\n      5,\n      12,\n      2,\n      13,\n      9,\n      7,\n      10,\n      14,\n      12,\n      15,\n      10,\n      4,\n      1,\n      5,\n      8,\n      7,\n      6,\n      2,\n      13,\n      14,\n      0,\n      3,\n      9,\n      11\n    ];\n    var s = [\n      11,\n      14,\n      15,\n      12,\n      5,\n      8,\n      7,\n      9,\n      11,\n      13,\n      14,\n      15,\n      6,\n      7,\n      9,\n      8,\n      7,\n      6,\n      8,\n      13,\n      11,\n      9,\n      7,\n      15,\n      7,\n      12,\n      15,\n      9,\n      11,\n      7,\n      13,\n      12,\n      11,\n      13,\n      6,\n      7,\n      14,\n      9,\n      13,\n      15,\n      14,\n      8,\n      13,\n      6,\n      5,\n      12,\n      7,\n      5,\n      11,\n      12,\n      14,\n      15,\n      14,\n      15,\n      9,\n      8,\n      9,\n      14,\n      5,\n      6,\n      8,\n      6,\n      5,\n      12,\n      9,\n      15,\n      5,\n      11,\n      6,\n      8,\n      13,\n      12,\n      5,\n      12,\n      13,\n      14,\n      11,\n      8,\n      5,\n      6\n    ];\n    var sh = [\n      8,\n      9,\n      9,\n      11,\n      13,\n      15,\n      15,\n      5,\n      7,\n      7,\n      8,\n      11,\n      14,\n      14,\n      12,\n      6,\n      9,\n      13,\n      15,\n      7,\n      12,\n      8,\n      9,\n      11,\n      7,\n      7,\n      12,\n      7,\n      6,\n      15,\n      13,\n      11,\n      9,\n      7,\n      15,\n      11,\n      8,\n      6,\n      6,\n      14,\n      12,\n      13,\n      5,\n      14,\n      13,\n      13,\n      7,\n      5,\n      15,\n      5,\n      8,\n      11,\n      14,\n      14,\n      6,\n      14,\n      6,\n      9,\n      12,\n      9,\n      12,\n      5,\n      15,\n      8,\n      8,\n      5,\n      12,\n      9,\n      12,\n      5,\n      14,\n      6,\n      8,\n      13,\n      6,\n      5,\n      15,\n      13,\n      11,\n      11\n    ];\n  }\n});\n\n// node_modules/hash.js/lib/hash/hmac.js\nvar require_hmac = __commonJS({\n  \"node_modules/hash.js/lib/hash/hmac.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var assert = require_minimalistic_assert();\n    function Hmac(hash, key, enc) {\n      if (!(this instanceof Hmac))\n        return new Hmac(hash, key, enc);\n      this.Hash = hash;\n      this.blockSize = hash.blockSize / 8;\n      this.outSize = hash.outSize / 8;\n      this.inner = null;\n      this.outer = null;\n      this._init(utils.toArray(key, enc));\n    }\n    module.exports = Hmac;\n    Hmac.prototype._init = function init(key) {\n      if (key.length > this.blockSize)\n        key = new this.Hash().update(key).digest();\n      assert(key.length <= this.blockSize);\n      for (var i = key.length; i < this.blockSize; i++)\n        key.push(0);\n      for (i = 0; i < key.length; i++)\n        key[i] ^= 54;\n      this.inner = new this.Hash().update(key);\n      for (i = 0; i < key.length; i++)\n        key[i] ^= 106;\n      this.outer = new this.Hash().update(key);\n    };\n    Hmac.prototype.update = function update(msg, enc) {\n      this.inner.update(msg, enc);\n      return this;\n    };\n    Hmac.prototype.digest = function digest(enc) {\n      this.outer.update(this.inner.digest());\n      return this.outer.digest(enc);\n    };\n  }\n});\n\n// node_modules/hash.js/lib/hash.js\nvar require_hash2 = __commonJS({\n  \"node_modules/hash.js/lib/hash.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var hash = exports;\n    hash.utils = require_utils4();\n    hash.common = require_common();\n    hash.sha = require_sha3();\n    hash.ripemd = require_ripemd();\n    hash.hmac = require_hmac();\n    hash.sha1 = hash.sha.sha1;\n    hash.sha256 = hash.sha.sha256;\n    hash.sha224 = hash.sha.sha224;\n    hash.sha384 = hash.sha.sha384;\n    hash.sha512 = hash.sha.sha512;\n    hash.ripemd160 = hash.ripemd.ripemd160;\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js\nvar require_secp256k1 = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = {\n      doubles: {\n        step: 4,\n        points: [\n          [\n            \"e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a\",\n            \"f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821\"\n          ],\n          [\n            \"8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508\",\n            \"11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n          ],\n          [\n            \"175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739\",\n            \"d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695\"\n          ],\n          [\n            \"363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\",\n            \"4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9\"\n          ],\n          [\n            \"8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c\",\n            \"4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36\"\n          ],\n          [\n            \"723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda\",\n            \"96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f\"\n          ],\n          [\n            \"eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa\",\n            \"5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999\"\n          ],\n          [\n            \"100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0\",\n            \"cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09\"\n          ],\n          [\n            \"e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d\",\n            \"9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d\"\n          ],\n          [\n            \"feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d\",\n            \"e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088\"\n          ],\n          [\n            \"da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1\",\n            \"9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d\"\n          ],\n          [\n            \"53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0\",\n            \"5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8\"\n          ],\n          [\n            \"8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047\",\n            \"10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a\"\n          ],\n          [\n            \"385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862\",\n            \"283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453\"\n          ],\n          [\n            \"6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7\",\n            \"7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160\"\n          ],\n          [\n            \"3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd\",\n            \"56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0\"\n          ],\n          [\n            \"85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83\",\n            \"7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6\"\n          ],\n          [\n            \"948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a\",\n            \"53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589\"\n          ],\n          [\n            \"6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8\",\n            \"bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17\"\n          ],\n          [\n            \"e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d\",\n            \"4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda\"\n          ],\n          [\n            \"e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725\",\n            \"7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd\"\n          ],\n          [\n            \"213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754\",\n            \"4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2\"\n          ],\n          [\n            \"4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c\",\n            \"17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6\"\n          ],\n          [\n            \"fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6\",\n            \"6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f\"\n          ],\n          [\n            \"76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39\",\n            \"c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01\"\n          ],\n          [\n            \"c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891\",\n            \"893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3\"\n          ],\n          [\n            \"d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b\",\n            \"febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f\"\n          ],\n          [\n            \"b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03\",\n            \"2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7\"\n          ],\n          [\n            \"e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d\",\n            \"eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78\"\n          ],\n          [\n            \"a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070\",\n            \"7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1\"\n          ],\n          [\n            \"90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4\",\n            \"e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150\"\n          ],\n          [\n            \"8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da\",\n            \"662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82\"\n          ],\n          [\n            \"e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11\",\n            \"1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc\"\n          ],\n          [\n            \"8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e\",\n            \"efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b\"\n          ],\n          [\n            \"e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41\",\n            \"2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51\"\n          ],\n          [\n            \"b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef\",\n            \"67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45\"\n          ],\n          [\n            \"d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8\",\n            \"db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120\"\n          ],\n          [\n            \"324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d\",\n            \"648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84\"\n          ],\n          [\n            \"4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96\",\n            \"35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d\"\n          ],\n          [\n            \"9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd\",\n            \"ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d\"\n          ],\n          [\n            \"6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5\",\n            \"9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8\"\n          ],\n          [\n            \"a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266\",\n            \"40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8\"\n          ],\n          [\n            \"7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71\",\n            \"34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac\"\n          ],\n          [\n            \"928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac\",\n            \"c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f\"\n          ],\n          [\n            \"85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751\",\n            \"1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962\"\n          ],\n          [\n            \"ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e\",\n            \"493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907\"\n          ],\n          [\n            \"827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241\",\n            \"c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec\"\n          ],\n          [\n            \"eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3\",\n            \"be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d\"\n          ],\n          [\n            \"e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f\",\n            \"4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414\"\n          ],\n          [\n            \"1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19\",\n            \"aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd\"\n          ],\n          [\n            \"146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be\",\n            \"b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0\"\n          ],\n          [\n            \"fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9\",\n            \"6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811\"\n          ],\n          [\n            \"da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2\",\n            \"8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1\"\n          ],\n          [\n            \"a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13\",\n            \"7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c\"\n          ],\n          [\n            \"174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c\",\n            \"ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73\"\n          ],\n          [\n            \"959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba\",\n            \"2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd\"\n          ],\n          [\n            \"d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151\",\n            \"e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405\"\n          ],\n          [\n            \"64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073\",\n            \"d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589\"\n          ],\n          [\n            \"8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458\",\n            \"38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e\"\n          ],\n          [\n            \"13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b\",\n            \"69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27\"\n          ],\n          [\n            \"bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366\",\n            \"d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1\"\n          ],\n          [\n            \"8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa\",\n            \"40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482\"\n          ],\n          [\n            \"8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0\",\n            \"620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945\"\n          ],\n          [\n            \"dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787\",\n            \"7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573\"\n          ],\n          [\n            \"f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e\",\n            \"ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82\"\n          ]\n        ]\n      },\n      naf: {\n        wnd: 7,\n        points: [\n          [\n            \"f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9\",\n            \"388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672\"\n          ],\n          [\n            \"2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4\",\n            \"d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6\"\n          ],\n          [\n            \"5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc\",\n            \"6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da\"\n          ],\n          [\n            \"acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe\",\n            \"cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37\"\n          ],\n          [\n            \"774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb\",\n            \"d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b\"\n          ],\n          [\n            \"f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8\",\n            \"ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81\"\n          ],\n          [\n            \"d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e\",\n            \"581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58\"\n          ],\n          [\n            \"defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34\",\n            \"4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77\"\n          ],\n          [\n            \"2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c\",\n            \"85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a\"\n          ],\n          [\n            \"352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5\",\n            \"321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c\"\n          ],\n          [\n            \"2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f\",\n            \"2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67\"\n          ],\n          [\n            \"9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714\",\n            \"73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402\"\n          ],\n          [\n            \"daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729\",\n            \"a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55\"\n          ],\n          [\n            \"c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db\",\n            \"2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482\"\n          ],\n          [\n            \"6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4\",\n            \"e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82\"\n          ],\n          [\n            \"1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5\",\n            \"b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396\"\n          ],\n          [\n            \"605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479\",\n            \"2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49\"\n          ],\n          [\n            \"62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d\",\n            \"80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf\"\n          ],\n          [\n            \"80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f\",\n            \"1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a\"\n          ],\n          [\n            \"7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb\",\n            \"d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7\"\n          ],\n          [\n            \"d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9\",\n            \"eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933\"\n          ],\n          [\n            \"49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963\",\n            \"758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a\"\n          ],\n          [\n            \"77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74\",\n            \"958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6\"\n          ],\n          [\n            \"f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530\",\n            \"e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37\"\n          ],\n          [\n            \"463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b\",\n            \"5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e\"\n          ],\n          [\n            \"f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247\",\n            \"cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6\"\n          ],\n          [\n            \"caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1\",\n            \"cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476\"\n          ],\n          [\n            \"2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120\",\n            \"4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40\"\n          ],\n          [\n            \"7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435\",\n            \"91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61\"\n          ],\n          [\n            \"754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18\",\n            \"673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683\"\n          ],\n          [\n            \"e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8\",\n            \"59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5\"\n          ],\n          [\n            \"186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb\",\n            \"3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b\"\n          ],\n          [\n            \"df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f\",\n            \"55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417\"\n          ],\n          [\n            \"5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143\",\n            \"efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868\"\n          ],\n          [\n            \"290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba\",\n            \"e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a\"\n          ],\n          [\n            \"af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45\",\n            \"f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6\"\n          ],\n          [\n            \"766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a\",\n            \"744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996\"\n          ],\n          [\n            \"59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e\",\n            \"c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e\"\n          ],\n          [\n            \"f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8\",\n            \"e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d\"\n          ],\n          [\n            \"7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c\",\n            \"30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2\"\n          ],\n          [\n            \"948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519\",\n            \"e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e\"\n          ],\n          [\n            \"7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab\",\n            \"100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437\"\n          ],\n          [\n            \"3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca\",\n            \"ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311\"\n          ],\n          [\n            \"d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf\",\n            \"8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4\"\n          ],\n          [\n            \"1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610\",\n            \"68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575\"\n          ],\n          [\n            \"733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4\",\n            \"f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d\"\n          ],\n          [\n            \"15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c\",\n            \"d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d\"\n          ],\n          [\n            \"a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940\",\n            \"edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629\"\n          ],\n          [\n            \"e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980\",\n            \"a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06\"\n          ],\n          [\n            \"311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3\",\n            \"66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374\"\n          ],\n          [\n            \"34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf\",\n            \"9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee\"\n          ],\n          [\n            \"f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63\",\n            \"4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1\"\n          ],\n          [\n            \"d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448\",\n            \"fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b\"\n          ],\n          [\n            \"32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf\",\n            \"5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661\"\n          ],\n          [\n            \"7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5\",\n            \"8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6\"\n          ],\n          [\n            \"ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6\",\n            \"8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e\"\n          ],\n          [\n            \"16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5\",\n            \"5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d\"\n          ],\n          [\n            \"eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99\",\n            \"f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc\"\n          ],\n          [\n            \"78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51\",\n            \"f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4\"\n          ],\n          [\n            \"494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5\",\n            \"42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c\"\n          ],\n          [\n            \"a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5\",\n            \"204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b\"\n          ],\n          [\n            \"c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997\",\n            \"4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913\"\n          ],\n          [\n            \"841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881\",\n            \"73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154\"\n          ],\n          [\n            \"5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5\",\n            \"39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865\"\n          ],\n          [\n            \"36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66\",\n            \"d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc\"\n          ],\n          [\n            \"336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726\",\n            \"ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224\"\n          ],\n          [\n            \"8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede\",\n            \"6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e\"\n          ],\n          [\n            \"1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94\",\n            \"60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6\"\n          ],\n          [\n            \"85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31\",\n            \"3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511\"\n          ],\n          [\n            \"29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51\",\n            \"b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b\"\n          ],\n          [\n            \"a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252\",\n            \"ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2\"\n          ],\n          [\n            \"4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5\",\n            \"cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c\"\n          ],\n          [\n            \"d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b\",\n            \"6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3\"\n          ],\n          [\n            \"ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4\",\n            \"322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d\"\n          ],\n          [\n            \"af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f\",\n            \"6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700\"\n          ],\n          [\n            \"e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889\",\n            \"2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4\"\n          ],\n          [\n            \"591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246\",\n            \"b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196\"\n          ],\n          [\n            \"11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984\",\n            \"998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4\"\n          ],\n          [\n            \"3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a\",\n            \"b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257\"\n          ],\n          [\n            \"cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030\",\n            \"bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13\"\n          ],\n          [\n            \"c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197\",\n            \"6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096\"\n          ],\n          [\n            \"c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593\",\n            \"c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38\"\n          ],\n          [\n            \"a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef\",\n            \"21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f\"\n          ],\n          [\n            \"347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38\",\n            \"60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448\"\n          ],\n          [\n            \"da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a\",\n            \"49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a\"\n          ],\n          [\n            \"c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111\",\n            \"5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4\"\n          ],\n          [\n            \"4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502\",\n            \"7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437\"\n          ],\n          [\n            \"3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea\",\n            \"be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7\"\n          ],\n          [\n            \"cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26\",\n            \"8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d\"\n          ],\n          [\n            \"b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986\",\n            \"39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a\"\n          ],\n          [\n            \"d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e\",\n            \"62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54\"\n          ],\n          [\n            \"48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4\",\n            \"25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77\"\n          ],\n          [\n            \"dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda\",\n            \"ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517\"\n          ],\n          [\n            \"6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859\",\n            \"cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10\"\n          ],\n          [\n            \"e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f\",\n            \"f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125\"\n          ],\n          [\n            \"eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c\",\n            \"6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e\"\n          ],\n          [\n            \"13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942\",\n            \"fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1\"\n          ],\n          [\n            \"ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a\",\n            \"1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2\"\n          ],\n          [\n            \"b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80\",\n            \"5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423\"\n          ],\n          [\n            \"ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d\",\n            \"438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8\"\n          ],\n          [\n            \"8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1\",\n            \"cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758\"\n          ],\n          [\n            \"52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63\",\n            \"c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375\"\n          ],\n          [\n            \"e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352\",\n            \"6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d\"\n          ],\n          [\n            \"7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193\",\n            \"ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec\"\n          ],\n          [\n            \"5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00\",\n            \"9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0\"\n          ],\n          [\n            \"32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58\",\n            \"ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c\"\n          ],\n          [\n            \"e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7\",\n            \"d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4\"\n          ],\n          [\n            \"8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8\",\n            \"c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f\"\n          ],\n          [\n            \"4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e\",\n            \"67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649\"\n          ],\n          [\n            \"3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d\",\n            \"cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826\"\n          ],\n          [\n            \"674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b\",\n            \"299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5\"\n          ],\n          [\n            \"d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f\",\n            \"f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87\"\n          ],\n          [\n            \"30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6\",\n            \"462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b\"\n          ],\n          [\n            \"be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297\",\n            \"62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc\"\n          ],\n          [\n            \"93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a\",\n            \"7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c\"\n          ],\n          [\n            \"b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c\",\n            \"ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f\"\n          ],\n          [\n            \"d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52\",\n            \"4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a\"\n          ],\n          [\n            \"d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb\",\n            \"bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46\"\n          ],\n          [\n            \"463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065\",\n            \"bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f\"\n          ],\n          [\n            \"7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917\",\n            \"603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03\"\n          ],\n          [\n            \"74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9\",\n            \"cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08\"\n          ],\n          [\n            \"30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3\",\n            \"553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8\"\n          ],\n          [\n            \"9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57\",\n            \"712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373\"\n          ],\n          [\n            \"176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66\",\n            \"ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3\"\n          ],\n          [\n            \"75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8\",\n            \"9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8\"\n          ],\n          [\n            \"809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721\",\n            \"9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1\"\n          ],\n          [\n            \"1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180\",\n            \"4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9\"\n          ]\n        ]\n      }\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/curves.js\nvar require_curves = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/curves.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var curves = exports;\n    var hash = require_hash2();\n    var curve = require_curve();\n    var utils = require_utils3();\n    var assert = utils.assert;\n    function PresetCurve(options) {\n      if (options.type === \"short\")\n        this.curve = new curve.short(options);\n      else if (options.type === \"edwards\")\n        this.curve = new curve.edwards(options);\n      else\n        this.curve = new curve.mont(options);\n      this.g = this.curve.g;\n      this.n = this.curve.n;\n      this.hash = options.hash;\n      assert(this.g.validate(), \"Invalid curve\");\n      assert(this.g.mul(this.n).isInfinity(), \"Invalid curve, G*N != O\");\n    }\n    curves.PresetCurve = PresetCurve;\n    function defineCurve(name, options) {\n      Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        get: function() {\n          var curve2 = new PresetCurve(options);\n          Object.defineProperty(curves, name, {\n            configurable: true,\n            enumerable: true,\n            value: curve2\n          });\n          return curve2;\n        }\n      });\n    }\n    defineCurve(\"p192\", {\n      type: \"short\",\n      prime: \"p192\",\n      p: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\",\n      a: \"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc\",\n      b: \"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1\",\n      n: \"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831\",\n      hash: hash.sha256,\n      gRed: false,\n      g: [\n        \"188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012\",\n        \"07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811\"\n      ]\n    });\n    defineCurve(\"p224\", {\n      type: \"short\",\n      prime: \"p224\",\n      p: \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\",\n      a: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe\",\n      b: \"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4\",\n      n: \"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d\",\n      hash: hash.sha256,\n      gRed: false,\n      g: [\n        \"b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21\",\n        \"bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34\"\n      ]\n    });\n    defineCurve(\"p256\", {\n      type: \"short\",\n      prime: null,\n      p: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff\",\n      a: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc\",\n      b: \"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b\",\n      n: \"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551\",\n      hash: hash.sha256,\n      gRed: false,\n      g: [\n        \"6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296\",\n        \"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5\"\n      ]\n    });\n    defineCurve(\"p384\", {\n      type: \"short\",\n      prime: null,\n      p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff\",\n      a: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc\",\n      b: \"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef\",\n      n: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973\",\n      hash: hash.sha384,\n      gRed: false,\n      g: [\n        \"aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7\",\n        \"3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\"\n      ]\n    });\n    defineCurve(\"p521\", {\n      type: \"short\",\n      prime: null,\n      p: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff\",\n      a: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc\",\n      b: \"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00\",\n      n: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409\",\n      hash: hash.sha512,\n      gRed: false,\n      g: [\n        \"000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66\",\n        \"00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650\"\n      ]\n    });\n    defineCurve(\"curve25519\", {\n      type: \"mont\",\n      prime: \"p25519\",\n      p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n      a: \"76d06\",\n      b: \"1\",\n      n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n      hash: hash.sha256,\n      gRed: false,\n      g: [\n        \"9\"\n      ]\n    });\n    defineCurve(\"ed25519\", {\n      type: \"edwards\",\n      prime: \"p25519\",\n      p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n      a: \"-1\",\n      c: \"1\",\n      // -121665 * (121666^(-1)) (mod P)\n      d: \"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3\",\n      n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n      hash: hash.sha256,\n      gRed: false,\n      g: [\n        \"216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a\",\n        // 4/5\n        \"6666666666666666666666666666666666666666666666666666666666666658\"\n      ]\n    });\n    var pre;\n    try {\n      pre = require_secp256k1();\n    } catch (e) {\n      pre = void 0;\n    }\n    defineCurve(\"secp256k1\", {\n      type: \"short\",\n      prime: \"k256\",\n      p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\",\n      a: \"0\",\n      b: \"7\",\n      n: \"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141\",\n      h: \"1\",\n      hash: hash.sha256,\n      // Precomputed endomorphism\n      beta: \"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\",\n      lambda: \"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72\",\n      basis: [\n        {\n          a: \"3086d221a7d46bcde86c90e49284eb15\",\n          b: \"-e4437ed6010e88286f547fa90abfe4c3\"\n        },\n        {\n          a: \"114ca50f7a8e2f3f657c1108d9d44cfd8\",\n          b: \"3086d221a7d46bcde86c90e49284eb15\"\n        }\n      ],\n      gRed: false,\n      g: [\n        \"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n        \"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n        pre\n      ]\n    });\n  }\n});\n\n// node_modules/hmac-drbg/lib/hmac-drbg.js\nvar require_hmac_drbg = __commonJS({\n  \"node_modules/hmac-drbg/lib/hmac-drbg.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var hash = require_hash2();\n    var utils = require_utils2();\n    var assert = require_minimalistic_assert();\n    function HmacDRBG(options) {\n      if (!(this instanceof HmacDRBG))\n        return new HmacDRBG(options);\n      this.hash = options.hash;\n      this.predResist = !!options.predResist;\n      this.outLen = this.hash.outSize;\n      this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n      this._reseed = null;\n      this.reseedInterval = null;\n      this.K = null;\n      this.V = null;\n      var entropy = utils.toArray(options.entropy, options.entropyEnc || \"hex\");\n      var nonce = utils.toArray(options.nonce, options.nonceEnc || \"hex\");\n      var pers = utils.toArray(options.pers, options.persEnc || \"hex\");\n      assert(\n        entropy.length >= this.minEntropy / 8,\n        \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\"\n      );\n      this._init(entropy, nonce, pers);\n    }\n    module.exports = HmacDRBG;\n    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n      var seed = entropy.concat(nonce).concat(pers);\n      this.K = new Array(this.outLen / 8);\n      this.V = new Array(this.outLen / 8);\n      for (var i = 0; i < this.V.length; i++) {\n        this.K[i] = 0;\n        this.V[i] = 1;\n      }\n      this._update(seed);\n      this._reseed = 1;\n      this.reseedInterval = 281474976710656;\n    };\n    HmacDRBG.prototype._hmac = function hmac() {\n      return new hash.hmac(this.hash, this.K);\n    };\n    HmacDRBG.prototype._update = function update(seed) {\n      var kmac = this._hmac().update(this.V).update([0]);\n      if (seed)\n        kmac = kmac.update(seed);\n      this.K = kmac.digest();\n      this.V = this._hmac().update(this.V).digest();\n      if (!seed)\n        return;\n      this.K = this._hmac().update(this.V).update([1]).update(seed).digest();\n      this.V = this._hmac().update(this.V).digest();\n    };\n    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n      if (typeof entropyEnc !== \"string\") {\n        addEnc = add;\n        add = entropyEnc;\n        entropyEnc = null;\n      }\n      entropy = utils.toArray(entropy, entropyEnc);\n      add = utils.toArray(add, addEnc);\n      assert(\n        entropy.length >= this.minEntropy / 8,\n        \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\"\n      );\n      this._update(entropy.concat(add || []));\n      this._reseed = 1;\n    };\n    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n      if (this._reseed > this.reseedInterval)\n        throw new Error(\"Reseed is required\");\n      if (typeof enc !== \"string\") {\n        addEnc = add;\n        add = enc;\n        enc = null;\n      }\n      if (add) {\n        add = utils.toArray(add, addEnc || \"hex\");\n        this._update(add);\n      }\n      var temp = [];\n      while (temp.length < len) {\n        this.V = this._hmac().update(this.V).digest();\n        temp = temp.concat(this.V);\n      }\n      var res = temp.slice(0, len);\n      this._update(add);\n      this._reseed++;\n      return utils.encode(res, enc);\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/ec/key.js\nvar require_key = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/ec/key.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn4();\n    var utils = require_utils3();\n    var assert = utils.assert;\n    function KeyPair(ec, options) {\n      this.ec = ec;\n      this.priv = null;\n      this.pub = null;\n      if (options.priv)\n        this._importPrivate(options.priv, options.privEnc);\n      if (options.pub)\n        this._importPublic(options.pub, options.pubEnc);\n    }\n    module.exports = KeyPair;\n    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n      if (pub instanceof KeyPair)\n        return pub;\n      return new KeyPair(ec, {\n        pub,\n        pubEnc: enc\n      });\n    };\n    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n      if (priv instanceof KeyPair)\n        return priv;\n      return new KeyPair(ec, {\n        priv,\n        privEnc: enc\n      });\n    };\n    KeyPair.prototype.validate = function validate() {\n      var pub = this.getPublic();\n      if (pub.isInfinity())\n        return { result: false, reason: \"Invalid public key\" };\n      if (!pub.validate())\n        return { result: false, reason: \"Public key is not a point\" };\n      if (!pub.mul(this.ec.curve.n).isInfinity())\n        return { result: false, reason: \"Public key * N != O\" };\n      return { result: true, reason: null };\n    };\n    KeyPair.prototype.getPublic = function getPublic(compact, enc) {\n      if (typeof compact === \"string\") {\n        enc = compact;\n        compact = null;\n      }\n      if (!this.pub)\n        this.pub = this.ec.g.mul(this.priv);\n      if (!enc)\n        return this.pub;\n      return this.pub.encode(enc, compact);\n    };\n    KeyPair.prototype.getPrivate = function getPrivate(enc) {\n      if (enc === \"hex\")\n        return this.priv.toString(16, 2);\n      else\n        return this.priv;\n    };\n    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n      this.priv = new BN(key, enc || 16);\n      this.priv = this.priv.umod(this.ec.curve.n);\n    };\n    KeyPair.prototype._importPublic = function _importPublic(key, enc) {\n      if (key.x || key.y) {\n        if (this.ec.curve.type === \"mont\") {\n          assert(key.x, \"Need x coordinate\");\n        } else if (this.ec.curve.type === \"short\" || this.ec.curve.type === \"edwards\") {\n          assert(key.x && key.y, \"Need both x and y coordinate\");\n        }\n        this.pub = this.ec.curve.point(key.x, key.y);\n        return;\n      }\n      this.pub = this.ec.curve.decodePoint(key, enc);\n    };\n    KeyPair.prototype.derive = function derive(pub) {\n      if (!pub.validate()) {\n        assert(pub.validate(), \"public point not validated\");\n      }\n      return pub.mul(this.priv).getX();\n    };\n    KeyPair.prototype.sign = function sign(msg, enc, options) {\n      return this.ec.sign(msg, this, enc, options);\n    };\n    KeyPair.prototype.verify = function verify(msg, signature) {\n      return this.ec.verify(msg, signature, this);\n    };\n    KeyPair.prototype.inspect = function inspect() {\n      return \"<Key priv: \" + (this.priv && this.priv.toString(16, 2)) + \" pub: \" + (this.pub && this.pub.inspect()) + \" >\";\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/ec/signature.js\nvar require_signature = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/ec/signature.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn4();\n    var utils = require_utils3();\n    var assert = utils.assert;\n    function Signature(options, enc) {\n      if (options instanceof Signature)\n        return options;\n      if (this._importDER(options, enc))\n        return;\n      assert(options.r && options.s, \"Signature without r or s\");\n      this.r = new BN(options.r, 16);\n      this.s = new BN(options.s, 16);\n      if (options.recoveryParam === void 0)\n        this.recoveryParam = null;\n      else\n        this.recoveryParam = options.recoveryParam;\n    }\n    module.exports = Signature;\n    function Position() {\n      this.place = 0;\n    }\n    function getLength(buf, p) {\n      var initial = buf[p.place++];\n      if (!(initial & 128)) {\n        return initial;\n      }\n      var octetLen = initial & 15;\n      if (octetLen === 0 || octetLen > 4) {\n        return false;\n      }\n      var val = 0;\n      for (var i = 0, off = p.place; i < octetLen; i++, off++) {\n        val <<= 8;\n        val |= buf[off];\n        val >>>= 0;\n      }\n      if (val <= 127) {\n        return false;\n      }\n      p.place = off;\n      return val;\n    }\n    function rmPadding(buf) {\n      var i = 0;\n      var len = buf.length - 1;\n      while (!buf[i] && !(buf[i + 1] & 128) && i < len) {\n        i++;\n      }\n      if (i === 0) {\n        return buf;\n      }\n      return buf.slice(i);\n    }\n    Signature.prototype._importDER = function _importDER(data, enc) {\n      data = utils.toArray(data, enc);\n      var p = new Position();\n      if (data[p.place++] !== 48) {\n        return false;\n      }\n      var len = getLength(data, p);\n      if (len === false) {\n        return false;\n      }\n      if (len + p.place !== data.length) {\n        return false;\n      }\n      if (data[p.place++] !== 2) {\n        return false;\n      }\n      var rlen = getLength(data, p);\n      if (rlen === false) {\n        return false;\n      }\n      var r = data.slice(p.place, rlen + p.place);\n      p.place += rlen;\n      if (data[p.place++] !== 2) {\n        return false;\n      }\n      var slen = getLength(data, p);\n      if (slen === false) {\n        return false;\n      }\n      if (data.length !== slen + p.place) {\n        return false;\n      }\n      var s = data.slice(p.place, slen + p.place);\n      if (r[0] === 0) {\n        if (r[1] & 128) {\n          r = r.slice(1);\n        } else {\n          return false;\n        }\n      }\n      if (s[0] === 0) {\n        if (s[1] & 128) {\n          s = s.slice(1);\n        } else {\n          return false;\n        }\n      }\n      this.r = new BN(r);\n      this.s = new BN(s);\n      this.recoveryParam = null;\n      return true;\n    };\n    function constructLength(arr, len) {\n      if (len < 128) {\n        arr.push(len);\n        return;\n      }\n      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n      arr.push(octets | 128);\n      while (--octets) {\n        arr.push(len >>> (octets << 3) & 255);\n      }\n      arr.push(len);\n    }\n    Signature.prototype.toDER = function toDER(enc) {\n      var r = this.r.toArray();\n      var s = this.s.toArray();\n      if (r[0] & 128)\n        r = [0].concat(r);\n      if (s[0] & 128)\n        s = [0].concat(s);\n      r = rmPadding(r);\n      s = rmPadding(s);\n      while (!s[0] && !(s[1] & 128)) {\n        s = s.slice(1);\n      }\n      var arr = [2];\n      constructLength(arr, r.length);\n      arr = arr.concat(r);\n      arr.push(2);\n      constructLength(arr, s.length);\n      var backHalf = arr.concat(s);\n      var res = [48];\n      constructLength(res, backHalf.length);\n      res = res.concat(backHalf);\n      return utils.encode(res, enc);\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/ec/index.js\nvar require_ec = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/ec/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn4();\n    var HmacDRBG = require_hmac_drbg();\n    var utils = require_utils3();\n    var curves = require_curves();\n    var rand = require_brorand();\n    var assert = utils.assert;\n    var KeyPair = require_key();\n    var Signature = require_signature();\n    function EC(options) {\n      if (!(this instanceof EC))\n        return new EC(options);\n      if (typeof options === \"string\") {\n        assert(\n          Object.prototype.hasOwnProperty.call(curves, options),\n          \"Unknown curve \" + options\n        );\n        options = curves[options];\n      }\n      if (options instanceof curves.PresetCurve)\n        options = { curve: options };\n      this.curve = options.curve.curve;\n      this.n = this.curve.n;\n      this.nh = this.n.ushrn(1);\n      this.g = this.curve.g;\n      this.g = options.curve.g;\n      this.g.precompute(options.curve.n.bitLength() + 1);\n      this.hash = options.hash || options.curve.hash;\n    }\n    module.exports = EC;\n    EC.prototype.keyPair = function keyPair(options) {\n      return new KeyPair(this, options);\n    };\n    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n      return KeyPair.fromPrivate(this, priv, enc);\n    };\n    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n      return KeyPair.fromPublic(this, pub, enc);\n    };\n    EC.prototype.genKeyPair = function genKeyPair(options) {\n      if (!options)\n        options = {};\n      var drbg = new HmacDRBG({\n        hash: this.hash,\n        pers: options.pers,\n        persEnc: options.persEnc || \"utf8\",\n        entropy: options.entropy || rand(this.hash.hmacStrength),\n        entropyEnc: options.entropy && options.entropyEnc || \"utf8\",\n        nonce: this.n.toArray()\n      });\n      var bytes = this.n.byteLength();\n      var ns2 = this.n.sub(new BN(2));\n      for (; ; ) {\n        var priv = new BN(drbg.generate(bytes));\n        if (priv.cmp(ns2) > 0)\n          continue;\n        priv.iaddn(1);\n        return this.keyFromPrivate(priv);\n      }\n    };\n    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {\n      var delta = msg.byteLength() * 8 - this.n.bitLength();\n      if (delta > 0)\n        msg = msg.ushrn(delta);\n      if (!truncOnly && msg.cmp(this.n) >= 0)\n        return msg.sub(this.n);\n      else\n        return msg;\n    };\n    EC.prototype.sign = function sign(msg, key, enc, options) {\n      if (typeof enc === \"object\") {\n        options = enc;\n        enc = null;\n      }\n      if (!options)\n        options = {};\n      key = this.keyFromPrivate(key, enc);\n      msg = this._truncateToN(new BN(msg, 16));\n      var bytes = this.n.byteLength();\n      var bkey = key.getPrivate().toArray(\"be\", bytes);\n      var nonce = msg.toArray(\"be\", bytes);\n      var drbg = new HmacDRBG({\n        hash: this.hash,\n        entropy: bkey,\n        nonce,\n        pers: options.pers,\n        persEnc: options.persEnc || \"utf8\"\n      });\n      var ns1 = this.n.sub(new BN(1));\n      for (var iter = 0; ; iter++) {\n        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));\n        k = this._truncateToN(k, true);\n        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)\n          continue;\n        var kp = this.g.mul(k);\n        if (kp.isInfinity())\n          continue;\n        var kpX = kp.getX();\n        var r = kpX.umod(this.n);\n        if (r.cmpn(0) === 0)\n          continue;\n        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n        s = s.umod(this.n);\n        if (s.cmpn(0) === 0)\n          continue;\n        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);\n        if (options.canonical && s.cmp(this.nh) > 0) {\n          s = this.n.sub(s);\n          recoveryParam ^= 1;\n        }\n        return new Signature({ r, s, recoveryParam });\n      }\n    };\n    EC.prototype.verify = function verify(msg, signature, key, enc) {\n      msg = this._truncateToN(new BN(msg, 16));\n      key = this.keyFromPublic(key, enc);\n      signature = new Signature(signature, \"hex\");\n      var r = signature.r;\n      var s = signature.s;\n      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)\n        return false;\n      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)\n        return false;\n      var sinv = s.invm(this.n);\n      var u1 = sinv.mul(msg).umod(this.n);\n      var u2 = sinv.mul(r).umod(this.n);\n      var p;\n      if (!this.curve._maxwellTrick) {\n        p = this.g.mulAdd(u1, key.getPublic(), u2);\n        if (p.isInfinity())\n          return false;\n        return p.getX().umod(this.n).cmp(r) === 0;\n      }\n      p = this.g.jmulAdd(u1, key.getPublic(), u2);\n      if (p.isInfinity())\n        return false;\n      return p.eqXToP(r);\n    };\n    EC.prototype.recoverPubKey = function(msg, signature, j, enc) {\n      assert((3 & j) === j, \"The recovery param is more than two bits\");\n      signature = new Signature(signature, enc);\n      var n = this.n;\n      var e = new BN(msg);\n      var r = signature.r;\n      var s = signature.s;\n      var isYOdd = j & 1;\n      var isSecondKey = j >> 1;\n      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)\n        throw new Error(\"Unable to find sencond key candinate\");\n      if (isSecondKey)\n        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n      else\n        r = this.curve.pointFromX(r, isYOdd);\n      var rInv = signature.r.invm(n);\n      var s1 = n.sub(e).mul(rInv).umod(n);\n      var s2 = s.mul(rInv).umod(n);\n      return this.g.mulAdd(s1, r, s2);\n    };\n    EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {\n      signature = new Signature(signature, enc);\n      if (signature.recoveryParam !== null)\n        return signature.recoveryParam;\n      for (var i = 0; i < 4; i++) {\n        var Qprime;\n        try {\n          Qprime = this.recoverPubKey(e, signature, i);\n        } catch (e2) {\n          continue;\n        }\n        if (Qprime.eq(Q))\n          return i;\n      }\n      throw new Error(\"Unable to find valid recovery factor\");\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/eddsa/key.js\nvar require_key2 = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/eddsa/key.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils3();\n    var assert = utils.assert;\n    var parseBytes = utils.parseBytes;\n    var cachedProperty = utils.cachedProperty;\n    function KeyPair(eddsa, params) {\n      this.eddsa = eddsa;\n      this._secret = parseBytes(params.secret);\n      if (eddsa.isPoint(params.pub))\n        this._pub = params.pub;\n      else\n        this._pubBytes = parseBytes(params.pub);\n    }\n    KeyPair.fromPublic = function fromPublic(eddsa, pub) {\n      if (pub instanceof KeyPair)\n        return pub;\n      return new KeyPair(eddsa, { pub });\n    };\n    KeyPair.fromSecret = function fromSecret(eddsa, secret) {\n      if (secret instanceof KeyPair)\n        return secret;\n      return new KeyPair(eddsa, { secret });\n    };\n    KeyPair.prototype.secret = function secret() {\n      return this._secret;\n    };\n    cachedProperty(KeyPair, \"pubBytes\", function pubBytes() {\n      return this.eddsa.encodePoint(this.pub());\n    });\n    cachedProperty(KeyPair, \"pub\", function pub() {\n      if (this._pubBytes)\n        return this.eddsa.decodePoint(this._pubBytes);\n      return this.eddsa.g.mul(this.priv());\n    });\n    cachedProperty(KeyPair, \"privBytes\", function privBytes() {\n      var eddsa = this.eddsa;\n      var hash = this.hash();\n      var lastIx = eddsa.encodingLength - 1;\n      var a = hash.slice(0, eddsa.encodingLength);\n      a[0] &= 248;\n      a[lastIx] &= 127;\n      a[lastIx] |= 64;\n      return a;\n    });\n    cachedProperty(KeyPair, \"priv\", function priv() {\n      return this.eddsa.decodeInt(this.privBytes());\n    });\n    cachedProperty(KeyPair, \"hash\", function hash() {\n      return this.eddsa.hash().update(this.secret()).digest();\n    });\n    cachedProperty(KeyPair, \"messagePrefix\", function messagePrefix() {\n      return this.hash().slice(this.eddsa.encodingLength);\n    });\n    KeyPair.prototype.sign = function sign(message) {\n      assert(this._secret, \"KeyPair can only verify\");\n      return this.eddsa.sign(message, this);\n    };\n    KeyPair.prototype.verify = function verify(message, sig) {\n      return this.eddsa.verify(message, sig, this);\n    };\n    KeyPair.prototype.getSecret = function getSecret(enc) {\n      assert(this._secret, \"KeyPair is public only\");\n      return utils.encode(this.secret(), enc);\n    };\n    KeyPair.prototype.getPublic = function getPublic(enc) {\n      return utils.encode(this.pubBytes(), enc);\n    };\n    module.exports = KeyPair;\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/eddsa/signature.js\nvar require_signature2 = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/eddsa/signature.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn4();\n    var utils = require_utils3();\n    var assert = utils.assert;\n    var cachedProperty = utils.cachedProperty;\n    var parseBytes = utils.parseBytes;\n    function Signature(eddsa, sig) {\n      this.eddsa = eddsa;\n      if (typeof sig !== \"object\")\n        sig = parseBytes(sig);\n      if (Array.isArray(sig)) {\n        sig = {\n          R: sig.slice(0, eddsa.encodingLength),\n          S: sig.slice(eddsa.encodingLength)\n        };\n      }\n      assert(sig.R && sig.S, \"Signature without R or S\");\n      if (eddsa.isPoint(sig.R))\n        this._R = sig.R;\n      if (sig.S instanceof BN)\n        this._S = sig.S;\n      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n    }\n    cachedProperty(Signature, \"S\", function S() {\n      return this.eddsa.decodeInt(this.Sencoded());\n    });\n    cachedProperty(Signature, \"R\", function R() {\n      return this.eddsa.decodePoint(this.Rencoded());\n    });\n    cachedProperty(Signature, \"Rencoded\", function Rencoded() {\n      return this.eddsa.encodePoint(this.R());\n    });\n    cachedProperty(Signature, \"Sencoded\", function Sencoded() {\n      return this.eddsa.encodeInt(this.S());\n    });\n    Signature.prototype.toBytes = function toBytes() {\n      return this.Rencoded().concat(this.Sencoded());\n    };\n    Signature.prototype.toHex = function toHex() {\n      return utils.encode(this.toBytes(), \"hex\").toUpperCase();\n    };\n    module.exports = Signature;\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/eddsa/index.js\nvar require_eddsa = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/eddsa/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var hash = require_hash2();\n    var curves = require_curves();\n    var utils = require_utils3();\n    var assert = utils.assert;\n    var parseBytes = utils.parseBytes;\n    var KeyPair = require_key2();\n    var Signature = require_signature2();\n    function EDDSA(curve) {\n      assert(curve === \"ed25519\", \"only tested with ed25519 so far\");\n      if (!(this instanceof EDDSA))\n        return new EDDSA(curve);\n      curve = curves[curve].curve;\n      this.curve = curve;\n      this.g = curve.g;\n      this.g.precompute(curve.n.bitLength() + 1);\n      this.pointClass = curve.point().constructor;\n      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n      this.hash = hash.sha512;\n    }\n    module.exports = EDDSA;\n    EDDSA.prototype.sign = function sign(message, secret) {\n      message = parseBytes(message);\n      var key = this.keyFromSecret(secret);\n      var r = this.hashInt(key.messagePrefix(), message);\n      var R = this.g.mul(r);\n      var Rencoded = this.encodePoint(R);\n      var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());\n      var S = r.add(s_).umod(this.curve.n);\n      return this.makeSignature({ R, S, Rencoded });\n    };\n    EDDSA.prototype.verify = function verify(message, sig, pub) {\n      message = parseBytes(message);\n      sig = this.makeSignature(sig);\n      var key = this.keyFromPublic(pub);\n      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n      var SG = this.g.mul(sig.S());\n      var RplusAh = sig.R().add(key.pub().mul(h));\n      return RplusAh.eq(SG);\n    };\n    EDDSA.prototype.hashInt = function hashInt() {\n      var hash2 = this.hash();\n      for (var i = 0; i < arguments.length; i++)\n        hash2.update(arguments[i]);\n      return utils.intFromLE(hash2.digest()).umod(this.curve.n);\n    };\n    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n      return KeyPair.fromPublic(this, pub);\n    };\n    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n      return KeyPair.fromSecret(this, secret);\n    };\n    EDDSA.prototype.makeSignature = function makeSignature(sig) {\n      if (sig instanceof Signature)\n        return sig;\n      return new Signature(this, sig);\n    };\n    EDDSA.prototype.encodePoint = function encodePoint(point) {\n      var enc = point.getY().toArray(\"le\", this.encodingLength);\n      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;\n      return enc;\n    };\n    EDDSA.prototype.decodePoint = function decodePoint(bytes) {\n      bytes = utils.parseBytes(bytes);\n      var lastIx = bytes.length - 1;\n      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);\n      var xIsOdd = (bytes[lastIx] & 128) !== 0;\n      var y = utils.intFromLE(normed);\n      return this.curve.pointFromY(y, xIsOdd);\n    };\n    EDDSA.prototype.encodeInt = function encodeInt(num) {\n      return num.toArray(\"le\", this.encodingLength);\n    };\n    EDDSA.prototype.decodeInt = function decodeInt(bytes) {\n      return utils.intFromLE(bytes);\n    };\n    EDDSA.prototype.isPoint = function isPoint(val) {\n      return val instanceof this.pointClass;\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic.js\nvar require_elliptic = __commonJS({\n  \"node_modules/elliptic/lib/elliptic.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var elliptic = exports;\n    elliptic.version = require_package().version;\n    elliptic.utils = require_utils3();\n    elliptic.rand = require_brorand();\n    elliptic.curve = require_curve();\n    elliptic.curves = require_curves();\n    elliptic.ec = require_ec();\n    elliptic.eddsa = require_eddsa();\n  }\n});\n\n// node_modules/asn1.js/node_modules/bn.js/lib/bn.js\nvar require_bn5 = __commonJS({\n  \"node_modules/asn1.js/node_modules/bn.js/lib/bn.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    (function(module2, exports2) {\n      \"use strict\";\n      function assert(val, msg) {\n        if (!val)\n          throw new Error(msg || \"Assertion failed\");\n      }\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {\n        };\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      }\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        this.red = null;\n        if (number !== null) {\n          if (base === \"le\" || base === \"be\") {\n            endian = base;\n            base = 10;\n          }\n          this._init(number || 0, base || 10, endian || \"be\");\n        }\n      }\n      if (typeof module2 === \"object\") {\n        module2.exports = BN;\n      } else {\n        exports2.BN = BN;\n      }\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer2;\n      try {\n        if (typeof window !== \"undefined\" && typeof window.Buffer !== \"undefined\") {\n          Buffer2 = window.Buffer;\n        } else {\n          Buffer2 = require_buffer_polyfill().Buffer;\n        }\n      } catch (e) {\n      }\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0)\n          return left;\n        return right;\n      };\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0)\n          return left;\n        return right;\n      };\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n          return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n          return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n          base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n          start++;\n          this.negative = 1;\n        }\n        if (start < number.length) {\n          if (base === 16) {\n            this._parseHex(number, start, endian);\n          } else {\n            this._parseBase(number, base, start);\n            if (endian === \"le\") {\n              this._initArray(this.toArray(), base, endian);\n            }\n          }\n        }\n      };\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n        if (number < 67108864) {\n          this.words = [number & 67108863];\n          this.length = 1;\n        } else if (number < 4503599627370496) {\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863\n          ];\n          this.length = 2;\n        } else {\n          assert(number < 9007199254740992);\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863,\n            1\n          ];\n          this.length = 3;\n        }\n        if (endian !== \"le\")\n          return;\n        this._initArray(this.toArray(), base, endian);\n      };\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === \"le\") {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n        return this.strip();\n      };\n      function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        if (c >= 65 && c <= 70) {\n          return c - 55;\n        } else if (c >= 97 && c <= 102) {\n          return c - 87;\n        } else {\n          return c - 48 & 15;\n        }\n      }\n      function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n          r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n      }\n      BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n          for (i = number.length - 1; i >= start; i -= 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        } else {\n          var parseLength = number.length - start;\n          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        }\n        this.strip();\n      };\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul;\n          if (c >= 49) {\n            r += c - 49 + 10;\n          } else if (c >= 17) {\n            r += c - 17 + 10;\n          } else {\n            r += c;\n          }\n        }\n        return r;\n      }\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        this.words = [0];\n        this.length = 1;\n        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {\n          limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n          this.imuln(pow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        this.strip();\n      };\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n        return this;\n      };\n      BN.prototype.strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n        return this._normSign();\n      };\n      BN.prototype._normSign = function _normSign() {\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n        return this;\n      };\n      BN.prototype.inspect = function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      };\n      var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ];\n      var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ];\n      var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n          out = \"\";\n          var off = 0;\n          var carry = 0;\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 16777215).toString(16);\n            carry = w >>> 24 - off & 16777215;\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n            off += 2;\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n          }\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          var groupSize = groupSizes[base];\n          var groupBase = groupBases[base];\n          out = \"\";\n          var c = this.clone();\n          c.negative = 0;\n          while (!c.isZero()) {\n            var r = c.modn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n          if (this.isZero()) {\n            out = \"0\" + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n      };\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n          ret += this.words[1] * 67108864;\n        } else if (this.length === 3 && this.words[2] === 1) {\n          ret += 4503599627370496 + this.words[1] * 67108864;\n        } else if (this.length > 2) {\n          assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n      };\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n      };\n      BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer2 !== \"undefined\");\n        return this.toArrayLike(Buffer2, endian, length);\n      };\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        this.strip();\n        var littleEndian = endian === \"le\";\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n        if (!littleEndian) {\n          for (i = 0; i < reqLength - byteLength; i++) {\n            res[i] = 0;\n          }\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[reqLength - i - 1] = b;\n          }\n        } else {\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[i] = b;\n          }\n          for (; i < reqLength; i++) {\n            res[i] = 0;\n          }\n        }\n        return res;\n      };\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n          if (t >= 4096) {\n            r += 13;\n            t >>>= 13;\n          }\n          if (t >= 64) {\n            r += 7;\n            t >>>= 7;\n          }\n          if (t >= 8) {\n            r += 4;\n            t >>>= 4;\n          }\n          if (t >= 2) {\n            r += 2;\n            t >>>= 2;\n          }\n          return r + t;\n        };\n      }\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        if (w === 0)\n          return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 8191) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n        if ((t & 127) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n        if ((t & 15) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n        if ((t & 3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n        if ((t & 1) === 0) {\n          r++;\n        }\n        return r;\n      };\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n      };\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n        return w;\n      }\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero())\n          return 0;\n        var r = 0;\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n          r += b;\n          if (b !== 26)\n            break;\n        }\n        return r;\n      };\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n      };\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n      };\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      };\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n        return this;\n      };\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n        return this.strip();\n      };\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      };\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length)\n          return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length)\n          return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      };\n      BN.prototype.iuand = function iuand(num) {\n        var b;\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this.strip();\n      };\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      };\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length)\n          return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length)\n          return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      };\n      BN.prototype.iuxor = function iuxor(num) {\n        var a;\n        var b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = a.length;\n        return this.strip();\n      };\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      };\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length)\n          return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length)\n          return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      };\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        }\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 67108863;\n        }\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;\n        }\n        return this.strip();\n      };\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      };\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this.strip();\n      };\n      BN.prototype.iadd = function iadd(num) {\n        var r;\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign();\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        }\n        var a, b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++;\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        return this;\n      };\n      BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n        if (this.length > num.length)\n          return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      };\n      BN.prototype.isub = function isub(num) {\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign();\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        }\n        var cmp = this.cmp(num);\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        }\n        var a, b;\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n          this.negative = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n      function smallMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        var len = self2.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        var a = self2.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 67108863;\n        var carry = r / 67108864 | 0;\n        out.words[0] = lo;\n        for (var k = 1; k < len; k++) {\n          var ncarry = carry >>> 26;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self2.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 67108864 | 0;\n            rword = r & 67108863;\n          }\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      var comb10MulTo = function comb10MulTo2(self2, num, out) {\n        var a = self2.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 8191;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 8191;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 8191;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 8191;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 8191;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 8191;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 8191;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 8191;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 8191;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 8191;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 8191;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 8191;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 8191;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 8191;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 8191;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 8191;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 8191;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 8191;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 8191;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 8191;\n        var bh9 = b9 >>> 13;\n        out.negative = self2.negative ^ num.negative;\n        out.length = 19;\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 67108863;\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 67108863;\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 67108863;\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 67108863;\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 67108863;\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 67108863;\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 67108863;\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 67108863;\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 67108863;\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 67108863;\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 67108863;\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 67108863;\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 67108863;\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 67108863;\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 67108863;\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 67108863;\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 67108863;\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 67108863;\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 67108863;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n        return out;\n      };\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n      function bigMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        out.length = self2.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for (var k = 0; k < out.length - 1; k++) {\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self2.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 67108863;\n            ncarry = ncarry + (r / 67108864 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 67108863;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 67108863;\n          }\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      function jumboMulTo(self2, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self2, num, out);\n      }\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n        return res;\n      };\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n        return t;\n      };\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1)\n          return x;\n        var rb = 0;\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n        return rb;\n      };\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n        return 1 << i + 1 + odd;\n      };\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1)\n          return;\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 67108863;\n          if (w < 67108864) {\n            carry = 0;\n          } else {\n            carry = w / 67108864 | 0;\n          }\n        }\n        return ws;\n      };\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 8191;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 8191;\n          carry = carry >>> 13;\n        }\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~8191) === 0);\n      };\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n        return ph;\n      };\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n      };\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      };\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      };\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n      BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        var carry = 0;\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 67108863) + (carry & 67108863);\n          carry >>= 26;\n          carry += w / 67108864 | 0;\n          carry += lo >>> 26;\n          this.words[i] = lo & 67108863;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      };\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      };\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      };\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0)\n          return new BN(1);\n        var res = this;\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0)\n            break;\n        }\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0)\n              continue;\n            res = res.mul(q);\n          }\n        }\n        return res;\n      };\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 67108863 >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n          var carry = 0;\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n          this.length += s;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishln = function ishln(bits) {\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      };\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 67108863 ^ 67108863 >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n          maskedWords.length = s;\n        }\n        if (s === 0) {\n        } else if (this.length > s) {\n          this.length -= s;\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        }\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      };\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      };\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      };\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s)\n          return false;\n        var w = this.words[s];\n        return !!(w & q);\n      };\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n          return this;\n        }\n        if (r !== 0) {\n          s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n          var mask = 67108863 ^ 67108863 >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n        return this.strip();\n      };\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      };\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.isubn(-num);\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) < num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        }\n        return this._iaddn(num);\n      };\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {\n          this.words[i] -= 67108864;\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      };\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.iaddn(-num);\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 67108864;\n            this.words[i + 1] -= 1;\n          }\n        }\n        return this.strip();\n      };\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 67108863;\n          carry = (w >> 26) - (right / 67108864 | 0);\n          this.words[i + shift] = w & 67108863;\n        }\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 67108863;\n        }\n        if (carry === 0)\n          return this.strip();\n        assert(carry === -1);\n        carry = 0;\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 67108863;\n        }\n        this.negative = 1;\n        return this.strip();\n      };\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        }\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n          a = diff;\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);\n          qj = Math.min(qj / bhi | 0, 67108863);\n          a._ishlnsubmul(b, qj, j);\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n            a._ishlnsubmul(b, 1, j);\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n        if (q) {\n          q.strip();\n        }\n        a.strip();\n        if (mode !== \"div\" && shift !== 0) {\n          a.iushrn(shift);\n        }\n        return {\n          div: q || null,\n          mod: a\n        };\n      };\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n          return {\n            div,\n            mod\n          };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          return {\n            div,\n            mod: res.mod\n          };\n        }\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n          return {\n            div: res.div,\n            mod\n          };\n        }\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        }\n        if (num.length === 1) {\n          if (mode === \"div\") {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n          if (mode === \"mod\") {\n            return {\n              div: null,\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n        return this._wordDiv(num, mode);\n      };\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n      };\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n      };\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n      };\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        if (dm.mod.isZero())\n          return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        if (cmp < 0 || r2 === 1 && cmp === 0)\n          return dm.div;\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n      BN.prototype.modn = function modn(num) {\n        assert(num <= 67108863);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return acc;\n      };\n      BN.prototype.idivn = function idivn(num) {\n        assert(num <= 67108863);\n        var carry = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 67108864;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n        return this.strip();\n      };\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        }\n        var A = new BN(1);\n        var B = new BN(0);\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            x.iushrn(i);\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            y.iushrn(j);\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      };\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            a.iushrn(i);\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n              x1.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            b.iushrn(j);\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n              x2.iushrn(1);\n            }\n          }\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n        return res;\n      };\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero())\n          return num.abs();\n        if (num.isZero())\n          return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n          var r = a.cmp(b);\n          if (r < 0) {\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n          a.isub(b);\n        } while (true);\n        return b.iushln(shift);\n      };\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      };\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      };\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s) {\n          this._expand(s + 1);\n          this.words[s] |= q;\n          return this;\n        }\n        var carry = q;\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 67108863;\n          this.words[i] = w;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative)\n          return -1;\n        if (this.negative === 0 && negative)\n          return 1;\n        this.strip();\n        var res;\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n          assert(num <= 67108863, \"Number is too big\");\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0)\n          return -1;\n        if (this.negative === 0 && num.negative !== 0)\n          return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.ucmp = function ucmp(num) {\n        if (this.length > num.length)\n          return 1;\n        if (this.length < num.length)\n          return -1;\n        var res = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b)\n            continue;\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n          break;\n        }\n        return res;\n      };\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      };\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n      };\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n      };\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n      };\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n      };\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n      };\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n      };\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n      };\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n      };\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n      };\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n      };\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n      };\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n      };\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n      };\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n      };\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n      };\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function MPrime(name, p) {\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n      MPrime.prototype.ireduce = function ireduce(num) {\n        var r = num;\n        var rlen;\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== void 0) {\n            r.strip();\n          } else {\n            r._strip();\n          }\n        }\n        return r;\n      };\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n      function K256() {\n        MPrime.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      inherits(K256, MPrime);\n      K256.prototype.split = function split(input, output) {\n        var mask = 4194303;\n        var outLen = Math.min(input.length, 9);\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        }\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n      K256.prototype.imulK = function imulK(num) {\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        var lo = 0;\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 977;\n          num.words[i] = lo & 67108863;\n          lo = w * 64 + (lo / 67108864 | 0);\n        }\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n        return num;\n      };\n      function P224() {\n        MPrime.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      inherits(P224, MPrime);\n      function P192() {\n        MPrime.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      inherits(P192, MPrime);\n      function P25519() {\n        MPrime.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      inherits(P25519, MPrime);\n      P25519.prototype.imulK = function imulK(num) {\n        var carry = 0;\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 19 + carry;\n          var lo = hi & 67108863;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n        return num;\n      };\n      BN._prime = function prime(name) {\n        if (primes[name])\n          return primes[name];\n        var prime2;\n        if (name === \"k256\") {\n          prime2 = new K256();\n        } else if (name === \"p224\") {\n          prime2 = new P224();\n        } else if (name === \"p192\") {\n          prime2 = new P192();\n        } else if (name === \"p25519\") {\n          prime2 = new P25519();\n        } else {\n          throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime2;\n        return prime2;\n      };\n      function Red(m) {\n        if (typeof m === \"string\") {\n          var prime = BN._prime(m);\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), \"modulus must be greater than 1\");\n          this.m = m;\n          this.prime = null;\n        }\n      }\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n      };\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(\n          a.red && a.red === b.red,\n          \"red works only with red numbers\"\n        );\n      };\n      Red.prototype.imod = function imod(a) {\n        if (this.prime)\n          return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n      };\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n      };\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res;\n      };\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res;\n      };\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n      };\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n      };\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n      };\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero())\n          return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        }\n        var q = this.m.subn(1);\n        var s = 0;\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n        return r;\n      };\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero())\n          return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0)\n          return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n          start = 26;\n        }\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0))\n              continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n          start = 26;\n        }\n        return res;\n      };\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      };\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n      inherits(Mont, Red);\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero())\n          return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.invm = function invm(a) {\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(typeof module === \"undefined\" || module, exports);\n  }\n});\n\n// node_modules/safer-buffer/safer.js\nvar require_safer = __commonJS({\n  \"node_modules/safer-buffer/safer.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var buffer = require_buffer_polyfill();\n    var Buffer2 = buffer.Buffer;\n    var safer = {};\n    var key;\n    for (key in buffer) {\n      if (!buffer.hasOwnProperty(key))\n        continue;\n      if (key === \"SlowBuffer\" || key === \"Buffer\")\n        continue;\n      safer[key] = buffer[key];\n    }\n    var Safer = safer.Buffer = {};\n    for (key in Buffer2) {\n      if (!Buffer2.hasOwnProperty(key))\n        continue;\n      if (key === \"allocUnsafe\" || key === \"allocUnsafeSlow\")\n        continue;\n      Safer[key] = Buffer2[key];\n    }\n    safer.Buffer.prototype = Buffer2.prototype;\n    if (!Safer.from || Safer.from === Uint8Array.from) {\n      Safer.from = function(value, encodingOrOffset, length) {\n        if (typeof value === \"number\") {\n          throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value);\n        }\n        if (value && typeof value.length === \"undefined\") {\n          throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value);\n        }\n        return Buffer2(value, encodingOrOffset, length);\n      };\n    }\n    if (!Safer.alloc) {\n      Safer.alloc = function(size, fill, encoding) {\n        if (typeof size !== \"number\") {\n          throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size);\n        }\n        if (size < 0 || size >= 2 * (1 << 30)) {\n          throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n        }\n        var buf = Buffer2(size);\n        if (!fill || fill.length === 0) {\n          buf.fill(0);\n        } else if (typeof encoding === \"string\") {\n          buf.fill(fill, encoding);\n        } else {\n          buf.fill(fill);\n        }\n        return buf;\n      };\n    }\n    if (!safer.kStringMaxLength) {\n      try {\n        safer.kStringMaxLength = process.binding(\"buffer\").kStringMaxLength;\n      } catch (e) {\n      }\n    }\n    if (!safer.constants) {\n      safer.constants = {\n        MAX_LENGTH: safer.kMaxLength\n      };\n      if (safer.kStringMaxLength) {\n        safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;\n      }\n    }\n    module.exports = safer;\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/base/reporter.js\nvar require_reporter = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/base/reporter.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    function Reporter(options) {\n      this._reporterState = {\n        obj: null,\n        path: [],\n        options: options || {},\n        errors: []\n      };\n    }\n    exports.Reporter = Reporter;\n    Reporter.prototype.isError = function isError(obj) {\n      return obj instanceof ReporterError;\n    };\n    Reporter.prototype.save = function save() {\n      const state = this._reporterState;\n      return { obj: state.obj, pathLen: state.path.length };\n    };\n    Reporter.prototype.restore = function restore(data) {\n      const state = this._reporterState;\n      state.obj = data.obj;\n      state.path = state.path.slice(0, data.pathLen);\n    };\n    Reporter.prototype.enterKey = function enterKey(key) {\n      return this._reporterState.path.push(key);\n    };\n    Reporter.prototype.exitKey = function exitKey(index) {\n      const state = this._reporterState;\n      state.path = state.path.slice(0, index - 1);\n    };\n    Reporter.prototype.leaveKey = function leaveKey(index, key, value) {\n      const state = this._reporterState;\n      this.exitKey(index);\n      if (state.obj !== null)\n        state.obj[key] = value;\n    };\n    Reporter.prototype.path = function path() {\n      return this._reporterState.path.join(\"/\");\n    };\n    Reporter.prototype.enterObject = function enterObject() {\n      const state = this._reporterState;\n      const prev = state.obj;\n      state.obj = {};\n      return prev;\n    };\n    Reporter.prototype.leaveObject = function leaveObject(prev) {\n      const state = this._reporterState;\n      const now = state.obj;\n      state.obj = prev;\n      return now;\n    };\n    Reporter.prototype.error = function error(msg) {\n      let err;\n      const state = this._reporterState;\n      const inherited = msg instanceof ReporterError;\n      if (inherited) {\n        err = msg;\n      } else {\n        err = new ReporterError(state.path.map(function(elem) {\n          return \"[\" + JSON.stringify(elem) + \"]\";\n        }).join(\"\"), msg.message || msg, msg.stack);\n      }\n      if (!state.options.partial)\n        throw err;\n      if (!inherited)\n        state.errors.push(err);\n      return err;\n    };\n    Reporter.prototype.wrapResult = function wrapResult(result) {\n      const state = this._reporterState;\n      if (!state.options.partial)\n        return result;\n      return {\n        result: this.isError(result) ? null : result,\n        errors: state.errors\n      };\n    };\n    function ReporterError(path, msg) {\n      this.path = path;\n      this.rethrow(msg);\n    }\n    inherits(ReporterError, Error);\n    ReporterError.prototype.rethrow = function rethrow(msg) {\n      this.message = msg + \" at: \" + (this.path || \"(shallow)\");\n      if (Error.captureStackTrace)\n        Error.captureStackTrace(this, ReporterError);\n      if (!this.stack) {\n        try {\n          throw new Error(this.message);\n        } catch (e) {\n          this.stack = e.stack;\n        }\n      }\n      return this;\n    };\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/base/buffer.js\nvar require_buffer = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/base/buffer.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Reporter = require_reporter().Reporter;\n    var Buffer2 = require_safer().Buffer;\n    function DecoderBuffer(base, options) {\n      Reporter.call(this, options);\n      if (!Buffer2.isBuffer(base)) {\n        this.error(\"Input not Buffer\");\n        return;\n      }\n      this.base = base;\n      this.offset = 0;\n      this.length = base.length;\n    }\n    inherits(DecoderBuffer, Reporter);\n    exports.DecoderBuffer = DecoderBuffer;\n    DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {\n      if (data instanceof DecoderBuffer) {\n        return true;\n      }\n      const isCompatible = typeof data === \"object\" && Buffer2.isBuffer(data.base) && data.constructor.name === \"DecoderBuffer\" && typeof data.offset === \"number\" && typeof data.length === \"number\" && typeof data.save === \"function\" && typeof data.restore === \"function\" && typeof data.isEmpty === \"function\" && typeof data.readUInt8 === \"function\" && typeof data.skip === \"function\" && typeof data.raw === \"function\";\n      return isCompatible;\n    };\n    DecoderBuffer.prototype.save = function save() {\n      return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };\n    };\n    DecoderBuffer.prototype.restore = function restore(save) {\n      const res = new DecoderBuffer(this.base);\n      res.offset = save.offset;\n      res.length = this.offset;\n      this.offset = save.offset;\n      Reporter.prototype.restore.call(this, save.reporter);\n      return res;\n    };\n    DecoderBuffer.prototype.isEmpty = function isEmpty() {\n      return this.offset === this.length;\n    };\n    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {\n      if (this.offset + 1 <= this.length)\n        return this.base.readUInt8(this.offset++, true);\n      else\n        return this.error(fail || \"DecoderBuffer overrun\");\n    };\n    DecoderBuffer.prototype.skip = function skip(bytes, fail) {\n      if (!(this.offset + bytes <= this.length))\n        return this.error(fail || \"DecoderBuffer overrun\");\n      const res = new DecoderBuffer(this.base);\n      res._reporterState = this._reporterState;\n      res.offset = this.offset;\n      res.length = this.offset + bytes;\n      this.offset += bytes;\n      return res;\n    };\n    DecoderBuffer.prototype.raw = function raw(save) {\n      return this.base.slice(save ? save.offset : this.offset, this.length);\n    };\n    function EncoderBuffer(value, reporter) {\n      if (Array.isArray(value)) {\n        this.length = 0;\n        this.value = value.map(function(item) {\n          if (!EncoderBuffer.isEncoderBuffer(item))\n            item = new EncoderBuffer(item, reporter);\n          this.length += item.length;\n          return item;\n        }, this);\n      } else if (typeof value === \"number\") {\n        if (!(0 <= value && value <= 255))\n          return reporter.error(\"non-byte EncoderBuffer value\");\n        this.value = value;\n        this.length = 1;\n      } else if (typeof value === \"string\") {\n        this.value = value;\n        this.length = Buffer2.byteLength(value);\n      } else if (Buffer2.isBuffer(value)) {\n        this.value = value;\n        this.length = value.length;\n      } else {\n        return reporter.error(\"Unsupported type: \" + typeof value);\n      }\n    }\n    exports.EncoderBuffer = EncoderBuffer;\n    EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {\n      if (data instanceof EncoderBuffer) {\n        return true;\n      }\n      const isCompatible = typeof data === \"object\" && data.constructor.name === \"EncoderBuffer\" && typeof data.length === \"number\" && typeof data.join === \"function\";\n      return isCompatible;\n    };\n    EncoderBuffer.prototype.join = function join(out, offset) {\n      if (!out)\n        out = Buffer2.alloc(this.length);\n      if (!offset)\n        offset = 0;\n      if (this.length === 0)\n        return out;\n      if (Array.isArray(this.value)) {\n        this.value.forEach(function(item) {\n          item.join(out, offset);\n          offset += item.length;\n        });\n      } else {\n        if (typeof this.value === \"number\")\n          out[offset] = this.value;\n        else if (typeof this.value === \"string\")\n          out.write(this.value, offset);\n        else if (Buffer2.isBuffer(this.value))\n          this.value.copy(out, offset);\n        offset += this.length;\n      }\n      return out;\n    };\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/base/node.js\nvar require_node = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/base/node.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var Reporter = require_reporter().Reporter;\n    var EncoderBuffer = require_buffer().EncoderBuffer;\n    var DecoderBuffer = require_buffer().DecoderBuffer;\n    var assert = require_minimalistic_assert();\n    var tags = [\n      \"seq\",\n      \"seqof\",\n      \"set\",\n      \"setof\",\n      \"objid\",\n      \"bool\",\n      \"gentime\",\n      \"utctime\",\n      \"null_\",\n      \"enum\",\n      \"int\",\n      \"objDesc\",\n      \"bitstr\",\n      \"bmpstr\",\n      \"charstr\",\n      \"genstr\",\n      \"graphstr\",\n      \"ia5str\",\n      \"iso646str\",\n      \"numstr\",\n      \"octstr\",\n      \"printstr\",\n      \"t61str\",\n      \"unistr\",\n      \"utf8str\",\n      \"videostr\"\n    ];\n    var methods = [\n      \"key\",\n      \"obj\",\n      \"use\",\n      \"optional\",\n      \"explicit\",\n      \"implicit\",\n      \"def\",\n      \"choice\",\n      \"any\",\n      \"contains\"\n    ].concat(tags);\n    var overrided = [\n      \"_peekTag\",\n      \"_decodeTag\",\n      \"_use\",\n      \"_decodeStr\",\n      \"_decodeObjid\",\n      \"_decodeTime\",\n      \"_decodeNull\",\n      \"_decodeInt\",\n      \"_decodeBool\",\n      \"_decodeList\",\n      \"_encodeComposite\",\n      \"_encodeStr\",\n      \"_encodeObjid\",\n      \"_encodeTime\",\n      \"_encodeNull\",\n      \"_encodeInt\",\n      \"_encodeBool\"\n    ];\n    function Node(enc, parent, name) {\n      const state = {};\n      this._baseState = state;\n      state.name = name;\n      state.enc = enc;\n      state.parent = parent || null;\n      state.children = null;\n      state.tag = null;\n      state.args = null;\n      state.reverseArgs = null;\n      state.choice = null;\n      state.optional = false;\n      state.any = false;\n      state.obj = false;\n      state.use = null;\n      state.useDecoder = null;\n      state.key = null;\n      state[\"default\"] = null;\n      state.explicit = null;\n      state.implicit = null;\n      state.contains = null;\n      if (!state.parent) {\n        state.children = [];\n        this._wrap();\n      }\n    }\n    module.exports = Node;\n    var stateProps = [\n      \"enc\",\n      \"parent\",\n      \"children\",\n      \"tag\",\n      \"args\",\n      \"reverseArgs\",\n      \"choice\",\n      \"optional\",\n      \"any\",\n      \"obj\",\n      \"use\",\n      \"alteredUse\",\n      \"key\",\n      \"default\",\n      \"explicit\",\n      \"implicit\",\n      \"contains\"\n    ];\n    Node.prototype.clone = function clone() {\n      const state = this._baseState;\n      const cstate = {};\n      stateProps.forEach(function(prop) {\n        cstate[prop] = state[prop];\n      });\n      const res = new this.constructor(cstate.parent);\n      res._baseState = cstate;\n      return res;\n    };\n    Node.prototype._wrap = function wrap() {\n      const state = this._baseState;\n      methods.forEach(function(method) {\n        this[method] = function _wrappedMethod() {\n          const clone = new this.constructor(this);\n          state.children.push(clone);\n          return clone[method].apply(clone, arguments);\n        };\n      }, this);\n    };\n    Node.prototype._init = function init(body) {\n      const state = this._baseState;\n      assert(state.parent === null);\n      body.call(this);\n      state.children = state.children.filter(function(child) {\n        return child._baseState.parent === this;\n      }, this);\n      assert.equal(state.children.length, 1, \"Root node can have only one child\");\n    };\n    Node.prototype._useArgs = function useArgs(args) {\n      const state = this._baseState;\n      const children = args.filter(function(arg) {\n        return arg instanceof this.constructor;\n      }, this);\n      args = args.filter(function(arg) {\n        return !(arg instanceof this.constructor);\n      }, this);\n      if (children.length !== 0) {\n        assert(state.children === null);\n        state.children = children;\n        children.forEach(function(child) {\n          child._baseState.parent = this;\n        }, this);\n      }\n      if (args.length !== 0) {\n        assert(state.args === null);\n        state.args = args;\n        state.reverseArgs = args.map(function(arg) {\n          if (typeof arg !== \"object\" || arg.constructor !== Object)\n            return arg;\n          const res = {};\n          Object.keys(arg).forEach(function(key) {\n            if (key == (key | 0))\n              key |= 0;\n            const value = arg[key];\n            res[value] = key;\n          });\n          return res;\n        });\n      }\n    };\n    overrided.forEach(function(method) {\n      Node.prototype[method] = function _overrided() {\n        const state = this._baseState;\n        throw new Error(method + \" not implemented for encoding: \" + state.enc);\n      };\n    });\n    tags.forEach(function(tag) {\n      Node.prototype[tag] = function _tagMethod() {\n        const state = this._baseState;\n        const args = Array.prototype.slice.call(arguments);\n        assert(state.tag === null);\n        state.tag = tag;\n        this._useArgs(args);\n        return this;\n      };\n    });\n    Node.prototype.use = function use(item) {\n      assert(item);\n      const state = this._baseState;\n      assert(state.use === null);\n      state.use = item;\n      return this;\n    };\n    Node.prototype.optional = function optional() {\n      const state = this._baseState;\n      state.optional = true;\n      return this;\n    };\n    Node.prototype.def = function def(val) {\n      const state = this._baseState;\n      assert(state[\"default\"] === null);\n      state[\"default\"] = val;\n      state.optional = true;\n      return this;\n    };\n    Node.prototype.explicit = function explicit(num) {\n      const state = this._baseState;\n      assert(state.explicit === null && state.implicit === null);\n      state.explicit = num;\n      return this;\n    };\n    Node.prototype.implicit = function implicit(num) {\n      const state = this._baseState;\n      assert(state.explicit === null && state.implicit === null);\n      state.implicit = num;\n      return this;\n    };\n    Node.prototype.obj = function obj() {\n      const state = this._baseState;\n      const args = Array.prototype.slice.call(arguments);\n      state.obj = true;\n      if (args.length !== 0)\n        this._useArgs(args);\n      return this;\n    };\n    Node.prototype.key = function key(newKey) {\n      const state = this._baseState;\n      assert(state.key === null);\n      state.key = newKey;\n      return this;\n    };\n    Node.prototype.any = function any() {\n      const state = this._baseState;\n      state.any = true;\n      return this;\n    };\n    Node.prototype.choice = function choice(obj) {\n      const state = this._baseState;\n      assert(state.choice === null);\n      state.choice = obj;\n      this._useArgs(Object.keys(obj).map(function(key) {\n        return obj[key];\n      }));\n      return this;\n    };\n    Node.prototype.contains = function contains(item) {\n      const state = this._baseState;\n      assert(state.use === null);\n      state.contains = item;\n      return this;\n    };\n    Node.prototype._decode = function decode(input, options) {\n      const state = this._baseState;\n      if (state.parent === null)\n        return input.wrapResult(state.children[0]._decode(input, options));\n      let result = state[\"default\"];\n      let present = true;\n      let prevKey = null;\n      if (state.key !== null)\n        prevKey = input.enterKey(state.key);\n      if (state.optional) {\n        let tag = null;\n        if (state.explicit !== null)\n          tag = state.explicit;\n        else if (state.implicit !== null)\n          tag = state.implicit;\n        else if (state.tag !== null)\n          tag = state.tag;\n        if (tag === null && !state.any) {\n          const save = input.save();\n          try {\n            if (state.choice === null)\n              this._decodeGeneric(state.tag, input, options);\n            else\n              this._decodeChoice(input, options);\n            present = true;\n          } catch (e) {\n            present = false;\n          }\n          input.restore(save);\n        } else {\n          present = this._peekTag(input, tag, state.any);\n          if (input.isError(present))\n            return present;\n        }\n      }\n      let prevObj;\n      if (state.obj && present)\n        prevObj = input.enterObject();\n      if (present) {\n        if (state.explicit !== null) {\n          const explicit = this._decodeTag(input, state.explicit);\n          if (input.isError(explicit))\n            return explicit;\n          input = explicit;\n        }\n        const start = input.offset;\n        if (state.use === null && state.choice === null) {\n          let save;\n          if (state.any)\n            save = input.save();\n          const body = this._decodeTag(\n            input,\n            state.implicit !== null ? state.implicit : state.tag,\n            state.any\n          );\n          if (input.isError(body))\n            return body;\n          if (state.any)\n            result = input.raw(save);\n          else\n            input = body;\n        }\n        if (options && options.track && state.tag !== null)\n          options.track(input.path(), start, input.length, \"tagged\");\n        if (options && options.track && state.tag !== null)\n          options.track(input.path(), input.offset, input.length, \"content\");\n        if (state.any) {\n        } else if (state.choice === null) {\n          result = this._decodeGeneric(state.tag, input, options);\n        } else {\n          result = this._decodeChoice(input, options);\n        }\n        if (input.isError(result))\n          return result;\n        if (!state.any && state.choice === null && state.children !== null) {\n          state.children.forEach(function decodeChildren(child) {\n            child._decode(input, options);\n          });\n        }\n        if (state.contains && (state.tag === \"octstr\" || state.tag === \"bitstr\")) {\n          const data = new DecoderBuffer(result);\n          result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);\n        }\n      }\n      if (state.obj && present)\n        result = input.leaveObject(prevObj);\n      if (state.key !== null && (result !== null || present === true))\n        input.leaveKey(prevKey, state.key, result);\n      else if (prevKey !== null)\n        input.exitKey(prevKey);\n      return result;\n    };\n    Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {\n      const state = this._baseState;\n      if (tag === \"seq\" || tag === \"set\")\n        return null;\n      if (tag === \"seqof\" || tag === \"setof\")\n        return this._decodeList(input, tag, state.args[0], options);\n      else if (/str$/.test(tag))\n        return this._decodeStr(input, tag, options);\n      else if (tag === \"objid\" && state.args)\n        return this._decodeObjid(input, state.args[0], state.args[1], options);\n      else if (tag === \"objid\")\n        return this._decodeObjid(input, null, null, options);\n      else if (tag === \"gentime\" || tag === \"utctime\")\n        return this._decodeTime(input, tag, options);\n      else if (tag === \"null_\")\n        return this._decodeNull(input, options);\n      else if (tag === \"bool\")\n        return this._decodeBool(input, options);\n      else if (tag === \"objDesc\")\n        return this._decodeStr(input, tag, options);\n      else if (tag === \"int\" || tag === \"enum\")\n        return this._decodeInt(input, state.args && state.args[0], options);\n      if (state.use !== null) {\n        return this._getUse(state.use, input._reporterState.obj)._decode(input, options);\n      } else {\n        return input.error(\"unknown tag: \" + tag);\n      }\n    };\n    Node.prototype._getUse = function _getUse(entity, obj) {\n      const state = this._baseState;\n      state.useDecoder = this._use(entity, obj);\n      assert(state.useDecoder._baseState.parent === null);\n      state.useDecoder = state.useDecoder._baseState.children[0];\n      if (state.implicit !== state.useDecoder._baseState.implicit) {\n        state.useDecoder = state.useDecoder.clone();\n        state.useDecoder._baseState.implicit = state.implicit;\n      }\n      return state.useDecoder;\n    };\n    Node.prototype._decodeChoice = function decodeChoice(input, options) {\n      const state = this._baseState;\n      let result = null;\n      let match = false;\n      Object.keys(state.choice).some(function(key) {\n        const save = input.save();\n        const node = state.choice[key];\n        try {\n          const value = node._decode(input, options);\n          if (input.isError(value))\n            return false;\n          result = { type: key, value };\n          match = true;\n        } catch (e) {\n          input.restore(save);\n          return false;\n        }\n        return true;\n      }, this);\n      if (!match)\n        return input.error(\"Choice not matched\");\n      return result;\n    };\n    Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {\n      return new EncoderBuffer(data, this.reporter);\n    };\n    Node.prototype._encode = function encode(data, reporter, parent) {\n      const state = this._baseState;\n      if (state[\"default\"] !== null && state[\"default\"] === data)\n        return;\n      const result = this._encodeValue(data, reporter, parent);\n      if (result === void 0)\n        return;\n      if (this._skipDefault(result, reporter, parent))\n        return;\n      return result;\n    };\n    Node.prototype._encodeValue = function encode(data, reporter, parent) {\n      const state = this._baseState;\n      if (state.parent === null)\n        return state.children[0]._encode(data, reporter || new Reporter());\n      let result = null;\n      this.reporter = reporter;\n      if (state.optional && data === void 0) {\n        if (state[\"default\"] !== null)\n          data = state[\"default\"];\n        else\n          return;\n      }\n      let content = null;\n      let primitive = false;\n      if (state.any) {\n        result = this._createEncoderBuffer(data);\n      } else if (state.choice) {\n        result = this._encodeChoice(data, reporter);\n      } else if (state.contains) {\n        content = this._getUse(state.contains, parent)._encode(data, reporter);\n        primitive = true;\n      } else if (state.children) {\n        content = state.children.map(function(child) {\n          if (child._baseState.tag === \"null_\")\n            return child._encode(null, reporter, data);\n          if (child._baseState.key === null)\n            return reporter.error(\"Child should have a key\");\n          const prevKey = reporter.enterKey(child._baseState.key);\n          if (typeof data !== \"object\")\n            return reporter.error(\"Child expected, but input is not object\");\n          const res = child._encode(data[child._baseState.key], reporter, data);\n          reporter.leaveKey(prevKey);\n          return res;\n        }, this).filter(function(child) {\n          return child;\n        });\n        content = this._createEncoderBuffer(content);\n      } else {\n        if (state.tag === \"seqof\" || state.tag === \"setof\") {\n          if (!(state.args && state.args.length === 1))\n            return reporter.error(\"Too many args for : \" + state.tag);\n          if (!Array.isArray(data))\n            return reporter.error(\"seqof/setof, but data is not Array\");\n          const child = this.clone();\n          child._baseState.implicit = null;\n          content = this._createEncoderBuffer(data.map(function(item) {\n            const state2 = this._baseState;\n            return this._getUse(state2.args[0], data)._encode(item, reporter);\n          }, child));\n        } else if (state.use !== null) {\n          result = this._getUse(state.use, parent)._encode(data, reporter);\n        } else {\n          content = this._encodePrimitive(state.tag, data);\n          primitive = true;\n        }\n      }\n      if (!state.any && state.choice === null) {\n        const tag = state.implicit !== null ? state.implicit : state.tag;\n        const cls = state.implicit === null ? \"universal\" : \"context\";\n        if (tag === null) {\n          if (state.use === null)\n            reporter.error(\"Tag could be omitted only for .use()\");\n        } else {\n          if (state.use === null)\n            result = this._encodeComposite(tag, primitive, cls, content);\n        }\n      }\n      if (state.explicit !== null)\n        result = this._encodeComposite(state.explicit, false, \"context\", result);\n      return result;\n    };\n    Node.prototype._encodeChoice = function encodeChoice(data, reporter) {\n      const state = this._baseState;\n      const node = state.choice[data.type];\n      if (!node) {\n        assert(\n          false,\n          data.type + \" not found in \" + JSON.stringify(Object.keys(state.choice))\n        );\n      }\n      return node._encode(data.value, reporter);\n    };\n    Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {\n      const state = this._baseState;\n      if (/str$/.test(tag))\n        return this._encodeStr(data, tag);\n      else if (tag === \"objid\" && state.args)\n        return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);\n      else if (tag === \"objid\")\n        return this._encodeObjid(data, null, null);\n      else if (tag === \"gentime\" || tag === \"utctime\")\n        return this._encodeTime(data, tag);\n      else if (tag === \"null_\")\n        return this._encodeNull();\n      else if (tag === \"int\" || tag === \"enum\")\n        return this._encodeInt(data, state.args && state.reverseArgs[0]);\n      else if (tag === \"bool\")\n        return this._encodeBool(data);\n      else if (tag === \"objDesc\")\n        return this._encodeStr(data, tag);\n      else\n        throw new Error(\"Unsupported tag: \" + tag);\n    };\n    Node.prototype._isNumstr = function isNumstr(str) {\n      return /^[0-9 ]*$/.test(str);\n    };\n    Node.prototype._isPrintstr = function isPrintstr(str) {\n      return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);\n    };\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/constants/der.js\nvar require_der = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/constants/der.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    function reverse(map) {\n      const res = {};\n      Object.keys(map).forEach(function(key) {\n        if ((key | 0) == key)\n          key = key | 0;\n        const value = map[key];\n        res[value] = key;\n      });\n      return res;\n    }\n    exports.tagClass = {\n      0: \"universal\",\n      1: \"application\",\n      2: \"context\",\n      3: \"private\"\n    };\n    exports.tagClassByName = reverse(exports.tagClass);\n    exports.tag = {\n      0: \"end\",\n      1: \"bool\",\n      2: \"int\",\n      3: \"bitstr\",\n      4: \"octstr\",\n      5: \"null_\",\n      6: \"objid\",\n      7: \"objDesc\",\n      8: \"external\",\n      9: \"real\",\n      10: \"enum\",\n      11: \"embed\",\n      12: \"utf8str\",\n      13: \"relativeOid\",\n      16: \"seq\",\n      17: \"set\",\n      18: \"numstr\",\n      19: \"printstr\",\n      20: \"t61str\",\n      21: \"videostr\",\n      22: \"ia5str\",\n      23: \"utctime\",\n      24: \"gentime\",\n      25: \"graphstr\",\n      26: \"iso646str\",\n      27: \"genstr\",\n      28: \"unistr\",\n      29: \"charstr\",\n      30: \"bmpstr\"\n    };\n    exports.tagByName = reverse(exports.tag);\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/encoders/der.js\nvar require_der2 = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/encoders/der.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Buffer2 = require_safer().Buffer;\n    var Node = require_node();\n    var der = require_der();\n    function DEREncoder(entity) {\n      this.enc = \"der\";\n      this.name = entity.name;\n      this.entity = entity;\n      this.tree = new DERNode();\n      this.tree._init(entity.body);\n    }\n    module.exports = DEREncoder;\n    DEREncoder.prototype.encode = function encode(data, reporter) {\n      return this.tree._encode(data, reporter).join();\n    };\n    function DERNode(parent) {\n      Node.call(this, \"der\", parent);\n    }\n    inherits(DERNode, Node);\n    DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {\n      const encodedTag = encodeTag(tag, primitive, cls, this.reporter);\n      if (content.length < 128) {\n        const header2 = Buffer2.alloc(2);\n        header2[0] = encodedTag;\n        header2[1] = content.length;\n        return this._createEncoderBuffer([header2, content]);\n      }\n      let lenOctets = 1;\n      for (let i = content.length; i >= 256; i >>= 8)\n        lenOctets++;\n      const header = Buffer2.alloc(1 + 1 + lenOctets);\n      header[0] = encodedTag;\n      header[1] = 128 | lenOctets;\n      for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)\n        header[i] = j & 255;\n      return this._createEncoderBuffer([header, content]);\n    };\n    DERNode.prototype._encodeStr = function encodeStr(str, tag) {\n      if (tag === \"bitstr\") {\n        return this._createEncoderBuffer([str.unused | 0, str.data]);\n      } else if (tag === \"bmpstr\") {\n        const buf = Buffer2.alloc(str.length * 2);\n        for (let i = 0; i < str.length; i++) {\n          buf.writeUInt16BE(str.charCodeAt(i), i * 2);\n        }\n        return this._createEncoderBuffer(buf);\n      } else if (tag === \"numstr\") {\n        if (!this._isNumstr(str)) {\n          return this.reporter.error(\"Encoding of string type: numstr supports only digits and space\");\n        }\n        return this._createEncoderBuffer(str);\n      } else if (tag === \"printstr\") {\n        if (!this._isPrintstr(str)) {\n          return this.reporter.error(\"Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark\");\n        }\n        return this._createEncoderBuffer(str);\n      } else if (/str$/.test(tag)) {\n        return this._createEncoderBuffer(str);\n      } else if (tag === \"objDesc\") {\n        return this._createEncoderBuffer(str);\n      } else {\n        return this.reporter.error(\"Encoding of string type: \" + tag + \" unsupported\");\n      }\n    };\n    DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {\n      if (typeof id === \"string\") {\n        if (!values)\n          return this.reporter.error(\"string objid given, but no values map found\");\n        if (!values.hasOwnProperty(id))\n          return this.reporter.error(\"objid not found in values map\");\n        id = values[id].split(/[\\s.]+/g);\n        for (let i = 0; i < id.length; i++)\n          id[i] |= 0;\n      } else if (Array.isArray(id)) {\n        id = id.slice();\n        for (let i = 0; i < id.length; i++)\n          id[i] |= 0;\n      }\n      if (!Array.isArray(id)) {\n        return this.reporter.error(\"objid() should be either array or string, got: \" + JSON.stringify(id));\n      }\n      if (!relative) {\n        if (id[1] >= 40)\n          return this.reporter.error(\"Second objid identifier OOB\");\n        id.splice(0, 2, id[0] * 40 + id[1]);\n      }\n      let size = 0;\n      for (let i = 0; i < id.length; i++) {\n        let ident = id[i];\n        for (size++; ident >= 128; ident >>= 7)\n          size++;\n      }\n      const objid = Buffer2.alloc(size);\n      let offset = objid.length - 1;\n      for (let i = id.length - 1; i >= 0; i--) {\n        let ident = id[i];\n        objid[offset--] = ident & 127;\n        while ((ident >>= 7) > 0)\n          objid[offset--] = 128 | ident & 127;\n      }\n      return this._createEncoderBuffer(objid);\n    };\n    function two(num) {\n      if (num < 10)\n        return \"0\" + num;\n      else\n        return num;\n    }\n    DERNode.prototype._encodeTime = function encodeTime(time, tag) {\n      let str;\n      const date = new Date(time);\n      if (tag === \"gentime\") {\n        str = [\n          two(date.getUTCFullYear()),\n          two(date.getUTCMonth() + 1),\n          two(date.getUTCDate()),\n          two(date.getUTCHours()),\n          two(date.getUTCMinutes()),\n          two(date.getUTCSeconds()),\n          \"Z\"\n        ].join(\"\");\n      } else if (tag === \"utctime\") {\n        str = [\n          two(date.getUTCFullYear() % 100),\n          two(date.getUTCMonth() + 1),\n          two(date.getUTCDate()),\n          two(date.getUTCHours()),\n          two(date.getUTCMinutes()),\n          two(date.getUTCSeconds()),\n          \"Z\"\n        ].join(\"\");\n      } else {\n        this.reporter.error(\"Encoding \" + tag + \" time is not supported yet\");\n      }\n      return this._encodeStr(str, \"octstr\");\n    };\n    DERNode.prototype._encodeNull = function encodeNull() {\n      return this._createEncoderBuffer(\"\");\n    };\n    DERNode.prototype._encodeInt = function encodeInt(num, values) {\n      if (typeof num === \"string\") {\n        if (!values)\n          return this.reporter.error(\"String int or enum given, but no values map\");\n        if (!values.hasOwnProperty(num)) {\n          return this.reporter.error(\"Values map doesn't contain: \" + JSON.stringify(num));\n        }\n        num = values[num];\n      }\n      if (typeof num !== \"number\" && !Buffer2.isBuffer(num)) {\n        const numArray = num.toArray();\n        if (!num.sign && numArray[0] & 128) {\n          numArray.unshift(0);\n        }\n        num = Buffer2.from(numArray);\n      }\n      if (Buffer2.isBuffer(num)) {\n        let size2 = num.length;\n        if (num.length === 0)\n          size2++;\n        const out2 = Buffer2.alloc(size2);\n        num.copy(out2);\n        if (num.length === 0)\n          out2[0] = 0;\n        return this._createEncoderBuffer(out2);\n      }\n      if (num < 128)\n        return this._createEncoderBuffer(num);\n      if (num < 256)\n        return this._createEncoderBuffer([0, num]);\n      let size = 1;\n      for (let i = num; i >= 256; i >>= 8)\n        size++;\n      const out = new Array(size);\n      for (let i = out.length - 1; i >= 0; i--) {\n        out[i] = num & 255;\n        num >>= 8;\n      }\n      if (out[0] & 128) {\n        out.unshift(0);\n      }\n      return this._createEncoderBuffer(Buffer2.from(out));\n    };\n    DERNode.prototype._encodeBool = function encodeBool(value) {\n      return this._createEncoderBuffer(value ? 255 : 0);\n    };\n    DERNode.prototype._use = function use(entity, obj) {\n      if (typeof entity === \"function\")\n        entity = entity(obj);\n      return entity._getEncoder(\"der\").tree;\n    };\n    DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {\n      const state = this._baseState;\n      let i;\n      if (state[\"default\"] === null)\n        return false;\n      const data = dataBuffer.join();\n      if (state.defaultBuffer === void 0)\n        state.defaultBuffer = this._encodeValue(state[\"default\"], reporter, parent).join();\n      if (data.length !== state.defaultBuffer.length)\n        return false;\n      for (i = 0; i < data.length; i++)\n        if (data[i] !== state.defaultBuffer[i])\n          return false;\n      return true;\n    };\n    function encodeTag(tag, primitive, cls, reporter) {\n      let res;\n      if (tag === \"seqof\")\n        tag = \"seq\";\n      else if (tag === \"setof\")\n        tag = \"set\";\n      if (der.tagByName.hasOwnProperty(tag))\n        res = der.tagByName[tag];\n      else if (typeof tag === \"number\" && (tag | 0) === tag)\n        res = tag;\n      else\n        return reporter.error(\"Unknown tag: \" + tag);\n      if (res >= 31)\n        return reporter.error(\"Multi-octet tag encoding unsupported\");\n      if (!primitive)\n        res |= 32;\n      res |= der.tagClassByName[cls || \"universal\"] << 6;\n      return res;\n    }\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/encoders/pem.js\nvar require_pem = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/encoders/pem.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var DEREncoder = require_der2();\n    function PEMEncoder(entity) {\n      DEREncoder.call(this, entity);\n      this.enc = \"pem\";\n    }\n    inherits(PEMEncoder, DEREncoder);\n    module.exports = PEMEncoder;\n    PEMEncoder.prototype.encode = function encode(data, options) {\n      const buf = DEREncoder.prototype.encode.call(this, data);\n      const p = buf.toString(\"base64\");\n      const out = [\"-----BEGIN \" + options.label + \"-----\"];\n      for (let i = 0; i < p.length; i += 64)\n        out.push(p.slice(i, i + 64));\n      out.push(\"-----END \" + options.label + \"-----\");\n      return out.join(\"\\n\");\n    };\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/encoders/index.js\nvar require_encoders = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/encoders/index.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var encoders = exports;\n    encoders.der = require_der2();\n    encoders.pem = require_pem();\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/decoders/der.js\nvar require_der3 = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/decoders/der.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var bignum = require_bn5();\n    var DecoderBuffer = require_buffer().DecoderBuffer;\n    var Node = require_node();\n    var der = require_der();\n    function DERDecoder(entity) {\n      this.enc = \"der\";\n      this.name = entity.name;\n      this.entity = entity;\n      this.tree = new DERNode();\n      this.tree._init(entity.body);\n    }\n    module.exports = DERDecoder;\n    DERDecoder.prototype.decode = function decode(data, options) {\n      if (!DecoderBuffer.isDecoderBuffer(data)) {\n        data = new DecoderBuffer(data, options);\n      }\n      return this.tree._decode(data, options);\n    };\n    function DERNode(parent) {\n      Node.call(this, \"der\", parent);\n    }\n    inherits(DERNode, Node);\n    DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {\n      if (buffer.isEmpty())\n        return false;\n      const state = buffer.save();\n      const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: \"' + tag + '\"');\n      if (buffer.isError(decodedTag))\n        return decodedTag;\n      buffer.restore(state);\n      return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + \"of\" === tag || any;\n    };\n    DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {\n      const decodedTag = derDecodeTag(\n        buffer,\n        'Failed to decode tag of \"' + tag + '\"'\n      );\n      if (buffer.isError(decodedTag))\n        return decodedTag;\n      let len = derDecodeLen(\n        buffer,\n        decodedTag.primitive,\n        'Failed to get length of \"' + tag + '\"'\n      );\n      if (buffer.isError(len))\n        return len;\n      if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + \"of\" !== tag) {\n        return buffer.error('Failed to match tag: \"' + tag + '\"');\n      }\n      if (decodedTag.primitive || len !== null)\n        return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n      const state = buffer.save();\n      const res = this._skipUntilEnd(\n        buffer,\n        'Failed to skip indefinite length body: \"' + this.tag + '\"'\n      );\n      if (buffer.isError(res))\n        return res;\n      len = buffer.offset - state.offset;\n      buffer.restore(state);\n      return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n    };\n    DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {\n      for (; ; ) {\n        const tag = derDecodeTag(buffer, fail);\n        if (buffer.isError(tag))\n          return tag;\n        const len = derDecodeLen(buffer, tag.primitive, fail);\n        if (buffer.isError(len))\n          return len;\n        let res;\n        if (tag.primitive || len !== null)\n          res = buffer.skip(len);\n        else\n          res = this._skipUntilEnd(buffer, fail);\n        if (buffer.isError(res))\n          return res;\n        if (tag.tagStr === \"end\")\n          break;\n      }\n    };\n    DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {\n      const result = [];\n      while (!buffer.isEmpty()) {\n        const possibleEnd = this._peekTag(buffer, \"end\");\n        if (buffer.isError(possibleEnd))\n          return possibleEnd;\n        const res = decoder.decode(buffer, \"der\", options);\n        if (buffer.isError(res) && possibleEnd)\n          break;\n        result.push(res);\n      }\n      return result;\n    };\n    DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {\n      if (tag === \"bitstr\") {\n        const unused = buffer.readUInt8();\n        if (buffer.isError(unused))\n          return unused;\n        return { unused, data: buffer.raw() };\n      } else if (tag === \"bmpstr\") {\n        const raw = buffer.raw();\n        if (raw.length % 2 === 1)\n          return buffer.error(\"Decoding of string type: bmpstr length mismatch\");\n        let str = \"\";\n        for (let i = 0; i < raw.length / 2; i++) {\n          str += String.fromCharCode(raw.readUInt16BE(i * 2));\n        }\n        return str;\n      } else if (tag === \"numstr\") {\n        const numstr = buffer.raw().toString(\"ascii\");\n        if (!this._isNumstr(numstr)) {\n          return buffer.error(\"Decoding of string type: numstr unsupported characters\");\n        }\n        return numstr;\n      } else if (tag === \"octstr\") {\n        return buffer.raw();\n      } else if (tag === \"objDesc\") {\n        return buffer.raw();\n      } else if (tag === \"printstr\") {\n        const printstr = buffer.raw().toString(\"ascii\");\n        if (!this._isPrintstr(printstr)) {\n          return buffer.error(\"Decoding of string type: printstr unsupported characters\");\n        }\n        return printstr;\n      } else if (/str$/.test(tag)) {\n        return buffer.raw().toString();\n      } else {\n        return buffer.error(\"Decoding of string type: \" + tag + \" unsupported\");\n      }\n    };\n    DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {\n      let result;\n      const identifiers = [];\n      let ident = 0;\n      let subident = 0;\n      while (!buffer.isEmpty()) {\n        subident = buffer.readUInt8();\n        ident <<= 7;\n        ident |= subident & 127;\n        if ((subident & 128) === 0) {\n          identifiers.push(ident);\n          ident = 0;\n        }\n      }\n      if (subident & 128)\n        identifiers.push(ident);\n      const first = identifiers[0] / 40 | 0;\n      const second = identifiers[0] % 40;\n      if (relative)\n        result = identifiers;\n      else\n        result = [first, second].concat(identifiers.slice(1));\n      if (values) {\n        let tmp = values[result.join(\" \")];\n        if (tmp === void 0)\n          tmp = values[result.join(\".\")];\n        if (tmp !== void 0)\n          result = tmp;\n      }\n      return result;\n    };\n    DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {\n      const str = buffer.raw().toString();\n      let year;\n      let mon;\n      let day;\n      let hour;\n      let min;\n      let sec;\n      if (tag === \"gentime\") {\n        year = str.slice(0, 4) | 0;\n        mon = str.slice(4, 6) | 0;\n        day = str.slice(6, 8) | 0;\n        hour = str.slice(8, 10) | 0;\n        min = str.slice(10, 12) | 0;\n        sec = str.slice(12, 14) | 0;\n      } else if (tag === \"utctime\") {\n        year = str.slice(0, 2) | 0;\n        mon = str.slice(2, 4) | 0;\n        day = str.slice(4, 6) | 0;\n        hour = str.slice(6, 8) | 0;\n        min = str.slice(8, 10) | 0;\n        sec = str.slice(10, 12) | 0;\n        if (year < 70)\n          year = 2e3 + year;\n        else\n          year = 1900 + year;\n      } else {\n        return buffer.error(\"Decoding \" + tag + \" time is not supported yet\");\n      }\n      return Date.UTC(year, mon - 1, day, hour, min, sec, 0);\n    };\n    DERNode.prototype._decodeNull = function decodeNull() {\n      return null;\n    };\n    DERNode.prototype._decodeBool = function decodeBool(buffer) {\n      const res = buffer.readUInt8();\n      if (buffer.isError(res))\n        return res;\n      else\n        return res !== 0;\n    };\n    DERNode.prototype._decodeInt = function decodeInt(buffer, values) {\n      const raw = buffer.raw();\n      let res = new bignum(raw);\n      if (values)\n        res = values[res.toString(10)] || res;\n      return res;\n    };\n    DERNode.prototype._use = function use(entity, obj) {\n      if (typeof entity === \"function\")\n        entity = entity(obj);\n      return entity._getDecoder(\"der\").tree;\n    };\n    function derDecodeTag(buf, fail) {\n      let tag = buf.readUInt8(fail);\n      if (buf.isError(tag))\n        return tag;\n      const cls = der.tagClass[tag >> 6];\n      const primitive = (tag & 32) === 0;\n      if ((tag & 31) === 31) {\n        let oct = tag;\n        tag = 0;\n        while ((oct & 128) === 128) {\n          oct = buf.readUInt8(fail);\n          if (buf.isError(oct))\n            return oct;\n          tag <<= 7;\n          tag |= oct & 127;\n        }\n      } else {\n        tag &= 31;\n      }\n      const tagStr = der.tag[tag];\n      return {\n        cls,\n        primitive,\n        tag,\n        tagStr\n      };\n    }\n    function derDecodeLen(buf, primitive, fail) {\n      let len = buf.readUInt8(fail);\n      if (buf.isError(len))\n        return len;\n      if (!primitive && len === 128)\n        return null;\n      if ((len & 128) === 0) {\n        return len;\n      }\n      const num = len & 127;\n      if (num > 4)\n        return buf.error(\"length octect is too long\");\n      len = 0;\n      for (let i = 0; i < num; i++) {\n        len <<= 8;\n        const j = buf.readUInt8(fail);\n        if (buf.isError(j))\n          return j;\n        len |= j;\n      }\n      return len;\n    }\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/decoders/pem.js\nvar require_pem2 = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/decoders/pem.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Buffer2 = require_safer().Buffer;\n    var DERDecoder = require_der3();\n    function PEMDecoder(entity) {\n      DERDecoder.call(this, entity);\n      this.enc = \"pem\";\n    }\n    inherits(PEMDecoder, DERDecoder);\n    module.exports = PEMDecoder;\n    PEMDecoder.prototype.decode = function decode(data, options) {\n      const lines = data.toString().split(/[\\r\\n]+/g);\n      const label = options.label.toUpperCase();\n      const re = /^-----(BEGIN|END) ([^-]+)-----$/;\n      let start = -1;\n      let end = -1;\n      for (let i = 0; i < lines.length; i++) {\n        const match = lines[i].match(re);\n        if (match === null)\n          continue;\n        if (match[2] !== label)\n          continue;\n        if (start === -1) {\n          if (match[1] !== \"BEGIN\")\n            break;\n          start = i;\n        } else {\n          if (match[1] !== \"END\")\n            break;\n          end = i;\n          break;\n        }\n      }\n      if (start === -1 || end === -1)\n        throw new Error(\"PEM section not found for: \" + label);\n      const base64 = lines.slice(start + 1, end).join(\"\");\n      base64.replace(/[^a-z0-9+/=]+/gi, \"\");\n      const input = Buffer2.from(base64, \"base64\");\n      return DERDecoder.prototype.decode.call(this, input, options);\n    };\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/decoders/index.js\nvar require_decoders = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/decoders/index.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var decoders = exports;\n    decoders.der = require_der3();\n    decoders.pem = require_pem2();\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/api.js\nvar require_api = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/api.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var encoders = require_encoders();\n    var decoders = require_decoders();\n    var inherits = require_inherits_browser();\n    var api = exports;\n    api.define = function define(name, body) {\n      return new Entity(name, body);\n    };\n    function Entity(name, body) {\n      this.name = name;\n      this.body = body;\n      this.decoders = {};\n      this.encoders = {};\n    }\n    Entity.prototype._createNamed = function createNamed(Base) {\n      const name = this.name;\n      function Generated(entity) {\n        this._initNamed(entity, name);\n      }\n      inherits(Generated, Base);\n      Generated.prototype._initNamed = function _initNamed(entity, name2) {\n        Base.call(this, entity, name2);\n      };\n      return new Generated(this);\n    };\n    Entity.prototype._getDecoder = function _getDecoder(enc) {\n      enc = enc || \"der\";\n      if (!this.decoders.hasOwnProperty(enc))\n        this.decoders[enc] = this._createNamed(decoders[enc]);\n      return this.decoders[enc];\n    };\n    Entity.prototype.decode = function decode(data, enc, options) {\n      return this._getDecoder(enc).decode(data, options);\n    };\n    Entity.prototype._getEncoder = function _getEncoder(enc) {\n      enc = enc || \"der\";\n      if (!this.encoders.hasOwnProperty(enc))\n        this.encoders[enc] = this._createNamed(encoders[enc]);\n      return this.encoders[enc];\n    };\n    Entity.prototype.encode = function encode(data, enc, reporter) {\n      return this._getEncoder(enc).encode(data, reporter);\n    };\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/base/index.js\nvar require_base2 = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/base/index.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var base = exports;\n    base.Reporter = require_reporter().Reporter;\n    base.DecoderBuffer = require_buffer().DecoderBuffer;\n    base.EncoderBuffer = require_buffer().EncoderBuffer;\n    base.Node = require_node();\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/constants/index.js\nvar require_constants = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/constants/index.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var constants = exports;\n    constants._reverse = function reverse(map) {\n      const res = {};\n      Object.keys(map).forEach(function(key) {\n        if ((key | 0) == key)\n          key = key | 0;\n        const value = map[key];\n        res[value] = key;\n      });\n      return res;\n    };\n    constants.der = require_der();\n  }\n});\n\n// node_modules/asn1.js/lib/asn1.js\nvar require_asn1 = __commonJS({\n  \"node_modules/asn1.js/lib/asn1.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var asn1 = exports;\n    asn1.bignum = require_bn5();\n    asn1.define = require_api().define;\n    asn1.base = require_base2();\n    asn1.constants = require_constants();\n    asn1.decoders = require_decoders();\n    asn1.encoders = require_encoders();\n  }\n});\n\n// node_modules/parse-asn1/certificate.js\nvar require_certificate = __commonJS({\n  \"node_modules/parse-asn1/certificate.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var asn = require_asn1();\n    var Time = asn.define(\"Time\", function() {\n      this.choice({\n        utcTime: this.utctime(),\n        generalTime: this.gentime()\n      });\n    });\n    var AttributeTypeValue = asn.define(\"AttributeTypeValue\", function() {\n      this.seq().obj(\n        this.key(\"type\").objid(),\n        this.key(\"value\").any()\n      );\n    });\n    var AlgorithmIdentifier = asn.define(\"AlgorithmIdentifier\", function() {\n      this.seq().obj(\n        this.key(\"algorithm\").objid(),\n        this.key(\"parameters\").optional(),\n        this.key(\"curve\").objid().optional()\n      );\n    });\n    var SubjectPublicKeyInfo = asn.define(\"SubjectPublicKeyInfo\", function() {\n      this.seq().obj(\n        this.key(\"algorithm\").use(AlgorithmIdentifier),\n        this.key(\"subjectPublicKey\").bitstr()\n      );\n    });\n    var RelativeDistinguishedName = asn.define(\"RelativeDistinguishedName\", function() {\n      this.setof(AttributeTypeValue);\n    });\n    var RDNSequence = asn.define(\"RDNSequence\", function() {\n      this.seqof(RelativeDistinguishedName);\n    });\n    var Name = asn.define(\"Name\", function() {\n      this.choice({\n        rdnSequence: this.use(RDNSequence)\n      });\n    });\n    var Validity = asn.define(\"Validity\", function() {\n      this.seq().obj(\n        this.key(\"notBefore\").use(Time),\n        this.key(\"notAfter\").use(Time)\n      );\n    });\n    var Extension = asn.define(\"Extension\", function() {\n      this.seq().obj(\n        this.key(\"extnID\").objid(),\n        this.key(\"critical\").bool().def(false),\n        this.key(\"extnValue\").octstr()\n      );\n    });\n    var TBSCertificate = asn.define(\"TBSCertificate\", function() {\n      this.seq().obj(\n        this.key(\"version\").explicit(0).int().optional(),\n        this.key(\"serialNumber\").int(),\n        this.key(\"signature\").use(AlgorithmIdentifier),\n        this.key(\"issuer\").use(Name),\n        this.key(\"validity\").use(Validity),\n        this.key(\"subject\").use(Name),\n        this.key(\"subjectPublicKeyInfo\").use(SubjectPublicKeyInfo),\n        this.key(\"issuerUniqueID\").implicit(1).bitstr().optional(),\n        this.key(\"subjectUniqueID\").implicit(2).bitstr().optional(),\n        this.key(\"extensions\").explicit(3).seqof(Extension).optional()\n      );\n    });\n    var X509Certificate = asn.define(\"X509Certificate\", function() {\n      this.seq().obj(\n        this.key(\"tbsCertificate\").use(TBSCertificate),\n        this.key(\"signatureAlgorithm\").use(AlgorithmIdentifier),\n        this.key(\"signatureValue\").bitstr()\n      );\n    });\n    module.exports = X509Certificate;\n  }\n});\n\n// node_modules/parse-asn1/asn1.js\nvar require_asn12 = __commonJS({\n  \"node_modules/parse-asn1/asn1.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var asn1 = require_asn1();\n    exports.certificate = require_certificate();\n    var RSAPrivateKey = asn1.define(\"RSAPrivateKey\", function() {\n      this.seq().obj(\n        this.key(\"version\").int(),\n        this.key(\"modulus\").int(),\n        this.key(\"publicExponent\").int(),\n        this.key(\"privateExponent\").int(),\n        this.key(\"prime1\").int(),\n        this.key(\"prime2\").int(),\n        this.key(\"exponent1\").int(),\n        this.key(\"exponent2\").int(),\n        this.key(\"coefficient\").int()\n      );\n    });\n    exports.RSAPrivateKey = RSAPrivateKey;\n    var RSAPublicKey = asn1.define(\"RSAPublicKey\", function() {\n      this.seq().obj(\n        this.key(\"modulus\").int(),\n        this.key(\"publicExponent\").int()\n      );\n    });\n    exports.RSAPublicKey = RSAPublicKey;\n    var PublicKey = asn1.define(\"SubjectPublicKeyInfo\", function() {\n      this.seq().obj(\n        this.key(\"algorithm\").use(AlgorithmIdentifier),\n        this.key(\"subjectPublicKey\").bitstr()\n      );\n    });\n    exports.PublicKey = PublicKey;\n    var AlgorithmIdentifier = asn1.define(\"AlgorithmIdentifier\", function() {\n      this.seq().obj(\n        this.key(\"algorithm\").objid(),\n        this.key(\"none\").null_().optional(),\n        this.key(\"curve\").objid().optional(),\n        this.key(\"params\").seq().obj(\n          this.key(\"p\").int(),\n          this.key(\"q\").int(),\n          this.key(\"g\").int()\n        ).optional()\n      );\n    });\n    var PrivateKeyInfo = asn1.define(\"PrivateKeyInfo\", function() {\n      this.seq().obj(\n        this.key(\"version\").int(),\n        this.key(\"algorithm\").use(AlgorithmIdentifier),\n        this.key(\"subjectPrivateKey\").octstr()\n      );\n    });\n    exports.PrivateKey = PrivateKeyInfo;\n    var EncryptedPrivateKeyInfo = asn1.define(\"EncryptedPrivateKeyInfo\", function() {\n      this.seq().obj(\n        this.key(\"algorithm\").seq().obj(\n          this.key(\"id\").objid(),\n          this.key(\"decrypt\").seq().obj(\n            this.key(\"kde\").seq().obj(\n              this.key(\"id\").objid(),\n              this.key(\"kdeparams\").seq().obj(\n                this.key(\"salt\").octstr(),\n                this.key(\"iters\").int()\n              )\n            ),\n            this.key(\"cipher\").seq().obj(\n              this.key(\"algo\").objid(),\n              this.key(\"iv\").octstr()\n            )\n          )\n        ),\n        this.key(\"subjectPrivateKey\").octstr()\n      );\n    });\n    exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;\n    var DSAPrivateKey = asn1.define(\"DSAPrivateKey\", function() {\n      this.seq().obj(\n        this.key(\"version\").int(),\n        this.key(\"p\").int(),\n        this.key(\"q\").int(),\n        this.key(\"g\").int(),\n        this.key(\"pub_key\").int(),\n        this.key(\"priv_key\").int()\n      );\n    });\n    exports.DSAPrivateKey = DSAPrivateKey;\n    exports.DSAparam = asn1.define(\"DSAparam\", function() {\n      this.int();\n    });\n    var ECPrivateKey = asn1.define(\"ECPrivateKey\", function() {\n      this.seq().obj(\n        this.key(\"version\").int(),\n        this.key(\"privateKey\").octstr(),\n        this.key(\"parameters\").optional().explicit(0).use(ECParameters),\n        this.key(\"publicKey\").optional().explicit(1).bitstr()\n      );\n    });\n    exports.ECPrivateKey = ECPrivateKey;\n    var ECParameters = asn1.define(\"ECParameters\", function() {\n      this.choice({\n        namedCurve: this.objid()\n      });\n    });\n    exports.signature = asn1.define(\"signature\", function() {\n      this.seq().obj(\n        this.key(\"r\").int(),\n        this.key(\"s\").int()\n      );\n    });\n  }\n});\n\n// node_modules/parse-asn1/aesid.json\nvar require_aesid = __commonJS({\n  \"node_modules/parse-asn1/aesid.json\"(exports, module) {\n    module.exports = {\n      \"2.16.840.1.101.3.4.1.1\": \"aes-128-ecb\",\n      \"2.16.840.1.101.3.4.1.2\": \"aes-128-cbc\",\n      \"2.16.840.1.101.3.4.1.3\": \"aes-128-ofb\",\n      \"2.16.840.1.101.3.4.1.4\": \"aes-128-cfb\",\n      \"2.16.840.1.101.3.4.1.21\": \"aes-192-ecb\",\n      \"2.16.840.1.101.3.4.1.22\": \"aes-192-cbc\",\n      \"2.16.840.1.101.3.4.1.23\": \"aes-192-ofb\",\n      \"2.16.840.1.101.3.4.1.24\": \"aes-192-cfb\",\n      \"2.16.840.1.101.3.4.1.41\": \"aes-256-ecb\",\n      \"2.16.840.1.101.3.4.1.42\": \"aes-256-cbc\",\n      \"2.16.840.1.101.3.4.1.43\": \"aes-256-ofb\",\n      \"2.16.840.1.101.3.4.1.44\": \"aes-256-cfb\"\n    };\n  }\n});\n\n// node_modules/parse-asn1/fixProc.js\nvar require_fixProc = __commonJS({\n  \"node_modules/parse-asn1/fixProc.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var findProc = /Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r+/=]+)[\\n\\r]+/m;\n    var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;\n    var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\\n\\r+/=]+)-----END \\1-----$/m;\n    var evp = require_evp_bytestokey();\n    var ciphers = require_browser6();\n    var Buffer2 = require_safe_buffer().Buffer;\n    module.exports = function(okey, password) {\n      var key = okey.toString();\n      var match = key.match(findProc);\n      var decrypted;\n      if (!match) {\n        var match2 = key.match(fullRegex);\n        decrypted = Buffer2.from(match2[2].replace(/[\\r\\n]/g, \"\"), \"base64\");\n      } else {\n        var suite = \"aes\" + match[1];\n        var iv = Buffer2.from(match[2], \"hex\");\n        var cipherText = Buffer2.from(match[3].replace(/[\\r\\n]/g, \"\"), \"base64\");\n        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;\n        var out = [];\n        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);\n        out.push(cipher.update(cipherText));\n        out.push(cipher.final());\n        decrypted = Buffer2.concat(out);\n      }\n      var tag = key.match(startRegex)[1];\n      return {\n        tag,\n        data: decrypted\n      };\n    };\n  }\n});\n\n// node_modules/parse-asn1/index.js\nvar require_parse_asn1 = __commonJS({\n  \"node_modules/parse-asn1/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var asn1 = require_asn12();\n    var aesid = require_aesid();\n    var fixProc = require_fixProc();\n    var ciphers = require_browser6();\n    var compat = require_browser5();\n    var Buffer2 = require_safe_buffer().Buffer;\n    module.exports = parseKeys;\n    function parseKeys(buffer) {\n      var password;\n      if (typeof buffer === \"object\" && !Buffer2.isBuffer(buffer)) {\n        password = buffer.passphrase;\n        buffer = buffer.key;\n      }\n      if (typeof buffer === \"string\") {\n        buffer = Buffer2.from(buffer);\n      }\n      var stripped = fixProc(buffer, password);\n      var type = stripped.tag;\n      var data = stripped.data;\n      var subtype, ndata;\n      switch (type) {\n        case \"CERTIFICATE\":\n          ndata = asn1.certificate.decode(data, \"der\").tbsCertificate.subjectPublicKeyInfo;\n        case \"PUBLIC KEY\":\n          if (!ndata) {\n            ndata = asn1.PublicKey.decode(data, \"der\");\n          }\n          subtype = ndata.algorithm.algorithm.join(\".\");\n          switch (subtype) {\n            case \"1.2.840.113549.1.1.1\":\n              return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, \"der\");\n            case \"1.2.840.10045.2.1\":\n              ndata.subjectPrivateKey = ndata.subjectPublicKey;\n              return {\n                type: \"ec\",\n                data: ndata\n              };\n            case \"1.2.840.10040.4.1\":\n              ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, \"der\");\n              return {\n                type: \"dsa\",\n                data: ndata.algorithm.params\n              };\n            default:\n              throw new Error(\"unknown key id \" + subtype);\n          }\n        case \"ENCRYPTED PRIVATE KEY\":\n          data = asn1.EncryptedPrivateKey.decode(data, \"der\");\n          data = decrypt(data, password);\n        case \"PRIVATE KEY\":\n          ndata = asn1.PrivateKey.decode(data, \"der\");\n          subtype = ndata.algorithm.algorithm.join(\".\");\n          switch (subtype) {\n            case \"1.2.840.113549.1.1.1\":\n              return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, \"der\");\n            case \"1.2.840.10045.2.1\":\n              return {\n                curve: ndata.algorithm.curve,\n                privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, \"der\").privateKey\n              };\n            case \"1.2.840.10040.4.1\":\n              ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, \"der\");\n              return {\n                type: \"dsa\",\n                params: ndata.algorithm.params\n              };\n            default:\n              throw new Error(\"unknown key id \" + subtype);\n          }\n        case \"RSA PUBLIC KEY\":\n          return asn1.RSAPublicKey.decode(data, \"der\");\n        case \"RSA PRIVATE KEY\":\n          return asn1.RSAPrivateKey.decode(data, \"der\");\n        case \"DSA PRIVATE KEY\":\n          return {\n            type: \"dsa\",\n            params: asn1.DSAPrivateKey.decode(data, \"der\")\n          };\n        case \"EC PRIVATE KEY\":\n          data = asn1.ECPrivateKey.decode(data, \"der\");\n          return {\n            curve: data.parameters.value,\n            privateKey: data.privateKey\n          };\n        default:\n          throw new Error(\"unknown key type \" + type);\n      }\n    }\n    parseKeys.signature = asn1.signature;\n    function decrypt(data, password) {\n      var salt = data.algorithm.decrypt.kde.kdeparams.salt;\n      var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);\n      var algo = aesid[data.algorithm.decrypt.cipher.algo.join(\".\")];\n      var iv = data.algorithm.decrypt.cipher.iv;\n      var cipherText = data.subjectPrivateKey;\n      var keylen = parseInt(algo.split(\"-\")[1], 10) / 8;\n      var key = compat.pbkdf2Sync(password, salt, iters, keylen, \"sha1\");\n      var cipher = ciphers.createDecipheriv(algo, key, iv);\n      var out = [];\n      out.push(cipher.update(cipherText));\n      out.push(cipher.final());\n      return Buffer2.concat(out);\n    }\n  }\n});\n\n// node_modules/browserify-sign/browser/curves.json\nvar require_curves2 = __commonJS({\n  \"node_modules/browserify-sign/browser/curves.json\"(exports, module) {\n    module.exports = {\n      \"1.3.132.0.10\": \"secp256k1\",\n      \"1.3.132.0.33\": \"p224\",\n      \"1.2.840.10045.3.1.1\": \"p192\",\n      \"1.2.840.10045.3.1.7\": \"p256\",\n      \"1.3.132.0.34\": \"p384\",\n      \"1.3.132.0.35\": \"p521\"\n    };\n  }\n});\n\n// node_modules/browserify-sign/browser/sign.js\nvar require_sign = __commonJS({\n  \"node_modules/browserify-sign/browser/sign.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var createHmac = require_browser4();\n    var crt = require_browserify_rsa();\n    var EC = require_elliptic().ec;\n    var BN = require_bn3();\n    var parseKeys = require_parse_asn1();\n    var curves = require_curves2();\n    var RSA_PKCS1_PADDING = 1;\n    function sign(hash, key, hashType, signType, tag) {\n      var priv = parseKeys(key);\n      if (priv.curve) {\n        if (signType !== \"ecdsa\" && signType !== \"ecdsa/rsa\") {\n          throw new Error(\"wrong private key type\");\n        }\n        return ecSign(hash, priv);\n      } else if (priv.type === \"dsa\") {\n        if (signType !== \"dsa\") {\n          throw new Error(\"wrong private key type\");\n        }\n        return dsaSign(hash, priv, hashType);\n      }\n      if (signType !== \"rsa\" && signType !== \"ecdsa/rsa\") {\n        throw new Error(\"wrong private key type\");\n      }\n      if (key.padding !== void 0 && key.padding !== RSA_PKCS1_PADDING) {\n        throw new Error(\"illegal or unsupported padding mode\");\n      }\n      hash = Buffer2.concat([tag, hash]);\n      var len = priv.modulus.byteLength();\n      var pad = [0, 1];\n      while (hash.length + pad.length + 1 < len) {\n        pad.push(255);\n      }\n      pad.push(0);\n      var i = -1;\n      while (++i < hash.length) {\n        pad.push(hash[i]);\n      }\n      var out = crt(pad, priv);\n      return out;\n    }\n    function ecSign(hash, priv) {\n      var curveId = curves[priv.curve.join(\".\")];\n      if (!curveId) {\n        throw new Error(\"unknown curve \" + priv.curve.join(\".\"));\n      }\n      var curve = new EC(curveId);\n      var key = curve.keyFromPrivate(priv.privateKey);\n      var out = key.sign(hash);\n      return Buffer2.from(out.toDER());\n    }\n    function dsaSign(hash, priv, algo) {\n      var x = priv.params.priv_key;\n      var p = priv.params.p;\n      var q = priv.params.q;\n      var g = priv.params.g;\n      var r = new BN(0);\n      var k;\n      var H = bits2int(hash, q).mod(q);\n      var s = false;\n      var kv = getKey(x, q, hash, algo);\n      while (s === false) {\n        k = makeKey(q, kv, algo);\n        r = makeR(g, k, p, q);\n        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);\n        if (s.cmpn(0) === 0) {\n          s = false;\n          r = new BN(0);\n        }\n      }\n      return toDER(r, s);\n    }\n    function toDER(r, s) {\n      r = r.toArray();\n      s = s.toArray();\n      if (r[0] & 128) {\n        r = [0].concat(r);\n      }\n      if (s[0] & 128) {\n        s = [0].concat(s);\n      }\n      var total = r.length + s.length + 4;\n      var res = [\n        48,\n        total,\n        2,\n        r.length\n      ];\n      res = res.concat(r, [2, s.length], s);\n      return Buffer2.from(res);\n    }\n    function getKey(x, q, hash, algo) {\n      x = Buffer2.from(x.toArray());\n      if (x.length < q.byteLength()) {\n        var zeros = Buffer2.alloc(q.byteLength() - x.length);\n        x = Buffer2.concat([zeros, x]);\n      }\n      var hlen = hash.length;\n      var hbits = bits2octets(hash, q);\n      var v = Buffer2.alloc(hlen);\n      v.fill(1);\n      var k = Buffer2.alloc(hlen);\n      k = createHmac(algo, k).update(v).update(Buffer2.from([0])).update(x).update(hbits).digest();\n      v = createHmac(algo, k).update(v).digest();\n      k = createHmac(algo, k).update(v).update(Buffer2.from([1])).update(x).update(hbits).digest();\n      v = createHmac(algo, k).update(v).digest();\n      return { k, v };\n    }\n    function bits2int(obits, q) {\n      var bits = new BN(obits);\n      var shift = (obits.length << 3) - q.bitLength();\n      if (shift > 0) {\n        bits.ishrn(shift);\n      }\n      return bits;\n    }\n    function bits2octets(bits, q) {\n      bits = bits2int(bits, q);\n      bits = bits.mod(q);\n      var out = Buffer2.from(bits.toArray());\n      if (out.length < q.byteLength()) {\n        var zeros = Buffer2.alloc(q.byteLength() - out.length);\n        out = Buffer2.concat([zeros, out]);\n      }\n      return out;\n    }\n    function makeKey(q, kv, algo) {\n      var t;\n      var k;\n      do {\n        t = Buffer2.alloc(0);\n        while (t.length * 8 < q.bitLength()) {\n          kv.v = createHmac(algo, kv.k).update(kv.v).digest();\n          t = Buffer2.concat([t, kv.v]);\n        }\n        k = bits2int(t, q);\n        kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer2.from([0])).digest();\n        kv.v = createHmac(algo, kv.k).update(kv.v).digest();\n      } while (k.cmp(q) !== -1);\n      return k;\n    }\n    function makeR(g, k, p, q) {\n      return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);\n    }\n    module.exports = sign;\n    module.exports.getKey = getKey;\n    module.exports.makeKey = makeKey;\n  }\n});\n\n// node_modules/browserify-sign/browser/verify.js\nvar require_verify = __commonJS({\n  \"node_modules/browserify-sign/browser/verify.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var BN = require_bn3();\n    var EC = require_elliptic().ec;\n    var parseKeys = require_parse_asn1();\n    var curves = require_curves2();\n    function verify(sig, hash, key, signType, tag) {\n      var pub = parseKeys(key);\n      if (pub.type === \"ec\") {\n        if (signType !== \"ecdsa\" && signType !== \"ecdsa/rsa\") {\n          throw new Error(\"wrong public key type\");\n        }\n        return ecVerify(sig, hash, pub);\n      } else if (pub.type === \"dsa\") {\n        if (signType !== \"dsa\") {\n          throw new Error(\"wrong public key type\");\n        }\n        return dsaVerify(sig, hash, pub);\n      }\n      if (signType !== \"rsa\" && signType !== \"ecdsa/rsa\") {\n        throw new Error(\"wrong public key type\");\n      }\n      hash = Buffer2.concat([tag, hash]);\n      var len = pub.modulus.byteLength();\n      var pad = [1];\n      var padNum = 0;\n      while (hash.length + pad.length + 2 < len) {\n        pad.push(255);\n        padNum += 1;\n      }\n      pad.push(0);\n      var i = -1;\n      while (++i < hash.length) {\n        pad.push(hash[i]);\n      }\n      pad = Buffer2.from(pad);\n      var red = BN.mont(pub.modulus);\n      sig = new BN(sig).toRed(red);\n      sig = sig.redPow(new BN(pub.publicExponent));\n      sig = Buffer2.from(sig.fromRed().toArray());\n      var out = padNum < 8 ? 1 : 0;\n      len = Math.min(sig.length, pad.length);\n      if (sig.length !== pad.length) {\n        out = 1;\n      }\n      i = -1;\n      while (++i < len) {\n        out |= sig[i] ^ pad[i];\n      }\n      return out === 0;\n    }\n    function ecVerify(sig, hash, pub) {\n      var curveId = curves[pub.data.algorithm.curve.join(\".\")];\n      if (!curveId) {\n        throw new Error(\"unknown curve \" + pub.data.algorithm.curve.join(\".\"));\n      }\n      var curve = new EC(curveId);\n      var pubkey = pub.data.subjectPrivateKey.data;\n      return curve.verify(hash, sig, pubkey);\n    }\n    function dsaVerify(sig, hash, pub) {\n      var p = pub.data.p;\n      var q = pub.data.q;\n      var g = pub.data.g;\n      var y = pub.data.pub_key;\n      var unpacked = parseKeys.signature.decode(sig, \"der\");\n      var s = unpacked.s;\n      var r = unpacked.r;\n      checkValue(s, q);\n      checkValue(r, q);\n      var montp = BN.mont(p);\n      var w = s.invm(q);\n      var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);\n      return v.cmp(r) === 0;\n    }\n    function checkValue(b, q) {\n      if (b.cmpn(0) <= 0) {\n        throw new Error(\"invalid sig\");\n      }\n      if (b.cmp(q) >= 0) {\n        throw new Error(\"invalid sig\");\n      }\n    }\n    module.exports = verify;\n  }\n});\n\n// node_modules/browserify-sign/browser/index.js\nvar require_browser9 = __commonJS({\n  \"node_modules/browserify-sign/browser/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var createHash = require_browser3();\n    var stream = require_readable_browser();\n    var inherits = require_inherits_browser();\n    var sign = require_sign();\n    var verify = require_verify();\n    var algorithms = require_algorithms();\n    Object.keys(algorithms).forEach(function(key) {\n      algorithms[key].id = Buffer2.from(algorithms[key].id, \"hex\");\n      algorithms[key.toLowerCase()] = algorithms[key];\n    });\n    function Sign(algorithm) {\n      stream.Writable.call(this);\n      var data = algorithms[algorithm];\n      if (!data) {\n        throw new Error(\"Unknown message digest\");\n      }\n      this._hashType = data.hash;\n      this._hash = createHash(data.hash);\n      this._tag = data.id;\n      this._signType = data.sign;\n    }\n    inherits(Sign, stream.Writable);\n    Sign.prototype._write = function _write(data, _, done) {\n      this._hash.update(data);\n      done();\n    };\n    Sign.prototype.update = function update(data, enc) {\n      this._hash.update(typeof data === \"string\" ? Buffer2.from(data, enc) : data);\n      return this;\n    };\n    Sign.prototype.sign = function signMethod(key, enc) {\n      this.end();\n      var hash = this._hash.digest();\n      var sig = sign(hash, key, this._hashType, this._signType, this._tag);\n      return enc ? sig.toString(enc) : sig;\n    };\n    function Verify(algorithm) {\n      stream.Writable.call(this);\n      var data = algorithms[algorithm];\n      if (!data) {\n        throw new Error(\"Unknown message digest\");\n      }\n      this._hash = createHash(data.hash);\n      this._tag = data.id;\n      this._signType = data.sign;\n    }\n    inherits(Verify, stream.Writable);\n    Verify.prototype._write = function _write(data, _, done) {\n      this._hash.update(data);\n      done();\n    };\n    Verify.prototype.update = function update(data, enc) {\n      this._hash.update(typeof data === \"string\" ? Buffer2.from(data, enc) : data);\n      return this;\n    };\n    Verify.prototype.verify = function verifyMethod(key, sig, enc) {\n      var sigBuffer = typeof sig === \"string\" ? Buffer2.from(sig, enc) : sig;\n      this.end();\n      var hash = this._hash.digest();\n      return verify(sigBuffer, hash, key, this._signType, this._tag);\n    };\n    function createSign(algorithm) {\n      return new Sign(algorithm);\n    }\n    function createVerify(algorithm) {\n      return new Verify(algorithm);\n    }\n    module.exports = {\n      Sign: createSign,\n      Verify: createVerify,\n      createSign,\n      createVerify\n    };\n  }\n});\n\n// node_modules/create-ecdh/node_modules/bn.js/lib/bn.js\nvar require_bn6 = __commonJS({\n  \"node_modules/create-ecdh/node_modules/bn.js/lib/bn.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    (function(module2, exports2) {\n      \"use strict\";\n      function assert(val, msg) {\n        if (!val)\n          throw new Error(msg || \"Assertion failed\");\n      }\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {\n        };\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      }\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        this.red = null;\n        if (number !== null) {\n          if (base === \"le\" || base === \"be\") {\n            endian = base;\n            base = 10;\n          }\n          this._init(number || 0, base || 10, endian || \"be\");\n        }\n      }\n      if (typeof module2 === \"object\") {\n        module2.exports = BN;\n      } else {\n        exports2.BN = BN;\n      }\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer2;\n      try {\n        if (typeof window !== \"undefined\" && typeof window.Buffer !== \"undefined\") {\n          Buffer2 = window.Buffer;\n        } else {\n          Buffer2 = require_buffer_polyfill().Buffer;\n        }\n      } catch (e) {\n      }\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0)\n          return left;\n        return right;\n      };\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0)\n          return left;\n        return right;\n      };\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n          return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n          return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n          base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n          start++;\n          this.negative = 1;\n        }\n        if (start < number.length) {\n          if (base === 16) {\n            this._parseHex(number, start, endian);\n          } else {\n            this._parseBase(number, base, start);\n            if (endian === \"le\") {\n              this._initArray(this.toArray(), base, endian);\n            }\n          }\n        }\n      };\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n        if (number < 67108864) {\n          this.words = [number & 67108863];\n          this.length = 1;\n        } else if (number < 4503599627370496) {\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863\n          ];\n          this.length = 2;\n        } else {\n          assert(number < 9007199254740992);\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863,\n            1\n          ];\n          this.length = 3;\n        }\n        if (endian !== \"le\")\n          return;\n        this._initArray(this.toArray(), base, endian);\n      };\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === \"le\") {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n        return this.strip();\n      };\n      function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        if (c >= 65 && c <= 70) {\n          return c - 55;\n        } else if (c >= 97 && c <= 102) {\n          return c - 87;\n        } else {\n          return c - 48 & 15;\n        }\n      }\n      function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n          r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n      }\n      BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n          for (i = number.length - 1; i >= start; i -= 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        } else {\n          var parseLength = number.length - start;\n          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        }\n        this.strip();\n      };\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul;\n          if (c >= 49) {\n            r += c - 49 + 10;\n          } else if (c >= 17) {\n            r += c - 17 + 10;\n          } else {\n            r += c;\n          }\n        }\n        return r;\n      }\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        this.words = [0];\n        this.length = 1;\n        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {\n          limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n          this.imuln(pow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        this.strip();\n      };\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n        return this;\n      };\n      BN.prototype.strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n        return this._normSign();\n      };\n      BN.prototype._normSign = function _normSign() {\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n        return this;\n      };\n      BN.prototype.inspect = function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      };\n      var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ];\n      var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ];\n      var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n          out = \"\";\n          var off = 0;\n          var carry = 0;\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 16777215).toString(16);\n            carry = w >>> 24 - off & 16777215;\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n            off += 2;\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n          }\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          var groupSize = groupSizes[base];\n          var groupBase = groupBases[base];\n          out = \"\";\n          var c = this.clone();\n          c.negative = 0;\n          while (!c.isZero()) {\n            var r = c.modn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n          if (this.isZero()) {\n            out = \"0\" + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n      };\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n          ret += this.words[1] * 67108864;\n        } else if (this.length === 3 && this.words[2] === 1) {\n          ret += 4503599627370496 + this.words[1] * 67108864;\n        } else if (this.length > 2) {\n          assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n      };\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n      };\n      BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer2 !== \"undefined\");\n        return this.toArrayLike(Buffer2, endian, length);\n      };\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        this.strip();\n        var littleEndian = endian === \"le\";\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n        if (!littleEndian) {\n          for (i = 0; i < reqLength - byteLength; i++) {\n            res[i] = 0;\n          }\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[reqLength - i - 1] = b;\n          }\n        } else {\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[i] = b;\n          }\n          for (; i < reqLength; i++) {\n            res[i] = 0;\n          }\n        }\n        return res;\n      };\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n          if (t >= 4096) {\n            r += 13;\n            t >>>= 13;\n          }\n          if (t >= 64) {\n            r += 7;\n            t >>>= 7;\n          }\n          if (t >= 8) {\n            r += 4;\n            t >>>= 4;\n          }\n          if (t >= 2) {\n            r += 2;\n            t >>>= 2;\n          }\n          return r + t;\n        };\n      }\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        if (w === 0)\n          return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 8191) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n        if ((t & 127) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n        if ((t & 15) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n        if ((t & 3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n        if ((t & 1) === 0) {\n          r++;\n        }\n        return r;\n      };\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n      };\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n        return w;\n      }\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero())\n          return 0;\n        var r = 0;\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n          r += b;\n          if (b !== 26)\n            break;\n        }\n        return r;\n      };\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n      };\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n      };\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      };\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n        return this;\n      };\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n        return this.strip();\n      };\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      };\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length)\n          return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length)\n          return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      };\n      BN.prototype.iuand = function iuand(num) {\n        var b;\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this.strip();\n      };\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      };\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length)\n          return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length)\n          return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      };\n      BN.prototype.iuxor = function iuxor(num) {\n        var a;\n        var b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = a.length;\n        return this.strip();\n      };\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      };\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length)\n          return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length)\n          return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      };\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        }\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 67108863;\n        }\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;\n        }\n        return this.strip();\n      };\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      };\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this.strip();\n      };\n      BN.prototype.iadd = function iadd(num) {\n        var r;\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign();\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        }\n        var a, b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++;\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        return this;\n      };\n      BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n        if (this.length > num.length)\n          return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      };\n      BN.prototype.isub = function isub(num) {\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign();\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        }\n        var cmp = this.cmp(num);\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        }\n        var a, b;\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n          this.negative = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n      function smallMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        var len = self2.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        var a = self2.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 67108863;\n        var carry = r / 67108864 | 0;\n        out.words[0] = lo;\n        for (var k = 1; k < len; k++) {\n          var ncarry = carry >>> 26;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self2.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 67108864 | 0;\n            rword = r & 67108863;\n          }\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      var comb10MulTo = function comb10MulTo2(self2, num, out) {\n        var a = self2.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 8191;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 8191;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 8191;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 8191;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 8191;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 8191;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 8191;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 8191;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 8191;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 8191;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 8191;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 8191;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 8191;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 8191;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 8191;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 8191;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 8191;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 8191;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 8191;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 8191;\n        var bh9 = b9 >>> 13;\n        out.negative = self2.negative ^ num.negative;\n        out.length = 19;\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 67108863;\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 67108863;\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 67108863;\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 67108863;\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 67108863;\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 67108863;\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 67108863;\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 67108863;\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 67108863;\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 67108863;\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 67108863;\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 67108863;\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 67108863;\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 67108863;\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 67108863;\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 67108863;\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 67108863;\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 67108863;\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 67108863;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n        return out;\n      };\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n      function bigMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        out.length = self2.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for (var k = 0; k < out.length - 1; k++) {\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self2.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 67108863;\n            ncarry = ncarry + (r / 67108864 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 67108863;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 67108863;\n          }\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      function jumboMulTo(self2, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self2, num, out);\n      }\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n        return res;\n      };\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n        return t;\n      };\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1)\n          return x;\n        var rb = 0;\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n        return rb;\n      };\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n        return 1 << i + 1 + odd;\n      };\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1)\n          return;\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 67108863;\n          if (w < 67108864) {\n            carry = 0;\n          } else {\n            carry = w / 67108864 | 0;\n          }\n        }\n        return ws;\n      };\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 8191;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 8191;\n          carry = carry >>> 13;\n        }\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~8191) === 0);\n      };\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n        return ph;\n      };\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n      };\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      };\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      };\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n      BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        var carry = 0;\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 67108863) + (carry & 67108863);\n          carry >>= 26;\n          carry += w / 67108864 | 0;\n          carry += lo >>> 26;\n          this.words[i] = lo & 67108863;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      };\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      };\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      };\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0)\n          return new BN(1);\n        var res = this;\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0)\n            break;\n        }\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0)\n              continue;\n            res = res.mul(q);\n          }\n        }\n        return res;\n      };\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 67108863 >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n          var carry = 0;\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n          this.length += s;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishln = function ishln(bits) {\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      };\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 67108863 ^ 67108863 >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n          maskedWords.length = s;\n        }\n        if (s === 0) {\n        } else if (this.length > s) {\n          this.length -= s;\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        }\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      };\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      };\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      };\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s)\n          return false;\n        var w = this.words[s];\n        return !!(w & q);\n      };\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n          return this;\n        }\n        if (r !== 0) {\n          s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n          var mask = 67108863 ^ 67108863 >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n        return this.strip();\n      };\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      };\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.isubn(-num);\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) < num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        }\n        return this._iaddn(num);\n      };\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {\n          this.words[i] -= 67108864;\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      };\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.iaddn(-num);\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 67108864;\n            this.words[i + 1] -= 1;\n          }\n        }\n        return this.strip();\n      };\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 67108863;\n          carry = (w >> 26) - (right / 67108864 | 0);\n          this.words[i + shift] = w & 67108863;\n        }\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 67108863;\n        }\n        if (carry === 0)\n          return this.strip();\n        assert(carry === -1);\n        carry = 0;\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 67108863;\n        }\n        this.negative = 1;\n        return this.strip();\n      };\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        }\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n          a = diff;\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);\n          qj = Math.min(qj / bhi | 0, 67108863);\n          a._ishlnsubmul(b, qj, j);\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n            a._ishlnsubmul(b, 1, j);\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n        if (q) {\n          q.strip();\n        }\n        a.strip();\n        if (mode !== \"div\" && shift !== 0) {\n          a.iushrn(shift);\n        }\n        return {\n          div: q || null,\n          mod: a\n        };\n      };\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n          return {\n            div,\n            mod\n          };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          return {\n            div,\n            mod: res.mod\n          };\n        }\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n          return {\n            div: res.div,\n            mod\n          };\n        }\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        }\n        if (num.length === 1) {\n          if (mode === \"div\") {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n          if (mode === \"mod\") {\n            return {\n              div: null,\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n        return this._wordDiv(num, mode);\n      };\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n      };\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n      };\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n      };\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        if (dm.mod.isZero())\n          return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        if (cmp < 0 || r2 === 1 && cmp === 0)\n          return dm.div;\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n      BN.prototype.modn = function modn(num) {\n        assert(num <= 67108863);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return acc;\n      };\n      BN.prototype.idivn = function idivn(num) {\n        assert(num <= 67108863);\n        var carry = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 67108864;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n        return this.strip();\n      };\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        }\n        var A = new BN(1);\n        var B = new BN(0);\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            x.iushrn(i);\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            y.iushrn(j);\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      };\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            a.iushrn(i);\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n              x1.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            b.iushrn(j);\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n              x2.iushrn(1);\n            }\n          }\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n        return res;\n      };\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero())\n          return num.abs();\n        if (num.isZero())\n          return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n          var r = a.cmp(b);\n          if (r < 0) {\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n          a.isub(b);\n        } while (true);\n        return b.iushln(shift);\n      };\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      };\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      };\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s) {\n          this._expand(s + 1);\n          this.words[s] |= q;\n          return this;\n        }\n        var carry = q;\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 67108863;\n          this.words[i] = w;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative)\n          return -1;\n        if (this.negative === 0 && negative)\n          return 1;\n        this.strip();\n        var res;\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n          assert(num <= 67108863, \"Number is too big\");\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0)\n          return -1;\n        if (this.negative === 0 && num.negative !== 0)\n          return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.ucmp = function ucmp(num) {\n        if (this.length > num.length)\n          return 1;\n        if (this.length < num.length)\n          return -1;\n        var res = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b)\n            continue;\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n          break;\n        }\n        return res;\n      };\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      };\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n      };\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n      };\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n      };\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n      };\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n      };\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n      };\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n      };\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n      };\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n      };\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n      };\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n      };\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n      };\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n      };\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n      };\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n      };\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function MPrime(name, p) {\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n      MPrime.prototype.ireduce = function ireduce(num) {\n        var r = num;\n        var rlen;\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== void 0) {\n            r.strip();\n          } else {\n            r._strip();\n          }\n        }\n        return r;\n      };\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n      function K256() {\n        MPrime.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      inherits(K256, MPrime);\n      K256.prototype.split = function split(input, output) {\n        var mask = 4194303;\n        var outLen = Math.min(input.length, 9);\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        }\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n      K256.prototype.imulK = function imulK(num) {\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        var lo = 0;\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 977;\n          num.words[i] = lo & 67108863;\n          lo = w * 64 + (lo / 67108864 | 0);\n        }\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n        return num;\n      };\n      function P224() {\n        MPrime.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      inherits(P224, MPrime);\n      function P192() {\n        MPrime.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      inherits(P192, MPrime);\n      function P25519() {\n        MPrime.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      inherits(P25519, MPrime);\n      P25519.prototype.imulK = function imulK(num) {\n        var carry = 0;\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 19 + carry;\n          var lo = hi & 67108863;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n        return num;\n      };\n      BN._prime = function prime(name) {\n        if (primes[name])\n          return primes[name];\n        var prime2;\n        if (name === \"k256\") {\n          prime2 = new K256();\n        } else if (name === \"p224\") {\n          prime2 = new P224();\n        } else if (name === \"p192\") {\n          prime2 = new P192();\n        } else if (name === \"p25519\") {\n          prime2 = new P25519();\n        } else {\n          throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime2;\n        return prime2;\n      };\n      function Red(m) {\n        if (typeof m === \"string\") {\n          var prime = BN._prime(m);\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), \"modulus must be greater than 1\");\n          this.m = m;\n          this.prime = null;\n        }\n      }\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n      };\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(\n          a.red && a.red === b.red,\n          \"red works only with red numbers\"\n        );\n      };\n      Red.prototype.imod = function imod(a) {\n        if (this.prime)\n          return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n      };\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n      };\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res;\n      };\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res;\n      };\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n      };\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n      };\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n      };\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero())\n          return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        }\n        var q = this.m.subn(1);\n        var s = 0;\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n        return r;\n      };\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero())\n          return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0)\n          return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n          start = 26;\n        }\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0))\n              continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n          start = 26;\n        }\n        return res;\n      };\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      };\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n      inherits(Mont, Red);\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero())\n          return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.invm = function invm(a) {\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(typeof module === \"undefined\" || module, exports);\n  }\n});\n\n// node_modules/create-ecdh/browser.js\nvar require_browser10 = __commonJS({\n  \"node_modules/create-ecdh/browser.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var elliptic = require_elliptic();\n    var BN = require_bn6();\n    module.exports = function createECDH(curve) {\n      return new ECDH(curve);\n    };\n    var aliases = {\n      secp256k1: {\n        name: \"secp256k1\",\n        byteLength: 32\n      },\n      secp224r1: {\n        name: \"p224\",\n        byteLength: 28\n      },\n      prime256v1: {\n        name: \"p256\",\n        byteLength: 32\n      },\n      prime192v1: {\n        name: \"p192\",\n        byteLength: 24\n      },\n      ed25519: {\n        name: \"ed25519\",\n        byteLength: 32\n      },\n      secp384r1: {\n        name: \"p384\",\n        byteLength: 48\n      },\n      secp521r1: {\n        name: \"p521\",\n        byteLength: 66\n      }\n    };\n    aliases.p224 = aliases.secp224r1;\n    aliases.p256 = aliases.secp256r1 = aliases.prime256v1;\n    aliases.p192 = aliases.secp192r1 = aliases.prime192v1;\n    aliases.p384 = aliases.secp384r1;\n    aliases.p521 = aliases.secp521r1;\n    function ECDH(curve) {\n      this.curveType = aliases[curve];\n      if (!this.curveType) {\n        this.curveType = {\n          name: curve\n        };\n      }\n      this.curve = new elliptic.ec(this.curveType.name);\n      this.keys = void 0;\n    }\n    ECDH.prototype.generateKeys = function(enc, format) {\n      this.keys = this.curve.genKeyPair();\n      return this.getPublicKey(enc, format);\n    };\n    ECDH.prototype.computeSecret = function(other, inenc, enc) {\n      inenc = inenc || \"utf8\";\n      if (!Buffer.isBuffer(other)) {\n        other = new Buffer(other, inenc);\n      }\n      var otherPub = this.curve.keyFromPublic(other).getPublic();\n      var out = otherPub.mul(this.keys.getPrivate()).getX();\n      return formatReturnValue(out, enc, this.curveType.byteLength);\n    };\n    ECDH.prototype.getPublicKey = function(enc, format) {\n      var key = this.keys.getPublic(format === \"compressed\", true);\n      if (format === \"hybrid\") {\n        if (key[key.length - 1] % 2) {\n          key[0] = 7;\n        } else {\n          key[0] = 6;\n        }\n      }\n      return formatReturnValue(key, enc);\n    };\n    ECDH.prototype.getPrivateKey = function(enc) {\n      return formatReturnValue(this.keys.getPrivate(), enc);\n    };\n    ECDH.prototype.setPublicKey = function(pub, enc) {\n      enc = enc || \"utf8\";\n      if (!Buffer.isBuffer(pub)) {\n        pub = new Buffer(pub, enc);\n      }\n      this.keys._importPublic(pub);\n      return this;\n    };\n    ECDH.prototype.setPrivateKey = function(priv, enc) {\n      enc = enc || \"utf8\";\n      if (!Buffer.isBuffer(priv)) {\n        priv = new Buffer(priv, enc);\n      }\n      var _priv = new BN(priv);\n      _priv = _priv.toString(16);\n      this.keys = this.curve.genKeyPair();\n      this.keys._importPrivate(_priv);\n      return this;\n    };\n    function formatReturnValue(bn, enc, len) {\n      if (!Array.isArray(bn)) {\n        bn = bn.toArray();\n      }\n      var buf = new Buffer(bn);\n      if (len && buf.length < len) {\n        var zeros = new Buffer(len - buf.length);\n        zeros.fill(0);\n        buf = Buffer.concat([zeros, buf]);\n      }\n      if (!enc) {\n        return buf;\n      } else {\n        return buf.toString(enc);\n      }\n    }\n  }\n});\n\n// node_modules/public-encrypt/mgf.js\nvar require_mgf = __commonJS({\n  \"node_modules/public-encrypt/mgf.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var createHash = require_browser3();\n    var Buffer2 = require_safe_buffer().Buffer;\n    module.exports = function(seed, len) {\n      var t = Buffer2.alloc(0);\n      var i = 0;\n      var c;\n      while (t.length < len) {\n        c = i2ops(i++);\n        t = Buffer2.concat([t, createHash(\"sha1\").update(seed).update(c).digest()]);\n      }\n      return t.slice(0, len);\n    };\n    function i2ops(c) {\n      var out = Buffer2.allocUnsafe(4);\n      out.writeUInt32BE(c, 0);\n      return out;\n    }\n  }\n});\n\n// node_modules/public-encrypt/xor.js\nvar require_xor = __commonJS({\n  \"node_modules/public-encrypt/xor.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = function xor(a, b) {\n      var len = a.length;\n      var i = -1;\n      while (++i < len) {\n        a[i] ^= b[i];\n      }\n      return a;\n    };\n  }\n});\n\n// node_modules/public-encrypt/node_modules/bn.js/lib/bn.js\nvar require_bn7 = __commonJS({\n  \"node_modules/public-encrypt/node_modules/bn.js/lib/bn.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    (function(module2, exports2) {\n      \"use strict\";\n      function assert(val, msg) {\n        if (!val)\n          throw new Error(msg || \"Assertion failed\");\n      }\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {\n        };\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      }\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        this.red = null;\n        if (number !== null) {\n          if (base === \"le\" || base === \"be\") {\n            endian = base;\n            base = 10;\n          }\n          this._init(number || 0, base || 10, endian || \"be\");\n        }\n      }\n      if (typeof module2 === \"object\") {\n        module2.exports = BN;\n      } else {\n        exports2.BN = BN;\n      }\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer2;\n      try {\n        if (typeof window !== \"undefined\" && typeof window.Buffer !== \"undefined\") {\n          Buffer2 = window.Buffer;\n        } else {\n          Buffer2 = require_buffer_polyfill().Buffer;\n        }\n      } catch (e) {\n      }\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0)\n          return left;\n        return right;\n      };\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0)\n          return left;\n        return right;\n      };\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n          return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n          return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n          base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n          start++;\n          this.negative = 1;\n        }\n        if (start < number.length) {\n          if (base === 16) {\n            this._parseHex(number, start, endian);\n          } else {\n            this._parseBase(number, base, start);\n            if (endian === \"le\") {\n              this._initArray(this.toArray(), base, endian);\n            }\n          }\n        }\n      };\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n        if (number < 67108864) {\n          this.words = [number & 67108863];\n          this.length = 1;\n        } else if (number < 4503599627370496) {\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863\n          ];\n          this.length = 2;\n        } else {\n          assert(number < 9007199254740992);\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863,\n            1\n          ];\n          this.length = 3;\n        }\n        if (endian !== \"le\")\n          return;\n        this._initArray(this.toArray(), base, endian);\n      };\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === \"le\") {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n        return this.strip();\n      };\n      function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        if (c >= 65 && c <= 70) {\n          return c - 55;\n        } else if (c >= 97 && c <= 102) {\n          return c - 87;\n        } else {\n          return c - 48 & 15;\n        }\n      }\n      function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n          r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n      }\n      BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n          for (i = number.length - 1; i >= start; i -= 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        } else {\n          var parseLength = number.length - start;\n          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        }\n        this.strip();\n      };\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul;\n          if (c >= 49) {\n            r += c - 49 + 10;\n          } else if (c >= 17) {\n            r += c - 17 + 10;\n          } else {\n            r += c;\n          }\n        }\n        return r;\n      }\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        this.words = [0];\n        this.length = 1;\n        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {\n          limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n          this.imuln(pow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        this.strip();\n      };\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n        return this;\n      };\n      BN.prototype.strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n        return this._normSign();\n      };\n      BN.prototype._normSign = function _normSign() {\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n        return this;\n      };\n      BN.prototype.inspect = function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      };\n      var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ];\n      var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ];\n      var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n          out = \"\";\n          var off = 0;\n          var carry = 0;\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 16777215).toString(16);\n            carry = w >>> 24 - off & 16777215;\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n            off += 2;\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n          }\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          var groupSize = groupSizes[base];\n          var groupBase = groupBases[base];\n          out = \"\";\n          var c = this.clone();\n          c.negative = 0;\n          while (!c.isZero()) {\n            var r = c.modn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n          if (this.isZero()) {\n            out = \"0\" + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n      };\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n          ret += this.words[1] * 67108864;\n        } else if (this.length === 3 && this.words[2] === 1) {\n          ret += 4503599627370496 + this.words[1] * 67108864;\n        } else if (this.length > 2) {\n          assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n      };\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n      };\n      BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer2 !== \"undefined\");\n        return this.toArrayLike(Buffer2, endian, length);\n      };\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        this.strip();\n        var littleEndian = endian === \"le\";\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n        if (!littleEndian) {\n          for (i = 0; i < reqLength - byteLength; i++) {\n            res[i] = 0;\n          }\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[reqLength - i - 1] = b;\n          }\n        } else {\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[i] = b;\n          }\n          for (; i < reqLength; i++) {\n            res[i] = 0;\n          }\n        }\n        return res;\n      };\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n          if (t >= 4096) {\n            r += 13;\n            t >>>= 13;\n          }\n          if (t >= 64) {\n            r += 7;\n            t >>>= 7;\n          }\n          if (t >= 8) {\n            r += 4;\n            t >>>= 4;\n          }\n          if (t >= 2) {\n            r += 2;\n            t >>>= 2;\n          }\n          return r + t;\n        };\n      }\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        if (w === 0)\n          return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 8191) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n        if ((t & 127) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n        if ((t & 15) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n        if ((t & 3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n        if ((t & 1) === 0) {\n          r++;\n        }\n        return r;\n      };\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n      };\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n        return w;\n      }\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero())\n          return 0;\n        var r = 0;\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n          r += b;\n          if (b !== 26)\n            break;\n        }\n        return r;\n      };\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n      };\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n      };\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      };\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n        return this;\n      };\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n        return this.strip();\n      };\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      };\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length)\n          return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length)\n          return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      };\n      BN.prototype.iuand = function iuand(num) {\n        var b;\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this.strip();\n      };\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      };\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length)\n          return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length)\n          return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      };\n      BN.prototype.iuxor = function iuxor(num) {\n        var a;\n        var b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = a.length;\n        return this.strip();\n      };\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      };\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length)\n          return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length)\n          return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      };\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        }\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 67108863;\n        }\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;\n        }\n        return this.strip();\n      };\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      };\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this.strip();\n      };\n      BN.prototype.iadd = function iadd(num) {\n        var r;\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign();\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        }\n        var a, b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++;\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        return this;\n      };\n      BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n        if (this.length > num.length)\n          return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      };\n      BN.prototype.isub = function isub(num) {\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign();\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        }\n        var cmp = this.cmp(num);\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        }\n        var a, b;\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n          this.negative = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n      function smallMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        var len = self2.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        var a = self2.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 67108863;\n        var carry = r / 67108864 | 0;\n        out.words[0] = lo;\n        for (var k = 1; k < len; k++) {\n          var ncarry = carry >>> 26;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self2.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 67108864 | 0;\n            rword = r & 67108863;\n          }\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      var comb10MulTo = function comb10MulTo2(self2, num, out) {\n        var a = self2.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 8191;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 8191;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 8191;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 8191;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 8191;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 8191;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 8191;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 8191;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 8191;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 8191;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 8191;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 8191;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 8191;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 8191;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 8191;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 8191;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 8191;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 8191;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 8191;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 8191;\n        var bh9 = b9 >>> 13;\n        out.negative = self2.negative ^ num.negative;\n        out.length = 19;\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 67108863;\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 67108863;\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 67108863;\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 67108863;\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 67108863;\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 67108863;\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 67108863;\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 67108863;\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 67108863;\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 67108863;\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 67108863;\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 67108863;\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 67108863;\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 67108863;\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 67108863;\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 67108863;\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 67108863;\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 67108863;\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 67108863;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n        return out;\n      };\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n      function bigMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        out.length = self2.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for (var k = 0; k < out.length - 1; k++) {\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self2.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 67108863;\n            ncarry = ncarry + (r / 67108864 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 67108863;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 67108863;\n          }\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      function jumboMulTo(self2, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self2, num, out);\n      }\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n        return res;\n      };\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n        return t;\n      };\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1)\n          return x;\n        var rb = 0;\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n        return rb;\n      };\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n        return 1 << i + 1 + odd;\n      };\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1)\n          return;\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 67108863;\n          if (w < 67108864) {\n            carry = 0;\n          } else {\n            carry = w / 67108864 | 0;\n          }\n        }\n        return ws;\n      };\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 8191;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 8191;\n          carry = carry >>> 13;\n        }\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~8191) === 0);\n      };\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n        return ph;\n      };\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n      };\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      };\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      };\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n      BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        var carry = 0;\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 67108863) + (carry & 67108863);\n          carry >>= 26;\n          carry += w / 67108864 | 0;\n          carry += lo >>> 26;\n          this.words[i] = lo & 67108863;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      };\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      };\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      };\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0)\n          return new BN(1);\n        var res = this;\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0)\n            break;\n        }\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0)\n              continue;\n            res = res.mul(q);\n          }\n        }\n        return res;\n      };\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 67108863 >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n          var carry = 0;\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n          this.length += s;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishln = function ishln(bits) {\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      };\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 67108863 ^ 67108863 >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n          maskedWords.length = s;\n        }\n        if (s === 0) {\n        } else if (this.length > s) {\n          this.length -= s;\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        }\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      };\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      };\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      };\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s)\n          return false;\n        var w = this.words[s];\n        return !!(w & q);\n      };\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n          return this;\n        }\n        if (r !== 0) {\n          s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n          var mask = 67108863 ^ 67108863 >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n        return this.strip();\n      };\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      };\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.isubn(-num);\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) < num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        }\n        return this._iaddn(num);\n      };\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {\n          this.words[i] -= 67108864;\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      };\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.iaddn(-num);\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 67108864;\n            this.words[i + 1] -= 1;\n          }\n        }\n        return this.strip();\n      };\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 67108863;\n          carry = (w >> 26) - (right / 67108864 | 0);\n          this.words[i + shift] = w & 67108863;\n        }\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 67108863;\n        }\n        if (carry === 0)\n          return this.strip();\n        assert(carry === -1);\n        carry = 0;\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 67108863;\n        }\n        this.negative = 1;\n        return this.strip();\n      };\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        }\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n          a = diff;\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);\n          qj = Math.min(qj / bhi | 0, 67108863);\n          a._ishlnsubmul(b, qj, j);\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n            a._ishlnsubmul(b, 1, j);\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n        if (q) {\n          q.strip();\n        }\n        a.strip();\n        if (mode !== \"div\" && shift !== 0) {\n          a.iushrn(shift);\n        }\n        return {\n          div: q || null,\n          mod: a\n        };\n      };\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n          return {\n            div,\n            mod\n          };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          return {\n            div,\n            mod: res.mod\n          };\n        }\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n          return {\n            div: res.div,\n            mod\n          };\n        }\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        }\n        if (num.length === 1) {\n          if (mode === \"div\") {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n          if (mode === \"mod\") {\n            return {\n              div: null,\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n        return this._wordDiv(num, mode);\n      };\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n      };\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n      };\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n      };\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        if (dm.mod.isZero())\n          return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        if (cmp < 0 || r2 === 1 && cmp === 0)\n          return dm.div;\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n      BN.prototype.modn = function modn(num) {\n        assert(num <= 67108863);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return acc;\n      };\n      BN.prototype.idivn = function idivn(num) {\n        assert(num <= 67108863);\n        var carry = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 67108864;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n        return this.strip();\n      };\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        }\n        var A = new BN(1);\n        var B = new BN(0);\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            x.iushrn(i);\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            y.iushrn(j);\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      };\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            a.iushrn(i);\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n              x1.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            b.iushrn(j);\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n              x2.iushrn(1);\n            }\n          }\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n        return res;\n      };\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero())\n          return num.abs();\n        if (num.isZero())\n          return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n          var r = a.cmp(b);\n          if (r < 0) {\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n          a.isub(b);\n        } while (true);\n        return b.iushln(shift);\n      };\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      };\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      };\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s) {\n          this._expand(s + 1);\n          this.words[s] |= q;\n          return this;\n        }\n        var carry = q;\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 67108863;\n          this.words[i] = w;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative)\n          return -1;\n        if (this.negative === 0 && negative)\n          return 1;\n        this.strip();\n        var res;\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n          assert(num <= 67108863, \"Number is too big\");\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0)\n          return -1;\n        if (this.negative === 0 && num.negative !== 0)\n          return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.ucmp = function ucmp(num) {\n        if (this.length > num.length)\n          return 1;\n        if (this.length < num.length)\n          return -1;\n        var res = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b)\n            continue;\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n          break;\n        }\n        return res;\n      };\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      };\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n      };\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n      };\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n      };\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n      };\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n      };\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n      };\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n      };\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n      };\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n      };\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n      };\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n      };\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n      };\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n      };\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n      };\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n      };\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function MPrime(name, p) {\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n      MPrime.prototype.ireduce = function ireduce(num) {\n        var r = num;\n        var rlen;\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== void 0) {\n            r.strip();\n          } else {\n            r._strip();\n          }\n        }\n        return r;\n      };\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n      function K256() {\n        MPrime.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      inherits(K256, MPrime);\n      K256.prototype.split = function split(input, output) {\n        var mask = 4194303;\n        var outLen = Math.min(input.length, 9);\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        }\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n      K256.prototype.imulK = function imulK(num) {\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        var lo = 0;\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 977;\n          num.words[i] = lo & 67108863;\n          lo = w * 64 + (lo / 67108864 | 0);\n        }\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n        return num;\n      };\n      function P224() {\n        MPrime.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      inherits(P224, MPrime);\n      function P192() {\n        MPrime.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      inherits(P192, MPrime);\n      function P25519() {\n        MPrime.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      inherits(P25519, MPrime);\n      P25519.prototype.imulK = function imulK(num) {\n        var carry = 0;\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 19 + carry;\n          var lo = hi & 67108863;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n        return num;\n      };\n      BN._prime = function prime(name) {\n        if (primes[name])\n          return primes[name];\n        var prime2;\n        if (name === \"k256\") {\n          prime2 = new K256();\n        } else if (name === \"p224\") {\n          prime2 = new P224();\n        } else if (name === \"p192\") {\n          prime2 = new P192();\n        } else if (name === \"p25519\") {\n          prime2 = new P25519();\n        } else {\n          throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime2;\n        return prime2;\n      };\n      function Red(m) {\n        if (typeof m === \"string\") {\n          var prime = BN._prime(m);\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), \"modulus must be greater than 1\");\n          this.m = m;\n          this.prime = null;\n        }\n      }\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n      };\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(\n          a.red && a.red === b.red,\n          \"red works only with red numbers\"\n        );\n      };\n      Red.prototype.imod = function imod(a) {\n        if (this.prime)\n          return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n      };\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n      };\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res;\n      };\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res;\n      };\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n      };\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n      };\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n      };\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero())\n          return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        }\n        var q = this.m.subn(1);\n        var s = 0;\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n        return r;\n      };\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero())\n          return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0)\n          return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n          start = 26;\n        }\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0))\n              continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n          start = 26;\n        }\n        return res;\n      };\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      };\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n      inherits(Mont, Red);\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero())\n          return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.invm = function invm(a) {\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(typeof module === \"undefined\" || module, exports);\n  }\n});\n\n// node_modules/public-encrypt/withPublic.js\nvar require_withPublic = __commonJS({\n  \"node_modules/public-encrypt/withPublic.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn7();\n    var Buffer2 = require_safe_buffer().Buffer;\n    function withPublic(paddedMsg, key) {\n      return Buffer2.from(paddedMsg.toRed(BN.mont(key.modulus)).redPow(new BN(key.publicExponent)).fromRed().toArray());\n    }\n    module.exports = withPublic;\n  }\n});\n\n// node_modules/public-encrypt/publicEncrypt.js\nvar require_publicEncrypt = __commonJS({\n  \"node_modules/public-encrypt/publicEncrypt.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var parseKeys = require_parse_asn1();\n    var randomBytes = require_browser();\n    var createHash = require_browser3();\n    var mgf = require_mgf();\n    var xor = require_xor();\n    var BN = require_bn7();\n    var withPublic = require_withPublic();\n    var crt = require_browserify_rsa();\n    var Buffer2 = require_safe_buffer().Buffer;\n    module.exports = function publicEncrypt(publicKey, msg, reverse) {\n      var padding;\n      if (publicKey.padding) {\n        padding = publicKey.padding;\n      } else if (reverse) {\n        padding = 1;\n      } else {\n        padding = 4;\n      }\n      var key = parseKeys(publicKey);\n      var paddedMsg;\n      if (padding === 4) {\n        paddedMsg = oaep(key, msg);\n      } else if (padding === 1) {\n        paddedMsg = pkcs1(key, msg, reverse);\n      } else if (padding === 3) {\n        paddedMsg = new BN(msg);\n        if (paddedMsg.cmp(key.modulus) >= 0) {\n          throw new Error(\"data too long for modulus\");\n        }\n      } else {\n        throw new Error(\"unknown padding\");\n      }\n      if (reverse) {\n        return crt(paddedMsg, key);\n      } else {\n        return withPublic(paddedMsg, key);\n      }\n    };\n    function oaep(key, msg) {\n      var k = key.modulus.byteLength();\n      var mLen = msg.length;\n      var iHash = createHash(\"sha1\").update(Buffer2.alloc(0)).digest();\n      var hLen = iHash.length;\n      var hLen2 = 2 * hLen;\n      if (mLen > k - hLen2 - 2) {\n        throw new Error(\"message too long\");\n      }\n      var ps = Buffer2.alloc(k - mLen - hLen2 - 2);\n      var dblen = k - hLen - 1;\n      var seed = randomBytes(hLen);\n      var maskedDb = xor(Buffer2.concat([iHash, ps, Buffer2.alloc(1, 1), msg], dblen), mgf(seed, dblen));\n      var maskedSeed = xor(seed, mgf(maskedDb, hLen));\n      return new BN(Buffer2.concat([Buffer2.alloc(1), maskedSeed, maskedDb], k));\n    }\n    function pkcs1(key, msg, reverse) {\n      var mLen = msg.length;\n      var k = key.modulus.byteLength();\n      if (mLen > k - 11) {\n        throw new Error(\"message too long\");\n      }\n      var ps;\n      if (reverse) {\n        ps = Buffer2.alloc(k - mLen - 3, 255);\n      } else {\n        ps = nonZero(k - mLen - 3);\n      }\n      return new BN(Buffer2.concat([Buffer2.from([0, reverse ? 1 : 2]), ps, Buffer2.alloc(1), msg], k));\n    }\n    function nonZero(len) {\n      var out = Buffer2.allocUnsafe(len);\n      var i = 0;\n      var cache = randomBytes(len * 2);\n      var cur = 0;\n      var num;\n      while (i < len) {\n        if (cur === cache.length) {\n          cache = randomBytes(len * 2);\n          cur = 0;\n        }\n        num = cache[cur++];\n        if (num) {\n          out[i++] = num;\n        }\n      }\n      return out;\n    }\n  }\n});\n\n// node_modules/public-encrypt/privateDecrypt.js\nvar require_privateDecrypt = __commonJS({\n  \"node_modules/public-encrypt/privateDecrypt.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var parseKeys = require_parse_asn1();\n    var mgf = require_mgf();\n    var xor = require_xor();\n    var BN = require_bn7();\n    var crt = require_browserify_rsa();\n    var createHash = require_browser3();\n    var withPublic = require_withPublic();\n    var Buffer2 = require_safe_buffer().Buffer;\n    module.exports = function privateDecrypt(privateKey, enc, reverse) {\n      var padding;\n      if (privateKey.padding) {\n        padding = privateKey.padding;\n      } else if (reverse) {\n        padding = 1;\n      } else {\n        padding = 4;\n      }\n      var key = parseKeys(privateKey);\n      var k = key.modulus.byteLength();\n      if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {\n        throw new Error(\"decryption error\");\n      }\n      var msg;\n      if (reverse) {\n        msg = withPublic(new BN(enc), key);\n      } else {\n        msg = crt(enc, key);\n      }\n      var zBuffer = Buffer2.alloc(k - msg.length);\n      msg = Buffer2.concat([zBuffer, msg], k);\n      if (padding === 4) {\n        return oaep(key, msg);\n      } else if (padding === 1) {\n        return pkcs1(key, msg, reverse);\n      } else if (padding === 3) {\n        return msg;\n      } else {\n        throw new Error(\"unknown padding\");\n      }\n    };\n    function oaep(key, msg) {\n      var k = key.modulus.byteLength();\n      var iHash = createHash(\"sha1\").update(Buffer2.alloc(0)).digest();\n      var hLen = iHash.length;\n      if (msg[0] !== 0) {\n        throw new Error(\"decryption error\");\n      }\n      var maskedSeed = msg.slice(1, hLen + 1);\n      var maskedDb = msg.slice(hLen + 1);\n      var seed = xor(maskedSeed, mgf(maskedDb, hLen));\n      var db = xor(maskedDb, mgf(seed, k - hLen - 1));\n      if (compare(iHash, db.slice(0, hLen))) {\n        throw new Error(\"decryption error\");\n      }\n      var i = hLen;\n      while (db[i] === 0) {\n        i++;\n      }\n      if (db[i++] !== 1) {\n        throw new Error(\"decryption error\");\n      }\n      return db.slice(i);\n    }\n    function pkcs1(key, msg, reverse) {\n      var p1 = msg.slice(0, 2);\n      var i = 2;\n      var status = 0;\n      while (msg[i++] !== 0) {\n        if (i >= msg.length) {\n          status++;\n          break;\n        }\n      }\n      var ps = msg.slice(2, i - 1);\n      if (p1.toString(\"hex\") !== \"0002\" && !reverse || p1.toString(\"hex\") !== \"0001\" && reverse) {\n        status++;\n      }\n      if (ps.length < 8) {\n        status++;\n      }\n      if (status) {\n        throw new Error(\"decryption error\");\n      }\n      return msg.slice(i);\n    }\n    function compare(a, b) {\n      a = Buffer2.from(a);\n      b = Buffer2.from(b);\n      var dif = 0;\n      var len = a.length;\n      if (a.length !== b.length) {\n        dif++;\n        len = Math.min(a.length, b.length);\n      }\n      var i = -1;\n      while (++i < len) {\n        dif += a[i] ^ b[i];\n      }\n      return dif;\n    }\n  }\n});\n\n// node_modules/public-encrypt/browser.js\nvar require_browser11 = __commonJS({\n  \"node_modules/public-encrypt/browser.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    exports.publicEncrypt = require_publicEncrypt();\n    exports.privateDecrypt = require_privateDecrypt();\n    exports.privateEncrypt = function privateEncrypt(key, buf) {\n      return exports.publicEncrypt(key, buf, true);\n    };\n    exports.publicDecrypt = function publicDecrypt(key, buf) {\n      return exports.privateDecrypt(key, buf, true);\n    };\n  }\n});\n\n// node_modules/randomfill/browser.js\nvar require_browser12 = __commonJS({\n  \"node_modules/randomfill/browser.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    function oldBrowser() {\n      throw new Error(\"secure random number generation not supported by this browser\\nuse chrome, FireFox or Internet Explorer 11\");\n    }\n    var safeBuffer = require_safe_buffer();\n    var randombytes = require_browser();\n    var Buffer2 = safeBuffer.Buffer;\n    var kBufferMaxLength = safeBuffer.kMaxLength;\n    var crypto = global.crypto || global.msCrypto;\n    var kMaxUint32 = Math.pow(2, 32) - 1;\n    function assertOffset(offset, length) {\n      if (typeof offset !== \"number\" || offset !== offset) {\n        throw new TypeError(\"offset must be a number\");\n      }\n      if (offset > kMaxUint32 || offset < 0) {\n        throw new TypeError(\"offset must be a uint32\");\n      }\n      if (offset > kBufferMaxLength || offset > length) {\n        throw new RangeError(\"offset out of range\");\n      }\n    }\n    function assertSize(size, offset, length) {\n      if (typeof size !== \"number\" || size !== size) {\n        throw new TypeError(\"size must be a number\");\n      }\n      if (size > kMaxUint32 || size < 0) {\n        throw new TypeError(\"size must be a uint32\");\n      }\n      if (size + offset > length || size > kBufferMaxLength) {\n        throw new RangeError(\"buffer too small\");\n      }\n    }\n    if (crypto && crypto.getRandomValues || !process.browser) {\n      exports.randomFill = randomFill;\n      exports.randomFillSync = randomFillSync;\n    } else {\n      exports.randomFill = oldBrowser;\n      exports.randomFillSync = oldBrowser;\n    }\n    function randomFill(buf, offset, size, cb) {\n      if (!Buffer2.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n        throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array');\n      }\n      if (typeof offset === \"function\") {\n        cb = offset;\n        offset = 0;\n        size = buf.length;\n      } else if (typeof size === \"function\") {\n        cb = size;\n        size = buf.length - offset;\n      } else if (typeof cb !== \"function\") {\n        throw new TypeError('\"cb\" argument must be a function');\n      }\n      assertOffset(offset, buf.length);\n      assertSize(size, offset, buf.length);\n      return actualFill(buf, offset, size, cb);\n    }\n    function actualFill(buf, offset, size, cb) {\n      if (process.browser) {\n        var ourBuf = buf.buffer;\n        var uint = new Uint8Array(ourBuf, offset, size);\n        crypto.getRandomValues(uint);\n        if (cb) {\n          process.nextTick(function() {\n            cb(null, buf);\n          });\n          return;\n        }\n        return buf;\n      }\n      if (cb) {\n        randombytes(size, function(err, bytes2) {\n          if (err) {\n            return cb(err);\n          }\n          bytes2.copy(buf, offset);\n          cb(null, buf);\n        });\n        return;\n      }\n      var bytes = randombytes(size);\n      bytes.copy(buf, offset);\n      return buf;\n    }\n    function randomFillSync(buf, offset, size) {\n      if (typeof offset === \"undefined\") {\n        offset = 0;\n      }\n      if (!Buffer2.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n        throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array');\n      }\n      assertOffset(offset, buf.length);\n      if (size === void 0)\n        size = buf.length - offset;\n      assertSize(size, offset, buf.length);\n      return actualFill(buf, offset, size);\n    }\n  }\n});\n\n// node_modules/crypto-browserify/index.js\nvar require_crypto_browserify = __commonJS({\n  \"node_modules/crypto-browserify/index.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require_browser();\n    exports.createHash = exports.Hash = require_browser3();\n    exports.createHmac = exports.Hmac = require_browser4();\n    var algos = require_algos();\n    var algoKeys = Object.keys(algos);\n    var hashes = [\"sha1\", \"sha224\", \"sha256\", \"sha384\", \"sha512\", \"md5\", \"rmd160\"].concat(algoKeys);\n    exports.getHashes = function() {\n      return hashes;\n    };\n    var p = require_browser5();\n    exports.pbkdf2 = p.pbkdf2;\n    exports.pbkdf2Sync = p.pbkdf2Sync;\n    var aes = require_browser7();\n    exports.Cipher = aes.Cipher;\n    exports.createCipher = aes.createCipher;\n    exports.Cipheriv = aes.Cipheriv;\n    exports.createCipheriv = aes.createCipheriv;\n    exports.Decipher = aes.Decipher;\n    exports.createDecipher = aes.createDecipher;\n    exports.Decipheriv = aes.Decipheriv;\n    exports.createDecipheriv = aes.createDecipheriv;\n    exports.getCiphers = aes.getCiphers;\n    exports.listCiphers = aes.listCiphers;\n    var dh = require_browser8();\n    exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;\n    exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;\n    exports.getDiffieHellman = dh.getDiffieHellman;\n    exports.createDiffieHellman = dh.createDiffieHellman;\n    exports.DiffieHellman = dh.DiffieHellman;\n    var sign = require_browser9();\n    exports.createSign = sign.createSign;\n    exports.Sign = sign.Sign;\n    exports.createVerify = sign.createVerify;\n    exports.Verify = sign.Verify;\n    exports.createECDH = require_browser10();\n    var publicEncrypt = require_browser11();\n    exports.publicEncrypt = publicEncrypt.publicEncrypt;\n    exports.privateEncrypt = publicEncrypt.privateEncrypt;\n    exports.publicDecrypt = publicEncrypt.publicDecrypt;\n    exports.privateDecrypt = publicEncrypt.privateDecrypt;\n    var rf = require_browser12();\n    exports.randomFill = rf.randomFill;\n    exports.randomFillSync = rf.randomFillSync;\n    exports.createCredentials = function() {\n      throw new Error([\n        \"sorry, createCredentials is not implemented yet\",\n        \"we accept pull requests\",\n        \"https://github.com/crypto-browserify/crypto-browserify\"\n      ].join(\"\\n\"));\n    };\n    exports.constants = {\n      \"DH_CHECK_P_NOT_SAFE_PRIME\": 2,\n      \"DH_CHECK_P_NOT_PRIME\": 1,\n      \"DH_UNABLE_TO_CHECK_GENERATOR\": 4,\n      \"DH_NOT_SUITABLE_GENERATOR\": 8,\n      \"NPN_ENABLED\": 1,\n      \"ALPN_ENABLED\": 1,\n      \"RSA_PKCS1_PADDING\": 1,\n      \"RSA_SSLV23_PADDING\": 2,\n      \"RSA_NO_PADDING\": 3,\n      \"RSA_PKCS1_OAEP_PADDING\": 4,\n      \"RSA_X931_PADDING\": 5,\n      \"RSA_PKCS1_PSS_PADDING\": 6,\n      \"POINT_CONVERSION_COMPRESSED\": 2,\n      \"POINT_CONVERSION_UNCOMPRESSED\": 4,\n      \"POINT_CONVERSION_HYBRID\": 6\n    };\n  }\n});\n\nexport {\n  require_safe_buffer,\n  require_inherits_browser,\n  require_events,\n  require_shams,\n  require_get_intrinsic,\n  require_has_property_descriptors,\n  require_define_data_property,\n  require_call_bind,\n  require_callBound,\n  require_util,\n  require_string_decoder,\n  require_readable_browser,\n  require_stream_browserify,\n  require_safer,\n  require_crypto_browserify\n};\n/*! Bundled license information:\n\nsafe-buffer/index.js:\n  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n*/\n//# sourceMappingURL=chunk-OYHNC6W5.js.map\n",
      "start": 1703289449957,
      "end": 1703289449993,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1703289449993,
      "end": 1703289449993,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703289449993,
      "end": 1703289449993,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703289449993,
      "end": 1703289449993,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703289449993,
      "end": 1703289449993,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703289449993,
      "end": 1703289449993,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703289449993,
      "end": 1703289449993,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703289449993,
      "end": 1703289449993,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703289449993,
      "end": 1703289449995,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703289449995,
      "end": 1703289449996,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703289449996,
      "end": 1703289449996,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703289449996,
      "end": 1703289449996,
      "order": "normal"
    },
    {
      "name": "vite:client-inject",
      "start": 1703289449996,
      "end": 1703289449997,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "\"use strict\";\n(() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n    // If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n    mod\n  ));\n\n  // node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\n  var require_base64_js = __commonJS({\n    \"node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\"(exports) {\n      \"use strict\";\n      init_dist();\n      exports.byteLength = byteLength;\n      exports.toByteArray = toByteArray;\n      exports.fromByteArray = fromByteArray;\n      var lookup = [];\n      var revLookup = [];\n      var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n      var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n      for (i = 0, len = code.length; i < len; ++i) {\n        lookup[i] = code[i];\n        revLookup[code.charCodeAt(i)] = i;\n      }\n      var i;\n      var len;\n      revLookup[\"-\".charCodeAt(0)] = 62;\n      revLookup[\"_\".charCodeAt(0)] = 63;\n      function getLens(b64) {\n        var len2 = b64.length;\n        if (len2 % 4 > 0) {\n          throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        }\n        var validLen = b64.indexOf(\"=\");\n        if (validLen === -1)\n          validLen = len2;\n        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n        return [validLen, placeHoldersLen];\n      }\n      function byteLength(b64) {\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n      function _byteLength(b64, validLen, placeHoldersLen) {\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n      function toByteArray(b64) {\n        var tmp;\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n        var curByte = 0;\n        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n        var i2;\n        for (i2 = 0; i2 < len2; i2 += 4) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n          arr[curByte++] = tmp >> 16 & 255;\n          arr[curByte++] = tmp >> 8 & 255;\n          arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 2) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n          arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 1) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n          arr[curByte++] = tmp >> 8 & 255;\n          arr[curByte++] = tmp & 255;\n        }\n        return arr;\n      }\n      function tripletToBase64(num) {\n        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n      }\n      function encodeChunk(uint8, start, end) {\n        var tmp;\n        var output = [];\n        for (var i2 = start; i2 < end; i2 += 3) {\n          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n          output.push(tripletToBase64(tmp));\n        }\n        return output.join(\"\");\n      }\n      function fromByteArray(uint8) {\n        var tmp;\n        var len2 = uint8.length;\n        var extraBytes = len2 % 3;\n        var parts = [];\n        var maxChunkLength = 16383;\n        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\n          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n        }\n        if (extraBytes === 1) {\n          tmp = uint8[len2 - 1];\n          parts.push(\n            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\"\n          );\n        } else if (extraBytes === 2) {\n          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n          parts.push(\n            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\"\n          );\n        }\n        return parts.join(\"\");\n      }\n    }\n  });\n\n  // node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\n  var require_ieee754 = __commonJS({\n    \"node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\"(exports) {\n      init_dist();\n      exports.read = function(buffer, offset, isLE, mLen, nBytes) {\n        var e, m;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var nBits = -7;\n        var i = isLE ? nBytes - 1 : 0;\n        var d = isLE ? -1 : 1;\n        var s2 = buffer[offset + i];\n        i += d;\n        e = s2 & (1 << -nBits) - 1;\n        s2 >>= -nBits;\n        nBits += eLen;\n        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {\n        }\n        m = e & (1 << -nBits) - 1;\n        e >>= -nBits;\n        nBits += mLen;\n        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {\n        }\n        if (e === 0) {\n          e = 1 - eBias;\n        } else if (e === eMax) {\n          return m ? NaN : (s2 ? -1 : 1) * Infinity;\n        } else {\n          m = m + Math.pow(2, mLen);\n          e = e - eBias;\n        }\n        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);\n      };\n      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n        var e, m, c;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n        var i = isLE ? 0 : nBytes - 1;\n        var d = isLE ? 1 : -1;\n        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n        value = Math.abs(value);\n        if (isNaN(value) || value === Infinity) {\n          m = isNaN(value) ? 1 : 0;\n          e = eMax;\n        } else {\n          e = Math.floor(Math.log(value) / Math.LN2);\n          if (value * (c = Math.pow(2, -e)) < 1) {\n            e--;\n            c *= 2;\n          }\n          if (e + eBias >= 1) {\n            value += rt / c;\n          } else {\n            value += rt * Math.pow(2, 1 - eBias);\n          }\n          if (value * c >= 2) {\n            e++;\n            c /= 2;\n          }\n          if (e + eBias >= eMax) {\n            m = 0;\n            e = eMax;\n          } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen);\n            e = e + eBias;\n          } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n            e = 0;\n          }\n        }\n        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {\n        }\n        e = e << mLen | m;\n        eLen += mLen;\n        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {\n        }\n        buffer[offset + i - d] |= s2 * 128;\n      };\n    }\n  });\n\n  // node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js\n  var require_buffer = __commonJS({\n    \"node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js\"(exports) {\n      \"use strict\";\n      init_dist();\n      var base64 = require_base64_js();\n      var ieee754 = require_ieee754();\n      var customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") : null;\n      exports.Buffer = Buffer2;\n      exports.SlowBuffer = SlowBuffer;\n      exports.INSPECT_MAX_BYTES = 50;\n      var K_MAX_LENGTH = 2147483647;\n      exports.kMaxLength = K_MAX_LENGTH;\n      var { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;\n      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();\n      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n        console.error(\n          \"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"\n        );\n      }\n      function typedArraySupport() {\n        try {\n          const arr = new GlobalUint8Array(1);\n          const proto = { foo: function() {\n            return 42;\n          } };\n          Object.setPrototypeOf(proto, GlobalUint8Array.prototype);\n          Object.setPrototypeOf(arr, proto);\n          return arr.foo() === 42;\n        } catch (e) {\n          return false;\n        }\n      }\n      Object.defineProperty(Buffer2.prototype, \"parent\", {\n        enumerable: true,\n        get: function() {\n          if (!Buffer2.isBuffer(this))\n            return void 0;\n          return this.buffer;\n        }\n      });\n      Object.defineProperty(Buffer2.prototype, \"offset\", {\n        enumerable: true,\n        get: function() {\n          if (!Buffer2.isBuffer(this))\n            return void 0;\n          return this.byteOffset;\n        }\n      });\n      function createBuffer(length) {\n        if (length > K_MAX_LENGTH) {\n          throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n        }\n        const buf = new GlobalUint8Array(length);\n        Object.setPrototypeOf(buf, Buffer2.prototype);\n        return buf;\n      }\n      function Buffer2(arg, encodingOrOffset, length) {\n        if (typeof arg === \"number\") {\n          if (typeof encodingOrOffset === \"string\") {\n            throw new TypeError(\n              'The \"string\" argument must be of type string. Received type number'\n            );\n          }\n          return allocUnsafe(arg);\n        }\n        return from(arg, encodingOrOffset, length);\n      }\n      Buffer2.poolSize = 8192;\n      function from(value, encodingOrOffset, length) {\n        if (typeof value === \"string\") {\n          return fromString(value, encodingOrOffset);\n        }\n        if (GlobalArrayBuffer.isView(value)) {\n          return fromArrayView(value);\n        }\n        if (value == null) {\n          throw new TypeError(\n            \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n          );\n        }\n        if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n        if (typeof GlobalSharedArrayBuffer !== \"undefined\" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n        if (typeof value === \"number\") {\n          throw new TypeError(\n            'The \"value\" argument must not be of type number. Received type number'\n          );\n        }\n        const valueOf = value.valueOf && value.valueOf();\n        if (valueOf != null && valueOf !== value) {\n          return Buffer2.from(valueOf, encodingOrOffset, length);\n        }\n        const b = fromObject(value);\n        if (b)\n          return b;\n        if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n          return Buffer2.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n        }\n        throw new TypeError(\n          \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n        );\n      }\n      Buffer2.from = function(value, encodingOrOffset, length) {\n        return from(value, encodingOrOffset, length);\n      };\n      Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);\n      Object.setPrototypeOf(Buffer2, GlobalUint8Array);\n      function assertSize(size) {\n        if (typeof size !== \"number\") {\n          throw new TypeError('\"size\" argument must be of type number');\n        } else if (size < 0) {\n          throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n        }\n      }\n      function alloc(size, fill, encoding) {\n        assertSize(size);\n        if (size <= 0) {\n          return createBuffer(size);\n        }\n        if (fill !== void 0) {\n          return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n        }\n        return createBuffer(size);\n      }\n      Buffer2.alloc = function(size, fill, encoding) {\n        return alloc(size, fill, encoding);\n      };\n      function allocUnsafe(size) {\n        assertSize(size);\n        return createBuffer(size < 0 ? 0 : checked(size) | 0);\n      }\n      Buffer2.allocUnsafe = function(size) {\n        return allocUnsafe(size);\n      };\n      Buffer2.allocUnsafeSlow = function(size) {\n        return allocUnsafe(size);\n      };\n      function fromString(string, encoding) {\n        if (typeof encoding !== \"string\" || encoding === \"\") {\n          encoding = \"utf8\";\n        }\n        if (!Buffer2.isEncoding(encoding)) {\n          throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        const length = byteLength(string, encoding) | 0;\n        let buf = createBuffer(length);\n        const actual = buf.write(string, encoding);\n        if (actual !== length) {\n          buf = buf.slice(0, actual);\n        }\n        return buf;\n      }\n      function fromArrayLike(array) {\n        const length = array.length < 0 ? 0 : checked(array.length) | 0;\n        const buf = createBuffer(length);\n        for (let i = 0; i < length; i += 1) {\n          buf[i] = array[i] & 255;\n        }\n        return buf;\n      }\n      function fromArrayView(arrayView) {\n        if (isInstance(arrayView, GlobalUint8Array)) {\n          const copy = new GlobalUint8Array(arrayView);\n          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n        }\n        return fromArrayLike(arrayView);\n      }\n      function fromArrayBuffer(array, byteOffset, length) {\n        if (byteOffset < 0 || array.byteLength < byteOffset) {\n          throw new RangeError('\"offset\" is outside of buffer bounds');\n        }\n        if (array.byteLength < byteOffset + (length || 0)) {\n          throw new RangeError('\"length\" is outside of buffer bounds');\n        }\n        let buf;\n        if (byteOffset === void 0 && length === void 0) {\n          buf = new GlobalUint8Array(array);\n        } else if (length === void 0) {\n          buf = new GlobalUint8Array(array, byteOffset);\n        } else {\n          buf = new GlobalUint8Array(array, byteOffset, length);\n        }\n        Object.setPrototypeOf(buf, Buffer2.prototype);\n        return buf;\n      }\n      function fromObject(obj) {\n        if (Buffer2.isBuffer(obj)) {\n          const len = checked(obj.length) | 0;\n          const buf = createBuffer(len);\n          if (buf.length === 0) {\n            return buf;\n          }\n          obj.copy(buf, 0, 0, len);\n          return buf;\n        }\n        if (obj.length !== void 0) {\n          if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n            return createBuffer(0);\n          }\n          return fromArrayLike(obj);\n        }\n        if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n          return fromArrayLike(obj.data);\n        }\n      }\n      function checked(length) {\n        if (length >= K_MAX_LENGTH) {\n          throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n        }\n        return length | 0;\n      }\n      function SlowBuffer(length) {\n        if (+length != length) {\n          length = 0;\n        }\n        return Buffer2.alloc(+length);\n      }\n      Buffer2.isBuffer = function isBuffer(b) {\n        return b != null && b._isBuffer === true && b !== Buffer2.prototype;\n      };\n      Buffer2.compare = function compare(a, b) {\n        if (isInstance(a, GlobalUint8Array))\n          a = Buffer2.from(a, a.offset, a.byteLength);\n        if (isInstance(b, GlobalUint8Array))\n          b = Buffer2.from(b, b.offset, b.byteLength);\n        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {\n          throw new TypeError(\n            'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n          );\n        }\n        if (a === b)\n          return 0;\n        let x = a.length;\n        let y = b.length;\n        for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n          if (a[i] !== b[i]) {\n            x = a[i];\n            y = b[i];\n            break;\n          }\n        }\n        if (x < y)\n          return -1;\n        if (y < x)\n          return 1;\n        return 0;\n      };\n      Buffer2.isEncoding = function isEncoding(encoding) {\n        switch (String(encoding).toLowerCase()) {\n          case \"hex\":\n          case \"utf8\":\n          case \"utf-8\":\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n          case \"base64\":\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return true;\n          default:\n            return false;\n        }\n      };\n      Buffer2.concat = function concat(list, length) {\n        if (!Array.isArray(list)) {\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        }\n        if (list.length === 0) {\n          return Buffer2.alloc(0);\n        }\n        let i;\n        if (length === void 0) {\n          length = 0;\n          for (i = 0; i < list.length; ++i) {\n            length += list[i].length;\n          }\n        }\n        const buffer = Buffer2.allocUnsafe(length);\n        let pos = 0;\n        for (i = 0; i < list.length; ++i) {\n          let buf = list[i];\n          if (isInstance(buf, GlobalUint8Array)) {\n            if (pos + buf.length > buffer.length) {\n              if (!Buffer2.isBuffer(buf))\n                buf = Buffer2.from(buf);\n              buf.copy(buffer, pos);\n            } else {\n              GlobalUint8Array.prototype.set.call(\n                buffer,\n                buf,\n                pos\n              );\n            }\n          } else if (!Buffer2.isBuffer(buf)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers');\n          } else {\n            buf.copy(buffer, pos);\n          }\n          pos += buf.length;\n        }\n        return buffer;\n      };\n      function byteLength(string, encoding) {\n        if (Buffer2.isBuffer(string)) {\n          return string.length;\n        }\n        if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {\n          return string.byteLength;\n        }\n        if (typeof string !== \"string\") {\n          throw new TypeError(\n            'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string\n          );\n        }\n        const len = string.length;\n        const mustMatch = arguments.length > 2 && arguments[2] === true;\n        if (!mustMatch && len === 0)\n          return 0;\n        let loweredCase = false;\n        for (; ; ) {\n          switch (encoding) {\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n              return len;\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8ToBytes(string).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return len * 2;\n            case \"hex\":\n              return len >>> 1;\n            case \"base64\":\n              return base64ToBytes(string).length;\n            default:\n              if (loweredCase) {\n                return mustMatch ? -1 : utf8ToBytes(string).length;\n              }\n              encoding = (\"\" + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n      Buffer2.byteLength = byteLength;\n      function slowToString(encoding, start, end) {\n        let loweredCase = false;\n        if (start === void 0 || start < 0) {\n          start = 0;\n        }\n        if (start > this.length) {\n          return \"\";\n        }\n        if (end === void 0 || end > this.length) {\n          end = this.length;\n        }\n        if (end <= 0) {\n          return \"\";\n        }\n        end >>>= 0;\n        start >>>= 0;\n        if (end <= start) {\n          return \"\";\n        }\n        if (!encoding)\n          encoding = \"utf8\";\n        while (true) {\n          switch (encoding) {\n            case \"hex\":\n              return hexSlice(this, start, end);\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8Slice(this, start, end);\n            case \"ascii\":\n              return asciiSlice(this, start, end);\n            case \"latin1\":\n            case \"binary\":\n              return latin1Slice(this, start, end);\n            case \"base64\":\n              return base64Slice(this, start, end);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return utf16leSlice(this, start, end);\n            default:\n              if (loweredCase)\n                throw new TypeError(\"Unknown encoding: \" + encoding);\n              encoding = (encoding + \"\").toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n      Buffer2.prototype._isBuffer = true;\n      function swap(b, n, m) {\n        const i = b[n];\n        b[n] = b[m];\n        b[m] = i;\n      }\n      Buffer2.prototype.swap16 = function swap16() {\n        const len = this.length;\n        if (len % 2 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n        }\n        for (let i = 0; i < len; i += 2) {\n          swap(this, i, i + 1);\n        }\n        return this;\n      };\n      Buffer2.prototype.swap32 = function swap32() {\n        const len = this.length;\n        if (len % 4 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n        }\n        for (let i = 0; i < len; i += 4) {\n          swap(this, i, i + 3);\n          swap(this, i + 1, i + 2);\n        }\n        return this;\n      };\n      Buffer2.prototype.swap64 = function swap64() {\n        const len = this.length;\n        if (len % 8 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n        }\n        for (let i = 0; i < len; i += 8) {\n          swap(this, i, i + 7);\n          swap(this, i + 1, i + 6);\n          swap(this, i + 2, i + 5);\n          swap(this, i + 3, i + 4);\n        }\n        return this;\n      };\n      Buffer2.prototype.toString = function toString() {\n        const length = this.length;\n        if (length === 0)\n          return \"\";\n        if (arguments.length === 0)\n          return utf8Slice(this, 0, length);\n        return slowToString.apply(this, arguments);\n      };\n      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;\n      Buffer2.prototype.equals = function equals(b) {\n        if (!Buffer2.isBuffer(b))\n          throw new TypeError(\"Argument must be a Buffer\");\n        if (this === b)\n          return true;\n        return Buffer2.compare(this, b) === 0;\n      };\n      Buffer2.prototype.inspect = function inspect() {\n        let str = \"\";\n        const max = exports.INSPECT_MAX_BYTES;\n        str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n        if (this.length > max)\n          str += \" ... \";\n        return \"<Buffer \" + str + \">\";\n      };\n      if (customInspectSymbol) {\n        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;\n      }\n      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n        if (isInstance(target, GlobalUint8Array)) {\n          target = Buffer2.from(target, target.offset, target.byteLength);\n        }\n        if (!Buffer2.isBuffer(target)) {\n          throw new TypeError(\n            'The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target\n          );\n        }\n        if (start === void 0) {\n          start = 0;\n        }\n        if (end === void 0) {\n          end = target ? target.length : 0;\n        }\n        if (thisStart === void 0) {\n          thisStart = 0;\n        }\n        if (thisEnd === void 0) {\n          thisEnd = this.length;\n        }\n        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n          throw new RangeError(\"out of range index\");\n        }\n        if (thisStart >= thisEnd && start >= end) {\n          return 0;\n        }\n        if (thisStart >= thisEnd) {\n          return -1;\n        }\n        if (start >= end) {\n          return 1;\n        }\n        start >>>= 0;\n        end >>>= 0;\n        thisStart >>>= 0;\n        thisEnd >>>= 0;\n        if (this === target)\n          return 0;\n        let x = thisEnd - thisStart;\n        let y = end - start;\n        const len = Math.min(x, y);\n        const thisCopy = this.slice(thisStart, thisEnd);\n        const targetCopy = target.slice(start, end);\n        for (let i = 0; i < len; ++i) {\n          if (thisCopy[i] !== targetCopy[i]) {\n            x = thisCopy[i];\n            y = targetCopy[i];\n            break;\n          }\n        }\n        if (x < y)\n          return -1;\n        if (y < x)\n          return 1;\n        return 0;\n      };\n      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n        if (buffer.length === 0)\n          return -1;\n        if (typeof byteOffset === \"string\") {\n          encoding = byteOffset;\n          byteOffset = 0;\n        } else if (byteOffset > 2147483647) {\n          byteOffset = 2147483647;\n        } else if (byteOffset < -2147483648) {\n          byteOffset = -2147483648;\n        }\n        byteOffset = +byteOffset;\n        if (numberIsNaN(byteOffset)) {\n          byteOffset = dir ? 0 : buffer.length - 1;\n        }\n        if (byteOffset < 0)\n          byteOffset = buffer.length + byteOffset;\n        if (byteOffset >= buffer.length) {\n          if (dir)\n            return -1;\n          else\n            byteOffset = buffer.length - 1;\n        } else if (byteOffset < 0) {\n          if (dir)\n            byteOffset = 0;\n          else\n            return -1;\n        }\n        if (typeof val === \"string\") {\n          val = Buffer2.from(val, encoding);\n        }\n        if (Buffer2.isBuffer(val)) {\n          if (val.length === 0) {\n            return -1;\n          }\n          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n        } else if (typeof val === \"number\") {\n          val = val & 255;\n          if (typeof GlobalUint8Array.prototype.indexOf === \"function\") {\n            if (dir) {\n              return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n            } else {\n              return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n            }\n          }\n          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n        }\n        throw new TypeError(\"val must be string, number or Buffer\");\n      }\n      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n        let indexSize = 1;\n        let arrLength = arr.length;\n        let valLength = val.length;\n        if (encoding !== void 0) {\n          encoding = String(encoding).toLowerCase();\n          if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n            if (arr.length < 2 || val.length < 2) {\n              return -1;\n            }\n            indexSize = 2;\n            arrLength /= 2;\n            valLength /= 2;\n            byteOffset /= 2;\n          }\n        }\n        function read(buf, i2) {\n          if (indexSize === 1) {\n            return buf[i2];\n          } else {\n            return buf.readUInt16BE(i2 * indexSize);\n          }\n        }\n        let i;\n        if (dir) {\n          let foundIndex = -1;\n          for (i = byteOffset; i < arrLength; i++) {\n            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n              if (foundIndex === -1)\n                foundIndex = i;\n              if (i - foundIndex + 1 === valLength)\n                return foundIndex * indexSize;\n            } else {\n              if (foundIndex !== -1)\n                i -= i - foundIndex;\n              foundIndex = -1;\n            }\n          }\n        } else {\n          if (byteOffset + valLength > arrLength)\n            byteOffset = arrLength - valLength;\n          for (i = byteOffset; i >= 0; i--) {\n            let found = true;\n            for (let j = 0; j < valLength; j++) {\n              if (read(arr, i + j) !== read(val, j)) {\n                found = false;\n                break;\n              }\n            }\n            if (found)\n              return i;\n          }\n        }\n        return -1;\n      }\n      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {\n        return this.indexOf(val, byteOffset, encoding) !== -1;\n      };\n      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n      };\n      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n      };\n      function hexWrite(buf, string, offset, length) {\n        offset = Number(offset) || 0;\n        const remaining = buf.length - offset;\n        if (!length) {\n          length = remaining;\n        } else {\n          length = Number(length);\n          if (length > remaining) {\n            length = remaining;\n          }\n        }\n        const strLen = string.length;\n        if (length > strLen / 2) {\n          length = strLen / 2;\n        }\n        let i;\n        for (i = 0; i < length; ++i) {\n          const parsed = parseInt(string.substr(i * 2, 2), 16);\n          if (numberIsNaN(parsed))\n            return i;\n          buf[offset + i] = parsed;\n        }\n        return i;\n      }\n      function utf8Write(buf, string, offset, length) {\n        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n      }\n      function asciiWrite(buf, string, offset, length) {\n        return blitBuffer(asciiToBytes(string), buf, offset, length);\n      }\n      function base64Write(buf, string, offset, length) {\n        return blitBuffer(base64ToBytes(string), buf, offset, length);\n      }\n      function ucs2Write(buf, string, offset, length) {\n        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n      }\n      Buffer2.prototype.write = function write(string, offset, length, encoding) {\n        if (offset === void 0) {\n          encoding = \"utf8\";\n          length = this.length;\n          offset = 0;\n        } else if (length === void 0 && typeof offset === \"string\") {\n          encoding = offset;\n          length = this.length;\n          offset = 0;\n        } else if (isFinite(offset)) {\n          offset = offset >>> 0;\n          if (isFinite(length)) {\n            length = length >>> 0;\n            if (encoding === void 0)\n              encoding = \"utf8\";\n          } else {\n            encoding = length;\n            length = void 0;\n          }\n        } else {\n          throw new Error(\n            \"Buffer.write(string, encoding, offset[, length]) is no longer supported\"\n          );\n        }\n        const remaining = this.length - offset;\n        if (length === void 0 || length > remaining)\n          length = remaining;\n        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n          throw new RangeError(\"Attempt to write outside buffer bounds\");\n        }\n        if (!encoding)\n          encoding = \"utf8\";\n        let loweredCase = false;\n        for (; ; ) {\n          switch (encoding) {\n            case \"hex\":\n              return hexWrite(this, string, offset, length);\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8Write(this, string, offset, length);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n              return asciiWrite(this, string, offset, length);\n            case \"base64\":\n              return base64Write(this, string, offset, length);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return ucs2Write(this, string, offset, length);\n            default:\n              if (loweredCase)\n                throw new TypeError(\"Unknown encoding: \" + encoding);\n              encoding = (\"\" + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      };\n      Buffer2.prototype.toJSON = function toJSON() {\n        return {\n          type: \"Buffer\",\n          data: Array.prototype.slice.call(this._arr || this, 0)\n        };\n      };\n      function base64Slice(buf, start, end) {\n        if (start === 0 && end === buf.length) {\n          return base64.fromByteArray(buf);\n        } else {\n          return base64.fromByteArray(buf.slice(start, end));\n        }\n      }\n      function utf8Slice(buf, start, end) {\n        end = Math.min(buf.length, end);\n        const res = [];\n        let i = start;\n        while (i < end) {\n          const firstByte = buf[i];\n          let codePoint = null;\n          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n          if (i + bytesPerSequence <= end) {\n            let secondByte, thirdByte, fourthByte, tempCodePoint;\n            switch (bytesPerSequence) {\n              case 1:\n                if (firstByte < 128) {\n                  codePoint = firstByte;\n                }\n                break;\n              case 2:\n                secondByte = buf[i + 1];\n                if ((secondByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n                  if (tempCodePoint > 127) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 3:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 4:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                fourthByte = buf[i + 3];\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n            }\n          }\n          if (codePoint === null) {\n            codePoint = 65533;\n            bytesPerSequence = 1;\n          } else if (codePoint > 65535) {\n            codePoint -= 65536;\n            res.push(codePoint >>> 10 & 1023 | 55296);\n            codePoint = 56320 | codePoint & 1023;\n          }\n          res.push(codePoint);\n          i += bytesPerSequence;\n        }\n        return decodeCodePointsArray(res);\n      }\n      var MAX_ARGUMENTS_LENGTH = 4096;\n      function decodeCodePointsArray(codePoints) {\n        const len = codePoints.length;\n        if (len <= MAX_ARGUMENTS_LENGTH) {\n          return String.fromCharCode.apply(String, codePoints);\n        }\n        let res = \"\";\n        let i = 0;\n        while (i < len) {\n          res += String.fromCharCode.apply(\n            String,\n            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n          );\n        }\n        return res;\n      }\n      function asciiSlice(buf, start, end) {\n        let ret = \"\";\n        end = Math.min(buf.length, end);\n        for (let i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i] & 127);\n        }\n        return ret;\n      }\n      function latin1Slice(buf, start, end) {\n        let ret = \"\";\n        end = Math.min(buf.length, end);\n        for (let i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i]);\n        }\n        return ret;\n      }\n      function hexSlice(buf, start, end) {\n        const len = buf.length;\n        if (!start || start < 0)\n          start = 0;\n        if (!end || end < 0 || end > len)\n          end = len;\n        let out = \"\";\n        for (let i = start; i < end; ++i) {\n          out += hexSliceLookupTable[buf[i]];\n        }\n        return out;\n      }\n      function utf16leSlice(buf, start, end) {\n        const bytes = buf.slice(start, end);\n        let res = \"\";\n        for (let i = 0; i < bytes.length - 1; i += 2) {\n          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n        }\n        return res;\n      }\n      Buffer2.prototype.slice = function slice(start, end) {\n        const len = this.length;\n        start = ~~start;\n        end = end === void 0 ? len : ~~end;\n        if (start < 0) {\n          start += len;\n          if (start < 0)\n            start = 0;\n        } else if (start > len) {\n          start = len;\n        }\n        if (end < 0) {\n          end += len;\n          if (end < 0)\n            end = 0;\n        } else if (end > len) {\n          end = len;\n        }\n        if (end < start)\n          end = start;\n        const newBuf = this.subarray(start, end);\n        Object.setPrototypeOf(newBuf, Buffer2.prototype);\n        return newBuf;\n      };\n      function checkOffset(offset, ext, length) {\n        if (offset % 1 !== 0 || offset < 0)\n          throw new RangeError(\"offset is not uint\");\n        if (offset + ext > length)\n          throw new RangeError(\"Trying to access beyond buffer length\");\n      }\n      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let val = this[offset];\n        let mul = 1;\n        let i = 0;\n        while (++i < byteLength2 && (mul *= 256)) {\n          val += this[offset + i] * mul;\n        }\n        return val;\n      };\n      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          checkOffset(offset, byteLength2, this.length);\n        }\n        let val = this[offset + --byteLength2];\n        let mul = 1;\n        while (byteLength2 > 0 && (mul *= 256)) {\n          val += this[offset + --byteLength2] * mul;\n        }\n        return val;\n      };\n      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 1, this.length);\n        return this[offset];\n      };\n      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        return this[offset] | this[offset + 1] << 8;\n      };\n      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        return this[offset] << 8 | this[offset + 1];\n      };\n      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n      };\n      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n      };\n      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n        return BigInt(lo) + (BigInt(hi) << BigInt(32));\n      });\n      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\n        return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n      });\n      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let val = this[offset];\n        let mul = 1;\n        let i = 0;\n        while (++i < byteLength2 && (mul *= 256)) {\n          val += this[offset + i] * mul;\n        }\n        mul *= 128;\n        if (val >= mul)\n          val -= Math.pow(2, 8 * byteLength2);\n        return val;\n      };\n      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let i = byteLength2;\n        let mul = 1;\n        let val = this[offset + --i];\n        while (i > 0 && (mul *= 256)) {\n          val += this[offset + --i] * mul;\n        }\n        mul *= 128;\n        if (val >= mul)\n          val -= Math.pow(2, 8 * byteLength2);\n        return val;\n      };\n      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 1, this.length);\n        if (!(this[offset] & 128))\n          return this[offset];\n        return (255 - this[offset] + 1) * -1;\n      };\n      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        const val = this[offset] | this[offset + 1] << 8;\n        return val & 32768 ? val | 4294901760 : val;\n      };\n      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        const val = this[offset + 1] | this[offset] << 8;\n        return val & 32768 ? val | 4294901760 : val;\n      };\n      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n      };\n      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n      };\n      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);\n        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n      });\n      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const val = (first << 24) + // Overflow\n        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\n      });\n      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, true, 23, 4);\n      };\n      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, false, 23, 4);\n      };\n      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, true, 52, 8);\n      };\n      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, false, 52, 8);\n      };\n      function checkInt(buf, value, offset, ext, max, min) {\n        if (!Buffer2.isBuffer(buf))\n          throw new TypeError('\"buffer\" argument must be a Buffer instance');\n        if (value > max || value < min)\n          throw new RangeError('\"value\" argument is out of bounds');\n        if (offset + ext > buf.length)\n          throw new RangeError(\"Index out of range\");\n      }\n      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\n        }\n        let mul = 1;\n        let i = 0;\n        this[offset] = value & 255;\n        while (++i < byteLength2 && (mul *= 256)) {\n          this[offset + i] = value / mul & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\n        }\n        let i = byteLength2 - 1;\n        let mul = 1;\n        this[offset + i] = value & 255;\n        while (--i >= 0 && (mul *= 256)) {\n          this[offset + i] = value / mul & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 1, 255, 0);\n        this[offset] = value & 255;\n        return offset + 1;\n      };\n      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 65535, 0);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 65535, 0);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 255;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 4294967295, 0);\n        this[offset + 3] = value >>> 24;\n        this[offset + 2] = value >>> 16;\n        this[offset + 1] = value >>> 8;\n        this[offset] = value & 255;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 4294967295, 0);\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 255;\n        return offset + 4;\n      };\n      function wrtBigUInt64LE(buf, value, offset, min, max) {\n        checkIntBI(value, min, max, buf, offset, 7);\n        let lo = Number(value & BigInt(4294967295));\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        return offset;\n      }\n      function wrtBigUInt64BE(buf, value, offset, min, max) {\n        checkIntBI(value, min, max, buf, offset, 7);\n        let lo = Number(value & BigInt(4294967295));\n        buf[offset + 7] = lo;\n        lo = lo >> 8;\n        buf[offset + 6] = lo;\n        lo = lo >> 8;\n        buf[offset + 5] = lo;\n        lo = lo >> 8;\n        buf[offset + 4] = lo;\n        let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n        buf[offset + 3] = hi;\n        hi = hi >> 8;\n        buf[offset + 2] = hi;\n        hi = hi >> 8;\n        buf[offset + 1] = hi;\n        hi = hi >> 8;\n        buf[offset] = hi;\n        return offset + 8;\n      }\n      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {\n        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n      });\n      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {\n        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n      });\n      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          const limit = Math.pow(2, 8 * byteLength2 - 1);\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n        }\n        let i = 0;\n        let mul = 1;\n        let sub = 0;\n        this[offset] = value & 255;\n        while (++i < byteLength2 && (mul *= 256)) {\n          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          const limit = Math.pow(2, 8 * byteLength2 - 1);\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n        }\n        let i = byteLength2 - 1;\n        let mul = 1;\n        let sub = 0;\n        this[offset + i] = value & 255;\n        while (--i >= 0 && (mul *= 256)) {\n          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 1, 127, -128);\n        if (value < 0)\n          value = 255 + value + 1;\n        this[offset] = value & 255;\n        return offset + 1;\n      };\n      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 32767, -32768);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 32767, -32768);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 255;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 2147483647, -2147483648);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        this[offset + 2] = value >>> 16;\n        this[offset + 3] = value >>> 24;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 2147483647, -2147483648);\n        if (value < 0)\n          value = 4294967295 + value + 1;\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 255;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {\n        return wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n      });\n      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {\n        return wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n      });\n      function checkIEEE754(buf, value, offset, ext, max, min) {\n        if (offset + ext > buf.length)\n          throw new RangeError(\"Index out of range\");\n        if (offset < 0)\n          throw new RangeError(\"Index out of range\");\n      }\n      function writeFloat(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 23, 4);\n        return offset + 4;\n      }\n      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, true, noAssert);\n      };\n      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, false, noAssert);\n      };\n      function writeDouble(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 52, 8);\n        return offset + 8;\n      }\n      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, true, noAssert);\n      };\n      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, false, noAssert);\n      };\n      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {\n        if (!Buffer2.isBuffer(target))\n          throw new TypeError(\"argument should be a Buffer\");\n        if (!start)\n          start = 0;\n        if (!end && end !== 0)\n          end = this.length;\n        if (targetStart >= target.length)\n          targetStart = target.length;\n        if (!targetStart)\n          targetStart = 0;\n        if (end > 0 && end < start)\n          end = start;\n        if (end === start)\n          return 0;\n        if (target.length === 0 || this.length === 0)\n          return 0;\n        if (targetStart < 0) {\n          throw new RangeError(\"targetStart out of bounds\");\n        }\n        if (start < 0 || start >= this.length)\n          throw new RangeError(\"Index out of range\");\n        if (end < 0)\n          throw new RangeError(\"sourceEnd out of bounds\");\n        if (end > this.length)\n          end = this.length;\n        if (target.length - targetStart < end - start) {\n          end = target.length - targetStart + start;\n        }\n        const len = end - start;\n        if (this === target && typeof GlobalUint8Array.prototype.copyWithin === \"function\") {\n          this.copyWithin(targetStart, start, end);\n        } else {\n          GlobalUint8Array.prototype.set.call(\n            target,\n            this.subarray(start, end),\n            targetStart\n          );\n        }\n        return len;\n      };\n      Buffer2.prototype.fill = function fill(val, start, end, encoding) {\n        if (typeof val === \"string\") {\n          if (typeof start === \"string\") {\n            encoding = start;\n            start = 0;\n            end = this.length;\n          } else if (typeof end === \"string\") {\n            encoding = end;\n            end = this.length;\n          }\n          if (encoding !== void 0 && typeof encoding !== \"string\") {\n            throw new TypeError(\"encoding must be a string\");\n          }\n          if (typeof encoding === \"string\" && !Buffer2.isEncoding(encoding)) {\n            throw new TypeError(\"Unknown encoding: \" + encoding);\n          }\n          if (val.length === 1) {\n            const code = val.charCodeAt(0);\n            if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n              val = code;\n            }\n          }\n        } else if (typeof val === \"number\") {\n          val = val & 255;\n        } else if (typeof val === \"boolean\") {\n          val = Number(val);\n        }\n        if (start < 0 || this.length < start || this.length < end) {\n          throw new RangeError(\"Out of range index\");\n        }\n        if (end <= start) {\n          return this;\n        }\n        start = start >>> 0;\n        end = end === void 0 ? this.length : end >>> 0;\n        if (!val)\n          val = 0;\n        let i;\n        if (typeof val === \"number\") {\n          for (i = start; i < end; ++i) {\n            this[i] = val;\n          }\n        } else {\n          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);\n          const len = bytes.length;\n          if (len === 0) {\n            throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n          }\n          for (i = 0; i < end - start; ++i) {\n            this[i + start] = bytes[i % len];\n          }\n        }\n        return this;\n      };\n      var errors = {};\n      function E(sym, getMessage, Base) {\n        errors[sym] = class NodeError extends Base {\n          constructor() {\n            super();\n            Object.defineProperty(this, \"message\", {\n              value: getMessage.apply(this, arguments),\n              writable: true,\n              configurable: true\n            });\n            this.name = `${this.name} [${sym}]`;\n            this.stack;\n            delete this.name;\n          }\n          get code() {\n            return sym;\n          }\n          set code(value) {\n            Object.defineProperty(this, \"code\", {\n              configurable: true,\n              enumerable: true,\n              value,\n              writable: true\n            });\n          }\n          toString() {\n            return `${this.name} [${sym}]: ${this.message}`;\n          }\n        };\n      }\n      E(\n        \"ERR_BUFFER_OUT_OF_BOUNDS\",\n        function(name) {\n          if (name) {\n            return `${name} is outside of buffer bounds`;\n          }\n          return \"Attempt to access memory outside buffer bounds\";\n        },\n        RangeError\n      );\n      E(\n        \"ERR_INVALID_ARG_TYPE\",\n        function(name, actual) {\n          return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`;\n        },\n        TypeError\n      );\n      E(\n        \"ERR_OUT_OF_RANGE\",\n        function(str, range, input) {\n          let msg = `The value of \"${str}\" is out of range.`;\n          let received = input;\n          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n            received = addNumericalSeparator(String(input));\n          } else if (typeof input === \"bigint\") {\n            received = String(input);\n            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n              received = addNumericalSeparator(received);\n            }\n            received += \"n\";\n          }\n          msg += ` It must be ${range}. Received ${received}`;\n          return msg;\n        },\n        RangeError\n      );\n      function addNumericalSeparator(val) {\n        let res = \"\";\n        let i = val.length;\n        const start = val[0] === \"-\" ? 1 : 0;\n        for (; i >= start + 4; i -= 3) {\n          res = `_${val.slice(i - 3, i)}${res}`;\n        }\n        return `${val.slice(0, i)}${res}`;\n      }\n      function checkBounds(buf, offset, byteLength2) {\n        validateNumber(offset, \"offset\");\n        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {\n          boundsError(offset, buf.length - (byteLength2 + 1));\n        }\n      }\n      function checkIntBI(value, min, max, buf, offset, byteLength2) {\n        if (value > max || value < min) {\n          const n = typeof min === \"bigint\" ? \"n\" : \"\";\n          let range;\n          if (byteLength2 > 3) {\n            if (min === 0 || min === BigInt(0)) {\n              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;\n            } else {\n              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;\n            }\n          } else {\n            range = `>= ${min}${n} and <= ${max}${n}`;\n          }\n          throw new errors.ERR_OUT_OF_RANGE(\"value\", range, value);\n        }\n        checkBounds(buf, offset, byteLength2);\n      }\n      function validateNumber(value, name) {\n        if (typeof value !== \"number\") {\n          throw new errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n        }\n      }\n      function boundsError(value, length, type) {\n        if (Math.floor(value) !== value) {\n          validateNumber(value, type);\n          throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \"an integer\", value);\n        }\n        if (length < 0) {\n          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n        }\n        throw new errors.ERR_OUT_OF_RANGE(\n          type || \"offset\",\n          `>= ${type ? 1 : 0} and <= ${length}`,\n          value\n        );\n      }\n      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n      function base64clean(str) {\n        str = str.split(\"=\")[0];\n        str = str.trim().replace(INVALID_BASE64_RE, \"\");\n        if (str.length < 2)\n          return \"\";\n        while (str.length % 4 !== 0) {\n          str = str + \"=\";\n        }\n        return str;\n      }\n      function utf8ToBytes(string, units) {\n        units = units || Infinity;\n        let codePoint;\n        const length = string.length;\n        let leadSurrogate = null;\n        const bytes = [];\n        for (let i = 0; i < length; ++i) {\n          codePoint = string.charCodeAt(i);\n          if (codePoint > 55295 && codePoint < 57344) {\n            if (!leadSurrogate) {\n              if (codePoint > 56319) {\n                if ((units -= 3) > -1)\n                  bytes.push(239, 191, 189);\n                continue;\n              } else if (i + 1 === length) {\n                if ((units -= 3) > -1)\n                  bytes.push(239, 191, 189);\n                continue;\n              }\n              leadSurrogate = codePoint;\n              continue;\n            }\n            if (codePoint < 56320) {\n              if ((units -= 3) > -1)\n                bytes.push(239, 191, 189);\n              leadSurrogate = codePoint;\n              continue;\n            }\n            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n          } else if (leadSurrogate) {\n            if ((units -= 3) > -1)\n              bytes.push(239, 191, 189);\n          }\n          leadSurrogate = null;\n          if (codePoint < 128) {\n            if ((units -= 1) < 0)\n              break;\n            bytes.push(codePoint);\n          } else if (codePoint < 2048) {\n            if ((units -= 2) < 0)\n              break;\n            bytes.push(\n              codePoint >> 6 | 192,\n              codePoint & 63 | 128\n            );\n          } else if (codePoint < 65536) {\n            if ((units -= 3) < 0)\n              break;\n            bytes.push(\n              codePoint >> 12 | 224,\n              codePoint >> 6 & 63 | 128,\n              codePoint & 63 | 128\n            );\n          } else if (codePoint < 1114112) {\n            if ((units -= 4) < 0)\n              break;\n            bytes.push(\n              codePoint >> 18 | 240,\n              codePoint >> 12 & 63 | 128,\n              codePoint >> 6 & 63 | 128,\n              codePoint & 63 | 128\n            );\n          } else {\n            throw new Error(\"Invalid code point\");\n          }\n        }\n        return bytes;\n      }\n      function asciiToBytes(str) {\n        const byteArray = [];\n        for (let i = 0; i < str.length; ++i) {\n          byteArray.push(str.charCodeAt(i) & 255);\n        }\n        return byteArray;\n      }\n      function utf16leToBytes(str, units) {\n        let c, hi, lo;\n        const byteArray = [];\n        for (let i = 0; i < str.length; ++i) {\n          if ((units -= 2) < 0)\n            break;\n          c = str.charCodeAt(i);\n          hi = c >> 8;\n          lo = c % 256;\n          byteArray.push(lo);\n          byteArray.push(hi);\n        }\n        return byteArray;\n      }\n      function base64ToBytes(str) {\n        return base64.toByteArray(base64clean(str));\n      }\n      function blitBuffer(src, dst, offset, length) {\n        let i;\n        for (i = 0; i < length; ++i) {\n          if (i + offset >= dst.length || i >= src.length)\n            break;\n          dst[i + offset] = src[i];\n        }\n        return i;\n      }\n      function isInstance(obj, type) {\n        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n      }\n      function numberIsNaN(obj) {\n        return obj !== obj;\n      }\n      var hexSliceLookupTable = function() {\n        const alphabet = \"0123456789abcdef\";\n        const table = new Array(256);\n        for (let i = 0; i < 16; ++i) {\n          const i16 = i * 16;\n          for (let j = 0; j < 16; ++j) {\n            table[i16 + j] = alphabet[i] + alphabet[j];\n          }\n        }\n        return table;\n      }();\n      function defineBigIntMethod(fn) {\n        return typeof BigInt === \"undefined\" ? BufferBigIntNotDefined : fn;\n      }\n      function BufferBigIntNotDefined() {\n        throw new Error(\"BigInt not supported\");\n      }\n    }\n  });\n\n  // node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\n  var require_browser = __commonJS({\n    \"node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\"(exports, module) {\n      init_dist();\n      var process = module.exports = {};\n      var cachedSetTimeout;\n      var cachedClearTimeout;\n      function defaultSetTimout() {\n        throw new Error(\"setTimeout has not been defined\");\n      }\n      function defaultClearTimeout() {\n        throw new Error(\"clearTimeout has not been defined\");\n      }\n      (function() {\n        try {\n          if (typeof setTimeout === \"function\") {\n            cachedSetTimeout = setTimeout;\n          } else {\n            cachedSetTimeout = defaultSetTimout;\n          }\n        } catch (e) {\n          cachedSetTimeout = defaultSetTimout;\n        }\n        try {\n          if (typeof clearTimeout === \"function\") {\n            cachedClearTimeout = clearTimeout;\n          } else {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        } catch (e) {\n          cachedClearTimeout = defaultClearTimeout;\n        }\n      })();\n      function runTimeout(fun) {\n        if (cachedSetTimeout === setTimeout) {\n          return setTimeout(fun, 0);\n        }\n        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n          cachedSetTimeout = setTimeout;\n          return setTimeout(fun, 0);\n        }\n        try {\n          return cachedSetTimeout(fun, 0);\n        } catch (e) {\n          try {\n            return cachedSetTimeout.call(null, fun, 0);\n          } catch (e2) {\n            return cachedSetTimeout.call(this, fun, 0);\n          }\n        }\n      }\n      function runClearTimeout(marker) {\n        if (cachedClearTimeout === clearTimeout) {\n          return clearTimeout(marker);\n        }\n        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n          cachedClearTimeout = clearTimeout;\n          return clearTimeout(marker);\n        }\n        try {\n          return cachedClearTimeout(marker);\n        } catch (e) {\n          try {\n            return cachedClearTimeout.call(null, marker);\n          } catch (e2) {\n            return cachedClearTimeout.call(this, marker);\n          }\n        }\n      }\n      var queue = [];\n      var draining = false;\n      var currentQueue;\n      var queueIndex = -1;\n      function cleanUpNextTick() {\n        if (!draining || !currentQueue) {\n          return;\n        }\n        draining = false;\n        if (currentQueue.length) {\n          queue = currentQueue.concat(queue);\n        } else {\n          queueIndex = -1;\n        }\n        if (queue.length) {\n          drainQueue();\n        }\n      }\n      function drainQueue() {\n        if (draining) {\n          return;\n        }\n        var timeout = runTimeout(cleanUpNextTick);\n        draining = true;\n        var len = queue.length;\n        while (len) {\n          currentQueue = queue;\n          queue = [];\n          while (++queueIndex < len) {\n            if (currentQueue) {\n              currentQueue[queueIndex].run();\n            }\n          }\n          queueIndex = -1;\n          len = queue.length;\n        }\n        currentQueue = null;\n        draining = false;\n        runClearTimeout(timeout);\n      }\n      process.nextTick = function(fun) {\n        var args = new Array(arguments.length - 1);\n        if (arguments.length > 1) {\n          for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n          }\n        }\n        queue.push(new Item(fun, args));\n        if (queue.length === 1 && !draining) {\n          runTimeout(drainQueue);\n        }\n      };\n      function Item(fun, array) {\n        this.fun = fun;\n        this.array = array;\n      }\n      Item.prototype.run = function() {\n        this.fun.apply(null, this.array);\n      };\n      process.title = \"browser\";\n      process.browser = true;\n      process.env = {};\n      process.argv = [];\n      process.version = \"\";\n      process.versions = {};\n      function noop() {\n      }\n      process.on = noop;\n      process.addListener = noop;\n      process.once = noop;\n      process.off = noop;\n      process.removeListener = noop;\n      process.removeAllListeners = noop;\n      process.emit = noop;\n      process.prependListener = noop;\n      process.prependOnceListener = noop;\n      process.listeners = function(name) {\n        return [];\n      };\n      process.binding = function(name) {\n        throw new Error(\"process.binding is not supported\");\n      };\n      process.cwd = function() {\n        return \"/\";\n      };\n      process.chdir = function(dir) {\n        throw new Error(\"process.chdir is not supported\");\n      };\n      process.umask = function() {\n        return 0;\n      };\n    }\n  });\n\n  // shims/dist/index.js\n  var import_buffer_polyfill, import_process, o;\n  var init_dist = __esm({\n    \"shims/dist/index.js\"() {\n      \"use strict\";\n      import_buffer_polyfill = __toESM(require_buffer(), 1);\n      import_process = __toESM(require_browser(), 1);\n      o = globalThis || void 0 || self;\n    }\n  });\n\n  // shims/banner/index.cjs\n  var require_banner = __commonJS({\n    \"shims/banner/index.cjs\"() {\n      init_dist();\n      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;\n      globalThis.global = globalThis.global || o;\n      globalThis.process = globalThis.process || import_process.default;\n    }\n  });\n  require_banner();\n})();\n/*! Bundled license information:\n\nieee754/index.js:\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n\nbuffer/index.js:\n  (*!\n   * The buffer module from node.js, for the browser.\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   *)\n*/\n\nimport {\n  __commonJS,\n  __toESM,\n  require_buffer_polyfill,\n  require_dist\n} from \"/node_modules/.vite/deps/chunk-VMXIV7NB.js?v=733ce8d4\";\n\n// node_modules/inherits/inherits_browser.js\nvar require_inherits_browser = __commonJS({\n  \"node_modules/inherits/inherits_browser.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    if (typeof Object.create === \"function\") {\n      module.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n          ctor.prototype = Object.create(superCtor.prototype, {\n            constructor: {\n              value: ctor,\n              enumerable: false,\n              writable: true,\n              configurable: true\n            }\n          });\n        }\n      };\n    } else {\n      module.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n          var TempCtor = function() {\n          };\n          TempCtor.prototype = superCtor.prototype;\n          ctor.prototype = new TempCtor();\n          ctor.prototype.constructor = ctor;\n        }\n      };\n    }\n  }\n});\n\n// node_modules/has-symbols/shams.js\nvar require_shams = __commonJS({\n  \"node_modules/has-symbols/shams.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = function hasSymbols() {\n      if (typeof Symbol !== \"function\" || typeof Object.getOwnPropertySymbols !== \"function\") {\n        return false;\n      }\n      if (typeof Symbol.iterator === \"symbol\") {\n        return true;\n      }\n      var obj = {};\n      var sym = Symbol(\"test\");\n      var symObj = Object(sym);\n      if (typeof sym === \"string\") {\n        return false;\n      }\n      if (Object.prototype.toString.call(sym) !== \"[object Symbol]\") {\n        return false;\n      }\n      if (Object.prototype.toString.call(symObj) !== \"[object Symbol]\") {\n        return false;\n      }\n      var symVal = 42;\n      obj[sym] = symVal;\n      for (sym in obj) {\n        return false;\n      }\n      if (typeof Object.keys === \"function\" && Object.keys(obj).length !== 0) {\n        return false;\n      }\n      if (typeof Object.getOwnPropertyNames === \"function\" && Object.getOwnPropertyNames(obj).length !== 0) {\n        return false;\n      }\n      var syms = Object.getOwnPropertySymbols(obj);\n      if (syms.length !== 1 || syms[0] !== sym) {\n        return false;\n      }\n      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {\n        return false;\n      }\n      if (typeof Object.getOwnPropertyDescriptor === \"function\") {\n        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n        if (descriptor.value !== symVal || descriptor.enumerable !== true) {\n          return false;\n        }\n      }\n      return true;\n    };\n  }\n});\n\n// node_modules/has-tostringtag/shams.js\nvar require_shams2 = __commonJS({\n  \"node_modules/has-tostringtag/shams.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var hasSymbols = require_shams();\n    module.exports = function hasToStringTagShams() {\n      return hasSymbols() && !!Symbol.toStringTag;\n    };\n  }\n});\n\n// node_modules/has-symbols/index.js\nvar require_has_symbols = __commonJS({\n  \"node_modules/has-symbols/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var origSymbol = typeof Symbol !== \"undefined\" && Symbol;\n    var hasSymbolSham = require_shams();\n    module.exports = function hasNativeSymbols() {\n      if (typeof origSymbol !== \"function\") {\n        return false;\n      }\n      if (typeof Symbol !== \"function\") {\n        return false;\n      }\n      if (typeof origSymbol(\"foo\") !== \"symbol\") {\n        return false;\n      }\n      if (typeof Symbol(\"bar\") !== \"symbol\") {\n        return false;\n      }\n      return hasSymbolSham();\n    };\n  }\n});\n\n// node_modules/has-proto/index.js\nvar require_has_proto = __commonJS({\n  \"node_modules/has-proto/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var test = {\n      foo: {}\n    };\n    var $Object = Object;\n    module.exports = function hasProto() {\n      return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);\n    };\n  }\n});\n\n// node_modules/function-bind/implementation.js\nvar require_implementation = __commonJS({\n  \"node_modules/function-bind/implementation.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var ERROR_MESSAGE = \"Function.prototype.bind called on incompatible \";\n    var toStr = Object.prototype.toString;\n    var max = Math.max;\n    var funcType = \"[object Function]\";\n    var concatty = function concatty2(a, b) {\n      var arr = [];\n      for (var i = 0; i < a.length; i += 1) {\n        arr[i] = a[i];\n      }\n      for (var j = 0; j < b.length; j += 1) {\n        arr[j + a.length] = b[j];\n      }\n      return arr;\n    };\n    var slicy = function slicy2(arrLike, offset) {\n      var arr = [];\n      for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {\n        arr[j] = arrLike[i];\n      }\n      return arr;\n    };\n    var joiny = function(arr, joiner) {\n      var str = \"\";\n      for (var i = 0; i < arr.length; i += 1) {\n        str += arr[i];\n        if (i + 1 < arr.length) {\n          str += joiner;\n        }\n      }\n      return str;\n    };\n    module.exports = function bind(that) {\n      var target = this;\n      if (typeof target !== \"function\" || toStr.apply(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n      }\n      var args = slicy(arguments, 1);\n      var bound;\n      var binder = function() {\n        if (this instanceof bound) {\n          var result = target.apply(\n            this,\n            concatty(args, arguments)\n          );\n          if (Object(result) === result) {\n            return result;\n          }\n          return this;\n        }\n        return target.apply(\n          that,\n          concatty(args, arguments)\n        );\n      };\n      var boundLength = max(0, target.length - args.length);\n      var boundArgs = [];\n      for (var i = 0; i < boundLength; i++) {\n        boundArgs[i] = \"$\" + i;\n      }\n      bound = Function(\"binder\", \"return function (\" + joiny(boundArgs, \",\") + \"){ return binder.apply(this,arguments); }\")(binder);\n      if (target.prototype) {\n        var Empty = function Empty2() {\n        };\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n      }\n      return bound;\n    };\n  }\n});\n\n// node_modules/function-bind/index.js\nvar require_function_bind = __commonJS({\n  \"node_modules/function-bind/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var implementation = require_implementation();\n    module.exports = Function.prototype.bind || implementation;\n  }\n});\n\n// node_modules/hasown/index.js\nvar require_hasown = __commonJS({\n  \"node_modules/hasown/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var call = Function.prototype.call;\n    var $hasOwn = Object.prototype.hasOwnProperty;\n    var bind = require_function_bind();\n    module.exports = bind.call(call, $hasOwn);\n  }\n});\n\n// node_modules/get-intrinsic/index.js\nvar require_get_intrinsic = __commonJS({\n  \"node_modules/get-intrinsic/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var undefined2;\n    var $SyntaxError = SyntaxError;\n    var $Function = Function;\n    var $TypeError = TypeError;\n    var getEvalledConstructor = function(expressionSyntax) {\n      try {\n        return $Function('\"use strict\"; return (' + expressionSyntax + \").constructor;\")();\n      } catch (e) {\n      }\n    };\n    var $gOPD = Object.getOwnPropertyDescriptor;\n    if ($gOPD) {\n      try {\n        $gOPD({}, \"\");\n      } catch (e) {\n        $gOPD = null;\n      }\n    }\n    var throwTypeError = function() {\n      throw new $TypeError();\n    };\n    var ThrowTypeError = $gOPD ? function() {\n      try {\n        arguments.callee;\n        return throwTypeError;\n      } catch (calleeThrows) {\n        try {\n          return $gOPD(arguments, \"callee\").get;\n        } catch (gOPDthrows) {\n          return throwTypeError;\n        }\n      }\n    }() : throwTypeError;\n    var hasSymbols = require_has_symbols()();\n    var hasProto = require_has_proto()();\n    var getProto = Object.getPrototypeOf || (hasProto ? function(x) {\n      return x.__proto__;\n    } : null);\n    var needsEval = {};\n    var TypedArray = typeof Uint8Array === \"undefined\" || !getProto ? undefined2 : getProto(Uint8Array);\n    var INTRINSICS = {\n      \"%AggregateError%\": typeof AggregateError === \"undefined\" ? undefined2 : AggregateError,\n      \"%Array%\": Array,\n      \"%ArrayBuffer%\": typeof ArrayBuffer === \"undefined\" ? undefined2 : ArrayBuffer,\n      \"%ArrayIteratorPrototype%\": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,\n      \"%AsyncFromSyncIteratorPrototype%\": undefined2,\n      \"%AsyncFunction%\": needsEval,\n      \"%AsyncGenerator%\": needsEval,\n      \"%AsyncGeneratorFunction%\": needsEval,\n      \"%AsyncIteratorPrototype%\": needsEval,\n      \"%Atomics%\": typeof Atomics === \"undefined\" ? undefined2 : Atomics,\n      \"%BigInt%\": typeof BigInt === \"undefined\" ? undefined2 : BigInt,\n      \"%BigInt64Array%\": typeof BigInt64Array === \"undefined\" ? undefined2 : BigInt64Array,\n      \"%BigUint64Array%\": typeof BigUint64Array === \"undefined\" ? undefined2 : BigUint64Array,\n      \"%Boolean%\": Boolean,\n      \"%DataView%\": typeof DataView === \"undefined\" ? undefined2 : DataView,\n      \"%Date%\": Date,\n      \"%decodeURI%\": decodeURI,\n      \"%decodeURIComponent%\": decodeURIComponent,\n      \"%encodeURI%\": encodeURI,\n      \"%encodeURIComponent%\": encodeURIComponent,\n      \"%Error%\": Error,\n      \"%eval%\": eval,\n      // eslint-disable-line no-eval\n      \"%EvalError%\": EvalError,\n      \"%Float32Array%\": typeof Float32Array === \"undefined\" ? undefined2 : Float32Array,\n      \"%Float64Array%\": typeof Float64Array === \"undefined\" ? undefined2 : Float64Array,\n      \"%FinalizationRegistry%\": typeof FinalizationRegistry === \"undefined\" ? undefined2 : FinalizationRegistry,\n      \"%Function%\": $Function,\n      \"%GeneratorFunction%\": needsEval,\n      \"%Int8Array%\": typeof Int8Array === \"undefined\" ? undefined2 : Int8Array,\n      \"%Int16Array%\": typeof Int16Array === \"undefined\" ? undefined2 : Int16Array,\n      \"%Int32Array%\": typeof Int32Array === \"undefined\" ? undefined2 : Int32Array,\n      \"%isFinite%\": isFinite,\n      \"%isNaN%\": isNaN,\n      \"%IteratorPrototype%\": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,\n      \"%JSON%\": typeof JSON === \"object\" ? JSON : undefined2,\n      \"%Map%\": typeof Map === \"undefined\" ? undefined2 : Map,\n      \"%MapIteratorPrototype%\": typeof Map === \"undefined\" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),\n      \"%Math%\": Math,\n      \"%Number%\": Number,\n      \"%Object%\": Object,\n      \"%parseFloat%\": parseFloat,\n      \"%parseInt%\": parseInt,\n      \"%Promise%\": typeof Promise === \"undefined\" ? undefined2 : Promise,\n      \"%Proxy%\": typeof Proxy === \"undefined\" ? undefined2 : Proxy,\n      \"%RangeError%\": RangeError,\n      \"%ReferenceError%\": ReferenceError,\n      \"%Reflect%\": typeof Reflect === \"undefined\" ? undefined2 : Reflect,\n      \"%RegExp%\": RegExp,\n      \"%Set%\": typeof Set === \"undefined\" ? undefined2 : Set,\n      \"%SetIteratorPrototype%\": typeof Set === \"undefined\" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),\n      \"%SharedArrayBuffer%\": typeof SharedArrayBuffer === \"undefined\" ? undefined2 : SharedArrayBuffer,\n      \"%String%\": String,\n      \"%StringIteratorPrototype%\": hasSymbols && getProto ? getProto(\"\"[Symbol.iterator]()) : undefined2,\n      \"%Symbol%\": hasSymbols ? Symbol : undefined2,\n      \"%SyntaxError%\": $SyntaxError,\n      \"%ThrowTypeError%\": ThrowTypeError,\n      \"%TypedArray%\": TypedArray,\n      \"%TypeError%\": $TypeError,\n      \"%Uint8Array%\": typeof Uint8Array === \"undefined\" ? undefined2 : Uint8Array,\n      \"%Uint8ClampedArray%\": typeof Uint8ClampedArray === \"undefined\" ? undefined2 : Uint8ClampedArray,\n      \"%Uint16Array%\": typeof Uint16Array === \"undefined\" ? undefined2 : Uint16Array,\n      \"%Uint32Array%\": typeof Uint32Array === \"undefined\" ? undefined2 : Uint32Array,\n      \"%URIError%\": URIError,\n      \"%WeakMap%\": typeof WeakMap === \"undefined\" ? undefined2 : WeakMap,\n      \"%WeakRef%\": typeof WeakRef === \"undefined\" ? undefined2 : WeakRef,\n      \"%WeakSet%\": typeof WeakSet === \"undefined\" ? undefined2 : WeakSet\n    };\n    if (getProto) {\n      try {\n        null.error;\n      } catch (e) {\n        errorProto = getProto(getProto(e));\n        INTRINSICS[\"%Error.prototype%\"] = errorProto;\n      }\n    }\n    var errorProto;\n    var doEval = function doEval2(name) {\n      var value;\n      if (name === \"%AsyncFunction%\") {\n        value = getEvalledConstructor(\"async function () {}\");\n      } else if (name === \"%GeneratorFunction%\") {\n        value = getEvalledConstructor(\"function* () {}\");\n      } else if (name === \"%AsyncGeneratorFunction%\") {\n        value = getEvalledConstructor(\"async function* () {}\");\n      } else if (name === \"%AsyncGenerator%\") {\n        var fn = doEval2(\"%AsyncGeneratorFunction%\");\n        if (fn) {\n          value = fn.prototype;\n        }\n      } else if (name === \"%AsyncIteratorPrototype%\") {\n        var gen = doEval2(\"%AsyncGenerator%\");\n        if (gen && getProto) {\n          value = getProto(gen.prototype);\n        }\n      }\n      INTRINSICS[name] = value;\n      return value;\n    };\n    var LEGACY_ALIASES = {\n      \"%ArrayBufferPrototype%\": [\"ArrayBuffer\", \"prototype\"],\n      \"%ArrayPrototype%\": [\"Array\", \"prototype\"],\n      \"%ArrayProto_entries%\": [\"Array\", \"prototype\", \"entries\"],\n      \"%ArrayProto_forEach%\": [\"Array\", \"prototype\", \"forEach\"],\n      \"%ArrayProto_keys%\": [\"Array\", \"prototype\", \"keys\"],\n      \"%ArrayProto_values%\": [\"Array\", \"prototype\", \"values\"],\n      \"%AsyncFunctionPrototype%\": [\"AsyncFunction\", \"prototype\"],\n      \"%AsyncGenerator%\": [\"AsyncGeneratorFunction\", \"prototype\"],\n      \"%AsyncGeneratorPrototype%\": [\"AsyncGeneratorFunction\", \"prototype\", \"prototype\"],\n      \"%BooleanPrototype%\": [\"Boolean\", \"prototype\"],\n      \"%DataViewPrototype%\": [\"DataView\", \"prototype\"],\n      \"%DatePrototype%\": [\"Date\", \"prototype\"],\n      \"%ErrorPrototype%\": [\"Error\", \"prototype\"],\n      \"%EvalErrorPrototype%\": [\"EvalError\", \"prototype\"],\n      \"%Float32ArrayPrototype%\": [\"Float32Array\", \"prototype\"],\n      \"%Float64ArrayPrototype%\": [\"Float64Array\", \"prototype\"],\n      \"%FunctionPrototype%\": [\"Function\", \"prototype\"],\n      \"%Generator%\": [\"GeneratorFunction\", \"prototype\"],\n      \"%GeneratorPrototype%\": [\"GeneratorFunction\", \"prototype\", \"prototype\"],\n      \"%Int8ArrayPrototype%\": [\"Int8Array\", \"prototype\"],\n      \"%Int16ArrayPrototype%\": [\"Int16Array\", \"prototype\"],\n      \"%Int32ArrayPrototype%\": [\"Int32Array\", \"prototype\"],\n      \"%JSONParse%\": [\"JSON\", \"parse\"],\n      \"%JSONStringify%\": [\"JSON\", \"stringify\"],\n      \"%MapPrototype%\": [\"Map\", \"prototype\"],\n      \"%NumberPrototype%\": [\"Number\", \"prototype\"],\n      \"%ObjectPrototype%\": [\"Object\", \"prototype\"],\n      \"%ObjProto_toString%\": [\"Object\", \"prototype\", \"toString\"],\n      \"%ObjProto_valueOf%\": [\"Object\", \"prototype\", \"valueOf\"],\n      \"%PromisePrototype%\": [\"Promise\", \"prototype\"],\n      \"%PromiseProto_then%\": [\"Promise\", \"prototype\", \"then\"],\n      \"%Promise_all%\": [\"Promise\", \"all\"],\n      \"%Promise_reject%\": [\"Promise\", \"reject\"],\n      \"%Promise_resolve%\": [\"Promise\", \"resolve\"],\n      \"%RangeErrorPrototype%\": [\"RangeError\", \"prototype\"],\n      \"%ReferenceErrorPrototype%\": [\"ReferenceError\", \"prototype\"],\n      \"%RegExpPrototype%\": [\"RegExp\", \"prototype\"],\n      \"%SetPrototype%\": [\"Set\", \"prototype\"],\n      \"%SharedArrayBufferPrototype%\": [\"SharedArrayBuffer\", \"prototype\"],\n      \"%StringPrototype%\": [\"String\", \"prototype\"],\n      \"%SymbolPrototype%\": [\"Symbol\", \"prototype\"],\n      \"%SyntaxErrorPrototype%\": [\"SyntaxError\", \"prototype\"],\n      \"%TypedArrayPrototype%\": [\"TypedArray\", \"prototype\"],\n      \"%TypeErrorPrototype%\": [\"TypeError\", \"prototype\"],\n      \"%Uint8ArrayPrototype%\": [\"Uint8Array\", \"prototype\"],\n      \"%Uint8ClampedArrayPrototype%\": [\"Uint8ClampedArray\", \"prototype\"],\n      \"%Uint16ArrayPrototype%\": [\"Uint16Array\", \"prototype\"],\n      \"%Uint32ArrayPrototype%\": [\"Uint32Array\", \"prototype\"],\n      \"%URIErrorPrototype%\": [\"URIError\", \"prototype\"],\n      \"%WeakMapPrototype%\": [\"WeakMap\", \"prototype\"],\n      \"%WeakSetPrototype%\": [\"WeakSet\", \"prototype\"]\n    };\n    var bind = require_function_bind();\n    var hasOwn = require_hasown();\n    var $concat = bind.call(Function.call, Array.prototype.concat);\n    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);\n    var $replace = bind.call(Function.call, String.prototype.replace);\n    var $strSlice = bind.call(Function.call, String.prototype.slice);\n    var $exec = bind.call(Function.call, RegExp.prototype.exec);\n    var rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\n    var reEscapeChar = /\\\\(\\\\)?/g;\n    var stringToPath = function stringToPath2(string) {\n      var first = $strSlice(string, 0, 1);\n      var last = $strSlice(string, -1);\n      if (first === \"%\" && last !== \"%\") {\n        throw new $SyntaxError(\"invalid intrinsic syntax, expected closing `%`\");\n      } else if (last === \"%\" && first !== \"%\") {\n        throw new $SyntaxError(\"invalid intrinsic syntax, expected opening `%`\");\n      }\n      var result = [];\n      $replace(string, rePropName, function(match, number, quote, subString) {\n        result[result.length] = quote ? $replace(subString, reEscapeChar, \"$1\") : number || match;\n      });\n      return result;\n    };\n    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {\n      var intrinsicName = name;\n      var alias;\n      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n        alias = LEGACY_ALIASES[intrinsicName];\n        intrinsicName = \"%\" + alias[0] + \"%\";\n      }\n      if (hasOwn(INTRINSICS, intrinsicName)) {\n        var value = INTRINSICS[intrinsicName];\n        if (value === needsEval) {\n          value = doEval(intrinsicName);\n        }\n        if (typeof value === \"undefined\" && !allowMissing) {\n          throw new $TypeError(\"intrinsic \" + name + \" exists, but is not available. Please file an issue!\");\n        }\n        return {\n          alias,\n          name: intrinsicName,\n          value\n        };\n      }\n      throw new $SyntaxError(\"intrinsic \" + name + \" does not exist!\");\n    };\n    module.exports = function GetIntrinsic(name, allowMissing) {\n      if (typeof name !== \"string\" || name.length === 0) {\n        throw new $TypeError(\"intrinsic name must be a non-empty string\");\n      }\n      if (arguments.length > 1 && typeof allowMissing !== \"boolean\") {\n        throw new $TypeError('\"allowMissing\" argument must be a boolean');\n      }\n      if ($exec(/^%?[^%]*%?$/, name) === null) {\n        throw new $SyntaxError(\"`%` may not be present anywhere but at the beginning and end of the intrinsic name\");\n      }\n      var parts = stringToPath(name);\n      var intrinsicBaseName = parts.length > 0 ? parts[0] : \"\";\n      var intrinsic = getBaseIntrinsic(\"%\" + intrinsicBaseName + \"%\", allowMissing);\n      var intrinsicRealName = intrinsic.name;\n      var value = intrinsic.value;\n      var skipFurtherCaching = false;\n      var alias = intrinsic.alias;\n      if (alias) {\n        intrinsicBaseName = alias[0];\n        $spliceApply(parts, $concat([0, 1], alias));\n      }\n      for (var i = 1, isOwn = true; i < parts.length; i += 1) {\n        var part = parts[i];\n        var first = $strSlice(part, 0, 1);\n        var last = $strSlice(part, -1);\n        if ((first === '\"' || first === \"'\" || first === \"`\" || (last === '\"' || last === \"'\" || last === \"`\")) && first !== last) {\n          throw new $SyntaxError(\"property names with quotes must have matching quotes\");\n        }\n        if (part === \"constructor\" || !isOwn) {\n          skipFurtherCaching = true;\n        }\n        intrinsicBaseName += \".\" + part;\n        intrinsicRealName = \"%\" + intrinsicBaseName + \"%\";\n        if (hasOwn(INTRINSICS, intrinsicRealName)) {\n          value = INTRINSICS[intrinsicRealName];\n        } else if (value != null) {\n          if (!(part in value)) {\n            if (!allowMissing) {\n              throw new $TypeError(\"base intrinsic for \" + name + \" exists, but the property is not available.\");\n            }\n            return void 0;\n          }\n          if ($gOPD && i + 1 >= parts.length) {\n            var desc = $gOPD(value, part);\n            isOwn = !!desc;\n            if (isOwn && \"get\" in desc && !(\"originalValue\" in desc.get)) {\n              value = desc.get;\n            } else {\n              value = value[part];\n            }\n          } else {\n            isOwn = hasOwn(value, part);\n            value = value[part];\n          }\n          if (isOwn && !skipFurtherCaching) {\n            INTRINSICS[intrinsicRealName] = value;\n          }\n        }\n      }\n      return value;\n    };\n  }\n});\n\n// node_modules/has-property-descriptors/index.js\nvar require_has_property_descriptors = __commonJS({\n  \"node_modules/has-property-descriptors/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var GetIntrinsic = require_get_intrinsic();\n    var $defineProperty = GetIntrinsic(\"%Object.defineProperty%\", true);\n    var hasPropertyDescriptors = function hasPropertyDescriptors2() {\n      if ($defineProperty) {\n        try {\n          $defineProperty({}, \"a\", { value: 1 });\n          return true;\n        } catch (e) {\n          return false;\n        }\n      }\n      return false;\n    };\n    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {\n      if (!hasPropertyDescriptors()) {\n        return null;\n      }\n      try {\n        return $defineProperty([], \"length\", { value: 1 }).length !== 1;\n      } catch (e) {\n        return true;\n      }\n    };\n    module.exports = hasPropertyDescriptors;\n  }\n});\n\n// node_modules/gopd/index.js\nvar require_gopd = __commonJS({\n  \"node_modules/gopd/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var GetIntrinsic = require_get_intrinsic();\n    var $gOPD = GetIntrinsic(\"%Object.getOwnPropertyDescriptor%\", true);\n    if ($gOPD) {\n      try {\n        $gOPD([], \"length\");\n      } catch (e) {\n        $gOPD = null;\n      }\n    }\n    module.exports = $gOPD;\n  }\n});\n\n// node_modules/define-data-property/index.js\nvar require_define_data_property = __commonJS({\n  \"node_modules/define-data-property/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var hasPropertyDescriptors = require_has_property_descriptors()();\n    var GetIntrinsic = require_get_intrinsic();\n    var $defineProperty = hasPropertyDescriptors && GetIntrinsic(\"%Object.defineProperty%\", true);\n    if ($defineProperty) {\n      try {\n        $defineProperty({}, \"a\", { value: 1 });\n      } catch (e) {\n        $defineProperty = false;\n      }\n    }\n    var $SyntaxError = GetIntrinsic(\"%SyntaxError%\");\n    var $TypeError = GetIntrinsic(\"%TypeError%\");\n    var gopd = require_gopd();\n    module.exports = function defineDataProperty(obj, property, value) {\n      if (!obj || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        throw new $TypeError(\"`obj` must be an object or a function`\");\n      }\n      if (typeof property !== \"string\" && typeof property !== \"symbol\") {\n        throw new $TypeError(\"`property` must be a string or a symbol`\");\n      }\n      if (arguments.length > 3 && typeof arguments[3] !== \"boolean\" && arguments[3] !== null) {\n        throw new $TypeError(\"`nonEnumerable`, if provided, must be a boolean or null\");\n      }\n      if (arguments.length > 4 && typeof arguments[4] !== \"boolean\" && arguments[4] !== null) {\n        throw new $TypeError(\"`nonWritable`, if provided, must be a boolean or null\");\n      }\n      if (arguments.length > 5 && typeof arguments[5] !== \"boolean\" && arguments[5] !== null) {\n        throw new $TypeError(\"`nonConfigurable`, if provided, must be a boolean or null\");\n      }\n      if (arguments.length > 6 && typeof arguments[6] !== \"boolean\") {\n        throw new $TypeError(\"`loose`, if provided, must be a boolean\");\n      }\n      var nonEnumerable = arguments.length > 3 ? arguments[3] : null;\n      var nonWritable = arguments.length > 4 ? arguments[4] : null;\n      var nonConfigurable = arguments.length > 5 ? arguments[5] : null;\n      var loose = arguments.length > 6 ? arguments[6] : false;\n      var desc = !!gopd && gopd(obj, property);\n      if ($defineProperty) {\n        $defineProperty(obj, property, {\n          configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,\n          enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,\n          value,\n          writable: nonWritable === null && desc ? desc.writable : !nonWritable\n        });\n      } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {\n        obj[property] = value;\n      } else {\n        throw new $SyntaxError(\"This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.\");\n      }\n    };\n  }\n});\n\n// node_modules/set-function-length/index.js\nvar require_set_function_length = __commonJS({\n  \"node_modules/set-function-length/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var GetIntrinsic = require_get_intrinsic();\n    var define = require_define_data_property();\n    var hasDescriptors = require_has_property_descriptors()();\n    var gOPD = require_gopd();\n    var $TypeError = GetIntrinsic(\"%TypeError%\");\n    var $floor = GetIntrinsic(\"%Math.floor%\");\n    module.exports = function setFunctionLength(fn, length) {\n      if (typeof fn !== \"function\") {\n        throw new $TypeError(\"`fn` is not a function\");\n      }\n      if (typeof length !== \"number\" || length < 0 || length > 4294967295 || $floor(length) !== length) {\n        throw new $TypeError(\"`length` must be a positive 32-bit integer\");\n      }\n      var loose = arguments.length > 2 && !!arguments[2];\n      var functionLengthIsConfigurable = true;\n      var functionLengthIsWritable = true;\n      if (\"length\" in fn && gOPD) {\n        var desc = gOPD(fn, \"length\");\n        if (desc && !desc.configurable) {\n          functionLengthIsConfigurable = false;\n        }\n        if (desc && !desc.writable) {\n          functionLengthIsWritable = false;\n        }\n      }\n      if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {\n        if (hasDescriptors) {\n          define(fn, \"length\", length, true, true);\n        } else {\n          define(fn, \"length\", length);\n        }\n      }\n      return fn;\n    };\n  }\n});\n\n// node_modules/call-bind/index.js\nvar require_call_bind = __commonJS({\n  \"node_modules/call-bind/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var bind = require_function_bind();\n    var GetIntrinsic = require_get_intrinsic();\n    var setFunctionLength = require_set_function_length();\n    var $TypeError = GetIntrinsic(\"%TypeError%\");\n    var $apply = GetIntrinsic(\"%Function.prototype.apply%\");\n    var $call = GetIntrinsic(\"%Function.prototype.call%\");\n    var $reflectApply = GetIntrinsic(\"%Reflect.apply%\", true) || bind.call($call, $apply);\n    var $defineProperty = GetIntrinsic(\"%Object.defineProperty%\", true);\n    var $max = GetIntrinsic(\"%Math.max%\");\n    if ($defineProperty) {\n      try {\n        $defineProperty({}, \"a\", { value: 1 });\n      } catch (e) {\n        $defineProperty = null;\n      }\n    }\n    module.exports = function callBind(originalFunction) {\n      if (typeof originalFunction !== \"function\") {\n        throw new $TypeError(\"a function is required\");\n      }\n      var func = $reflectApply(bind, $call, arguments);\n      return setFunctionLength(\n        func,\n        1 + $max(0, originalFunction.length - (arguments.length - 1)),\n        true\n      );\n    };\n    var applyBind = function applyBind2() {\n      return $reflectApply(bind, $apply, arguments);\n    };\n    if ($defineProperty) {\n      $defineProperty(module.exports, \"apply\", { value: applyBind });\n    } else {\n      module.exports.apply = applyBind;\n    }\n  }\n});\n\n// node_modules/call-bind/callBound.js\nvar require_callBound = __commonJS({\n  \"node_modules/call-bind/callBound.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var GetIntrinsic = require_get_intrinsic();\n    var callBind = require_call_bind();\n    var $indexOf = callBind(GetIntrinsic(\"String.prototype.indexOf\"));\n    module.exports = function callBoundIntrinsic(name, allowMissing) {\n      var intrinsic = GetIntrinsic(name, !!allowMissing);\n      if (typeof intrinsic === \"function\" && $indexOf(name, \".prototype.\") > -1) {\n        return callBind(intrinsic);\n      }\n      return intrinsic;\n    };\n  }\n});\n\n// node_modules/is-arguments/index.js\nvar require_is_arguments = __commonJS({\n  \"node_modules/is-arguments/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var hasToStringTag = require_shams2()();\n    var callBound = require_callBound();\n    var $toString = callBound(\"Object.prototype.toString\");\n    var isStandardArguments = function isArguments(value) {\n      if (hasToStringTag && value && typeof value === \"object\" && Symbol.toStringTag in value) {\n        return false;\n      }\n      return $toString(value) === \"[object Arguments]\";\n    };\n    var isLegacyArguments = function isArguments(value) {\n      if (isStandardArguments(value)) {\n        return true;\n      }\n      return value !== null && typeof value === \"object\" && typeof value.length === \"number\" && value.length >= 0 && $toString(value) !== \"[object Array]\" && $toString(value.callee) === \"[object Function]\";\n    };\n    var supportsStandardArguments = function() {\n      return isStandardArguments(arguments);\n    }();\n    isStandardArguments.isLegacyArguments = isLegacyArguments;\n    module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;\n  }\n});\n\n// node_modules/is-generator-function/index.js\nvar require_is_generator_function = __commonJS({\n  \"node_modules/is-generator-function/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var toStr = Object.prototype.toString;\n    var fnToStr = Function.prototype.toString;\n    var isFnRegex = /^\\s*(?:function)?\\*/;\n    var hasToStringTag = require_shams2()();\n    var getProto = Object.getPrototypeOf;\n    var getGeneratorFunc = function() {\n      if (!hasToStringTag) {\n        return false;\n      }\n      try {\n        return Function(\"return function*() {}\")();\n      } catch (e) {\n      }\n    };\n    var GeneratorFunction;\n    module.exports = function isGeneratorFunction(fn) {\n      if (typeof fn !== \"function\") {\n        return false;\n      }\n      if (isFnRegex.test(fnToStr.call(fn))) {\n        return true;\n      }\n      if (!hasToStringTag) {\n        var str = toStr.call(fn);\n        return str === \"[object GeneratorFunction]\";\n      }\n      if (!getProto) {\n        return false;\n      }\n      if (typeof GeneratorFunction === \"undefined\") {\n        var generatorFunc = getGeneratorFunc();\n        GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;\n      }\n      return getProto(fn) === GeneratorFunction;\n    };\n  }\n});\n\n// node_modules/is-callable/index.js\nvar require_is_callable = __commonJS({\n  \"node_modules/is-callable/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var fnToStr = Function.prototype.toString;\n    var reflectApply = typeof Reflect === \"object\" && Reflect !== null && Reflect.apply;\n    var badArrayLike;\n    var isCallableMarker;\n    if (typeof reflectApply === \"function\" && typeof Object.defineProperty === \"function\") {\n      try {\n        badArrayLike = Object.defineProperty({}, \"length\", {\n          get: function() {\n            throw isCallableMarker;\n          }\n        });\n        isCallableMarker = {};\n        reflectApply(function() {\n          throw 42;\n        }, null, badArrayLike);\n      } catch (_) {\n        if (_ !== isCallableMarker) {\n          reflectApply = null;\n        }\n      }\n    } else {\n      reflectApply = null;\n    }\n    var constructorRegex = /^\\s*class\\b/;\n    var isES6ClassFn = function isES6ClassFunction(value) {\n      try {\n        var fnStr = fnToStr.call(value);\n        return constructorRegex.test(fnStr);\n      } catch (e) {\n        return false;\n      }\n    };\n    var tryFunctionObject = function tryFunctionToStr(value) {\n      try {\n        if (isES6ClassFn(value)) {\n          return false;\n        }\n        fnToStr.call(value);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    };\n    var toStr = Object.prototype.toString;\n    var objectClass = \"[object Object]\";\n    var fnClass = \"[object Function]\";\n    var genClass = \"[object GeneratorFunction]\";\n    var ddaClass = \"[object HTMLAllCollection]\";\n    var ddaClass2 = \"[object HTML document.all class]\";\n    var ddaClass3 = \"[object HTMLCollection]\";\n    var hasToStringTag = typeof Symbol === \"function\" && !!Symbol.toStringTag;\n    var isIE68 = !(0 in [,]);\n    var isDDA = function isDocumentDotAll() {\n      return false;\n    };\n    if (typeof document === \"object\") {\n      all = document.all;\n      if (toStr.call(all) === toStr.call(document.all)) {\n        isDDA = function isDocumentDotAll(value) {\n          if ((isIE68 || !value) && (typeof value === \"undefined\" || typeof value === \"object\")) {\n            try {\n              var str = toStr.call(value);\n              return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value(\"\") == null;\n            } catch (e) {\n            }\n          }\n          return false;\n        };\n      }\n    }\n    var all;\n    module.exports = reflectApply ? function isCallable(value) {\n      if (isDDA(value)) {\n        return true;\n      }\n      if (!value) {\n        return false;\n      }\n      if (typeof value !== \"function\" && typeof value !== \"object\") {\n        return false;\n      }\n      try {\n        reflectApply(value, null, badArrayLike);\n      } catch (e) {\n        if (e !== isCallableMarker) {\n          return false;\n        }\n      }\n      return !isES6ClassFn(value) && tryFunctionObject(value);\n    } : function isCallable(value) {\n      if (isDDA(value)) {\n        return true;\n      }\n      if (!value) {\n        return false;\n      }\n      if (typeof value !== \"function\" && typeof value !== \"object\") {\n        return false;\n      }\n      if (hasToStringTag) {\n        return tryFunctionObject(value);\n      }\n      if (isES6ClassFn(value)) {\n        return false;\n      }\n      var strClass = toStr.call(value);\n      if (strClass !== fnClass && strClass !== genClass && !/^\\[object HTML/.test(strClass)) {\n        return false;\n      }\n      return tryFunctionObject(value);\n    };\n  }\n});\n\n// node_modules/for-each/index.js\nvar require_for_each = __commonJS({\n  \"node_modules/for-each/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var isCallable = require_is_callable();\n    var toStr = Object.prototype.toString;\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var forEachArray = function forEachArray2(array, iterator, receiver) {\n      for (var i = 0, len = array.length; i < len; i++) {\n        if (hasOwnProperty.call(array, i)) {\n          if (receiver == null) {\n            iterator(array[i], i, array);\n          } else {\n            iterator.call(receiver, array[i], i, array);\n          }\n        }\n      }\n    };\n    var forEachString = function forEachString2(string, iterator, receiver) {\n      for (var i = 0, len = string.length; i < len; i++) {\n        if (receiver == null) {\n          iterator(string.charAt(i), i, string);\n        } else {\n          iterator.call(receiver, string.charAt(i), i, string);\n        }\n      }\n    };\n    var forEachObject = function forEachObject2(object, iterator, receiver) {\n      for (var k in object) {\n        if (hasOwnProperty.call(object, k)) {\n          if (receiver == null) {\n            iterator(object[k], k, object);\n          } else {\n            iterator.call(receiver, object[k], k, object);\n          }\n        }\n      }\n    };\n    var forEach = function forEach2(list, iterator, thisArg) {\n      if (!isCallable(iterator)) {\n        throw new TypeError(\"iterator must be a function\");\n      }\n      var receiver;\n      if (arguments.length >= 3) {\n        receiver = thisArg;\n      }\n      if (toStr.call(list) === \"[object Array]\") {\n        forEachArray(list, iterator, receiver);\n      } else if (typeof list === \"string\") {\n        forEachString(list, iterator, receiver);\n      } else {\n        forEachObject(list, iterator, receiver);\n      }\n    };\n    module.exports = forEach;\n  }\n});\n\n// node_modules/available-typed-arrays/index.js\nvar require_available_typed_arrays = __commonJS({\n  \"node_modules/available-typed-arrays/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var possibleNames = [\n      \"BigInt64Array\",\n      \"BigUint64Array\",\n      \"Float32Array\",\n      \"Float64Array\",\n      \"Int16Array\",\n      \"Int32Array\",\n      \"Int8Array\",\n      \"Uint16Array\",\n      \"Uint32Array\",\n      \"Uint8Array\",\n      \"Uint8ClampedArray\"\n    ];\n    var g = typeof globalThis === \"undefined\" ? global : globalThis;\n    module.exports = function availableTypedArrays() {\n      var out = [];\n      for (var i = 0; i < possibleNames.length; i++) {\n        if (typeof g[possibleNames[i]] === \"function\") {\n          out[out.length] = possibleNames[i];\n        }\n      }\n      return out;\n    };\n  }\n});\n\n// node_modules/which-typed-array/index.js\nvar require_which_typed_array = __commonJS({\n  \"node_modules/which-typed-array/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var forEach = require_for_each();\n    var availableTypedArrays = require_available_typed_arrays();\n    var callBind = require_call_bind();\n    var callBound = require_callBound();\n    var gOPD = require_gopd();\n    var $toString = callBound(\"Object.prototype.toString\");\n    var hasToStringTag = require_shams2()();\n    var g = typeof globalThis === \"undefined\" ? global : globalThis;\n    var typedArrays = availableTypedArrays();\n    var $slice = callBound(\"String.prototype.slice\");\n    var getPrototypeOf = Object.getPrototypeOf;\n    var $indexOf = callBound(\"Array.prototype.indexOf\", true) || function indexOf(array, value) {\n      for (var i = 0; i < array.length; i += 1) {\n        if (array[i] === value) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    var cache = { __proto__: null };\n    if (hasToStringTag && gOPD && getPrototypeOf) {\n      forEach(typedArrays, function(typedArray) {\n        var arr = new g[typedArray]();\n        if (Symbol.toStringTag in arr) {\n          var proto = getPrototypeOf(arr);\n          var descriptor = gOPD(proto, Symbol.toStringTag);\n          if (!descriptor) {\n            var superProto = getPrototypeOf(proto);\n            descriptor = gOPD(superProto, Symbol.toStringTag);\n          }\n          cache[\"$\" + typedArray] = callBind(descriptor.get);\n        }\n      });\n    } else {\n      forEach(typedArrays, function(typedArray) {\n        var arr = new g[typedArray]();\n        var fn = arr.slice || arr.set;\n        if (fn) {\n          cache[\"$\" + typedArray] = callBind(fn);\n        }\n      });\n    }\n    var tryTypedArrays = function tryAllTypedArrays(value) {\n      var found = false;\n      forEach(cache, function(getter, typedArray) {\n        if (!found) {\n          try {\n            if (\"$\" + getter(value) === typedArray) {\n              found = $slice(typedArray, 1);\n            }\n          } catch (e) {\n          }\n        }\n      });\n      return found;\n    };\n    var trySlices = function tryAllSlices(value) {\n      var found = false;\n      forEach(cache, function(getter, name) {\n        if (!found) {\n          try {\n            getter(value);\n            found = $slice(name, 1);\n          } catch (e) {\n          }\n        }\n      });\n      return found;\n    };\n    module.exports = function whichTypedArray(value) {\n      if (!value || typeof value !== \"object\") {\n        return false;\n      }\n      if (!hasToStringTag) {\n        var tag = $slice($toString(value), 8, -1);\n        if ($indexOf(typedArrays, tag) > -1) {\n          return tag;\n        }\n        if (tag !== \"Object\") {\n          return false;\n        }\n        return trySlices(value);\n      }\n      if (!gOPD) {\n        return null;\n      }\n      return tryTypedArrays(value);\n    };\n  }\n});\n\n// node_modules/is-typed-array/index.js\nvar require_is_typed_array = __commonJS({\n  \"node_modules/is-typed-array/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var whichTypedArray = require_which_typed_array();\n    module.exports = function isTypedArray(value) {\n      return !!whichTypedArray(value);\n    };\n  }\n});\n\n// node_modules/util/support/types.js\nvar require_types = __commonJS({\n  \"node_modules/util/support/types.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var isArgumentsObject = require_is_arguments();\n    var isGeneratorFunction = require_is_generator_function();\n    var whichTypedArray = require_which_typed_array();\n    var isTypedArray = require_is_typed_array();\n    function uncurryThis(f) {\n      return f.call.bind(f);\n    }\n    var BigIntSupported = typeof BigInt !== \"undefined\";\n    var SymbolSupported = typeof Symbol !== \"undefined\";\n    var ObjectToString = uncurryThis(Object.prototype.toString);\n    var numberValue = uncurryThis(Number.prototype.valueOf);\n    var stringValue = uncurryThis(String.prototype.valueOf);\n    var booleanValue = uncurryThis(Boolean.prototype.valueOf);\n    if (BigIntSupported) {\n      bigIntValue = uncurryThis(BigInt.prototype.valueOf);\n    }\n    var bigIntValue;\n    if (SymbolSupported) {\n      symbolValue = uncurryThis(Symbol.prototype.valueOf);\n    }\n    var symbolValue;\n    function checkBoxedPrimitive(value, prototypeValueOf) {\n      if (typeof value !== \"object\") {\n        return false;\n      }\n      try {\n        prototypeValueOf(value);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n    exports.isArgumentsObject = isArgumentsObject;\n    exports.isGeneratorFunction = isGeneratorFunction;\n    exports.isTypedArray = isTypedArray;\n    function isPromise(input) {\n      return typeof Promise !== \"undefined\" && input instanceof Promise || input !== null && typeof input === \"object\" && typeof input.then === \"function\" && typeof input.catch === \"function\";\n    }\n    exports.isPromise = isPromise;\n    function isArrayBufferView(value) {\n      if (typeof ArrayBuffer !== \"undefined\" && ArrayBuffer.isView) {\n        return ArrayBuffer.isView(value);\n      }\n      return isTypedArray(value) || isDataView(value);\n    }\n    exports.isArrayBufferView = isArrayBufferView;\n    function isUint8Array(value) {\n      return whichTypedArray(value) === \"Uint8Array\";\n    }\n    exports.isUint8Array = isUint8Array;\n    function isUint8ClampedArray(value) {\n      return whichTypedArray(value) === \"Uint8ClampedArray\";\n    }\n    exports.isUint8ClampedArray = isUint8ClampedArray;\n    function isUint16Array(value) {\n      return whichTypedArray(value) === \"Uint16Array\";\n    }\n    exports.isUint16Array = isUint16Array;\n    function isUint32Array(value) {\n      return whichTypedArray(value) === \"Uint32Array\";\n    }\n    exports.isUint32Array = isUint32Array;\n    function isInt8Array(value) {\n      return whichTypedArray(value) === \"Int8Array\";\n    }\n    exports.isInt8Array = isInt8Array;\n    function isInt16Array(value) {\n      return whichTypedArray(value) === \"Int16Array\";\n    }\n    exports.isInt16Array = isInt16Array;\n    function isInt32Array(value) {\n      return whichTypedArray(value) === \"Int32Array\";\n    }\n    exports.isInt32Array = isInt32Array;\n    function isFloat32Array(value) {\n      return whichTypedArray(value) === \"Float32Array\";\n    }\n    exports.isFloat32Array = isFloat32Array;\n    function isFloat64Array(value) {\n      return whichTypedArray(value) === \"Float64Array\";\n    }\n    exports.isFloat64Array = isFloat64Array;\n    function isBigInt64Array(value) {\n      return whichTypedArray(value) === \"BigInt64Array\";\n    }\n    exports.isBigInt64Array = isBigInt64Array;\n    function isBigUint64Array(value) {\n      return whichTypedArray(value) === \"BigUint64Array\";\n    }\n    exports.isBigUint64Array = isBigUint64Array;\n    function isMapToString(value) {\n      return ObjectToString(value) === \"[object Map]\";\n    }\n    isMapToString.working = typeof Map !== \"undefined\" && isMapToString(/* @__PURE__ */ new Map());\n    function isMap(value) {\n      if (typeof Map === \"undefined\") {\n        return false;\n      }\n      return isMapToString.working ? isMapToString(value) : value instanceof Map;\n    }\n    exports.isMap = isMap;\n    function isSetToString(value) {\n      return ObjectToString(value) === \"[object Set]\";\n    }\n    isSetToString.working = typeof Set !== \"undefined\" && isSetToString(/* @__PURE__ */ new Set());\n    function isSet(value) {\n      if (typeof Set === \"undefined\") {\n        return false;\n      }\n      return isSetToString.working ? isSetToString(value) : value instanceof Set;\n    }\n    exports.isSet = isSet;\n    function isWeakMapToString(value) {\n      return ObjectToString(value) === \"[object WeakMap]\";\n    }\n    isWeakMapToString.working = typeof WeakMap !== \"undefined\" && isWeakMapToString(/* @__PURE__ */ new WeakMap());\n    function isWeakMap(value) {\n      if (typeof WeakMap === \"undefined\") {\n        return false;\n      }\n      return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;\n    }\n    exports.isWeakMap = isWeakMap;\n    function isWeakSetToString(value) {\n      return ObjectToString(value) === \"[object WeakSet]\";\n    }\n    isWeakSetToString.working = typeof WeakSet !== \"undefined\" && isWeakSetToString(/* @__PURE__ */ new WeakSet());\n    function isWeakSet(value) {\n      return isWeakSetToString(value);\n    }\n    exports.isWeakSet = isWeakSet;\n    function isArrayBufferToString(value) {\n      return ObjectToString(value) === \"[object ArrayBuffer]\";\n    }\n    isArrayBufferToString.working = typeof ArrayBuffer !== \"undefined\" && isArrayBufferToString(new ArrayBuffer());\n    function isArrayBuffer(value) {\n      if (typeof ArrayBuffer === \"undefined\") {\n        return false;\n      }\n      return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;\n    }\n    exports.isArrayBuffer = isArrayBuffer;\n    function isDataViewToString(value) {\n      return ObjectToString(value) === \"[object DataView]\";\n    }\n    isDataViewToString.working = typeof ArrayBuffer !== \"undefined\" && typeof DataView !== \"undefined\" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));\n    function isDataView(value) {\n      if (typeof DataView === \"undefined\") {\n        return false;\n      }\n      return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;\n    }\n    exports.isDataView = isDataView;\n    var SharedArrayBufferCopy = typeof SharedArrayBuffer !== \"undefined\" ? SharedArrayBuffer : void 0;\n    function isSharedArrayBufferToString(value) {\n      return ObjectToString(value) === \"[object SharedArrayBuffer]\";\n    }\n    function isSharedArrayBuffer(value) {\n      if (typeof SharedArrayBufferCopy === \"undefined\") {\n        return false;\n      }\n      if (typeof isSharedArrayBufferToString.working === \"undefined\") {\n        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());\n      }\n      return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;\n    }\n    exports.isSharedArrayBuffer = isSharedArrayBuffer;\n    function isAsyncFunction(value) {\n      return ObjectToString(value) === \"[object AsyncFunction]\";\n    }\n    exports.isAsyncFunction = isAsyncFunction;\n    function isMapIterator(value) {\n      return ObjectToString(value) === \"[object Map Iterator]\";\n    }\n    exports.isMapIterator = isMapIterator;\n    function isSetIterator(value) {\n      return ObjectToString(value) === \"[object Set Iterator]\";\n    }\n    exports.isSetIterator = isSetIterator;\n    function isGeneratorObject(value) {\n      return ObjectToString(value) === \"[object Generator]\";\n    }\n    exports.isGeneratorObject = isGeneratorObject;\n    function isWebAssemblyCompiledModule(value) {\n      return ObjectToString(value) === \"[object WebAssembly.Module]\";\n    }\n    exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;\n    function isNumberObject(value) {\n      return checkBoxedPrimitive(value, numberValue);\n    }\n    exports.isNumberObject = isNumberObject;\n    function isStringObject(value) {\n      return checkBoxedPrimitive(value, stringValue);\n    }\n    exports.isStringObject = isStringObject;\n    function isBooleanObject(value) {\n      return checkBoxedPrimitive(value, booleanValue);\n    }\n    exports.isBooleanObject = isBooleanObject;\n    function isBigIntObject(value) {\n      return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);\n    }\n    exports.isBigIntObject = isBigIntObject;\n    function isSymbolObject(value) {\n      return SymbolSupported && checkBoxedPrimitive(value, symbolValue);\n    }\n    exports.isSymbolObject = isSymbolObject;\n    function isBoxedPrimitive(value) {\n      return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);\n    }\n    exports.isBoxedPrimitive = isBoxedPrimitive;\n    function isAnyArrayBuffer(value) {\n      return typeof Uint8Array !== \"undefined\" && (isArrayBuffer(value) || isSharedArrayBuffer(value));\n    }\n    exports.isAnyArrayBuffer = isAnyArrayBuffer;\n    [\"isProxy\", \"isExternal\", \"isModuleNamespaceObject\"].forEach(function(method) {\n      Object.defineProperty(exports, method, {\n        enumerable: false,\n        value: function() {\n          throw new Error(method + \" is not supported in userland\");\n        }\n      });\n    });\n  }\n});\n\n// node_modules/util/support/isBufferBrowser.js\nvar require_isBufferBrowser = __commonJS({\n  \"node_modules/util/support/isBufferBrowser.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = function isBuffer(arg) {\n      return arg && typeof arg === \"object\" && typeof arg.copy === \"function\" && typeof arg.fill === \"function\" && typeof arg.readUInt8 === \"function\";\n    };\n  }\n});\n\n// node_modules/util/util.js\nvar require_util = __commonJS({\n  \"node_modules/util/util.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {\n      var keys = Object.keys(obj);\n      var descriptors = {};\n      for (var i = 0; i < keys.length; i++) {\n        descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n      }\n      return descriptors;\n    };\n    var formatRegExp = /%[sdj%]/g;\n    exports.format = function(f) {\n      if (!isString(f)) {\n        var objects = [];\n        for (var i = 0; i < arguments.length; i++) {\n          objects.push(inspect(arguments[i]));\n        }\n        return objects.join(\" \");\n      }\n      var i = 1;\n      var args = arguments;\n      var len = args.length;\n      var str = String(f).replace(formatRegExp, function(x2) {\n        if (x2 === \"%%\")\n          return \"%\";\n        if (i >= len)\n          return x2;\n        switch (x2) {\n          case \"%s\":\n            return String(args[i++]);\n          case \"%d\":\n            return Number(args[i++]);\n          case \"%j\":\n            try {\n              return JSON.stringify(args[i++]);\n            } catch (_) {\n              return \"[Circular]\";\n            }\n          default:\n            return x2;\n        }\n      });\n      for (var x = args[i]; i < len; x = args[++i]) {\n        if (isNull(x) || !isObject(x)) {\n          str += \" \" + x;\n        } else {\n          str += \" \" + inspect(x);\n        }\n      }\n      return str;\n    };\n    exports.deprecate = function(fn, msg) {\n      if (typeof process !== \"undefined\" && process.noDeprecation === true) {\n        return fn;\n      }\n      if (typeof process === \"undefined\") {\n        return function() {\n          return exports.deprecate(fn, msg).apply(this, arguments);\n        };\n      }\n      var warned = false;\n      function deprecated() {\n        if (!warned) {\n          if (process.throwDeprecation) {\n            throw new Error(msg);\n          } else if (process.traceDeprecation) {\n            console.trace(msg);\n          } else {\n            console.error(msg);\n          }\n          warned = true;\n        }\n        return fn.apply(this, arguments);\n      }\n      return deprecated;\n    };\n    var debugs = {};\n    var debugEnvRegex = /^$/;\n    if (process.env.NODE_DEBUG) {\n      debugEnv = process.env.NODE_DEBUG;\n      debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, \"\\\\$&\").replace(/\\*/g, \".*\").replace(/,/g, \"$|^\").toUpperCase();\n      debugEnvRegex = new RegExp(\"^\" + debugEnv + \"$\", \"i\");\n    }\n    var debugEnv;\n    exports.debuglog = function(set) {\n      set = set.toUpperCase();\n      if (!debugs[set]) {\n        if (debugEnvRegex.test(set)) {\n          var pid = process.pid;\n          debugs[set] = function() {\n            var msg = exports.format.apply(exports, arguments);\n            console.error(\"%s %d: %s\", set, pid, msg);\n          };\n        } else {\n          debugs[set] = function() {\n          };\n        }\n      }\n      return debugs[set];\n    };\n    function inspect(obj, opts) {\n      var ctx = {\n        seen: [],\n        stylize: stylizeNoColor\n      };\n      if (arguments.length >= 3)\n        ctx.depth = arguments[2];\n      if (arguments.length >= 4)\n        ctx.colors = arguments[3];\n      if (isBoolean(opts)) {\n        ctx.showHidden = opts;\n      } else if (opts) {\n        exports._extend(ctx, opts);\n      }\n      if (isUndefined(ctx.showHidden))\n        ctx.showHidden = false;\n      if (isUndefined(ctx.depth))\n        ctx.depth = 2;\n      if (isUndefined(ctx.colors))\n        ctx.colors = false;\n      if (isUndefined(ctx.customInspect))\n        ctx.customInspect = true;\n      if (ctx.colors)\n        ctx.stylize = stylizeWithColor;\n      return formatValue(ctx, obj, ctx.depth);\n    }\n    exports.inspect = inspect;\n    inspect.colors = {\n      \"bold\": [1, 22],\n      \"italic\": [3, 23],\n      \"underline\": [4, 24],\n      \"inverse\": [7, 27],\n      \"white\": [37, 39],\n      \"grey\": [90, 39],\n      \"black\": [30, 39],\n      \"blue\": [34, 39],\n      \"cyan\": [36, 39],\n      \"green\": [32, 39],\n      \"magenta\": [35, 39],\n      \"red\": [31, 39],\n      \"yellow\": [33, 39]\n    };\n    inspect.styles = {\n      \"special\": \"cyan\",\n      \"number\": \"yellow\",\n      \"boolean\": \"yellow\",\n      \"undefined\": \"grey\",\n      \"null\": \"bold\",\n      \"string\": \"green\",\n      \"date\": \"magenta\",\n      // \"name\": intentionally not styling\n      \"regexp\": \"red\"\n    };\n    function stylizeWithColor(str, styleType) {\n      var style = inspect.styles[styleType];\n      if (style) {\n        return \"\\x1B[\" + inspect.colors[style][0] + \"m\" + str + \"\\x1B[\" + inspect.colors[style][1] + \"m\";\n      } else {\n        return str;\n      }\n    }\n    function stylizeNoColor(str, styleType) {\n      return str;\n    }\n    function arrayToHash(array) {\n      var hash = {};\n      array.forEach(function(val, idx) {\n        hash[val] = true;\n      });\n      return hash;\n    }\n    function formatValue(ctx, value, recurseTimes) {\n      if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n        var ret = value.inspect(recurseTimes, ctx);\n        if (!isString(ret)) {\n          ret = formatValue(ctx, ret, recurseTimes);\n        }\n        return ret;\n      }\n      var primitive = formatPrimitive(ctx, value);\n      if (primitive) {\n        return primitive;\n      }\n      var keys = Object.keys(value);\n      var visibleKeys = arrayToHash(keys);\n      if (ctx.showHidden) {\n        keys = Object.getOwnPropertyNames(value);\n      }\n      if (isError(value) && (keys.indexOf(\"message\") >= 0 || keys.indexOf(\"description\") >= 0)) {\n        return formatError(value);\n      }\n      if (keys.length === 0) {\n        if (isFunction(value)) {\n          var name = value.name ? \": \" + value.name : \"\";\n          return ctx.stylize(\"[Function\" + name + \"]\", \"special\");\n        }\n        if (isRegExp(value)) {\n          return ctx.stylize(RegExp.prototype.toString.call(value), \"regexp\");\n        }\n        if (isDate(value)) {\n          return ctx.stylize(Date.prototype.toString.call(value), \"date\");\n        }\n        if (isError(value)) {\n          return formatError(value);\n        }\n      }\n      var base = \"\", array = false, braces = [\"{\", \"}\"];\n      if (isArray(value)) {\n        array = true;\n        braces = [\"[\", \"]\"];\n      }\n      if (isFunction(value)) {\n        var n = value.name ? \": \" + value.name : \"\";\n        base = \" [Function\" + n + \"]\";\n      }\n      if (isRegExp(value)) {\n        base = \" \" + RegExp.prototype.toString.call(value);\n      }\n      if (isDate(value)) {\n        base = \" \" + Date.prototype.toUTCString.call(value);\n      }\n      if (isError(value)) {\n        base = \" \" + formatError(value);\n      }\n      if (keys.length === 0 && (!array || value.length == 0)) {\n        return braces[0] + base + braces[1];\n      }\n      if (recurseTimes < 0) {\n        if (isRegExp(value)) {\n          return ctx.stylize(RegExp.prototype.toString.call(value), \"regexp\");\n        } else {\n          return ctx.stylize(\"[Object]\", \"special\");\n        }\n      }\n      ctx.seen.push(value);\n      var output;\n      if (array) {\n        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n      } else {\n        output = keys.map(function(key) {\n          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n        });\n      }\n      ctx.seen.pop();\n      return reduceToSingleString(output, base, braces);\n    }\n    function formatPrimitive(ctx, value) {\n      if (isUndefined(value))\n        return ctx.stylize(\"undefined\", \"undefined\");\n      if (isString(value)) {\n        var simple = \"'\" + JSON.stringify(value).replace(/^\"|\"$/g, \"\").replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"') + \"'\";\n        return ctx.stylize(simple, \"string\");\n      }\n      if (isNumber(value))\n        return ctx.stylize(\"\" + value, \"number\");\n      if (isBoolean(value))\n        return ctx.stylize(\"\" + value, \"boolean\");\n      if (isNull(value))\n        return ctx.stylize(\"null\", \"null\");\n    }\n    function formatError(value) {\n      return \"[\" + Error.prototype.toString.call(value) + \"]\";\n    }\n    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n      var output = [];\n      for (var i = 0, l = value.length; i < l; ++i) {\n        if (hasOwnProperty(value, String(i))) {\n          output.push(formatProperty(\n            ctx,\n            value,\n            recurseTimes,\n            visibleKeys,\n            String(i),\n            true\n          ));\n        } else {\n          output.push(\"\");\n        }\n      }\n      keys.forEach(function(key) {\n        if (!key.match(/^\\d+$/)) {\n          output.push(formatProperty(\n            ctx,\n            value,\n            recurseTimes,\n            visibleKeys,\n            key,\n            true\n          ));\n        }\n      });\n      return output;\n    }\n    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n      var name, str, desc;\n      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n      if (desc.get) {\n        if (desc.set) {\n          str = ctx.stylize(\"[Getter/Setter]\", \"special\");\n        } else {\n          str = ctx.stylize(\"[Getter]\", \"special\");\n        }\n      } else {\n        if (desc.set) {\n          str = ctx.stylize(\"[Setter]\", \"special\");\n        }\n      }\n      if (!hasOwnProperty(visibleKeys, key)) {\n        name = \"[\" + key + \"]\";\n      }\n      if (!str) {\n        if (ctx.seen.indexOf(desc.value) < 0) {\n          if (isNull(recurseTimes)) {\n            str = formatValue(ctx, desc.value, null);\n          } else {\n            str = formatValue(ctx, desc.value, recurseTimes - 1);\n          }\n          if (str.indexOf(\"\\n\") > -1) {\n            if (array) {\n              str = str.split(\"\\n\").map(function(line) {\n                return \"  \" + line;\n              }).join(\"\\n\").slice(2);\n            } else {\n              str = \"\\n\" + str.split(\"\\n\").map(function(line) {\n                return \"   \" + line;\n              }).join(\"\\n\");\n            }\n          }\n        } else {\n          str = ctx.stylize(\"[Circular]\", \"special\");\n        }\n      }\n      if (isUndefined(name)) {\n        if (array && key.match(/^\\d+$/)) {\n          return str;\n        }\n        name = JSON.stringify(\"\" + key);\n        if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n          name = name.slice(1, -1);\n          name = ctx.stylize(name, \"name\");\n        } else {\n          name = name.replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n          name = ctx.stylize(name, \"string\");\n        }\n      }\n      return name + \": \" + str;\n    }\n    function reduceToSingleString(output, base, braces) {\n      var numLinesEst = 0;\n      var length = output.reduce(function(prev, cur) {\n        numLinesEst++;\n        if (cur.indexOf(\"\\n\") >= 0)\n          numLinesEst++;\n        return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, \"\").length + 1;\n      }, 0);\n      if (length > 60) {\n        return braces[0] + (base === \"\" ? \"\" : base + \"\\n \") + \" \" + output.join(\",\\n  \") + \" \" + braces[1];\n      }\n      return braces[0] + base + \" \" + output.join(\", \") + \" \" + braces[1];\n    }\n    exports.types = require_types();\n    function isArray(ar) {\n      return Array.isArray(ar);\n    }\n    exports.isArray = isArray;\n    function isBoolean(arg) {\n      return typeof arg === \"boolean\";\n    }\n    exports.isBoolean = isBoolean;\n    function isNull(arg) {\n      return arg === null;\n    }\n    exports.isNull = isNull;\n    function isNullOrUndefined(arg) {\n      return arg == null;\n    }\n    exports.isNullOrUndefined = isNullOrUndefined;\n    function isNumber(arg) {\n      return typeof arg === \"number\";\n    }\n    exports.isNumber = isNumber;\n    function isString(arg) {\n      return typeof arg === \"string\";\n    }\n    exports.isString = isString;\n    function isSymbol(arg) {\n      return typeof arg === \"symbol\";\n    }\n    exports.isSymbol = isSymbol;\n    function isUndefined(arg) {\n      return arg === void 0;\n    }\n    exports.isUndefined = isUndefined;\n    function isRegExp(re) {\n      return isObject(re) && objectToString(re) === \"[object RegExp]\";\n    }\n    exports.isRegExp = isRegExp;\n    exports.types.isRegExp = isRegExp;\n    function isObject(arg) {\n      return typeof arg === \"object\" && arg !== null;\n    }\n    exports.isObject = isObject;\n    function isDate(d) {\n      return isObject(d) && objectToString(d) === \"[object Date]\";\n    }\n    exports.isDate = isDate;\n    exports.types.isDate = isDate;\n    function isError(e) {\n      return isObject(e) && (objectToString(e) === \"[object Error]\" || e instanceof Error);\n    }\n    exports.isError = isError;\n    exports.types.isNativeError = isError;\n    function isFunction(arg) {\n      return typeof arg === \"function\";\n    }\n    exports.isFunction = isFunction;\n    function isPrimitive(arg) {\n      return arg === null || typeof arg === \"boolean\" || typeof arg === \"number\" || typeof arg === \"string\" || typeof arg === \"symbol\" || // ES6 symbol\n      typeof arg === \"undefined\";\n    }\n    exports.isPrimitive = isPrimitive;\n    exports.isBuffer = require_isBufferBrowser();\n    function objectToString(o) {\n      return Object.prototype.toString.call(o);\n    }\n    function pad(n) {\n      return n < 10 ? \"0\" + n.toString(10) : n.toString(10);\n    }\n    var months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\"\n    ];\n    function timestamp() {\n      var d = /* @__PURE__ */ new Date();\n      var time = [\n        pad(d.getHours()),\n        pad(d.getMinutes()),\n        pad(d.getSeconds())\n      ].join(\":\");\n      return [d.getDate(), months[d.getMonth()], time].join(\" \");\n    }\n    exports.log = function() {\n      console.log(\"%s - %s\", timestamp(), exports.format.apply(exports, arguments));\n    };\n    exports.inherits = require_inherits_browser();\n    exports._extend = function(origin, add) {\n      if (!add || !isObject(add))\n        return origin;\n      var keys = Object.keys(add);\n      var i = keys.length;\n      while (i--) {\n        origin[keys[i]] = add[keys[i]];\n      }\n      return origin;\n    };\n    function hasOwnProperty(obj, prop) {\n      return Object.prototype.hasOwnProperty.call(obj, prop);\n    }\n    var kCustomPromisifiedSymbol = typeof Symbol !== \"undefined\" ? Symbol(\"util.promisify.custom\") : void 0;\n    exports.promisify = function promisify(original) {\n      if (typeof original !== \"function\")\n        throw new TypeError('The \"original\" argument must be of type Function');\n      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n        var fn = original[kCustomPromisifiedSymbol];\n        if (typeof fn !== \"function\") {\n          throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n        }\n        Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n          value: fn,\n          enumerable: false,\n          writable: false,\n          configurable: true\n        });\n        return fn;\n      }\n      function fn() {\n        var promiseResolve, promiseReject;\n        var promise = new Promise(function(resolve, reject) {\n          promiseResolve = resolve;\n          promiseReject = reject;\n        });\n        var args = [];\n        for (var i = 0; i < arguments.length; i++) {\n          args.push(arguments[i]);\n        }\n        args.push(function(err, value) {\n          if (err) {\n            promiseReject(err);\n          } else {\n            promiseResolve(value);\n          }\n        });\n        try {\n          original.apply(this, args);\n        } catch (err) {\n          promiseReject(err);\n        }\n        return promise;\n      }\n      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n      if (kCustomPromisifiedSymbol)\n        Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n          value: fn,\n          enumerable: false,\n          writable: false,\n          configurable: true\n        });\n      return Object.defineProperties(\n        fn,\n        getOwnPropertyDescriptors(original)\n      );\n    };\n    exports.promisify.custom = kCustomPromisifiedSymbol;\n    function callbackifyOnRejected(reason, cb) {\n      if (!reason) {\n        var newReason = new Error(\"Promise was rejected with a falsy value\");\n        newReason.reason = reason;\n        reason = newReason;\n      }\n      return cb(reason);\n    }\n    function callbackify(original) {\n      if (typeof original !== \"function\") {\n        throw new TypeError('The \"original\" argument must be of type Function');\n      }\n      function callbackified() {\n        var args = [];\n        for (var i = 0; i < arguments.length; i++) {\n          args.push(arguments[i]);\n        }\n        var maybeCb = args.pop();\n        if (typeof maybeCb !== \"function\") {\n          throw new TypeError(\"The last argument must be of type Function\");\n        }\n        var self2 = this;\n        var cb = function() {\n          return maybeCb.apply(self2, arguments);\n        };\n        original.apply(this, args).then(\n          function(ret) {\n            process.nextTick(cb.bind(null, null, ret));\n          },\n          function(rej) {\n            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));\n          }\n        );\n      }\n      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n      Object.defineProperties(\n        callbackified,\n        getOwnPropertyDescriptors(original)\n      );\n      return callbackified;\n    }\n    exports.callbackify = callbackify;\n  }\n});\n\n// node_modules/safe-buffer/index.js\nvar require_safe_buffer = __commonJS({\n  \"node_modules/safe-buffer/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var buffer = require_buffer_polyfill();\n    var Buffer2 = buffer.Buffer;\n    function copyProps(src, dst) {\n      for (var key in src) {\n        dst[key] = src[key];\n      }\n    }\n    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {\n      module.exports = buffer;\n    } else {\n      copyProps(buffer, exports);\n      exports.Buffer = SafeBuffer;\n    }\n    function SafeBuffer(arg, encodingOrOffset, length) {\n      return Buffer2(arg, encodingOrOffset, length);\n    }\n    SafeBuffer.prototype = Object.create(Buffer2.prototype);\n    copyProps(Buffer2, SafeBuffer);\n    SafeBuffer.from = function(arg, encodingOrOffset, length) {\n      if (typeof arg === \"number\") {\n        throw new TypeError(\"Argument must not be a number\");\n      }\n      return Buffer2(arg, encodingOrOffset, length);\n    };\n    SafeBuffer.alloc = function(size, fill, encoding) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      var buf = Buffer2(size);\n      if (fill !== void 0) {\n        if (typeof encoding === \"string\") {\n          buf.fill(fill, encoding);\n        } else {\n          buf.fill(fill);\n        }\n      } else {\n        buf.fill(0);\n      }\n      return buf;\n    };\n    SafeBuffer.allocUnsafe = function(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      return Buffer2(size);\n    };\n    SafeBuffer.allocUnsafeSlow = function(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      return buffer.SlowBuffer(size);\n    };\n  }\n});\n\n// node_modules/randombytes/browser.js\nvar require_browser = __commonJS({\n  \"node_modules/randombytes/browser.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var MAX_BYTES = 65536;\n    var MAX_UINT32 = 4294967295;\n    function oldBrowser() {\n      throw new Error(\"Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11\");\n    }\n    var Buffer2 = require_safe_buffer().Buffer;\n    var crypto = global.crypto || global.msCrypto;\n    if (crypto && crypto.getRandomValues) {\n      module.exports = randomBytes;\n    } else {\n      module.exports = oldBrowser;\n    }\n    function randomBytes(size, cb) {\n      if (size > MAX_UINT32)\n        throw new RangeError(\"requested too many random bytes\");\n      var bytes = Buffer2.allocUnsafe(size);\n      if (size > 0) {\n        if (size > MAX_BYTES) {\n          for (var generated = 0; generated < size; generated += MAX_BYTES) {\n            crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));\n          }\n        } else {\n          crypto.getRandomValues(bytes);\n        }\n      }\n      if (typeof cb === \"function\") {\n        return process.nextTick(function() {\n          cb(null, bytes);\n        });\n      }\n      return bytes;\n    }\n  }\n});\n\n// node_modules/events/events.js\nvar require_events = __commonJS({\n  \"node_modules/events/events.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var R = typeof Reflect === \"object\" ? Reflect : null;\n    var ReflectApply = R && typeof R.apply === \"function\" ? R.apply : function ReflectApply2(target, receiver, args) {\n      return Function.prototype.apply.call(target, receiver, args);\n    };\n    var ReflectOwnKeys;\n    if (R && typeof R.ownKeys === \"function\") {\n      ReflectOwnKeys = R.ownKeys;\n    } else if (Object.getOwnPropertySymbols) {\n      ReflectOwnKeys = function ReflectOwnKeys2(target) {\n        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\n      };\n    } else {\n      ReflectOwnKeys = function ReflectOwnKeys2(target) {\n        return Object.getOwnPropertyNames(target);\n      };\n    }\n    function ProcessEmitWarning(warning) {\n      if (console && console.warn)\n        console.warn(warning);\n    }\n    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {\n      return value !== value;\n    };\n    function EventEmitter() {\n      EventEmitter.init.call(this);\n    }\n    module.exports = EventEmitter;\n    module.exports.once = once;\n    EventEmitter.EventEmitter = EventEmitter;\n    EventEmitter.prototype._events = void 0;\n    EventEmitter.prototype._eventsCount = 0;\n    EventEmitter.prototype._maxListeners = void 0;\n    var defaultMaxListeners = 10;\n    function checkListener(listener) {\n      if (typeof listener !== \"function\") {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n    }\n    Object.defineProperty(EventEmitter, \"defaultMaxListeners\", {\n      enumerable: true,\n      get: function() {\n        return defaultMaxListeners;\n      },\n      set: function(arg) {\n        if (typeof arg !== \"number\" || arg < 0 || NumberIsNaN(arg)) {\n          throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + \".\");\n        }\n        defaultMaxListeners = arg;\n      }\n    });\n    EventEmitter.init = function() {\n      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {\n        this._events = /* @__PURE__ */ Object.create(null);\n        this._eventsCount = 0;\n      }\n      this._maxListeners = this._maxListeners || void 0;\n    };\n    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n      if (typeof n !== \"number\" || n < 0 || NumberIsNaN(n)) {\n        throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + \".\");\n      }\n      this._maxListeners = n;\n      return this;\n    };\n    function _getMaxListeners(that) {\n      if (that._maxListeners === void 0)\n        return EventEmitter.defaultMaxListeners;\n      return that._maxListeners;\n    }\n    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n      return _getMaxListeners(this);\n    };\n    EventEmitter.prototype.emit = function emit(type) {\n      var args = [];\n      for (var i = 1; i < arguments.length; i++)\n        args.push(arguments[i]);\n      var doError = type === \"error\";\n      var events = this._events;\n      if (events !== void 0)\n        doError = doError && events.error === void 0;\n      else if (!doError)\n        return false;\n      if (doError) {\n        var er;\n        if (args.length > 0)\n          er = args[0];\n        if (er instanceof Error) {\n          throw er;\n        }\n        var err = new Error(\"Unhandled error.\" + (er ? \" (\" + er.message + \")\" : \"\"));\n        err.context = er;\n        throw err;\n      }\n      var handler = events[type];\n      if (handler === void 0)\n        return false;\n      if (typeof handler === \"function\") {\n        ReflectApply(handler, this, args);\n      } else {\n        var len = handler.length;\n        var listeners = arrayClone(handler, len);\n        for (var i = 0; i < len; ++i)\n          ReflectApply(listeners[i], this, args);\n      }\n      return true;\n    };\n    function _addListener(target, type, listener, prepend) {\n      var m;\n      var events;\n      var existing;\n      checkListener(listener);\n      events = target._events;\n      if (events === void 0) {\n        events = target._events = /* @__PURE__ */ Object.create(null);\n        target._eventsCount = 0;\n      } else {\n        if (events.newListener !== void 0) {\n          target.emit(\n            \"newListener\",\n            type,\n            listener.listener ? listener.listener : listener\n          );\n          events = target._events;\n        }\n        existing = events[type];\n      }\n      if (existing === void 0) {\n        existing = events[type] = listener;\n        ++target._eventsCount;\n      } else {\n        if (typeof existing === \"function\") {\n          existing = events[type] = prepend ? [listener, existing] : [existing, listener];\n        } else if (prepend) {\n          existing.unshift(listener);\n        } else {\n          existing.push(listener);\n        }\n        m = _getMaxListeners(target);\n        if (m > 0 && existing.length > m && !existing.warned) {\n          existing.warned = true;\n          var w = new Error(\"Possible EventEmitter memory leak detected. \" + existing.length + \" \" + String(type) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n          w.name = \"MaxListenersExceededWarning\";\n          w.emitter = target;\n          w.type = type;\n          w.count = existing.length;\n          ProcessEmitWarning(w);\n        }\n      }\n      return target;\n    }\n    EventEmitter.prototype.addListener = function addListener(type, listener) {\n      return _addListener(this, type, listener, false);\n    };\n    EventEmitter.prototype.on = EventEmitter.prototype.addListener;\n    EventEmitter.prototype.prependListener = function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n    function onceWrapper() {\n      if (!this.fired) {\n        this.target.removeListener(this.type, this.wrapFn);\n        this.fired = true;\n        if (arguments.length === 0)\n          return this.listener.call(this.target);\n        return this.listener.apply(this.target, arguments);\n      }\n    }\n    function _onceWrap(target, type, listener) {\n      var state = { fired: false, wrapFn: void 0, target, type, listener };\n      var wrapped = onceWrapper.bind(state);\n      wrapped.listener = listener;\n      state.wrapFn = wrapped;\n      return wrapped;\n    }\n    EventEmitter.prototype.once = function once2(type, listener) {\n      checkListener(listener);\n      this.on(type, _onceWrap(this, type, listener));\n      return this;\n    };\n    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n    EventEmitter.prototype.removeListener = function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n      checkListener(listener);\n      events = this._events;\n      if (events === void 0)\n        return this;\n      list = events[type];\n      if (list === void 0)\n        return this;\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = /* @__PURE__ */ Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit(\"removeListener\", type, list.listener || listener);\n        }\n      } else if (typeof list !== \"function\") {\n        position = -1;\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n        if (position < 0)\n          return this;\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n        if (list.length === 1)\n          events[type] = list[0];\n        if (events.removeListener !== void 0)\n          this.emit(\"removeListener\", type, originalListener || listener);\n      }\n      return this;\n    };\n    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {\n      var listeners, events, i;\n      events = this._events;\n      if (events === void 0)\n        return this;\n      if (events.removeListener === void 0) {\n        if (arguments.length === 0) {\n          this._events = /* @__PURE__ */ Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== void 0) {\n          if (--this._eventsCount === 0)\n            this._events = /* @__PURE__ */ Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === \"removeListener\")\n            continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners(\"removeListener\");\n        this._events = /* @__PURE__ */ Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n      listeners = events[type];\n      if (typeof listeners === \"function\") {\n        this.removeListener(type, listeners);\n      } else if (listeners !== void 0) {\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n      return this;\n    };\n    function _listeners(target, type, unwrap) {\n      var events = target._events;\n      if (events === void 0)\n        return [];\n      var evlistener = events[type];\n      if (evlistener === void 0)\n        return [];\n      if (typeof evlistener === \"function\")\n        return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n    }\n    EventEmitter.prototype.listeners = function listeners(type) {\n      return _listeners(this, type, true);\n    };\n    EventEmitter.prototype.rawListeners = function rawListeners(type) {\n      return _listeners(this, type, false);\n    };\n    EventEmitter.listenerCount = function(emitter, type) {\n      if (typeof emitter.listenerCount === \"function\") {\n        return emitter.listenerCount(type);\n      } else {\n        return listenerCount.call(emitter, type);\n      }\n    };\n    EventEmitter.prototype.listenerCount = listenerCount;\n    function listenerCount(type) {\n      var events = this._events;\n      if (events !== void 0) {\n        var evlistener = events[type];\n        if (typeof evlistener === \"function\") {\n          return 1;\n        } else if (evlistener !== void 0) {\n          return evlistener.length;\n        }\n      }\n      return 0;\n    }\n    EventEmitter.prototype.eventNames = function eventNames() {\n      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n    };\n    function arrayClone(arr, n) {\n      var copy = new Array(n);\n      for (var i = 0; i < n; ++i)\n        copy[i] = arr[i];\n      return copy;\n    }\n    function spliceOne(list, index) {\n      for (; index + 1 < list.length; index++)\n        list[index] = list[index + 1];\n      list.pop();\n    }\n    function unwrapListeners(arr) {\n      var ret = new Array(arr.length);\n      for (var i = 0; i < ret.length; ++i) {\n        ret[i] = arr[i].listener || arr[i];\n      }\n      return ret;\n    }\n    function once(emitter, name) {\n      return new Promise(function(resolve, reject) {\n        function errorListener(err) {\n          emitter.removeListener(name, resolver);\n          reject(err);\n        }\n        function resolver() {\n          if (typeof emitter.removeListener === \"function\") {\n            emitter.removeListener(\"error\", errorListener);\n          }\n          resolve([].slice.call(arguments));\n        }\n        ;\n        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n        if (name !== \"error\") {\n          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n        }\n      });\n    }\n    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n      if (typeof emitter.on === \"function\") {\n        eventTargetAgnosticAddListener(emitter, \"error\", handler, flags);\n      }\n    }\n    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n      if (typeof emitter.on === \"function\") {\n        if (flags.once) {\n          emitter.once(name, listener);\n        } else {\n          emitter.on(name, listener);\n        }\n      } else if (typeof emitter.addEventListener === \"function\") {\n        emitter.addEventListener(name, function wrapListener(arg) {\n          if (flags.once) {\n            emitter.removeEventListener(name, wrapListener);\n          }\n          listener(arg);\n        });\n      } else {\n        throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n      }\n    }\n  }\n});\n\n// node_modules/readable-stream/lib/internal/streams/stream-browser.js\nvar require_stream_browser = __commonJS({\n  \"node_modules/readable-stream/lib/internal/streams/stream-browser.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = require_events().EventEmitter;\n  }\n});\n\n// node_modules/readable-stream/lib/internal/streams/buffer_list.js\nvar require_buffer_list = __commonJS({\n  \"node_modules/readable-stream/lib/internal/streams/buffer_list.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    function ownKeys(object, enumerableOnly) {\n      var keys = Object.keys(object);\n      if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n          return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n      }\n      return keys;\n    }\n    function _objectSpread(target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {\n          _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n      return target;\n    }\n    function _defineProperty(obj, key, value) {\n      key = _toPropertyKey(key);\n      if (key in obj) {\n        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });\n      } else {\n        obj[key] = value;\n      }\n      return obj;\n    }\n    function _classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    }\n    function _defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor)\n          descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n      }\n    }\n    function _createClass(Constructor, protoProps, staticProps) {\n      if (protoProps)\n        _defineProperties(Constructor.prototype, protoProps);\n      if (staticProps)\n        _defineProperties(Constructor, staticProps);\n      Object.defineProperty(Constructor, \"prototype\", { writable: false });\n      return Constructor;\n    }\n    function _toPropertyKey(arg) {\n      var key = _toPrimitive(arg, \"string\");\n      return typeof key === \"symbol\" ? key : String(key);\n    }\n    function _toPrimitive(input, hint) {\n      if (typeof input !== \"object\" || input === null)\n        return input;\n      var prim = input[Symbol.toPrimitive];\n      if (prim !== void 0) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\")\n          return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n      }\n      return (hint === \"string\" ? String : Number)(input);\n    }\n    var _require = require_buffer_polyfill();\n    var Buffer2 = _require.Buffer;\n    var _require2 = require_util();\n    var inspect = _require2.inspect;\n    var custom = inspect && inspect.custom || \"inspect\";\n    function copyBuffer(src, target, offset) {\n      Buffer2.prototype.copy.call(src, target, offset);\n    }\n    module.exports = function() {\n      function BufferList() {\n        _classCallCheck(this, BufferList);\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n      }\n      _createClass(BufferList, [{\n        key: \"push\",\n        value: function push(v) {\n          var entry = {\n            data: v,\n            next: null\n          };\n          if (this.length > 0)\n            this.tail.next = entry;\n          else\n            this.head = entry;\n          this.tail = entry;\n          ++this.length;\n        }\n      }, {\n        key: \"unshift\",\n        value: function unshift(v) {\n          var entry = {\n            data: v,\n            next: this.head\n          };\n          if (this.length === 0)\n            this.tail = entry;\n          this.head = entry;\n          ++this.length;\n        }\n      }, {\n        key: \"shift\",\n        value: function shift() {\n          if (this.length === 0)\n            return;\n          var ret = this.head.data;\n          if (this.length === 1)\n            this.head = this.tail = null;\n          else\n            this.head = this.head.next;\n          --this.length;\n          return ret;\n        }\n      }, {\n        key: \"clear\",\n        value: function clear() {\n          this.head = this.tail = null;\n          this.length = 0;\n        }\n      }, {\n        key: \"join\",\n        value: function join(s) {\n          if (this.length === 0)\n            return \"\";\n          var p = this.head;\n          var ret = \"\" + p.data;\n          while (p = p.next)\n            ret += s + p.data;\n          return ret;\n        }\n      }, {\n        key: \"concat\",\n        value: function concat(n) {\n          if (this.length === 0)\n            return Buffer2.alloc(0);\n          var ret = Buffer2.allocUnsafe(n >>> 0);\n          var p = this.head;\n          var i = 0;\n          while (p) {\n            copyBuffer(p.data, ret, i);\n            i += p.data.length;\n            p = p.next;\n          }\n          return ret;\n        }\n        // Consumes a specified amount of bytes or characters from the buffered data.\n      }, {\n        key: \"consume\",\n        value: function consume(n, hasStrings) {\n          var ret;\n          if (n < this.head.data.length) {\n            ret = this.head.data.slice(0, n);\n            this.head.data = this.head.data.slice(n);\n          } else if (n === this.head.data.length) {\n            ret = this.shift();\n          } else {\n            ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n          }\n          return ret;\n        }\n      }, {\n        key: \"first\",\n        value: function first() {\n          return this.head.data;\n        }\n        // Consumes a specified amount of characters from the buffered data.\n      }, {\n        key: \"_getString\",\n        value: function _getString(n) {\n          var p = this.head;\n          var c = 1;\n          var ret = p.data;\n          n -= ret.length;\n          while (p = p.next) {\n            var str = p.data;\n            var nb = n > str.length ? str.length : n;\n            if (nb === str.length)\n              ret += str;\n            else\n              ret += str.slice(0, n);\n            n -= nb;\n            if (n === 0) {\n              if (nb === str.length) {\n                ++c;\n                if (p.next)\n                  this.head = p.next;\n                else\n                  this.head = this.tail = null;\n              } else {\n                this.head = p;\n                p.data = str.slice(nb);\n              }\n              break;\n            }\n            ++c;\n          }\n          this.length -= c;\n          return ret;\n        }\n        // Consumes a specified amount of bytes from the buffered data.\n      }, {\n        key: \"_getBuffer\",\n        value: function _getBuffer(n) {\n          var ret = Buffer2.allocUnsafe(n);\n          var p = this.head;\n          var c = 1;\n          p.data.copy(ret);\n          n -= p.data.length;\n          while (p = p.next) {\n            var buf = p.data;\n            var nb = n > buf.length ? buf.length : n;\n            buf.copy(ret, ret.length - n, 0, nb);\n            n -= nb;\n            if (n === 0) {\n              if (nb === buf.length) {\n                ++c;\n                if (p.next)\n                  this.head = p.next;\n                else\n                  this.head = this.tail = null;\n              } else {\n                this.head = p;\n                p.data = buf.slice(nb);\n              }\n              break;\n            }\n            ++c;\n          }\n          this.length -= c;\n          return ret;\n        }\n        // Make sure the linked list only shows the minimal necessary information.\n      }, {\n        key: custom,\n        value: function value(_, options) {\n          return inspect(this, _objectSpread(_objectSpread({}, options), {}, {\n            // Only inspect one level.\n            depth: 0,\n            // It should not recurse.\n            customInspect: false\n          }));\n        }\n      }]);\n      return BufferList;\n    }();\n  }\n});\n\n// node_modules/readable-stream/lib/internal/streams/destroy.js\nvar require_destroy = __commonJS({\n  \"node_modules/readable-stream/lib/internal/streams/destroy.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    function destroy(err, cb) {\n      var _this = this;\n      var readableDestroyed = this._readableState && this._readableState.destroyed;\n      var writableDestroyed = this._writableState && this._writableState.destroyed;\n      if (readableDestroyed || writableDestroyed) {\n        if (cb) {\n          cb(err);\n        } else if (err) {\n          if (!this._writableState) {\n            process.nextTick(emitErrorNT, this, err);\n          } else if (!this._writableState.errorEmitted) {\n            this._writableState.errorEmitted = true;\n            process.nextTick(emitErrorNT, this, err);\n          }\n        }\n        return this;\n      }\n      if (this._readableState) {\n        this._readableState.destroyed = true;\n      }\n      if (this._writableState) {\n        this._writableState.destroyed = true;\n      }\n      this._destroy(err || null, function(err2) {\n        if (!cb && err2) {\n          if (!_this._writableState) {\n            process.nextTick(emitErrorAndCloseNT, _this, err2);\n          } else if (!_this._writableState.errorEmitted) {\n            _this._writableState.errorEmitted = true;\n            process.nextTick(emitErrorAndCloseNT, _this, err2);\n          } else {\n            process.nextTick(emitCloseNT, _this);\n          }\n        } else if (cb) {\n          process.nextTick(emitCloseNT, _this);\n          cb(err2);\n        } else {\n          process.nextTick(emitCloseNT, _this);\n        }\n      });\n      return this;\n    }\n    function emitErrorAndCloseNT(self2, err) {\n      emitErrorNT(self2, err);\n      emitCloseNT(self2);\n    }\n    function emitCloseNT(self2) {\n      if (self2._writableState && !self2._writableState.emitClose)\n        return;\n      if (self2._readableState && !self2._readableState.emitClose)\n        return;\n      self2.emit(\"close\");\n    }\n    function undestroy() {\n      if (this._readableState) {\n        this._readableState.destroyed = false;\n        this._readableState.reading = false;\n        this._readableState.ended = false;\n        this._readableState.endEmitted = false;\n      }\n      if (this._writableState) {\n        this._writableState.destroyed = false;\n        this._writableState.ended = false;\n        this._writableState.ending = false;\n        this._writableState.finalCalled = false;\n        this._writableState.prefinished = false;\n        this._writableState.finished = false;\n        this._writableState.errorEmitted = false;\n      }\n    }\n    function emitErrorNT(self2, err) {\n      self2.emit(\"error\", err);\n    }\n    function errorOrDestroy(stream, err) {\n      var rState = stream._readableState;\n      var wState = stream._writableState;\n      if (rState && rState.autoDestroy || wState && wState.autoDestroy)\n        stream.destroy(err);\n      else\n        stream.emit(\"error\", err);\n    }\n    module.exports = {\n      destroy,\n      undestroy,\n      errorOrDestroy\n    };\n  }\n});\n\n// node_modules/readable-stream/errors-browser.js\nvar require_errors_browser = __commonJS({\n  \"node_modules/readable-stream/errors-browser.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    function _inheritsLoose(subClass, superClass) {\n      subClass.prototype = Object.create(superClass.prototype);\n      subClass.prototype.constructor = subClass;\n      subClass.__proto__ = superClass;\n    }\n    var codes = {};\n    function createErrorType(code, message, Base) {\n      if (!Base) {\n        Base = Error;\n      }\n      function getMessage(arg1, arg2, arg3) {\n        if (typeof message === \"string\") {\n          return message;\n        } else {\n          return message(arg1, arg2, arg3);\n        }\n      }\n      var NodeError = function(_Base) {\n        _inheritsLoose(NodeError2, _Base);\n        function NodeError2(arg1, arg2, arg3) {\n          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n        }\n        return NodeError2;\n      }(Base);\n      NodeError.prototype.name = Base.name;\n      NodeError.prototype.code = code;\n      codes[code] = NodeError;\n    }\n    function oneOf(expected, thing) {\n      if (Array.isArray(expected)) {\n        var len = expected.length;\n        expected = expected.map(function(i) {\n          return String(i);\n        });\n        if (len > 2) {\n          return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(\", \"), \", or \") + expected[len - 1];\n        } else if (len === 2) {\n          return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n        } else {\n          return \"of \".concat(thing, \" \").concat(expected[0]);\n        }\n      } else {\n        return \"of \".concat(thing, \" \").concat(String(expected));\n      }\n    }\n    function startsWith(str, search, pos) {\n      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n    }\n    function endsWith(str, search, this_len) {\n      if (this_len === void 0 || this_len > str.length) {\n        this_len = str.length;\n      }\n      return str.substring(this_len - search.length, this_len) === search;\n    }\n    function includes(str, search, start) {\n      if (typeof start !== \"number\") {\n        start = 0;\n      }\n      if (start + search.length > str.length) {\n        return false;\n      } else {\n        return str.indexOf(search, start) !== -1;\n      }\n    }\n    createErrorType(\"ERR_INVALID_OPT_VALUE\", function(name, value) {\n      return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n    }, TypeError);\n    createErrorType(\"ERR_INVALID_ARG_TYPE\", function(name, expected, actual) {\n      var determiner;\n      if (typeof expected === \"string\" && startsWith(expected, \"not \")) {\n        determiner = \"must not be\";\n        expected = expected.replace(/^not /, \"\");\n      } else {\n        determiner = \"must be\";\n      }\n      var msg;\n      if (endsWith(name, \" argument\")) {\n        msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, \"type\"));\n      } else {\n        var type = includes(name, \".\") ? \"property\" : \"argument\";\n        msg = 'The \"'.concat(name, '\" ').concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, \"type\"));\n      }\n      msg += \". Received type \".concat(typeof actual);\n      return msg;\n    }, TypeError);\n    createErrorType(\"ERR_STREAM_PUSH_AFTER_EOF\", \"stream.push() after EOF\");\n    createErrorType(\"ERR_METHOD_NOT_IMPLEMENTED\", function(name) {\n      return \"The \" + name + \" method is not implemented\";\n    });\n    createErrorType(\"ERR_STREAM_PREMATURE_CLOSE\", \"Premature close\");\n    createErrorType(\"ERR_STREAM_DESTROYED\", function(name) {\n      return \"Cannot call \" + name + \" after a stream was destroyed\";\n    });\n    createErrorType(\"ERR_MULTIPLE_CALLBACK\", \"Callback called multiple times\");\n    createErrorType(\"ERR_STREAM_CANNOT_PIPE\", \"Cannot pipe, not readable\");\n    createErrorType(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\");\n    createErrorType(\"ERR_STREAM_NULL_VALUES\", \"May not write null values to stream\", TypeError);\n    createErrorType(\"ERR_UNKNOWN_ENCODING\", function(arg) {\n      return \"Unknown encoding: \" + arg;\n    }, TypeError);\n    createErrorType(\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\", \"stream.unshift() after end event\");\n    module.exports.codes = codes;\n  }\n});\n\n// node_modules/readable-stream/lib/internal/streams/state.js\nvar require_state = __commonJS({\n  \"node_modules/readable-stream/lib/internal/streams/state.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;\n    function highWaterMarkFrom(options, isDuplex, duplexKey) {\n      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n    }\n    function getHighWaterMark(state, options, duplexKey, isDuplex) {\n      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n      if (hwm != null) {\n        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n          var name = isDuplex ? duplexKey : \"highWaterMark\";\n          throw new ERR_INVALID_OPT_VALUE(name, hwm);\n        }\n        return Math.floor(hwm);\n      }\n      return state.objectMode ? 16 : 16 * 1024;\n    }\n    module.exports = {\n      getHighWaterMark\n    };\n  }\n});\n\n// node_modules/util-deprecate/browser.js\nvar require_browser2 = __commonJS({\n  \"node_modules/util-deprecate/browser.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = deprecate;\n    function deprecate(fn, msg) {\n      if (config(\"noDeprecation\")) {\n        return fn;\n      }\n      var warned = false;\n      function deprecated() {\n        if (!warned) {\n          if (config(\"throwDeprecation\")) {\n            throw new Error(msg);\n          } else if (config(\"traceDeprecation\")) {\n            console.trace(msg);\n          } else {\n            console.warn(msg);\n          }\n          warned = true;\n        }\n        return fn.apply(this, arguments);\n      }\n      return deprecated;\n    }\n    function config(name) {\n      try {\n        if (!global.localStorage)\n          return false;\n      } catch (_) {\n        return false;\n      }\n      var val = global.localStorage[name];\n      if (null == val)\n        return false;\n      return String(val).toLowerCase() === \"true\";\n    }\n  }\n});\n\n// node_modules/readable-stream/lib/_stream_writable.js\nvar require_stream_writable = __commonJS({\n  \"node_modules/readable-stream/lib/_stream_writable.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = Writable;\n    function CorkedRequest(state) {\n      var _this = this;\n      this.next = null;\n      this.entry = null;\n      this.finish = function() {\n        onCorkedFinish(_this, state);\n      };\n    }\n    var Duplex;\n    Writable.WritableState = WritableState;\n    var internalUtil = {\n      deprecate: require_browser2()\n    };\n    var Stream = require_stream_browser();\n    var Buffer2 = require_buffer_polyfill().Buffer;\n    var OurUint8Array = (typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : typeof self !== \"undefined\" ? self : {}).Uint8Array || function() {\n    };\n    function _uint8ArrayToBuffer(chunk) {\n      return Buffer2.from(chunk);\n    }\n    function _isUint8Array(obj) {\n      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;\n    }\n    var destroyImpl = require_destroy();\n    var _require = require_state();\n    var getHighWaterMark = _require.getHighWaterMark;\n    var _require$codes = require_errors_browser().codes;\n    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;\n    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;\n    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;\n    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;\n    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;\n    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;\n    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n    var errorOrDestroy = destroyImpl.errorOrDestroy;\n    require_inherits_browser()(Writable, Stream);\n    function nop() {\n    }\n    function WritableState(options, stream, isDuplex) {\n      Duplex = Duplex || require_stream_duplex();\n      options = options || {};\n      if (typeof isDuplex !== \"boolean\")\n        isDuplex = stream instanceof Duplex;\n      this.objectMode = !!options.objectMode;\n      if (isDuplex)\n        this.objectMode = this.objectMode || !!options.writableObjectMode;\n      this.highWaterMark = getHighWaterMark(this, options, \"writableHighWaterMark\", isDuplex);\n      this.finalCalled = false;\n      this.needDrain = false;\n      this.ending = false;\n      this.ended = false;\n      this.finished = false;\n      this.destroyed = false;\n      var noDecode = options.decodeStrings === false;\n      this.decodeStrings = !noDecode;\n      this.defaultEncoding = options.defaultEncoding || \"utf8\";\n      this.length = 0;\n      this.writing = false;\n      this.corked = 0;\n      this.sync = true;\n      this.bufferProcessing = false;\n      this.onwrite = function(er) {\n        onwrite(stream, er);\n      };\n      this.writecb = null;\n      this.writelen = 0;\n      this.bufferedRequest = null;\n      this.lastBufferedRequest = null;\n      this.pendingcb = 0;\n      this.prefinished = false;\n      this.errorEmitted = false;\n      this.emitClose = options.emitClose !== false;\n      this.autoDestroy = !!options.autoDestroy;\n      this.bufferedRequestCount = 0;\n      this.corkedRequestsFree = new CorkedRequest(this);\n    }\n    WritableState.prototype.getBuffer = function getBuffer() {\n      var current = this.bufferedRequest;\n      var out = [];\n      while (current) {\n        out.push(current);\n        current = current.next;\n      }\n      return out;\n    };\n    (function() {\n      try {\n        Object.defineProperty(WritableState.prototype, \"buffer\", {\n          get: internalUtil.deprecate(function writableStateBufferGetter() {\n            return this.getBuffer();\n          }, \"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.\", \"DEP0003\")\n        });\n      } catch (_) {\n      }\n    })();\n    var realHasInstance;\n    if (typeof Symbol === \"function\" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === \"function\") {\n      realHasInstance = Function.prototype[Symbol.hasInstance];\n      Object.defineProperty(Writable, Symbol.hasInstance, {\n        value: function value(object) {\n          if (realHasInstance.call(this, object))\n            return true;\n          if (this !== Writable)\n            return false;\n          return object && object._writableState instanceof WritableState;\n        }\n      });\n    } else {\n      realHasInstance = function realHasInstance2(object) {\n        return object instanceof this;\n      };\n    }\n    function Writable(options) {\n      Duplex = Duplex || require_stream_duplex();\n      var isDuplex = this instanceof Duplex;\n      if (!isDuplex && !realHasInstance.call(Writable, this))\n        return new Writable(options);\n      this._writableState = new WritableState(options, this, isDuplex);\n      this.writable = true;\n      if (options) {\n        if (typeof options.write === \"function\")\n          this._write = options.write;\n        if (typeof options.writev === \"function\")\n          this._writev = options.writev;\n        if (typeof options.destroy === \"function\")\n          this._destroy = options.destroy;\n        if (typeof options.final === \"function\")\n          this._final = options.final;\n      }\n      Stream.call(this);\n    }\n    Writable.prototype.pipe = function() {\n      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n    };\n    function writeAfterEnd(stream, cb) {\n      var er = new ERR_STREAM_WRITE_AFTER_END();\n      errorOrDestroy(stream, er);\n      process.nextTick(cb, er);\n    }\n    function validChunk(stream, state, chunk, cb) {\n      var er;\n      if (chunk === null) {\n        er = new ERR_STREAM_NULL_VALUES();\n      } else if (typeof chunk !== \"string\" && !state.objectMode) {\n        er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\"string\", \"Buffer\"], chunk);\n      }\n      if (er) {\n        errorOrDestroy(stream, er);\n        process.nextTick(cb, er);\n        return false;\n      }\n      return true;\n    }\n    Writable.prototype.write = function(chunk, encoding, cb) {\n      var state = this._writableState;\n      var ret = false;\n      var isBuf = !state.objectMode && _isUint8Array(chunk);\n      if (isBuf && !Buffer2.isBuffer(chunk)) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n      if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n      }\n      if (isBuf)\n        encoding = \"buffer\";\n      else if (!encoding)\n        encoding = state.defaultEncoding;\n      if (typeof cb !== \"function\")\n        cb = nop;\n      if (state.ending)\n        writeAfterEnd(this, cb);\n      else if (isBuf || validChunk(this, state, chunk, cb)) {\n        state.pendingcb++;\n        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n      }\n      return ret;\n    };\n    Writable.prototype.cork = function() {\n      this._writableState.corked++;\n    };\n    Writable.prototype.uncork = function() {\n      var state = this._writableState;\n      if (state.corked) {\n        state.corked--;\n        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)\n          clearBuffer(this, state);\n      }\n    };\n    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n      if (typeof encoding === \"string\")\n        encoding = encoding.toLowerCase();\n      if (!([\"hex\", \"utf8\", \"utf-8\", \"ascii\", \"binary\", \"base64\", \"ucs2\", \"ucs-2\", \"utf16le\", \"utf-16le\", \"raw\"].indexOf((encoding + \"\").toLowerCase()) > -1))\n        throw new ERR_UNKNOWN_ENCODING(encoding);\n      this._writableState.defaultEncoding = encoding;\n      return this;\n    };\n    Object.defineProperty(Writable.prototype, \"writableBuffer\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._writableState && this._writableState.getBuffer();\n      }\n    });\n    function decodeChunk(state, chunk, encoding) {\n      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === \"string\") {\n        chunk = Buffer2.from(chunk, encoding);\n      }\n      return chunk;\n    }\n    Object.defineProperty(Writable.prototype, \"writableHighWaterMark\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._writableState.highWaterMark;\n      }\n    });\n    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n      if (!isBuf) {\n        var newChunk = decodeChunk(state, chunk, encoding);\n        if (chunk !== newChunk) {\n          isBuf = true;\n          encoding = \"buffer\";\n          chunk = newChunk;\n        }\n      }\n      var len = state.objectMode ? 1 : chunk.length;\n      state.length += len;\n      var ret = state.length < state.highWaterMark;\n      if (!ret)\n        state.needDrain = true;\n      if (state.writing || state.corked) {\n        var last = state.lastBufferedRequest;\n        state.lastBufferedRequest = {\n          chunk,\n          encoding,\n          isBuf,\n          callback: cb,\n          next: null\n        };\n        if (last) {\n          last.next = state.lastBufferedRequest;\n        } else {\n          state.bufferedRequest = state.lastBufferedRequest;\n        }\n        state.bufferedRequestCount += 1;\n      } else {\n        doWrite(stream, state, false, len, chunk, encoding, cb);\n      }\n      return ret;\n    }\n    function doWrite(stream, state, writev, len, chunk, encoding, cb) {\n      state.writelen = len;\n      state.writecb = cb;\n      state.writing = true;\n      state.sync = true;\n      if (state.destroyed)\n        state.onwrite(new ERR_STREAM_DESTROYED(\"write\"));\n      else if (writev)\n        stream._writev(chunk, state.onwrite);\n      else\n        stream._write(chunk, encoding, state.onwrite);\n      state.sync = false;\n    }\n    function onwriteError(stream, state, sync, er, cb) {\n      --state.pendingcb;\n      if (sync) {\n        process.nextTick(cb, er);\n        process.nextTick(finishMaybe, stream, state);\n        stream._writableState.errorEmitted = true;\n        errorOrDestroy(stream, er);\n      } else {\n        cb(er);\n        stream._writableState.errorEmitted = true;\n        errorOrDestroy(stream, er);\n        finishMaybe(stream, state);\n      }\n    }\n    function onwriteStateUpdate(state) {\n      state.writing = false;\n      state.writecb = null;\n      state.length -= state.writelen;\n      state.writelen = 0;\n    }\n    function onwrite(stream, er) {\n      var state = stream._writableState;\n      var sync = state.sync;\n      var cb = state.writecb;\n      if (typeof cb !== \"function\")\n        throw new ERR_MULTIPLE_CALLBACK();\n      onwriteStateUpdate(state);\n      if (er)\n        onwriteError(stream, state, sync, er, cb);\n      else {\n        var finished = needFinish(state) || stream.destroyed;\n        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n          clearBuffer(stream, state);\n        }\n        if (sync) {\n          process.nextTick(afterWrite, stream, state, finished, cb);\n        } else {\n          afterWrite(stream, state, finished, cb);\n        }\n      }\n    }\n    function afterWrite(stream, state, finished, cb) {\n      if (!finished)\n        onwriteDrain(stream, state);\n      state.pendingcb--;\n      cb();\n      finishMaybe(stream, state);\n    }\n    function onwriteDrain(stream, state) {\n      if (state.length === 0 && state.needDrain) {\n        state.needDrain = false;\n        stream.emit(\"drain\");\n      }\n    }\n    function clearBuffer(stream, state) {\n      state.bufferProcessing = true;\n      var entry = state.bufferedRequest;\n      if (stream._writev && entry && entry.next) {\n        var l = state.bufferedRequestCount;\n        var buffer = new Array(l);\n        var holder = state.corkedRequestsFree;\n        holder.entry = entry;\n        var count = 0;\n        var allBuffers = true;\n        while (entry) {\n          buffer[count] = entry;\n          if (!entry.isBuf)\n            allBuffers = false;\n          entry = entry.next;\n          count += 1;\n        }\n        buffer.allBuffers = allBuffers;\n        doWrite(stream, state, true, state.length, buffer, \"\", holder.finish);\n        state.pendingcb++;\n        state.lastBufferedRequest = null;\n        if (holder.next) {\n          state.corkedRequestsFree = holder.next;\n          holder.next = null;\n        } else {\n          state.corkedRequestsFree = new CorkedRequest(state);\n        }\n        state.bufferedRequestCount = 0;\n      } else {\n        while (entry) {\n          var chunk = entry.chunk;\n          var encoding = entry.encoding;\n          var cb = entry.callback;\n          var len = state.objectMode ? 1 : chunk.length;\n          doWrite(stream, state, false, len, chunk, encoding, cb);\n          entry = entry.next;\n          state.bufferedRequestCount--;\n          if (state.writing) {\n            break;\n          }\n        }\n        if (entry === null)\n          state.lastBufferedRequest = null;\n      }\n      state.bufferedRequest = entry;\n      state.bufferProcessing = false;\n    }\n    Writable.prototype._write = function(chunk, encoding, cb) {\n      cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_write()\"));\n    };\n    Writable.prototype._writev = null;\n    Writable.prototype.end = function(chunk, encoding, cb) {\n      var state = this._writableState;\n      if (typeof chunk === \"function\") {\n        cb = chunk;\n        chunk = null;\n        encoding = null;\n      } else if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n      }\n      if (chunk !== null && chunk !== void 0)\n        this.write(chunk, encoding);\n      if (state.corked) {\n        state.corked = 1;\n        this.uncork();\n      }\n      if (!state.ending)\n        endWritable(this, state, cb);\n      return this;\n    };\n    Object.defineProperty(Writable.prototype, \"writableLength\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._writableState.length;\n      }\n    });\n    function needFinish(state) {\n      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n    }\n    function callFinal(stream, state) {\n      stream._final(function(err) {\n        state.pendingcb--;\n        if (err) {\n          errorOrDestroy(stream, err);\n        }\n        state.prefinished = true;\n        stream.emit(\"prefinish\");\n        finishMaybe(stream, state);\n      });\n    }\n    function prefinish(stream, state) {\n      if (!state.prefinished && !state.finalCalled) {\n        if (typeof stream._final === \"function\" && !state.destroyed) {\n          state.pendingcb++;\n          state.finalCalled = true;\n          process.nextTick(callFinal, stream, state);\n        } else {\n          state.prefinished = true;\n          stream.emit(\"prefinish\");\n        }\n      }\n    }\n    function finishMaybe(stream, state) {\n      var need = needFinish(state);\n      if (need) {\n        prefinish(stream, state);\n        if (state.pendingcb === 0) {\n          state.finished = true;\n          stream.emit(\"finish\");\n          if (state.autoDestroy) {\n            var rState = stream._readableState;\n            if (!rState || rState.autoDestroy && rState.endEmitted) {\n              stream.destroy();\n            }\n          }\n        }\n      }\n      return need;\n    }\n    function endWritable(stream, state, cb) {\n      state.ending = true;\n      finishMaybe(stream, state);\n      if (cb) {\n        if (state.finished)\n          process.nextTick(cb);\n        else\n          stream.once(\"finish\", cb);\n      }\n      state.ended = true;\n      stream.writable = false;\n    }\n    function onCorkedFinish(corkReq, state, err) {\n      var entry = corkReq.entry;\n      corkReq.entry = null;\n      while (entry) {\n        var cb = entry.callback;\n        state.pendingcb--;\n        cb(err);\n        entry = entry.next;\n      }\n      state.corkedRequestsFree.next = corkReq;\n    }\n    Object.defineProperty(Writable.prototype, \"destroyed\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        if (this._writableState === void 0) {\n          return false;\n        }\n        return this._writableState.destroyed;\n      },\n      set: function set(value) {\n        if (!this._writableState) {\n          return;\n        }\n        this._writableState.destroyed = value;\n      }\n    });\n    Writable.prototype.destroy = destroyImpl.destroy;\n    Writable.prototype._undestroy = destroyImpl.undestroy;\n    Writable.prototype._destroy = function(err, cb) {\n      cb(err);\n    };\n  }\n});\n\n// node_modules/readable-stream/lib/_stream_duplex.js\nvar require_stream_duplex = __commonJS({\n  \"node_modules/readable-stream/lib/_stream_duplex.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var objectKeys = Object.keys || function(obj) {\n      var keys2 = [];\n      for (var key in obj)\n        keys2.push(key);\n      return keys2;\n    };\n    module.exports = Duplex;\n    var Readable = require_stream_readable();\n    var Writable = require_stream_writable();\n    require_inherits_browser()(Duplex, Readable);\n    {\n      keys = objectKeys(Writable.prototype);\n      for (v = 0; v < keys.length; v++) {\n        method = keys[v];\n        if (!Duplex.prototype[method])\n          Duplex.prototype[method] = Writable.prototype[method];\n      }\n    }\n    var keys;\n    var method;\n    var v;\n    function Duplex(options) {\n      if (!(this instanceof Duplex))\n        return new Duplex(options);\n      Readable.call(this, options);\n      Writable.call(this, options);\n      this.allowHalfOpen = true;\n      if (options) {\n        if (options.readable === false)\n          this.readable = false;\n        if (options.writable === false)\n          this.writable = false;\n        if (options.allowHalfOpen === false) {\n          this.allowHalfOpen = false;\n          this.once(\"end\", onend);\n        }\n      }\n    }\n    Object.defineProperty(Duplex.prototype, \"writableHighWaterMark\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._writableState.highWaterMark;\n      }\n    });\n    Object.defineProperty(Duplex.prototype, \"writableBuffer\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._writableState && this._writableState.getBuffer();\n      }\n    });\n    Object.defineProperty(Duplex.prototype, \"writableLength\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._writableState.length;\n      }\n    });\n    function onend() {\n      if (this._writableState.ended)\n        return;\n      process.nextTick(onEndNT, this);\n    }\n    function onEndNT(self2) {\n      self2.end();\n    }\n    Object.defineProperty(Duplex.prototype, \"destroyed\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        if (this._readableState === void 0 || this._writableState === void 0) {\n          return false;\n        }\n        return this._readableState.destroyed && this._writableState.destroyed;\n      },\n      set: function set(value) {\n        if (this._readableState === void 0 || this._writableState === void 0) {\n          return;\n        }\n        this._readableState.destroyed = value;\n        this._writableState.destroyed = value;\n      }\n    });\n  }\n});\n\n// node_modules/string_decoder/lib/string_decoder.js\nvar require_string_decoder = __commonJS({\n  \"node_modules/string_decoder/lib/string_decoder.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var isEncoding = Buffer2.isEncoding || function(encoding) {\n      encoding = \"\" + encoding;\n      switch (encoding && encoding.toLowerCase()) {\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n        case \"raw\":\n          return true;\n        default:\n          return false;\n      }\n    };\n    function _normalizeEncoding(enc) {\n      if (!enc)\n        return \"utf8\";\n      var retried;\n      while (true) {\n        switch (enc) {\n          case \"utf8\":\n          case \"utf-8\":\n            return \"utf8\";\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return \"utf16le\";\n          case \"latin1\":\n          case \"binary\":\n            return \"latin1\";\n          case \"base64\":\n          case \"ascii\":\n          case \"hex\":\n            return enc;\n          default:\n            if (retried)\n              return;\n            enc = (\"\" + enc).toLowerCase();\n            retried = true;\n        }\n      }\n    }\n    function normalizeEncoding(enc) {\n      var nenc = _normalizeEncoding(enc);\n      if (typeof nenc !== \"string\" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))\n        throw new Error(\"Unknown encoding: \" + enc);\n      return nenc || enc;\n    }\n    exports.StringDecoder = StringDecoder;\n    function StringDecoder(encoding) {\n      this.encoding = normalizeEncoding(encoding);\n      var nb;\n      switch (this.encoding) {\n        case \"utf16le\":\n          this.text = utf16Text;\n          this.end = utf16End;\n          nb = 4;\n          break;\n        case \"utf8\":\n          this.fillLast = utf8FillLast;\n          nb = 4;\n          break;\n        case \"base64\":\n          this.text = base64Text;\n          this.end = base64End;\n          nb = 3;\n          break;\n        default:\n          this.write = simpleWrite;\n          this.end = simpleEnd;\n          return;\n      }\n      this.lastNeed = 0;\n      this.lastTotal = 0;\n      this.lastChar = Buffer2.allocUnsafe(nb);\n    }\n    StringDecoder.prototype.write = function(buf) {\n      if (buf.length === 0)\n        return \"\";\n      var r;\n      var i;\n      if (this.lastNeed) {\n        r = this.fillLast(buf);\n        if (r === void 0)\n          return \"\";\n        i = this.lastNeed;\n        this.lastNeed = 0;\n      } else {\n        i = 0;\n      }\n      if (i < buf.length)\n        return r ? r + this.text(buf, i) : this.text(buf, i);\n      return r || \"\";\n    };\n    StringDecoder.prototype.end = utf8End;\n    StringDecoder.prototype.text = utf8Text;\n    StringDecoder.prototype.fillLast = function(buf) {\n      if (this.lastNeed <= buf.length) {\n        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n        return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n      }\n      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n      this.lastNeed -= buf.length;\n    };\n    function utf8CheckByte(byte) {\n      if (byte <= 127)\n        return 0;\n      else if (byte >> 5 === 6)\n        return 2;\n      else if (byte >> 4 === 14)\n        return 3;\n      else if (byte >> 3 === 30)\n        return 4;\n      return byte >> 6 === 2 ? -1 : -2;\n    }\n    function utf8CheckIncomplete(self2, buf, i) {\n      var j = buf.length - 1;\n      if (j < i)\n        return 0;\n      var nb = utf8CheckByte(buf[j]);\n      if (nb >= 0) {\n        if (nb > 0)\n          self2.lastNeed = nb - 1;\n        return nb;\n      }\n      if (--j < i || nb === -2)\n        return 0;\n      nb = utf8CheckByte(buf[j]);\n      if (nb >= 0) {\n        if (nb > 0)\n          self2.lastNeed = nb - 2;\n        return nb;\n      }\n      if (--j < i || nb === -2)\n        return 0;\n      nb = utf8CheckByte(buf[j]);\n      if (nb >= 0) {\n        if (nb > 0) {\n          if (nb === 2)\n            nb = 0;\n          else\n            self2.lastNeed = nb - 3;\n        }\n        return nb;\n      }\n      return 0;\n    }\n    function utf8CheckExtraBytes(self2, buf, p) {\n      if ((buf[0] & 192) !== 128) {\n        self2.lastNeed = 0;\n        return \"�\";\n      }\n      if (self2.lastNeed > 1 && buf.length > 1) {\n        if ((buf[1] & 192) !== 128) {\n          self2.lastNeed = 1;\n          return \"�\";\n        }\n        if (self2.lastNeed > 2 && buf.length > 2) {\n          if ((buf[2] & 192) !== 128) {\n            self2.lastNeed = 2;\n            return \"�\";\n          }\n        }\n      }\n    }\n    function utf8FillLast(buf) {\n      var p = this.lastTotal - this.lastNeed;\n      var r = utf8CheckExtraBytes(this, buf, p);\n      if (r !== void 0)\n        return r;\n      if (this.lastNeed <= buf.length) {\n        buf.copy(this.lastChar, p, 0, this.lastNeed);\n        return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n      }\n      buf.copy(this.lastChar, p, 0, buf.length);\n      this.lastNeed -= buf.length;\n    }\n    function utf8Text(buf, i) {\n      var total = utf8CheckIncomplete(this, buf, i);\n      if (!this.lastNeed)\n        return buf.toString(\"utf8\", i);\n      this.lastTotal = total;\n      var end = buf.length - (total - this.lastNeed);\n      buf.copy(this.lastChar, 0, end);\n      return buf.toString(\"utf8\", i, end);\n    }\n    function utf8End(buf) {\n      var r = buf && buf.length ? this.write(buf) : \"\";\n      if (this.lastNeed)\n        return r + \"�\";\n      return r;\n    }\n    function utf16Text(buf, i) {\n      if ((buf.length - i) % 2 === 0) {\n        var r = buf.toString(\"utf16le\", i);\n        if (r) {\n          var c = r.charCodeAt(r.length - 1);\n          if (c >= 55296 && c <= 56319) {\n            this.lastNeed = 2;\n            this.lastTotal = 4;\n            this.lastChar[0] = buf[buf.length - 2];\n            this.lastChar[1] = buf[buf.length - 1];\n            return r.slice(0, -1);\n          }\n        }\n        return r;\n      }\n      this.lastNeed = 1;\n      this.lastTotal = 2;\n      this.lastChar[0] = buf[buf.length - 1];\n      return buf.toString(\"utf16le\", i, buf.length - 1);\n    }\n    function utf16End(buf) {\n      var r = buf && buf.length ? this.write(buf) : \"\";\n      if (this.lastNeed) {\n        var end = this.lastTotal - this.lastNeed;\n        return r + this.lastChar.toString(\"utf16le\", 0, end);\n      }\n      return r;\n    }\n    function base64Text(buf, i) {\n      var n = (buf.length - i) % 3;\n      if (n === 0)\n        return buf.toString(\"base64\", i);\n      this.lastNeed = 3 - n;\n      this.lastTotal = 3;\n      if (n === 1) {\n        this.lastChar[0] = buf[buf.length - 1];\n      } else {\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n      }\n      return buf.toString(\"base64\", i, buf.length - n);\n    }\n    function base64End(buf) {\n      var r = buf && buf.length ? this.write(buf) : \"\";\n      if (this.lastNeed)\n        return r + this.lastChar.toString(\"base64\", 0, 3 - this.lastNeed);\n      return r;\n    }\n    function simpleWrite(buf) {\n      return buf.toString(this.encoding);\n    }\n    function simpleEnd(buf) {\n      return buf && buf.length ? this.write(buf) : \"\";\n    }\n  }\n});\n\n// node_modules/readable-stream/lib/internal/streams/end-of-stream.js\nvar require_end_of_stream = __commonJS({\n  \"node_modules/readable-stream/lib/internal/streams/end-of-stream.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;\n    function once(callback) {\n      var called = false;\n      return function() {\n        if (called)\n          return;\n        called = true;\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        callback.apply(this, args);\n      };\n    }\n    function noop() {\n    }\n    function isRequest(stream) {\n      return stream.setHeader && typeof stream.abort === \"function\";\n    }\n    function eos(stream, opts, callback) {\n      if (typeof opts === \"function\")\n        return eos(stream, null, opts);\n      if (!opts)\n        opts = {};\n      callback = once(callback || noop);\n      var readable = opts.readable || opts.readable !== false && stream.readable;\n      var writable = opts.writable || opts.writable !== false && stream.writable;\n      var onlegacyfinish = function onlegacyfinish2() {\n        if (!stream.writable)\n          onfinish();\n      };\n      var writableEnded = stream._writableState && stream._writableState.finished;\n      var onfinish = function onfinish2() {\n        writable = false;\n        writableEnded = true;\n        if (!readable)\n          callback.call(stream);\n      };\n      var readableEnded = stream._readableState && stream._readableState.endEmitted;\n      var onend = function onend2() {\n        readable = false;\n        readableEnded = true;\n        if (!writable)\n          callback.call(stream);\n      };\n      var onerror = function onerror2(err) {\n        callback.call(stream, err);\n      };\n      var onclose = function onclose2() {\n        var err;\n        if (readable && !readableEnded) {\n          if (!stream._readableState || !stream._readableState.ended)\n            err = new ERR_STREAM_PREMATURE_CLOSE();\n          return callback.call(stream, err);\n        }\n        if (writable && !writableEnded) {\n          if (!stream._writableState || !stream._writableState.ended)\n            err = new ERR_STREAM_PREMATURE_CLOSE();\n          return callback.call(stream, err);\n        }\n      };\n      var onrequest = function onrequest2() {\n        stream.req.on(\"finish\", onfinish);\n      };\n      if (isRequest(stream)) {\n        stream.on(\"complete\", onfinish);\n        stream.on(\"abort\", onclose);\n        if (stream.req)\n          onrequest();\n        else\n          stream.on(\"request\", onrequest);\n      } else if (writable && !stream._writableState) {\n        stream.on(\"end\", onlegacyfinish);\n        stream.on(\"close\", onlegacyfinish);\n      }\n      stream.on(\"end\", onend);\n      stream.on(\"finish\", onfinish);\n      if (opts.error !== false)\n        stream.on(\"error\", onerror);\n      stream.on(\"close\", onclose);\n      return function() {\n        stream.removeListener(\"complete\", onfinish);\n        stream.removeListener(\"abort\", onclose);\n        stream.removeListener(\"request\", onrequest);\n        if (stream.req)\n          stream.req.removeListener(\"finish\", onfinish);\n        stream.removeListener(\"end\", onlegacyfinish);\n        stream.removeListener(\"close\", onlegacyfinish);\n        stream.removeListener(\"finish\", onfinish);\n        stream.removeListener(\"end\", onend);\n        stream.removeListener(\"error\", onerror);\n        stream.removeListener(\"close\", onclose);\n      };\n    }\n    module.exports = eos;\n  }\n});\n\n// node_modules/readable-stream/lib/internal/streams/async_iterator.js\nvar require_async_iterator = __commonJS({\n  \"node_modules/readable-stream/lib/internal/streams/async_iterator.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var _Object$setPrototypeO;\n    function _defineProperty(obj, key, value) {\n      key = _toPropertyKey(key);\n      if (key in obj) {\n        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });\n      } else {\n        obj[key] = value;\n      }\n      return obj;\n    }\n    function _toPropertyKey(arg) {\n      var key = _toPrimitive(arg, \"string\");\n      return typeof key === \"symbol\" ? key : String(key);\n    }\n    function _toPrimitive(input, hint) {\n      if (typeof input !== \"object\" || input === null)\n        return input;\n      var prim = input[Symbol.toPrimitive];\n      if (prim !== void 0) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\")\n          return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n      }\n      return (hint === \"string\" ? String : Number)(input);\n    }\n    var finished = require_end_of_stream();\n    var kLastResolve = Symbol(\"lastResolve\");\n    var kLastReject = Symbol(\"lastReject\");\n    var kError = Symbol(\"error\");\n    var kEnded = Symbol(\"ended\");\n    var kLastPromise = Symbol(\"lastPromise\");\n    var kHandlePromise = Symbol(\"handlePromise\");\n    var kStream = Symbol(\"stream\");\n    function createIterResult(value, done) {\n      return {\n        value,\n        done\n      };\n    }\n    function readAndResolve(iter) {\n      var resolve = iter[kLastResolve];\n      if (resolve !== null) {\n        var data = iter[kStream].read();\n        if (data !== null) {\n          iter[kLastPromise] = null;\n          iter[kLastResolve] = null;\n          iter[kLastReject] = null;\n          resolve(createIterResult(data, false));\n        }\n      }\n    }\n    function onReadable(iter) {\n      process.nextTick(readAndResolve, iter);\n    }\n    function wrapForNext(lastPromise, iter) {\n      return function(resolve, reject) {\n        lastPromise.then(function() {\n          if (iter[kEnded]) {\n            resolve(createIterResult(void 0, true));\n            return;\n          }\n          iter[kHandlePromise](resolve, reject);\n        }, reject);\n      };\n    }\n    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {\n    });\n    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n      get stream() {\n        return this[kStream];\n      },\n      next: function next() {\n        var _this = this;\n        var error = this[kError];\n        if (error !== null) {\n          return Promise.reject(error);\n        }\n        if (this[kEnded]) {\n          return Promise.resolve(createIterResult(void 0, true));\n        }\n        if (this[kStream].destroyed) {\n          return new Promise(function(resolve, reject) {\n            process.nextTick(function() {\n              if (_this[kError]) {\n                reject(_this[kError]);\n              } else {\n                resolve(createIterResult(void 0, true));\n              }\n            });\n          });\n        }\n        var lastPromise = this[kLastPromise];\n        var promise;\n        if (lastPromise) {\n          promise = new Promise(wrapForNext(lastPromise, this));\n        } else {\n          var data = this[kStream].read();\n          if (data !== null) {\n            return Promise.resolve(createIterResult(data, false));\n          }\n          promise = new Promise(this[kHandlePromise]);\n        }\n        this[kLastPromise] = promise;\n        return promise;\n      }\n    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {\n      return this;\n    }), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n      var _this2 = this;\n      return new Promise(function(resolve, reject) {\n        _this2[kStream].destroy(null, function(err) {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(createIterResult(void 0, true));\n        });\n      });\n    }), _Object$setPrototypeO), AsyncIteratorPrototype);\n    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {\n      var _Object$create;\n      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n        value: stream,\n        writable: true\n      }), _defineProperty(_Object$create, kLastResolve, {\n        value: null,\n        writable: true\n      }), _defineProperty(_Object$create, kLastReject, {\n        value: null,\n        writable: true\n      }), _defineProperty(_Object$create, kError, {\n        value: null,\n        writable: true\n      }), _defineProperty(_Object$create, kEnded, {\n        value: stream._readableState.endEmitted,\n        writable: true\n      }), _defineProperty(_Object$create, kHandlePromise, {\n        value: function value(resolve, reject) {\n          var data = iterator[kStream].read();\n          if (data) {\n            iterator[kLastPromise] = null;\n            iterator[kLastResolve] = null;\n            iterator[kLastReject] = null;\n            resolve(createIterResult(data, false));\n          } else {\n            iterator[kLastResolve] = resolve;\n            iterator[kLastReject] = reject;\n          }\n        },\n        writable: true\n      }), _Object$create));\n      iterator[kLastPromise] = null;\n      finished(stream, function(err) {\n        if (err && err.code !== \"ERR_STREAM_PREMATURE_CLOSE\") {\n          var reject = iterator[kLastReject];\n          if (reject !== null) {\n            iterator[kLastPromise] = null;\n            iterator[kLastResolve] = null;\n            iterator[kLastReject] = null;\n            reject(err);\n          }\n          iterator[kError] = err;\n          return;\n        }\n        var resolve = iterator[kLastResolve];\n        if (resolve !== null) {\n          iterator[kLastPromise] = null;\n          iterator[kLastResolve] = null;\n          iterator[kLastReject] = null;\n          resolve(createIterResult(void 0, true));\n        }\n        iterator[kEnded] = true;\n      });\n      stream.on(\"readable\", onReadable.bind(null, iterator));\n      return iterator;\n    };\n    module.exports = createReadableStreamAsyncIterator;\n  }\n});\n\n// node_modules/readable-stream/lib/internal/streams/from-browser.js\nvar require_from_browser = __commonJS({\n  \"node_modules/readable-stream/lib/internal/streams/from-browser.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = function() {\n      throw new Error(\"Readable.from is not available in the browser\");\n    };\n  }\n});\n\n// node_modules/readable-stream/lib/_stream_readable.js\nvar require_stream_readable = __commonJS({\n  \"node_modules/readable-stream/lib/_stream_readable.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = Readable;\n    var Duplex;\n    Readable.ReadableState = ReadableState;\n    var EE = require_events().EventEmitter;\n    var EElistenerCount = function EElistenerCount2(emitter, type) {\n      return emitter.listeners(type).length;\n    };\n    var Stream = require_stream_browser();\n    var Buffer2 = require_buffer_polyfill().Buffer;\n    var OurUint8Array = (typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : typeof self !== \"undefined\" ? self : {}).Uint8Array || function() {\n    };\n    function _uint8ArrayToBuffer(chunk) {\n      return Buffer2.from(chunk);\n    }\n    function _isUint8Array(obj) {\n      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;\n    }\n    var debugUtil = require_util();\n    var debug;\n    if (debugUtil && debugUtil.debuglog) {\n      debug = debugUtil.debuglog(\"stream\");\n    } else {\n      debug = function debug2() {\n      };\n    }\n    var BufferList = require_buffer_list();\n    var destroyImpl = require_destroy();\n    var _require = require_state();\n    var getHighWaterMark = _require.getHighWaterMark;\n    var _require$codes = require_errors_browser().codes;\n    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;\n    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;\n    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;\n    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n    var StringDecoder;\n    var createReadableStreamAsyncIterator;\n    var from;\n    require_inherits_browser()(Readable, Stream);\n    var errorOrDestroy = destroyImpl.errorOrDestroy;\n    var kProxyEvents = [\"error\", \"close\", \"destroy\", \"pause\", \"resume\"];\n    function prependListener(emitter, event, fn) {\n      if (typeof emitter.prependListener === \"function\")\n        return emitter.prependListener(event, fn);\n      if (!emitter._events || !emitter._events[event])\n        emitter.on(event, fn);\n      else if (Array.isArray(emitter._events[event]))\n        emitter._events[event].unshift(fn);\n      else\n        emitter._events[event] = [fn, emitter._events[event]];\n    }\n    function ReadableState(options, stream, isDuplex) {\n      Duplex = Duplex || require_stream_duplex();\n      options = options || {};\n      if (typeof isDuplex !== \"boolean\")\n        isDuplex = stream instanceof Duplex;\n      this.objectMode = !!options.objectMode;\n      if (isDuplex)\n        this.objectMode = this.objectMode || !!options.readableObjectMode;\n      this.highWaterMark = getHighWaterMark(this, options, \"readableHighWaterMark\", isDuplex);\n      this.buffer = new BufferList();\n      this.length = 0;\n      this.pipes = null;\n      this.pipesCount = 0;\n      this.flowing = null;\n      this.ended = false;\n      this.endEmitted = false;\n      this.reading = false;\n      this.sync = true;\n      this.needReadable = false;\n      this.emittedReadable = false;\n      this.readableListening = false;\n      this.resumeScheduled = false;\n      this.paused = true;\n      this.emitClose = options.emitClose !== false;\n      this.autoDestroy = !!options.autoDestroy;\n      this.destroyed = false;\n      this.defaultEncoding = options.defaultEncoding || \"utf8\";\n      this.awaitDrain = 0;\n      this.readingMore = false;\n      this.decoder = null;\n      this.encoding = null;\n      if (options.encoding) {\n        if (!StringDecoder)\n          StringDecoder = require_string_decoder().StringDecoder;\n        this.decoder = new StringDecoder(options.encoding);\n        this.encoding = options.encoding;\n      }\n    }\n    function Readable(options) {\n      Duplex = Duplex || require_stream_duplex();\n      if (!(this instanceof Readable))\n        return new Readable(options);\n      var isDuplex = this instanceof Duplex;\n      this._readableState = new ReadableState(options, this, isDuplex);\n      this.readable = true;\n      if (options) {\n        if (typeof options.read === \"function\")\n          this._read = options.read;\n        if (typeof options.destroy === \"function\")\n          this._destroy = options.destroy;\n      }\n      Stream.call(this);\n    }\n    Object.defineProperty(Readable.prototype, \"destroyed\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        if (this._readableState === void 0) {\n          return false;\n        }\n        return this._readableState.destroyed;\n      },\n      set: function set(value) {\n        if (!this._readableState) {\n          return;\n        }\n        this._readableState.destroyed = value;\n      }\n    });\n    Readable.prototype.destroy = destroyImpl.destroy;\n    Readable.prototype._undestroy = destroyImpl.undestroy;\n    Readable.prototype._destroy = function(err, cb) {\n      cb(err);\n    };\n    Readable.prototype.push = function(chunk, encoding) {\n      var state = this._readableState;\n      var skipChunkCheck;\n      if (!state.objectMode) {\n        if (typeof chunk === \"string\") {\n          encoding = encoding || state.defaultEncoding;\n          if (encoding !== state.encoding) {\n            chunk = Buffer2.from(chunk, encoding);\n            encoding = \"\";\n          }\n          skipChunkCheck = true;\n        }\n      } else {\n        skipChunkCheck = true;\n      }\n      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n    };\n    Readable.prototype.unshift = function(chunk) {\n      return readableAddChunk(this, chunk, null, true, false);\n    };\n    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n      debug(\"readableAddChunk\", chunk);\n      var state = stream._readableState;\n      if (chunk === null) {\n        state.reading = false;\n        onEofChunk(stream, state);\n      } else {\n        var er;\n        if (!skipChunkCheck)\n          er = chunkInvalid(state, chunk);\n        if (er) {\n          errorOrDestroy(stream, er);\n        } else if (state.objectMode || chunk && chunk.length > 0) {\n          if (typeof chunk !== \"string\" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {\n            chunk = _uint8ArrayToBuffer(chunk);\n          }\n          if (addToFront) {\n            if (state.endEmitted)\n              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());\n            else\n              addChunk(stream, state, chunk, true);\n          } else if (state.ended) {\n            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n          } else if (state.destroyed) {\n            return false;\n          } else {\n            state.reading = false;\n            if (state.decoder && !encoding) {\n              chunk = state.decoder.write(chunk);\n              if (state.objectMode || chunk.length !== 0)\n                addChunk(stream, state, chunk, false);\n              else\n                maybeReadMore(stream, state);\n            } else {\n              addChunk(stream, state, chunk, false);\n            }\n          }\n        } else if (!addToFront) {\n          state.reading = false;\n          maybeReadMore(stream, state);\n        }\n      }\n      return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n    }\n    function addChunk(stream, state, chunk, addToFront) {\n      if (state.flowing && state.length === 0 && !state.sync) {\n        state.awaitDrain = 0;\n        stream.emit(\"data\", chunk);\n      } else {\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront)\n          state.buffer.unshift(chunk);\n        else\n          state.buffer.push(chunk);\n        if (state.needReadable)\n          emitReadable(stream);\n      }\n      maybeReadMore(stream, state);\n    }\n    function chunkInvalid(state, chunk) {\n      var er;\n      if (!_isUint8Array(chunk) && typeof chunk !== \"string\" && chunk !== void 0 && !state.objectMode) {\n        er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\"string\", \"Buffer\", \"Uint8Array\"], chunk);\n      }\n      return er;\n    }\n    Readable.prototype.isPaused = function() {\n      return this._readableState.flowing === false;\n    };\n    Readable.prototype.setEncoding = function(enc) {\n      if (!StringDecoder)\n        StringDecoder = require_string_decoder().StringDecoder;\n      var decoder = new StringDecoder(enc);\n      this._readableState.decoder = decoder;\n      this._readableState.encoding = this._readableState.decoder.encoding;\n      var p = this._readableState.buffer.head;\n      var content = \"\";\n      while (p !== null) {\n        content += decoder.write(p.data);\n        p = p.next;\n      }\n      this._readableState.buffer.clear();\n      if (content !== \"\")\n        this._readableState.buffer.push(content);\n      this._readableState.length = content.length;\n      return this;\n    };\n    var MAX_HWM = 1073741824;\n    function computeNewHighWaterMark(n) {\n      if (n >= MAX_HWM) {\n        n = MAX_HWM;\n      } else {\n        n--;\n        n |= n >>> 1;\n        n |= n >>> 2;\n        n |= n >>> 4;\n        n |= n >>> 8;\n        n |= n >>> 16;\n        n++;\n      }\n      return n;\n    }\n    function howMuchToRead(n, state) {\n      if (n <= 0 || state.length === 0 && state.ended)\n        return 0;\n      if (state.objectMode)\n        return 1;\n      if (n !== n) {\n        if (state.flowing && state.length)\n          return state.buffer.head.data.length;\n        else\n          return state.length;\n      }\n      if (n > state.highWaterMark)\n        state.highWaterMark = computeNewHighWaterMark(n);\n      if (n <= state.length)\n        return n;\n      if (!state.ended) {\n        state.needReadable = true;\n        return 0;\n      }\n      return state.length;\n    }\n    Readable.prototype.read = function(n) {\n      debug(\"read\", n);\n      n = parseInt(n, 10);\n      var state = this._readableState;\n      var nOrig = n;\n      if (n !== 0)\n        state.emittedReadable = false;\n      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n        debug(\"read: emitReadable\", state.length, state.ended);\n        if (state.length === 0 && state.ended)\n          endReadable(this);\n        else\n          emitReadable(this);\n        return null;\n      }\n      n = howMuchToRead(n, state);\n      if (n === 0 && state.ended) {\n        if (state.length === 0)\n          endReadable(this);\n        return null;\n      }\n      var doRead = state.needReadable;\n      debug(\"need readable\", doRead);\n      if (state.length === 0 || state.length - n < state.highWaterMark) {\n        doRead = true;\n        debug(\"length less than watermark\", doRead);\n      }\n      if (state.ended || state.reading) {\n        doRead = false;\n        debug(\"reading or ended\", doRead);\n      } else if (doRead) {\n        debug(\"do read\");\n        state.reading = true;\n        state.sync = true;\n        if (state.length === 0)\n          state.needReadable = true;\n        this._read(state.highWaterMark);\n        state.sync = false;\n        if (!state.reading)\n          n = howMuchToRead(nOrig, state);\n      }\n      var ret;\n      if (n > 0)\n        ret = fromList(n, state);\n      else\n        ret = null;\n      if (ret === null) {\n        state.needReadable = state.length <= state.highWaterMark;\n        n = 0;\n      } else {\n        state.length -= n;\n        state.awaitDrain = 0;\n      }\n      if (state.length === 0) {\n        if (!state.ended)\n          state.needReadable = true;\n        if (nOrig !== n && state.ended)\n          endReadable(this);\n      }\n      if (ret !== null)\n        this.emit(\"data\", ret);\n      return ret;\n    };\n    function onEofChunk(stream, state) {\n      debug(\"onEofChunk\");\n      if (state.ended)\n        return;\n      if (state.decoder) {\n        var chunk = state.decoder.end();\n        if (chunk && chunk.length) {\n          state.buffer.push(chunk);\n          state.length += state.objectMode ? 1 : chunk.length;\n        }\n      }\n      state.ended = true;\n      if (state.sync) {\n        emitReadable(stream);\n      } else {\n        state.needReadable = false;\n        if (!state.emittedReadable) {\n          state.emittedReadable = true;\n          emitReadable_(stream);\n        }\n      }\n    }\n    function emitReadable(stream) {\n      var state = stream._readableState;\n      debug(\"emitReadable\", state.needReadable, state.emittedReadable);\n      state.needReadable = false;\n      if (!state.emittedReadable) {\n        debug(\"emitReadable\", state.flowing);\n        state.emittedReadable = true;\n        process.nextTick(emitReadable_, stream);\n      }\n    }\n    function emitReadable_(stream) {\n      var state = stream._readableState;\n      debug(\"emitReadable_\", state.destroyed, state.length, state.ended);\n      if (!state.destroyed && (state.length || state.ended)) {\n        stream.emit(\"readable\");\n        state.emittedReadable = false;\n      }\n      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n      flow(stream);\n    }\n    function maybeReadMore(stream, state) {\n      if (!state.readingMore) {\n        state.readingMore = true;\n        process.nextTick(maybeReadMore_, stream, state);\n      }\n    }\n    function maybeReadMore_(stream, state) {\n      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n        var len = state.length;\n        debug(\"maybeReadMore read 0\");\n        stream.read(0);\n        if (len === state.length)\n          break;\n      }\n      state.readingMore = false;\n    }\n    Readable.prototype._read = function(n) {\n      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED(\"_read()\"));\n    };\n    Readable.prototype.pipe = function(dest, pipeOpts) {\n      var src = this;\n      var state = this._readableState;\n      switch (state.pipesCount) {\n        case 0:\n          state.pipes = dest;\n          break;\n        case 1:\n          state.pipes = [state.pipes, dest];\n          break;\n        default:\n          state.pipes.push(dest);\n          break;\n      }\n      state.pipesCount += 1;\n      debug(\"pipe count=%d opts=%j\", state.pipesCount, pipeOpts);\n      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n      var endFn = doEnd ? onend : unpipe;\n      if (state.endEmitted)\n        process.nextTick(endFn);\n      else\n        src.once(\"end\", endFn);\n      dest.on(\"unpipe\", onunpipe);\n      function onunpipe(readable, unpipeInfo) {\n        debug(\"onunpipe\");\n        if (readable === src) {\n          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n            unpipeInfo.hasUnpiped = true;\n            cleanup();\n          }\n        }\n      }\n      function onend() {\n        debug(\"onend\");\n        dest.end();\n      }\n      var ondrain = pipeOnDrain(src);\n      dest.on(\"drain\", ondrain);\n      var cleanedUp = false;\n      function cleanup() {\n        debug(\"cleanup\");\n        dest.removeListener(\"close\", onclose);\n        dest.removeListener(\"finish\", onfinish);\n        dest.removeListener(\"drain\", ondrain);\n        dest.removeListener(\"error\", onerror);\n        dest.removeListener(\"unpipe\", onunpipe);\n        src.removeListener(\"end\", onend);\n        src.removeListener(\"end\", unpipe);\n        src.removeListener(\"data\", ondata);\n        cleanedUp = true;\n        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))\n          ondrain();\n      }\n      src.on(\"data\", ondata);\n      function ondata(chunk) {\n        debug(\"ondata\");\n        var ret = dest.write(chunk);\n        debug(\"dest.write\", ret);\n        if (ret === false) {\n          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n            debug(\"false write response, pause\", state.awaitDrain);\n            state.awaitDrain++;\n          }\n          src.pause();\n        }\n      }\n      function onerror(er) {\n        debug(\"onerror\", er);\n        unpipe();\n        dest.removeListener(\"error\", onerror);\n        if (EElistenerCount(dest, \"error\") === 0)\n          errorOrDestroy(dest, er);\n      }\n      prependListener(dest, \"error\", onerror);\n      function onclose() {\n        dest.removeListener(\"finish\", onfinish);\n        unpipe();\n      }\n      dest.once(\"close\", onclose);\n      function onfinish() {\n        debug(\"onfinish\");\n        dest.removeListener(\"close\", onclose);\n        unpipe();\n      }\n      dest.once(\"finish\", onfinish);\n      function unpipe() {\n        debug(\"unpipe\");\n        src.unpipe(dest);\n      }\n      dest.emit(\"pipe\", src);\n      if (!state.flowing) {\n        debug(\"pipe resume\");\n        src.resume();\n      }\n      return dest;\n    };\n    function pipeOnDrain(src) {\n      return function pipeOnDrainFunctionResult() {\n        var state = src._readableState;\n        debug(\"pipeOnDrain\", state.awaitDrain);\n        if (state.awaitDrain)\n          state.awaitDrain--;\n        if (state.awaitDrain === 0 && EElistenerCount(src, \"data\")) {\n          state.flowing = true;\n          flow(src);\n        }\n      };\n    }\n    Readable.prototype.unpipe = function(dest) {\n      var state = this._readableState;\n      var unpipeInfo = {\n        hasUnpiped: false\n      };\n      if (state.pipesCount === 0)\n        return this;\n      if (state.pipesCount === 1) {\n        if (dest && dest !== state.pipes)\n          return this;\n        if (!dest)\n          dest = state.pipes;\n        state.pipes = null;\n        state.pipesCount = 0;\n        state.flowing = false;\n        if (dest)\n          dest.emit(\"unpipe\", this, unpipeInfo);\n        return this;\n      }\n      if (!dest) {\n        var dests = state.pipes;\n        var len = state.pipesCount;\n        state.pipes = null;\n        state.pipesCount = 0;\n        state.flowing = false;\n        for (var i = 0; i < len; i++)\n          dests[i].emit(\"unpipe\", this, {\n            hasUnpiped: false\n          });\n        return this;\n      }\n      var index = indexOf(state.pipes, dest);\n      if (index === -1)\n        return this;\n      state.pipes.splice(index, 1);\n      state.pipesCount -= 1;\n      if (state.pipesCount === 1)\n        state.pipes = state.pipes[0];\n      dest.emit(\"unpipe\", this, unpipeInfo);\n      return this;\n    };\n    Readable.prototype.on = function(ev, fn) {\n      var res = Stream.prototype.on.call(this, ev, fn);\n      var state = this._readableState;\n      if (ev === \"data\") {\n        state.readableListening = this.listenerCount(\"readable\") > 0;\n        if (state.flowing !== false)\n          this.resume();\n      } else if (ev === \"readable\") {\n        if (!state.endEmitted && !state.readableListening) {\n          state.readableListening = state.needReadable = true;\n          state.flowing = false;\n          state.emittedReadable = false;\n          debug(\"on readable\", state.length, state.reading);\n          if (state.length) {\n            emitReadable(this);\n          } else if (!state.reading) {\n            process.nextTick(nReadingNextTick, this);\n          }\n        }\n      }\n      return res;\n    };\n    Readable.prototype.addListener = Readable.prototype.on;\n    Readable.prototype.removeListener = function(ev, fn) {\n      var res = Stream.prototype.removeListener.call(this, ev, fn);\n      if (ev === \"readable\") {\n        process.nextTick(updateReadableListening, this);\n      }\n      return res;\n    };\n    Readable.prototype.removeAllListeners = function(ev) {\n      var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n      if (ev === \"readable\" || ev === void 0) {\n        process.nextTick(updateReadableListening, this);\n      }\n      return res;\n    };\n    function updateReadableListening(self2) {\n      var state = self2._readableState;\n      state.readableListening = self2.listenerCount(\"readable\") > 0;\n      if (state.resumeScheduled && !state.paused) {\n        state.flowing = true;\n      } else if (self2.listenerCount(\"data\") > 0) {\n        self2.resume();\n      }\n    }\n    function nReadingNextTick(self2) {\n      debug(\"readable nexttick read 0\");\n      self2.read(0);\n    }\n    Readable.prototype.resume = function() {\n      var state = this._readableState;\n      if (!state.flowing) {\n        debug(\"resume\");\n        state.flowing = !state.readableListening;\n        resume(this, state);\n      }\n      state.paused = false;\n      return this;\n    };\n    function resume(stream, state) {\n      if (!state.resumeScheduled) {\n        state.resumeScheduled = true;\n        process.nextTick(resume_, stream, state);\n      }\n    }\n    function resume_(stream, state) {\n      debug(\"resume\", state.reading);\n      if (!state.reading) {\n        stream.read(0);\n      }\n      state.resumeScheduled = false;\n      stream.emit(\"resume\");\n      flow(stream);\n      if (state.flowing && !state.reading)\n        stream.read(0);\n    }\n    Readable.prototype.pause = function() {\n      debug(\"call pause flowing=%j\", this._readableState.flowing);\n      if (this._readableState.flowing !== false) {\n        debug(\"pause\");\n        this._readableState.flowing = false;\n        this.emit(\"pause\");\n      }\n      this._readableState.paused = true;\n      return this;\n    };\n    function flow(stream) {\n      var state = stream._readableState;\n      debug(\"flow\", state.flowing);\n      while (state.flowing && stream.read() !== null)\n        ;\n    }\n    Readable.prototype.wrap = function(stream) {\n      var _this = this;\n      var state = this._readableState;\n      var paused = false;\n      stream.on(\"end\", function() {\n        debug(\"wrapped end\");\n        if (state.decoder && !state.ended) {\n          var chunk = state.decoder.end();\n          if (chunk && chunk.length)\n            _this.push(chunk);\n        }\n        _this.push(null);\n      });\n      stream.on(\"data\", function(chunk) {\n        debug(\"wrapped data\");\n        if (state.decoder)\n          chunk = state.decoder.write(chunk);\n        if (state.objectMode && (chunk === null || chunk === void 0))\n          return;\n        else if (!state.objectMode && (!chunk || !chunk.length))\n          return;\n        var ret = _this.push(chunk);\n        if (!ret) {\n          paused = true;\n          stream.pause();\n        }\n      });\n      for (var i in stream) {\n        if (this[i] === void 0 && typeof stream[i] === \"function\") {\n          this[i] = /* @__PURE__ */ function methodWrap(method) {\n            return function methodWrapReturnFunction() {\n              return stream[method].apply(stream, arguments);\n            };\n          }(i);\n        }\n      }\n      for (var n = 0; n < kProxyEvents.length; n++) {\n        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n      }\n      this._read = function(n2) {\n        debug(\"wrapped _read\", n2);\n        if (paused) {\n          paused = false;\n          stream.resume();\n        }\n      };\n      return this;\n    };\n    if (typeof Symbol === \"function\") {\n      Readable.prototype[Symbol.asyncIterator] = function() {\n        if (createReadableStreamAsyncIterator === void 0) {\n          createReadableStreamAsyncIterator = require_async_iterator();\n        }\n        return createReadableStreamAsyncIterator(this);\n      };\n    }\n    Object.defineProperty(Readable.prototype, \"readableHighWaterMark\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._readableState.highWaterMark;\n      }\n    });\n    Object.defineProperty(Readable.prototype, \"readableBuffer\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._readableState && this._readableState.buffer;\n      }\n    });\n    Object.defineProperty(Readable.prototype, \"readableFlowing\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._readableState.flowing;\n      },\n      set: function set(state) {\n        if (this._readableState) {\n          this._readableState.flowing = state;\n        }\n      }\n    });\n    Readable._fromList = fromList;\n    Object.defineProperty(Readable.prototype, \"readableLength\", {\n      // making it explicit this property is not enumerable\n      // because otherwise some prototype manipulation in\n      // userland will fail\n      enumerable: false,\n      get: function get() {\n        return this._readableState.length;\n      }\n    });\n    function fromList(n, state) {\n      if (state.length === 0)\n        return null;\n      var ret;\n      if (state.objectMode)\n        ret = state.buffer.shift();\n      else if (!n || n >= state.length) {\n        if (state.decoder)\n          ret = state.buffer.join(\"\");\n        else if (state.buffer.length === 1)\n          ret = state.buffer.first();\n        else\n          ret = state.buffer.concat(state.length);\n        state.buffer.clear();\n      } else {\n        ret = state.buffer.consume(n, state.decoder);\n      }\n      return ret;\n    }\n    function endReadable(stream) {\n      var state = stream._readableState;\n      debug(\"endReadable\", state.endEmitted);\n      if (!state.endEmitted) {\n        state.ended = true;\n        process.nextTick(endReadableNT, state, stream);\n      }\n    }\n    function endReadableNT(state, stream) {\n      debug(\"endReadableNT\", state.endEmitted, state.length);\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit(\"end\");\n        if (state.autoDestroy) {\n          var wState = stream._writableState;\n          if (!wState || wState.autoDestroy && wState.finished) {\n            stream.destroy();\n          }\n        }\n      }\n    }\n    if (typeof Symbol === \"function\") {\n      Readable.from = function(iterable, opts) {\n        if (from === void 0) {\n          from = require_from_browser();\n        }\n        return from(Readable, iterable, opts);\n      };\n    }\n    function indexOf(xs, x) {\n      for (var i = 0, l = xs.length; i < l; i++) {\n        if (xs[i] === x)\n          return i;\n      }\n      return -1;\n    }\n  }\n});\n\n// node_modules/readable-stream/lib/_stream_transform.js\nvar require_stream_transform = __commonJS({\n  \"node_modules/readable-stream/lib/_stream_transform.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = Transform;\n    var _require$codes = require_errors_browser().codes;\n    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;\n    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;\n    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;\n    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n    var Duplex = require_stream_duplex();\n    require_inherits_browser()(Transform, Duplex);\n    function afterTransform(er, data) {\n      var ts = this._transformState;\n      ts.transforming = false;\n      var cb = ts.writecb;\n      if (cb === null) {\n        return this.emit(\"error\", new ERR_MULTIPLE_CALLBACK());\n      }\n      ts.writechunk = null;\n      ts.writecb = null;\n      if (data != null)\n        this.push(data);\n      cb(er);\n      var rs = this._readableState;\n      rs.reading = false;\n      if (rs.needReadable || rs.length < rs.highWaterMark) {\n        this._read(rs.highWaterMark);\n      }\n    }\n    function Transform(options) {\n      if (!(this instanceof Transform))\n        return new Transform(options);\n      Duplex.call(this, options);\n      this._transformState = {\n        afterTransform: afterTransform.bind(this),\n        needTransform: false,\n        transforming: false,\n        writecb: null,\n        writechunk: null,\n        writeencoding: null\n      };\n      this._readableState.needReadable = true;\n      this._readableState.sync = false;\n      if (options) {\n        if (typeof options.transform === \"function\")\n          this._transform = options.transform;\n        if (typeof options.flush === \"function\")\n          this._flush = options.flush;\n      }\n      this.on(\"prefinish\", prefinish);\n    }\n    function prefinish() {\n      var _this = this;\n      if (typeof this._flush === \"function\" && !this._readableState.destroyed) {\n        this._flush(function(er, data) {\n          done(_this, er, data);\n        });\n      } else {\n        done(this, null, null);\n      }\n    }\n    Transform.prototype.push = function(chunk, encoding) {\n      this._transformState.needTransform = false;\n      return Duplex.prototype.push.call(this, chunk, encoding);\n    };\n    Transform.prototype._transform = function(chunk, encoding, cb) {\n      cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_transform()\"));\n    };\n    Transform.prototype._write = function(chunk, encoding, cb) {\n      var ts = this._transformState;\n      ts.writecb = cb;\n      ts.writechunk = chunk;\n      ts.writeencoding = encoding;\n      if (!ts.transforming) {\n        var rs = this._readableState;\n        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)\n          this._read(rs.highWaterMark);\n      }\n    };\n    Transform.prototype._read = function(n) {\n      var ts = this._transformState;\n      if (ts.writechunk !== null && !ts.transforming) {\n        ts.transforming = true;\n        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n      } else {\n        ts.needTransform = true;\n      }\n    };\n    Transform.prototype._destroy = function(err, cb) {\n      Duplex.prototype._destroy.call(this, err, function(err2) {\n        cb(err2);\n      });\n    };\n    function done(stream, er, data) {\n      if (er)\n        return stream.emit(\"error\", er);\n      if (data != null)\n        stream.push(data);\n      if (stream._writableState.length)\n        throw new ERR_TRANSFORM_WITH_LENGTH_0();\n      if (stream._transformState.transforming)\n        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n      return stream.push(null);\n    }\n  }\n});\n\n// node_modules/readable-stream/lib/_stream_passthrough.js\nvar require_stream_passthrough = __commonJS({\n  \"node_modules/readable-stream/lib/_stream_passthrough.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = PassThrough;\n    var Transform = require_stream_transform();\n    require_inherits_browser()(PassThrough, Transform);\n    function PassThrough(options) {\n      if (!(this instanceof PassThrough))\n        return new PassThrough(options);\n      Transform.call(this, options);\n    }\n    PassThrough.prototype._transform = function(chunk, encoding, cb) {\n      cb(null, chunk);\n    };\n  }\n});\n\n// node_modules/readable-stream/lib/internal/streams/pipeline.js\nvar require_pipeline = __commonJS({\n  \"node_modules/readable-stream/lib/internal/streams/pipeline.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var eos;\n    function once(callback) {\n      var called = false;\n      return function() {\n        if (called)\n          return;\n        called = true;\n        callback.apply(void 0, arguments);\n      };\n    }\n    var _require$codes = require_errors_browser().codes;\n    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;\n    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n    function noop(err) {\n      if (err)\n        throw err;\n    }\n    function isRequest(stream) {\n      return stream.setHeader && typeof stream.abort === \"function\";\n    }\n    function destroyer(stream, reading, writing, callback) {\n      callback = once(callback);\n      var closed = false;\n      stream.on(\"close\", function() {\n        closed = true;\n      });\n      if (eos === void 0)\n        eos = require_end_of_stream();\n      eos(stream, {\n        readable: reading,\n        writable: writing\n      }, function(err) {\n        if (err)\n          return callback(err);\n        closed = true;\n        callback();\n      });\n      var destroyed = false;\n      return function(err) {\n        if (closed)\n          return;\n        if (destroyed)\n          return;\n        destroyed = true;\n        if (isRequest(stream))\n          return stream.abort();\n        if (typeof stream.destroy === \"function\")\n          return stream.destroy();\n        callback(err || new ERR_STREAM_DESTROYED(\"pipe\"));\n      };\n    }\n    function call(fn) {\n      fn();\n    }\n    function pipe(from, to) {\n      return from.pipe(to);\n    }\n    function popCallback(streams) {\n      if (!streams.length)\n        return noop;\n      if (typeof streams[streams.length - 1] !== \"function\")\n        return noop;\n      return streams.pop();\n    }\n    function pipeline() {\n      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n        streams[_key] = arguments[_key];\n      }\n      var callback = popCallback(streams);\n      if (Array.isArray(streams[0]))\n        streams = streams[0];\n      if (streams.length < 2) {\n        throw new ERR_MISSING_ARGS(\"streams\");\n      }\n      var error;\n      var destroys = streams.map(function(stream, i) {\n        var reading = i < streams.length - 1;\n        var writing = i > 0;\n        return destroyer(stream, reading, writing, function(err) {\n          if (!error)\n            error = err;\n          if (err)\n            destroys.forEach(call);\n          if (reading)\n            return;\n          destroys.forEach(call);\n          callback(error);\n        });\n      });\n      return streams.reduce(pipe);\n    }\n    module.exports = pipeline;\n  }\n});\n\n// node_modules/readable-stream/readable-browser.js\nvar require_readable_browser = __commonJS({\n  \"node_modules/readable-stream/readable-browser.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    exports = module.exports = require_stream_readable();\n    exports.Stream = exports;\n    exports.Readable = exports;\n    exports.Writable = require_stream_writable();\n    exports.Duplex = require_stream_duplex();\n    exports.Transform = require_stream_transform();\n    exports.PassThrough = require_stream_passthrough();\n    exports.finished = require_end_of_stream();\n    exports.pipeline = require_pipeline();\n  }\n});\n\n// node_modules/hash-base/index.js\nvar require_hash_base = __commonJS({\n  \"node_modules/hash-base/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var Transform = require_readable_browser().Transform;\n    var inherits = require_inherits_browser();\n    function throwIfNotStringOrBuffer(val, prefix) {\n      if (!Buffer2.isBuffer(val) && typeof val !== \"string\") {\n        throw new TypeError(prefix + \" must be a string or a buffer\");\n      }\n    }\n    function HashBase(blockSize) {\n      Transform.call(this);\n      this._block = Buffer2.allocUnsafe(blockSize);\n      this._blockSize = blockSize;\n      this._blockOffset = 0;\n      this._length = [0, 0, 0, 0];\n      this._finalized = false;\n    }\n    inherits(HashBase, Transform);\n    HashBase.prototype._transform = function(chunk, encoding, callback) {\n      var error = null;\n      try {\n        this.update(chunk, encoding);\n      } catch (err) {\n        error = err;\n      }\n      callback(error);\n    };\n    HashBase.prototype._flush = function(callback) {\n      var error = null;\n      try {\n        this.push(this.digest());\n      } catch (err) {\n        error = err;\n      }\n      callback(error);\n    };\n    HashBase.prototype.update = function(data, encoding) {\n      throwIfNotStringOrBuffer(data, \"Data\");\n      if (this._finalized)\n        throw new Error(\"Digest already called\");\n      if (!Buffer2.isBuffer(data))\n        data = Buffer2.from(data, encoding);\n      var block = this._block;\n      var offset = 0;\n      while (this._blockOffset + data.length - offset >= this._blockSize) {\n        for (var i = this._blockOffset; i < this._blockSize; )\n          block[i++] = data[offset++];\n        this._update();\n        this._blockOffset = 0;\n      }\n      while (offset < data.length)\n        block[this._blockOffset++] = data[offset++];\n      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\n        this._length[j] += carry;\n        carry = this._length[j] / 4294967296 | 0;\n        if (carry > 0)\n          this._length[j] -= 4294967296 * carry;\n      }\n      return this;\n    };\n    HashBase.prototype._update = function() {\n      throw new Error(\"_update is not implemented\");\n    };\n    HashBase.prototype.digest = function(encoding) {\n      if (this._finalized)\n        throw new Error(\"Digest already called\");\n      this._finalized = true;\n      var digest = this._digest();\n      if (encoding !== void 0)\n        digest = digest.toString(encoding);\n      this._block.fill(0);\n      this._blockOffset = 0;\n      for (var i = 0; i < 4; ++i)\n        this._length[i] = 0;\n      return digest;\n    };\n    HashBase.prototype._digest = function() {\n      throw new Error(\"_digest is not implemented\");\n    };\n    module.exports = HashBase;\n  }\n});\n\n// node_modules/md5.js/index.js\nvar require_md5 = __commonJS({\n  \"node_modules/md5.js/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var HashBase = require_hash_base();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var ARRAY16 = new Array(16);\n    function MD5() {\n      HashBase.call(this, 64);\n      this._a = 1732584193;\n      this._b = 4023233417;\n      this._c = 2562383102;\n      this._d = 271733878;\n    }\n    inherits(MD5, HashBase);\n    MD5.prototype._update = function() {\n      var M = ARRAY16;\n      for (var i = 0; i < 16; ++i)\n        M[i] = this._block.readInt32LE(i * 4);\n      var a = this._a;\n      var b = this._b;\n      var c = this._c;\n      var d = this._d;\n      a = fnF(a, b, c, d, M[0], 3614090360, 7);\n      d = fnF(d, a, b, c, M[1], 3905402710, 12);\n      c = fnF(c, d, a, b, M[2], 606105819, 17);\n      b = fnF(b, c, d, a, M[3], 3250441966, 22);\n      a = fnF(a, b, c, d, M[4], 4118548399, 7);\n      d = fnF(d, a, b, c, M[5], 1200080426, 12);\n      c = fnF(c, d, a, b, M[6], 2821735955, 17);\n      b = fnF(b, c, d, a, M[7], 4249261313, 22);\n      a = fnF(a, b, c, d, M[8], 1770035416, 7);\n      d = fnF(d, a, b, c, M[9], 2336552879, 12);\n      c = fnF(c, d, a, b, M[10], 4294925233, 17);\n      b = fnF(b, c, d, a, M[11], 2304563134, 22);\n      a = fnF(a, b, c, d, M[12], 1804603682, 7);\n      d = fnF(d, a, b, c, M[13], 4254626195, 12);\n      c = fnF(c, d, a, b, M[14], 2792965006, 17);\n      b = fnF(b, c, d, a, M[15], 1236535329, 22);\n      a = fnG(a, b, c, d, M[1], 4129170786, 5);\n      d = fnG(d, a, b, c, M[6], 3225465664, 9);\n      c = fnG(c, d, a, b, M[11], 643717713, 14);\n      b = fnG(b, c, d, a, M[0], 3921069994, 20);\n      a = fnG(a, b, c, d, M[5], 3593408605, 5);\n      d = fnG(d, a, b, c, M[10], 38016083, 9);\n      c = fnG(c, d, a, b, M[15], 3634488961, 14);\n      b = fnG(b, c, d, a, M[4], 3889429448, 20);\n      a = fnG(a, b, c, d, M[9], 568446438, 5);\n      d = fnG(d, a, b, c, M[14], 3275163606, 9);\n      c = fnG(c, d, a, b, M[3], 4107603335, 14);\n      b = fnG(b, c, d, a, M[8], 1163531501, 20);\n      a = fnG(a, b, c, d, M[13], 2850285829, 5);\n      d = fnG(d, a, b, c, M[2], 4243563512, 9);\n      c = fnG(c, d, a, b, M[7], 1735328473, 14);\n      b = fnG(b, c, d, a, M[12], 2368359562, 20);\n      a = fnH(a, b, c, d, M[5], 4294588738, 4);\n      d = fnH(d, a, b, c, M[8], 2272392833, 11);\n      c = fnH(c, d, a, b, M[11], 1839030562, 16);\n      b = fnH(b, c, d, a, M[14], 4259657740, 23);\n      a = fnH(a, b, c, d, M[1], 2763975236, 4);\n      d = fnH(d, a, b, c, M[4], 1272893353, 11);\n      c = fnH(c, d, a, b, M[7], 4139469664, 16);\n      b = fnH(b, c, d, a, M[10], 3200236656, 23);\n      a = fnH(a, b, c, d, M[13], 681279174, 4);\n      d = fnH(d, a, b, c, M[0], 3936430074, 11);\n      c = fnH(c, d, a, b, M[3], 3572445317, 16);\n      b = fnH(b, c, d, a, M[6], 76029189, 23);\n      a = fnH(a, b, c, d, M[9], 3654602809, 4);\n      d = fnH(d, a, b, c, M[12], 3873151461, 11);\n      c = fnH(c, d, a, b, M[15], 530742520, 16);\n      b = fnH(b, c, d, a, M[2], 3299628645, 23);\n      a = fnI(a, b, c, d, M[0], 4096336452, 6);\n      d = fnI(d, a, b, c, M[7], 1126891415, 10);\n      c = fnI(c, d, a, b, M[14], 2878612391, 15);\n      b = fnI(b, c, d, a, M[5], 4237533241, 21);\n      a = fnI(a, b, c, d, M[12], 1700485571, 6);\n      d = fnI(d, a, b, c, M[3], 2399980690, 10);\n      c = fnI(c, d, a, b, M[10], 4293915773, 15);\n      b = fnI(b, c, d, a, M[1], 2240044497, 21);\n      a = fnI(a, b, c, d, M[8], 1873313359, 6);\n      d = fnI(d, a, b, c, M[15], 4264355552, 10);\n      c = fnI(c, d, a, b, M[6], 2734768916, 15);\n      b = fnI(b, c, d, a, M[13], 1309151649, 21);\n      a = fnI(a, b, c, d, M[4], 4149444226, 6);\n      d = fnI(d, a, b, c, M[11], 3174756917, 10);\n      c = fnI(c, d, a, b, M[2], 718787259, 15);\n      b = fnI(b, c, d, a, M[9], 3951481745, 21);\n      this._a = this._a + a | 0;\n      this._b = this._b + b | 0;\n      this._c = this._c + c | 0;\n      this._d = this._d + d | 0;\n    };\n    MD5.prototype._digest = function() {\n      this._block[this._blockOffset++] = 128;\n      if (this._blockOffset > 56) {\n        this._block.fill(0, this._blockOffset, 64);\n        this._update();\n        this._blockOffset = 0;\n      }\n      this._block.fill(0, this._blockOffset, 56);\n      this._block.writeUInt32LE(this._length[0], 56);\n      this._block.writeUInt32LE(this._length[1], 60);\n      this._update();\n      var buffer = Buffer2.allocUnsafe(16);\n      buffer.writeInt32LE(this._a, 0);\n      buffer.writeInt32LE(this._b, 4);\n      buffer.writeInt32LE(this._c, 8);\n      buffer.writeInt32LE(this._d, 12);\n      return buffer;\n    };\n    function rotl(x, n) {\n      return x << n | x >>> 32 - n;\n    }\n    function fnF(a, b, c, d, m, k, s) {\n      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;\n    }\n    function fnG(a, b, c, d, m, k, s) {\n      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;\n    }\n    function fnH(a, b, c, d, m, k, s) {\n      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;\n    }\n    function fnI(a, b, c, d, m, k, s) {\n      return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;\n    }\n    module.exports = MD5;\n  }\n});\n\n// node_modules/ripemd160/index.js\nvar require_ripemd160 = __commonJS({\n  \"node_modules/ripemd160/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_buffer_polyfill().Buffer;\n    var inherits = require_inherits_browser();\n    var HashBase = require_hash_base();\n    var ARRAY16 = new Array(16);\n    var zl = [\n      0,\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10,\n      11,\n      12,\n      13,\n      14,\n      15,\n      7,\n      4,\n      13,\n      1,\n      10,\n      6,\n      15,\n      3,\n      12,\n      0,\n      9,\n      5,\n      2,\n      14,\n      11,\n      8,\n      3,\n      10,\n      14,\n      4,\n      9,\n      15,\n      8,\n      1,\n      2,\n      7,\n      0,\n      6,\n      13,\n      11,\n      5,\n      12,\n      1,\n      9,\n      11,\n      10,\n      0,\n      8,\n      12,\n      4,\n      13,\n      3,\n      7,\n      15,\n      14,\n      5,\n      6,\n      2,\n      4,\n      0,\n      5,\n      9,\n      7,\n      12,\n      2,\n      10,\n      14,\n      1,\n      3,\n      8,\n      11,\n      6,\n      15,\n      13\n    ];\n    var zr = [\n      5,\n      14,\n      7,\n      0,\n      9,\n      2,\n      11,\n      4,\n      13,\n      6,\n      15,\n      8,\n      1,\n      10,\n      3,\n      12,\n      6,\n      11,\n      3,\n      7,\n      0,\n      13,\n      5,\n      10,\n      14,\n      15,\n      8,\n      12,\n      4,\n      9,\n      1,\n      2,\n      15,\n      5,\n      1,\n      3,\n      7,\n      14,\n      6,\n      9,\n      11,\n      8,\n      12,\n      2,\n      10,\n      0,\n      4,\n      13,\n      8,\n      6,\n      4,\n      1,\n      3,\n      11,\n      15,\n      0,\n      5,\n      12,\n      2,\n      13,\n      9,\n      7,\n      10,\n      14,\n      12,\n      15,\n      10,\n      4,\n      1,\n      5,\n      8,\n      7,\n      6,\n      2,\n      13,\n      14,\n      0,\n      3,\n      9,\n      11\n    ];\n    var sl = [\n      11,\n      14,\n      15,\n      12,\n      5,\n      8,\n      7,\n      9,\n      11,\n      13,\n      14,\n      15,\n      6,\n      7,\n      9,\n      8,\n      7,\n      6,\n      8,\n      13,\n      11,\n      9,\n      7,\n      15,\n      7,\n      12,\n      15,\n      9,\n      11,\n      7,\n      13,\n      12,\n      11,\n      13,\n      6,\n      7,\n      14,\n      9,\n      13,\n      15,\n      14,\n      8,\n      13,\n      6,\n      5,\n      12,\n      7,\n      5,\n      11,\n      12,\n      14,\n      15,\n      14,\n      15,\n      9,\n      8,\n      9,\n      14,\n      5,\n      6,\n      8,\n      6,\n      5,\n      12,\n      9,\n      15,\n      5,\n      11,\n      6,\n      8,\n      13,\n      12,\n      5,\n      12,\n      13,\n      14,\n      11,\n      8,\n      5,\n      6\n    ];\n    var sr = [\n      8,\n      9,\n      9,\n      11,\n      13,\n      15,\n      15,\n      5,\n      7,\n      7,\n      8,\n      11,\n      14,\n      14,\n      12,\n      6,\n      9,\n      13,\n      15,\n      7,\n      12,\n      8,\n      9,\n      11,\n      7,\n      7,\n      12,\n      7,\n      6,\n      15,\n      13,\n      11,\n      9,\n      7,\n      15,\n      11,\n      8,\n      6,\n      6,\n      14,\n      12,\n      13,\n      5,\n      14,\n      13,\n      13,\n      7,\n      5,\n      15,\n      5,\n      8,\n      11,\n      14,\n      14,\n      6,\n      14,\n      6,\n      9,\n      12,\n      9,\n      12,\n      5,\n      15,\n      8,\n      8,\n      5,\n      12,\n      9,\n      12,\n      5,\n      14,\n      6,\n      8,\n      13,\n      6,\n      5,\n      15,\n      13,\n      11,\n      11\n    ];\n    var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];\n    var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];\n    function RIPEMD160() {\n      HashBase.call(this, 64);\n      this._a = 1732584193;\n      this._b = 4023233417;\n      this._c = 2562383102;\n      this._d = 271733878;\n      this._e = 3285377520;\n    }\n    inherits(RIPEMD160, HashBase);\n    RIPEMD160.prototype._update = function() {\n      var words = ARRAY16;\n      for (var j = 0; j < 16; ++j)\n        words[j] = this._block.readInt32LE(j * 4);\n      var al = this._a | 0;\n      var bl = this._b | 0;\n      var cl = this._c | 0;\n      var dl = this._d | 0;\n      var el = this._e | 0;\n      var ar = this._a | 0;\n      var br = this._b | 0;\n      var cr = this._c | 0;\n      var dr = this._d | 0;\n      var er = this._e | 0;\n      for (var i = 0; i < 80; i += 1) {\n        var tl;\n        var tr;\n        if (i < 16) {\n          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);\n          tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);\n        } else if (i < 32) {\n          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);\n          tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);\n        } else if (i < 48) {\n          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);\n          tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);\n        } else if (i < 64) {\n          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);\n          tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);\n        } else {\n          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);\n          tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);\n        }\n        al = el;\n        el = dl;\n        dl = rotl(cl, 10);\n        cl = bl;\n        bl = tl;\n        ar = er;\n        er = dr;\n        dr = rotl(cr, 10);\n        cr = br;\n        br = tr;\n      }\n      var t = this._b + cl + dr | 0;\n      this._b = this._c + dl + er | 0;\n      this._c = this._d + el + ar | 0;\n      this._d = this._e + al + br | 0;\n      this._e = this._a + bl + cr | 0;\n      this._a = t;\n    };\n    RIPEMD160.prototype._digest = function() {\n      this._block[this._blockOffset++] = 128;\n      if (this._blockOffset > 56) {\n        this._block.fill(0, this._blockOffset, 64);\n        this._update();\n        this._blockOffset = 0;\n      }\n      this._block.fill(0, this._blockOffset, 56);\n      this._block.writeUInt32LE(this._length[0], 56);\n      this._block.writeUInt32LE(this._length[1], 60);\n      this._update();\n      var buffer = Buffer2.alloc ? Buffer2.alloc(20) : new Buffer2(20);\n      buffer.writeInt32LE(this._a, 0);\n      buffer.writeInt32LE(this._b, 4);\n      buffer.writeInt32LE(this._c, 8);\n      buffer.writeInt32LE(this._d, 12);\n      buffer.writeInt32LE(this._e, 16);\n      return buffer;\n    };\n    function rotl(x, n) {\n      return x << n | x >>> 32 - n;\n    }\n    function fn1(a, b, c, d, e, m, k, s) {\n      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;\n    }\n    function fn2(a, b, c, d, e, m, k, s) {\n      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;\n    }\n    function fn3(a, b, c, d, e, m, k, s) {\n      return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;\n    }\n    function fn4(a, b, c, d, e, m, k, s) {\n      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;\n    }\n    function fn5(a, b, c, d, e, m, k, s) {\n      return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;\n    }\n    module.exports = RIPEMD160;\n  }\n});\n\n// node_modules/sha.js/hash.js\nvar require_hash = __commonJS({\n  \"node_modules/sha.js/hash.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    function Hash(blockSize, finalSize) {\n      this._block = Buffer2.alloc(blockSize);\n      this._finalSize = finalSize;\n      this._blockSize = blockSize;\n      this._len = 0;\n    }\n    Hash.prototype.update = function(data, enc) {\n      if (typeof data === \"string\") {\n        enc = enc || \"utf8\";\n        data = Buffer2.from(data, enc);\n      }\n      var block = this._block;\n      var blockSize = this._blockSize;\n      var length = data.length;\n      var accum = this._len;\n      for (var offset = 0; offset < length; ) {\n        var assigned = accum % blockSize;\n        var remainder = Math.min(length - offset, blockSize - assigned);\n        for (var i = 0; i < remainder; i++) {\n          block[assigned + i] = data[offset + i];\n        }\n        accum += remainder;\n        offset += remainder;\n        if (accum % blockSize === 0) {\n          this._update(block);\n        }\n      }\n      this._len += length;\n      return this;\n    };\n    Hash.prototype.digest = function(enc) {\n      var rem = this._len % this._blockSize;\n      this._block[rem] = 128;\n      this._block.fill(0, rem + 1);\n      if (rem >= this._finalSize) {\n        this._update(this._block);\n        this._block.fill(0);\n      }\n      var bits = this._len * 8;\n      if (bits <= 4294967295) {\n        this._block.writeUInt32BE(bits, this._blockSize - 4);\n      } else {\n        var lowBits = (bits & 4294967295) >>> 0;\n        var highBits = (bits - lowBits) / 4294967296;\n        this._block.writeUInt32BE(highBits, this._blockSize - 8);\n        this._block.writeUInt32BE(lowBits, this._blockSize - 4);\n      }\n      this._update(this._block);\n      var hash = this._hash();\n      return enc ? hash.toString(enc) : hash;\n    };\n    Hash.prototype._update = function() {\n      throw new Error(\"_update must be implemented by subclass\");\n    };\n    module.exports = Hash;\n  }\n});\n\n// node_modules/sha.js/sha.js\nvar require_sha = __commonJS({\n  \"node_modules/sha.js/sha.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Hash = require_hash();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var K = [\n      1518500249,\n      1859775393,\n      2400959708 | 0,\n      3395469782 | 0\n    ];\n    var W = new Array(80);\n    function Sha() {\n      this.init();\n      this._w = W;\n      Hash.call(this, 64, 56);\n    }\n    inherits(Sha, Hash);\n    Sha.prototype.init = function() {\n      this._a = 1732584193;\n      this._b = 4023233417;\n      this._c = 2562383102;\n      this._d = 271733878;\n      this._e = 3285377520;\n      return this;\n    };\n    function rotl5(num) {\n      return num << 5 | num >>> 27;\n    }\n    function rotl30(num) {\n      return num << 30 | num >>> 2;\n    }\n    function ft(s, b, c, d) {\n      if (s === 0)\n        return b & c | ~b & d;\n      if (s === 2)\n        return b & c | b & d | c & d;\n      return b ^ c ^ d;\n    }\n    Sha.prototype._update = function(M) {\n      var W2 = this._w;\n      var a = this._a | 0;\n      var b = this._b | 0;\n      var c = this._c | 0;\n      var d = this._d | 0;\n      var e = this._e | 0;\n      for (var i = 0; i < 16; ++i)\n        W2[i] = M.readInt32BE(i * 4);\n      for (; i < 80; ++i)\n        W2[i] = W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16];\n      for (var j = 0; j < 80; ++j) {\n        var s = ~~(j / 20);\n        var t = rotl5(a) + ft(s, b, c, d) + e + W2[j] + K[s] | 0;\n        e = d;\n        d = c;\n        c = rotl30(b);\n        b = a;\n        a = t;\n      }\n      this._a = a + this._a | 0;\n      this._b = b + this._b | 0;\n      this._c = c + this._c | 0;\n      this._d = d + this._d | 0;\n      this._e = e + this._e | 0;\n    };\n    Sha.prototype._hash = function() {\n      var H = Buffer2.allocUnsafe(20);\n      H.writeInt32BE(this._a | 0, 0);\n      H.writeInt32BE(this._b | 0, 4);\n      H.writeInt32BE(this._c | 0, 8);\n      H.writeInt32BE(this._d | 0, 12);\n      H.writeInt32BE(this._e | 0, 16);\n      return H;\n    };\n    module.exports = Sha;\n  }\n});\n\n// node_modules/sha.js/sha1.js\nvar require_sha1 = __commonJS({\n  \"node_modules/sha.js/sha1.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Hash = require_hash();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var K = [\n      1518500249,\n      1859775393,\n      2400959708 | 0,\n      3395469782 | 0\n    ];\n    var W = new Array(80);\n    function Sha1() {\n      this.init();\n      this._w = W;\n      Hash.call(this, 64, 56);\n    }\n    inherits(Sha1, Hash);\n    Sha1.prototype.init = function() {\n      this._a = 1732584193;\n      this._b = 4023233417;\n      this._c = 2562383102;\n      this._d = 271733878;\n      this._e = 3285377520;\n      return this;\n    };\n    function rotl1(num) {\n      return num << 1 | num >>> 31;\n    }\n    function rotl5(num) {\n      return num << 5 | num >>> 27;\n    }\n    function rotl30(num) {\n      return num << 30 | num >>> 2;\n    }\n    function ft(s, b, c, d) {\n      if (s === 0)\n        return b & c | ~b & d;\n      if (s === 2)\n        return b & c | b & d | c & d;\n      return b ^ c ^ d;\n    }\n    Sha1.prototype._update = function(M) {\n      var W2 = this._w;\n      var a = this._a | 0;\n      var b = this._b | 0;\n      var c = this._c | 0;\n      var d = this._d | 0;\n      var e = this._e | 0;\n      for (var i = 0; i < 16; ++i)\n        W2[i] = M.readInt32BE(i * 4);\n      for (; i < 80; ++i)\n        W2[i] = rotl1(W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16]);\n      for (var j = 0; j < 80; ++j) {\n        var s = ~~(j / 20);\n        var t = rotl5(a) + ft(s, b, c, d) + e + W2[j] + K[s] | 0;\n        e = d;\n        d = c;\n        c = rotl30(b);\n        b = a;\n        a = t;\n      }\n      this._a = a + this._a | 0;\n      this._b = b + this._b | 0;\n      this._c = c + this._c | 0;\n      this._d = d + this._d | 0;\n      this._e = e + this._e | 0;\n    };\n    Sha1.prototype._hash = function() {\n      var H = Buffer2.allocUnsafe(20);\n      H.writeInt32BE(this._a | 0, 0);\n      H.writeInt32BE(this._b | 0, 4);\n      H.writeInt32BE(this._c | 0, 8);\n      H.writeInt32BE(this._d | 0, 12);\n      H.writeInt32BE(this._e | 0, 16);\n      return H;\n    };\n    module.exports = Sha1;\n  }\n});\n\n// node_modules/sha.js/sha256.js\nvar require_sha256 = __commonJS({\n  \"node_modules/sha.js/sha256.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Hash = require_hash();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var K = [\n      1116352408,\n      1899447441,\n      3049323471,\n      3921009573,\n      961987163,\n      1508970993,\n      2453635748,\n      2870763221,\n      3624381080,\n      310598401,\n      607225278,\n      1426881987,\n      1925078388,\n      2162078206,\n      2614888103,\n      3248222580,\n      3835390401,\n      4022224774,\n      264347078,\n      604807628,\n      770255983,\n      1249150122,\n      1555081692,\n      1996064986,\n      2554220882,\n      2821834349,\n      2952996808,\n      3210313671,\n      3336571891,\n      3584528711,\n      113926993,\n      338241895,\n      666307205,\n      773529912,\n      1294757372,\n      1396182291,\n      1695183700,\n      1986661051,\n      2177026350,\n      2456956037,\n      2730485921,\n      2820302411,\n      3259730800,\n      3345764771,\n      3516065817,\n      3600352804,\n      4094571909,\n      275423344,\n      430227734,\n      506948616,\n      659060556,\n      883997877,\n      958139571,\n      1322822218,\n      1537002063,\n      1747873779,\n      1955562222,\n      2024104815,\n      2227730452,\n      2361852424,\n      2428436474,\n      2756734187,\n      3204031479,\n      3329325298\n    ];\n    var W = new Array(64);\n    function Sha256() {\n      this.init();\n      this._w = W;\n      Hash.call(this, 64, 56);\n    }\n    inherits(Sha256, Hash);\n    Sha256.prototype.init = function() {\n      this._a = 1779033703;\n      this._b = 3144134277;\n      this._c = 1013904242;\n      this._d = 2773480762;\n      this._e = 1359893119;\n      this._f = 2600822924;\n      this._g = 528734635;\n      this._h = 1541459225;\n      return this;\n    };\n    function ch(x, y, z) {\n      return z ^ x & (y ^ z);\n    }\n    function maj(x, y, z) {\n      return x & y | z & (x | y);\n    }\n    function sigma0(x) {\n      return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);\n    }\n    function sigma1(x) {\n      return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);\n    }\n    function gamma0(x) {\n      return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;\n    }\n    function gamma1(x) {\n      return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;\n    }\n    Sha256.prototype._update = function(M) {\n      var W2 = this._w;\n      var a = this._a | 0;\n      var b = this._b | 0;\n      var c = this._c | 0;\n      var d = this._d | 0;\n      var e = this._e | 0;\n      var f = this._f | 0;\n      var g = this._g | 0;\n      var h = this._h | 0;\n      for (var i = 0; i < 16; ++i)\n        W2[i] = M.readInt32BE(i * 4);\n      for (; i < 64; ++i)\n        W2[i] = gamma1(W2[i - 2]) + W2[i - 7] + gamma0(W2[i - 15]) + W2[i - 16] | 0;\n      for (var j = 0; j < 64; ++j) {\n        var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W2[j] | 0;\n        var T2 = sigma0(a) + maj(a, b, c) | 0;\n        h = g;\n        g = f;\n        f = e;\n        e = d + T1 | 0;\n        d = c;\n        c = b;\n        b = a;\n        a = T1 + T2 | 0;\n      }\n      this._a = a + this._a | 0;\n      this._b = b + this._b | 0;\n      this._c = c + this._c | 0;\n      this._d = d + this._d | 0;\n      this._e = e + this._e | 0;\n      this._f = f + this._f | 0;\n      this._g = g + this._g | 0;\n      this._h = h + this._h | 0;\n    };\n    Sha256.prototype._hash = function() {\n      var H = Buffer2.allocUnsafe(32);\n      H.writeInt32BE(this._a, 0);\n      H.writeInt32BE(this._b, 4);\n      H.writeInt32BE(this._c, 8);\n      H.writeInt32BE(this._d, 12);\n      H.writeInt32BE(this._e, 16);\n      H.writeInt32BE(this._f, 20);\n      H.writeInt32BE(this._g, 24);\n      H.writeInt32BE(this._h, 28);\n      return H;\n    };\n    module.exports = Sha256;\n  }\n});\n\n// node_modules/sha.js/sha224.js\nvar require_sha224 = __commonJS({\n  \"node_modules/sha.js/sha224.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Sha256 = require_sha256();\n    var Hash = require_hash();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var W = new Array(64);\n    function Sha224() {\n      this.init();\n      this._w = W;\n      Hash.call(this, 64, 56);\n    }\n    inherits(Sha224, Sha256);\n    Sha224.prototype.init = function() {\n      this._a = 3238371032;\n      this._b = 914150663;\n      this._c = 812702999;\n      this._d = 4144912697;\n      this._e = 4290775857;\n      this._f = 1750603025;\n      this._g = 1694076839;\n      this._h = 3204075428;\n      return this;\n    };\n    Sha224.prototype._hash = function() {\n      var H = Buffer2.allocUnsafe(28);\n      H.writeInt32BE(this._a, 0);\n      H.writeInt32BE(this._b, 4);\n      H.writeInt32BE(this._c, 8);\n      H.writeInt32BE(this._d, 12);\n      H.writeInt32BE(this._e, 16);\n      H.writeInt32BE(this._f, 20);\n      H.writeInt32BE(this._g, 24);\n      return H;\n    };\n    module.exports = Sha224;\n  }\n});\n\n// node_modules/sha.js/sha512.js\nvar require_sha512 = __commonJS({\n  \"node_modules/sha.js/sha512.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Hash = require_hash();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var K = [\n      1116352408,\n      3609767458,\n      1899447441,\n      602891725,\n      3049323471,\n      3964484399,\n      3921009573,\n      2173295548,\n      961987163,\n      4081628472,\n      1508970993,\n      3053834265,\n      2453635748,\n      2937671579,\n      2870763221,\n      3664609560,\n      3624381080,\n      2734883394,\n      310598401,\n      1164996542,\n      607225278,\n      1323610764,\n      1426881987,\n      3590304994,\n      1925078388,\n      4068182383,\n      2162078206,\n      991336113,\n      2614888103,\n      633803317,\n      3248222580,\n      3479774868,\n      3835390401,\n      2666613458,\n      4022224774,\n      944711139,\n      264347078,\n      2341262773,\n      604807628,\n      2007800933,\n      770255983,\n      1495990901,\n      1249150122,\n      1856431235,\n      1555081692,\n      3175218132,\n      1996064986,\n      2198950837,\n      2554220882,\n      3999719339,\n      2821834349,\n      766784016,\n      2952996808,\n      2566594879,\n      3210313671,\n      3203337956,\n      3336571891,\n      1034457026,\n      3584528711,\n      2466948901,\n      113926993,\n      3758326383,\n      338241895,\n      168717936,\n      666307205,\n      1188179964,\n      773529912,\n      1546045734,\n      1294757372,\n      1522805485,\n      1396182291,\n      2643833823,\n      1695183700,\n      2343527390,\n      1986661051,\n      1014477480,\n      2177026350,\n      1206759142,\n      2456956037,\n      344077627,\n      2730485921,\n      1290863460,\n      2820302411,\n      3158454273,\n      3259730800,\n      3505952657,\n      3345764771,\n      106217008,\n      3516065817,\n      3606008344,\n      3600352804,\n      1432725776,\n      4094571909,\n      1467031594,\n      275423344,\n      851169720,\n      430227734,\n      3100823752,\n      506948616,\n      1363258195,\n      659060556,\n      3750685593,\n      883997877,\n      3785050280,\n      958139571,\n      3318307427,\n      1322822218,\n      3812723403,\n      1537002063,\n      2003034995,\n      1747873779,\n      3602036899,\n      1955562222,\n      1575990012,\n      2024104815,\n      1125592928,\n      2227730452,\n      2716904306,\n      2361852424,\n      442776044,\n      2428436474,\n      593698344,\n      2756734187,\n      3733110249,\n      3204031479,\n      2999351573,\n      3329325298,\n      3815920427,\n      3391569614,\n      3928383900,\n      3515267271,\n      566280711,\n      3940187606,\n      3454069534,\n      4118630271,\n      4000239992,\n      116418474,\n      1914138554,\n      174292421,\n      2731055270,\n      289380356,\n      3203993006,\n      460393269,\n      320620315,\n      685471733,\n      587496836,\n      852142971,\n      1086792851,\n      1017036298,\n      365543100,\n      1126000580,\n      2618297676,\n      1288033470,\n      3409855158,\n      1501505948,\n      4234509866,\n      1607167915,\n      987167468,\n      1816402316,\n      1246189591\n    ];\n    var W = new Array(160);\n    function Sha512() {\n      this.init();\n      this._w = W;\n      Hash.call(this, 128, 112);\n    }\n    inherits(Sha512, Hash);\n    Sha512.prototype.init = function() {\n      this._ah = 1779033703;\n      this._bh = 3144134277;\n      this._ch = 1013904242;\n      this._dh = 2773480762;\n      this._eh = 1359893119;\n      this._fh = 2600822924;\n      this._gh = 528734635;\n      this._hh = 1541459225;\n      this._al = 4089235720;\n      this._bl = 2227873595;\n      this._cl = 4271175723;\n      this._dl = 1595750129;\n      this._el = 2917565137;\n      this._fl = 725511199;\n      this._gl = 4215389547;\n      this._hl = 327033209;\n      return this;\n    };\n    function Ch(x, y, z) {\n      return z ^ x & (y ^ z);\n    }\n    function maj(x, y, z) {\n      return x & y | z & (x | y);\n    }\n    function sigma0(x, xl) {\n      return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);\n    }\n    function sigma1(x, xl) {\n      return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);\n    }\n    function Gamma0(x, xl) {\n      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;\n    }\n    function Gamma0l(x, xl) {\n      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);\n    }\n    function Gamma1(x, xl) {\n      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;\n    }\n    function Gamma1l(x, xl) {\n      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);\n    }\n    function getCarry(a, b) {\n      return a >>> 0 < b >>> 0 ? 1 : 0;\n    }\n    Sha512.prototype._update = function(M) {\n      var W2 = this._w;\n      var ah = this._ah | 0;\n      var bh = this._bh | 0;\n      var ch = this._ch | 0;\n      var dh = this._dh | 0;\n      var eh = this._eh | 0;\n      var fh = this._fh | 0;\n      var gh = this._gh | 0;\n      var hh = this._hh | 0;\n      var al = this._al | 0;\n      var bl = this._bl | 0;\n      var cl = this._cl | 0;\n      var dl = this._dl | 0;\n      var el = this._el | 0;\n      var fl = this._fl | 0;\n      var gl = this._gl | 0;\n      var hl = this._hl | 0;\n      for (var i = 0; i < 32; i += 2) {\n        W2[i] = M.readInt32BE(i * 4);\n        W2[i + 1] = M.readInt32BE(i * 4 + 4);\n      }\n      for (; i < 160; i += 2) {\n        var xh = W2[i - 15 * 2];\n        var xl = W2[i - 15 * 2 + 1];\n        var gamma0 = Gamma0(xh, xl);\n        var gamma0l = Gamma0l(xl, xh);\n        xh = W2[i - 2 * 2];\n        xl = W2[i - 2 * 2 + 1];\n        var gamma1 = Gamma1(xh, xl);\n        var gamma1l = Gamma1l(xl, xh);\n        var Wi7h = W2[i - 7 * 2];\n        var Wi7l = W2[i - 7 * 2 + 1];\n        var Wi16h = W2[i - 16 * 2];\n        var Wi16l = W2[i - 16 * 2 + 1];\n        var Wil = gamma0l + Wi7l | 0;\n        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;\n        Wil = Wil + gamma1l | 0;\n        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;\n        Wil = Wil + Wi16l | 0;\n        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;\n        W2[i] = Wih;\n        W2[i + 1] = Wil;\n      }\n      for (var j = 0; j < 160; j += 2) {\n        Wih = W2[j];\n        Wil = W2[j + 1];\n        var majh = maj(ah, bh, ch);\n        var majl = maj(al, bl, cl);\n        var sigma0h = sigma0(ah, al);\n        var sigma0l = sigma0(al, ah);\n        var sigma1h = sigma1(eh, el);\n        var sigma1l = sigma1(el, eh);\n        var Kih = K[j];\n        var Kil = K[j + 1];\n        var chh = Ch(eh, fh, gh);\n        var chl = Ch(el, fl, gl);\n        var t1l = hl + sigma1l | 0;\n        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;\n        t1l = t1l + chl | 0;\n        t1h = t1h + chh + getCarry(t1l, chl) | 0;\n        t1l = t1l + Kil | 0;\n        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;\n        t1l = t1l + Wil | 0;\n        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;\n        var t2l = sigma0l + majl | 0;\n        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;\n        hh = gh;\n        hl = gl;\n        gh = fh;\n        gl = fl;\n        fh = eh;\n        fl = el;\n        el = dl + t1l | 0;\n        eh = dh + t1h + getCarry(el, dl) | 0;\n        dh = ch;\n        dl = cl;\n        ch = bh;\n        cl = bl;\n        bh = ah;\n        bl = al;\n        al = t1l + t2l | 0;\n        ah = t1h + t2h + getCarry(al, t1l) | 0;\n      }\n      this._al = this._al + al | 0;\n      this._bl = this._bl + bl | 0;\n      this._cl = this._cl + cl | 0;\n      this._dl = this._dl + dl | 0;\n      this._el = this._el + el | 0;\n      this._fl = this._fl + fl | 0;\n      this._gl = this._gl + gl | 0;\n      this._hl = this._hl + hl | 0;\n      this._ah = this._ah + ah + getCarry(this._al, al) | 0;\n      this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;\n      this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;\n      this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;\n      this._eh = this._eh + eh + getCarry(this._el, el) | 0;\n      this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;\n      this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;\n      this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;\n    };\n    Sha512.prototype._hash = function() {\n      var H = Buffer2.allocUnsafe(64);\n      function writeInt64BE(h, l, offset) {\n        H.writeInt32BE(h, offset);\n        H.writeInt32BE(l, offset + 4);\n      }\n      writeInt64BE(this._ah, this._al, 0);\n      writeInt64BE(this._bh, this._bl, 8);\n      writeInt64BE(this._ch, this._cl, 16);\n      writeInt64BE(this._dh, this._dl, 24);\n      writeInt64BE(this._eh, this._el, 32);\n      writeInt64BE(this._fh, this._fl, 40);\n      writeInt64BE(this._gh, this._gl, 48);\n      writeInt64BE(this._hh, this._hl, 56);\n      return H;\n    };\n    module.exports = Sha512;\n  }\n});\n\n// node_modules/sha.js/sha384.js\nvar require_sha384 = __commonJS({\n  \"node_modules/sha.js/sha384.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var SHA512 = require_sha512();\n    var Hash = require_hash();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var W = new Array(160);\n    function Sha384() {\n      this.init();\n      this._w = W;\n      Hash.call(this, 128, 112);\n    }\n    inherits(Sha384, SHA512);\n    Sha384.prototype.init = function() {\n      this._ah = 3418070365;\n      this._bh = 1654270250;\n      this._ch = 2438529370;\n      this._dh = 355462360;\n      this._eh = 1731405415;\n      this._fh = 2394180231;\n      this._gh = 3675008525;\n      this._hh = 1203062813;\n      this._al = 3238371032;\n      this._bl = 914150663;\n      this._cl = 812702999;\n      this._dl = 4144912697;\n      this._el = 4290775857;\n      this._fl = 1750603025;\n      this._gl = 1694076839;\n      this._hl = 3204075428;\n      return this;\n    };\n    Sha384.prototype._hash = function() {\n      var H = Buffer2.allocUnsafe(48);\n      function writeInt64BE(h, l, offset) {\n        H.writeInt32BE(h, offset);\n        H.writeInt32BE(l, offset + 4);\n      }\n      writeInt64BE(this._ah, this._al, 0);\n      writeInt64BE(this._bh, this._bl, 8);\n      writeInt64BE(this._ch, this._cl, 16);\n      writeInt64BE(this._dh, this._dl, 24);\n      writeInt64BE(this._eh, this._el, 32);\n      writeInt64BE(this._fh, this._fl, 40);\n      return H;\n    };\n    module.exports = Sha384;\n  }\n});\n\n// node_modules/sha.js/index.js\nvar require_sha2 = __commonJS({\n  \"node_modules/sha.js/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var exports = module.exports = function SHA(algorithm) {\n      algorithm = algorithm.toLowerCase();\n      var Algorithm = exports[algorithm];\n      if (!Algorithm)\n        throw new Error(algorithm + \" is not supported (we accept pull requests)\");\n      return new Algorithm();\n    };\n    exports.sha = require_sha();\n    exports.sha1 = require_sha1();\n    exports.sha224 = require_sha224();\n    exports.sha256 = require_sha256();\n    exports.sha384 = require_sha384();\n    exports.sha512 = require_sha512();\n  }\n});\n\n// node_modules/stream-browserify/index.js\nvar require_stream_browserify = __commonJS({\n  \"node_modules/stream-browserify/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = Stream;\n    var EE = require_events().EventEmitter;\n    var inherits = require_inherits_browser();\n    inherits(Stream, EE);\n    Stream.Readable = require_stream_readable();\n    Stream.Writable = require_stream_writable();\n    Stream.Duplex = require_stream_duplex();\n    Stream.Transform = require_stream_transform();\n    Stream.PassThrough = require_stream_passthrough();\n    Stream.finished = require_end_of_stream();\n    Stream.pipeline = require_pipeline();\n    Stream.Stream = Stream;\n    function Stream() {\n      EE.call(this);\n    }\n    Stream.prototype.pipe = function(dest, options) {\n      var source = this;\n      function ondata(chunk) {\n        if (dest.writable) {\n          if (false === dest.write(chunk) && source.pause) {\n            source.pause();\n          }\n        }\n      }\n      source.on(\"data\", ondata);\n      function ondrain() {\n        if (source.readable && source.resume) {\n          source.resume();\n        }\n      }\n      dest.on(\"drain\", ondrain);\n      if (!dest._isStdio && (!options || options.end !== false)) {\n        source.on(\"end\", onend);\n        source.on(\"close\", onclose);\n      }\n      var didOnEnd = false;\n      function onend() {\n        if (didOnEnd)\n          return;\n        didOnEnd = true;\n        dest.end();\n      }\n      function onclose() {\n        if (didOnEnd)\n          return;\n        didOnEnd = true;\n        if (typeof dest.destroy === \"function\")\n          dest.destroy();\n      }\n      function onerror(er) {\n        cleanup();\n        if (EE.listenerCount(this, \"error\") === 0) {\n          throw er;\n        }\n      }\n      source.on(\"error\", onerror);\n      dest.on(\"error\", onerror);\n      function cleanup() {\n        source.removeListener(\"data\", ondata);\n        dest.removeListener(\"drain\", ondrain);\n        source.removeListener(\"end\", onend);\n        source.removeListener(\"close\", onclose);\n        source.removeListener(\"error\", onerror);\n        dest.removeListener(\"error\", onerror);\n        source.removeListener(\"end\", cleanup);\n        source.removeListener(\"close\", cleanup);\n        dest.removeListener(\"close\", cleanup);\n      }\n      source.on(\"end\", cleanup);\n      source.on(\"close\", cleanup);\n      dest.on(\"close\", cleanup);\n      dest.emit(\"pipe\", source);\n      return dest;\n    };\n  }\n});\n\n// node_modules/cipher-base/index.js\nvar require_cipher_base = __commonJS({\n  \"node_modules/cipher-base/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var Transform = require_stream_browserify().Transform;\n    var StringDecoder = require_string_decoder().StringDecoder;\n    var inherits = require_inherits_browser();\n    function CipherBase(hashMode) {\n      Transform.call(this);\n      this.hashMode = typeof hashMode === \"string\";\n      if (this.hashMode) {\n        this[hashMode] = this._finalOrDigest;\n      } else {\n        this.final = this._finalOrDigest;\n      }\n      if (this._final) {\n        this.__final = this._final;\n        this._final = null;\n      }\n      this._decoder = null;\n      this._encoding = null;\n    }\n    inherits(CipherBase, Transform);\n    CipherBase.prototype.update = function(data, inputEnc, outputEnc) {\n      if (typeof data === \"string\") {\n        data = Buffer2.from(data, inputEnc);\n      }\n      var outData = this._update(data);\n      if (this.hashMode)\n        return this;\n      if (outputEnc) {\n        outData = this._toString(outData, outputEnc);\n      }\n      return outData;\n    };\n    CipherBase.prototype.setAutoPadding = function() {\n    };\n    CipherBase.prototype.getAuthTag = function() {\n      throw new Error(\"trying to get auth tag in unsupported state\");\n    };\n    CipherBase.prototype.setAuthTag = function() {\n      throw new Error(\"trying to set auth tag in unsupported state\");\n    };\n    CipherBase.prototype.setAAD = function() {\n      throw new Error(\"trying to set aad in unsupported state\");\n    };\n    CipherBase.prototype._transform = function(data, _, next) {\n      var err;\n      try {\n        if (this.hashMode) {\n          this._update(data);\n        } else {\n          this.push(this._update(data));\n        }\n      } catch (e) {\n        err = e;\n      } finally {\n        next(err);\n      }\n    };\n    CipherBase.prototype._flush = function(done) {\n      var err;\n      try {\n        this.push(this.__final());\n      } catch (e) {\n        err = e;\n      }\n      done(err);\n    };\n    CipherBase.prototype._finalOrDigest = function(outputEnc) {\n      var outData = this.__final() || Buffer2.alloc(0);\n      if (outputEnc) {\n        outData = this._toString(outData, outputEnc, true);\n      }\n      return outData;\n    };\n    CipherBase.prototype._toString = function(value, enc, fin) {\n      if (!this._decoder) {\n        this._decoder = new StringDecoder(enc);\n        this._encoding = enc;\n      }\n      if (this._encoding !== enc)\n        throw new Error(\"can't switch encodings\");\n      var out = this._decoder.write(value);\n      if (fin) {\n        out += this._decoder.end();\n      }\n      return out;\n    };\n    module.exports = CipherBase;\n  }\n});\n\n// node_modules/create-hash/browser.js\nvar require_browser3 = __commonJS({\n  \"node_modules/create-hash/browser.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var MD5 = require_md5();\n    var RIPEMD160 = require_ripemd160();\n    var sha = require_sha2();\n    var Base = require_cipher_base();\n    function Hash(hash) {\n      Base.call(this, \"digest\");\n      this._hash = hash;\n    }\n    inherits(Hash, Base);\n    Hash.prototype._update = function(data) {\n      this._hash.update(data);\n    };\n    Hash.prototype._final = function() {\n      return this._hash.digest();\n    };\n    module.exports = function createHash(alg) {\n      alg = alg.toLowerCase();\n      if (alg === \"md5\")\n        return new MD5();\n      if (alg === \"rmd160\" || alg === \"ripemd160\")\n        return new RIPEMD160();\n      return new Hash(sha(alg));\n    };\n  }\n});\n\n// node_modules/create-hmac/legacy.js\nvar require_legacy = __commonJS({\n  \"node_modules/create-hmac/legacy.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var Base = require_cipher_base();\n    var ZEROS = Buffer2.alloc(128);\n    var blocksize = 64;\n    function Hmac(alg, key) {\n      Base.call(this, \"digest\");\n      if (typeof key === \"string\") {\n        key = Buffer2.from(key);\n      }\n      this._alg = alg;\n      this._key = key;\n      if (key.length > blocksize) {\n        key = alg(key);\n      } else if (key.length < blocksize) {\n        key = Buffer2.concat([key, ZEROS], blocksize);\n      }\n      var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);\n      var opad = this._opad = Buffer2.allocUnsafe(blocksize);\n      for (var i = 0; i < blocksize; i++) {\n        ipad[i] = key[i] ^ 54;\n        opad[i] = key[i] ^ 92;\n      }\n      this._hash = [ipad];\n    }\n    inherits(Hmac, Base);\n    Hmac.prototype._update = function(data) {\n      this._hash.push(data);\n    };\n    Hmac.prototype._final = function() {\n      var h = this._alg(Buffer2.concat(this._hash));\n      return this._alg(Buffer2.concat([this._opad, h]));\n    };\n    module.exports = Hmac;\n  }\n});\n\n// node_modules/create-hash/md5.js\nvar require_md52 = __commonJS({\n  \"node_modules/create-hash/md5.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var MD5 = require_md5();\n    module.exports = function(buffer) {\n      return new MD5().update(buffer).digest();\n    };\n  }\n});\n\n// node_modules/create-hmac/browser.js\nvar require_browser4 = __commonJS({\n  \"node_modules/create-hmac/browser.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Legacy = require_legacy();\n    var Base = require_cipher_base();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var md5 = require_md52();\n    var RIPEMD160 = require_ripemd160();\n    var sha = require_sha2();\n    var ZEROS = Buffer2.alloc(128);\n    function Hmac(alg, key) {\n      Base.call(this, \"digest\");\n      if (typeof key === \"string\") {\n        key = Buffer2.from(key);\n      }\n      var blocksize = alg === \"sha512\" || alg === \"sha384\" ? 128 : 64;\n      this._alg = alg;\n      this._key = key;\n      if (key.length > blocksize) {\n        var hash = alg === \"rmd160\" ? new RIPEMD160() : sha(alg);\n        key = hash.update(key).digest();\n      } else if (key.length < blocksize) {\n        key = Buffer2.concat([key, ZEROS], blocksize);\n      }\n      var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);\n      var opad = this._opad = Buffer2.allocUnsafe(blocksize);\n      for (var i = 0; i < blocksize; i++) {\n        ipad[i] = key[i] ^ 54;\n        opad[i] = key[i] ^ 92;\n      }\n      this._hash = alg === \"rmd160\" ? new RIPEMD160() : sha(alg);\n      this._hash.update(ipad);\n    }\n    inherits(Hmac, Base);\n    Hmac.prototype._update = function(data) {\n      this._hash.update(data);\n    };\n    Hmac.prototype._final = function() {\n      var h = this._hash.digest();\n      var hash = this._alg === \"rmd160\" ? new RIPEMD160() : sha(this._alg);\n      return hash.update(this._opad).update(h).digest();\n    };\n    module.exports = function createHmac(alg, key) {\n      alg = alg.toLowerCase();\n      if (alg === \"rmd160\" || alg === \"ripemd160\") {\n        return new Hmac(\"rmd160\", key);\n      }\n      if (alg === \"md5\") {\n        return new Legacy(md5, key);\n      }\n      return new Hmac(alg, key);\n    };\n  }\n});\n\n// node_modules/browserify-sign/browser/algorithms.json\nvar require_algorithms = __commonJS({\n  \"node_modules/browserify-sign/browser/algorithms.json\"(exports, module) {\n    module.exports = {\n      sha224WithRSAEncryption: {\n        sign: \"rsa\",\n        hash: \"sha224\",\n        id: \"302d300d06096086480165030402040500041c\"\n      },\n      \"RSA-SHA224\": {\n        sign: \"ecdsa/rsa\",\n        hash: \"sha224\",\n        id: \"302d300d06096086480165030402040500041c\"\n      },\n      sha256WithRSAEncryption: {\n        sign: \"rsa\",\n        hash: \"sha256\",\n        id: \"3031300d060960864801650304020105000420\"\n      },\n      \"RSA-SHA256\": {\n        sign: \"ecdsa/rsa\",\n        hash: \"sha256\",\n        id: \"3031300d060960864801650304020105000420\"\n      },\n      sha384WithRSAEncryption: {\n        sign: \"rsa\",\n        hash: \"sha384\",\n        id: \"3041300d060960864801650304020205000430\"\n      },\n      \"RSA-SHA384\": {\n        sign: \"ecdsa/rsa\",\n        hash: \"sha384\",\n        id: \"3041300d060960864801650304020205000430\"\n      },\n      sha512WithRSAEncryption: {\n        sign: \"rsa\",\n        hash: \"sha512\",\n        id: \"3051300d060960864801650304020305000440\"\n      },\n      \"RSA-SHA512\": {\n        sign: \"ecdsa/rsa\",\n        hash: \"sha512\",\n        id: \"3051300d060960864801650304020305000440\"\n      },\n      \"RSA-SHA1\": {\n        sign: \"rsa\",\n        hash: \"sha1\",\n        id: \"3021300906052b0e03021a05000414\"\n      },\n      \"ecdsa-with-SHA1\": {\n        sign: \"ecdsa\",\n        hash: \"sha1\",\n        id: \"\"\n      },\n      sha256: {\n        sign: \"ecdsa\",\n        hash: \"sha256\",\n        id: \"\"\n      },\n      sha224: {\n        sign: \"ecdsa\",\n        hash: \"sha224\",\n        id: \"\"\n      },\n      sha384: {\n        sign: \"ecdsa\",\n        hash: \"sha384\",\n        id: \"\"\n      },\n      sha512: {\n        sign: \"ecdsa\",\n        hash: \"sha512\",\n        id: \"\"\n      },\n      \"DSA-SHA\": {\n        sign: \"dsa\",\n        hash: \"sha1\",\n        id: \"\"\n      },\n      \"DSA-SHA1\": {\n        sign: \"dsa\",\n        hash: \"sha1\",\n        id: \"\"\n      },\n      DSA: {\n        sign: \"dsa\",\n        hash: \"sha1\",\n        id: \"\"\n      },\n      \"DSA-WITH-SHA224\": {\n        sign: \"dsa\",\n        hash: \"sha224\",\n        id: \"\"\n      },\n      \"DSA-SHA224\": {\n        sign: \"dsa\",\n        hash: \"sha224\",\n        id: \"\"\n      },\n      \"DSA-WITH-SHA256\": {\n        sign: \"dsa\",\n        hash: \"sha256\",\n        id: \"\"\n      },\n      \"DSA-SHA256\": {\n        sign: \"dsa\",\n        hash: \"sha256\",\n        id: \"\"\n      },\n      \"DSA-WITH-SHA384\": {\n        sign: \"dsa\",\n        hash: \"sha384\",\n        id: \"\"\n      },\n      \"DSA-SHA384\": {\n        sign: \"dsa\",\n        hash: \"sha384\",\n        id: \"\"\n      },\n      \"DSA-WITH-SHA512\": {\n        sign: \"dsa\",\n        hash: \"sha512\",\n        id: \"\"\n      },\n      \"DSA-SHA512\": {\n        sign: \"dsa\",\n        hash: \"sha512\",\n        id: \"\"\n      },\n      \"DSA-RIPEMD160\": {\n        sign: \"dsa\",\n        hash: \"rmd160\",\n        id: \"\"\n      },\n      ripemd160WithRSA: {\n        sign: \"rsa\",\n        hash: \"rmd160\",\n        id: \"3021300906052b2403020105000414\"\n      },\n      \"RSA-RIPEMD160\": {\n        sign: \"rsa\",\n        hash: \"rmd160\",\n        id: \"3021300906052b2403020105000414\"\n      },\n      md5WithRSAEncryption: {\n        sign: \"rsa\",\n        hash: \"md5\",\n        id: \"3020300c06082a864886f70d020505000410\"\n      },\n      \"RSA-MD5\": {\n        sign: \"rsa\",\n        hash: \"md5\",\n        id: \"3020300c06082a864886f70d020505000410\"\n      }\n    };\n  }\n});\n\n// node_modules/browserify-sign/algos.js\nvar require_algos = __commonJS({\n  \"node_modules/browserify-sign/algos.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = require_algorithms();\n  }\n});\n\n// node_modules/pbkdf2/lib/precondition.js\nvar require_precondition = __commonJS({\n  \"node_modules/pbkdf2/lib/precondition.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var MAX_ALLOC = Math.pow(2, 30) - 1;\n    module.exports = function(iterations, keylen) {\n      if (typeof iterations !== \"number\") {\n        throw new TypeError(\"Iterations not a number\");\n      }\n      if (iterations < 0) {\n        throw new TypeError(\"Bad iterations\");\n      }\n      if (typeof keylen !== \"number\") {\n        throw new TypeError(\"Key length not a number\");\n      }\n      if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {\n        throw new TypeError(\"Bad key length\");\n      }\n    };\n  }\n});\n\n// node_modules/pbkdf2/lib/default-encoding.js\nvar require_default_encoding = __commonJS({\n  \"node_modules/pbkdf2/lib/default-encoding.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var defaultEncoding;\n    if (global.process && global.process.browser) {\n      defaultEncoding = \"utf-8\";\n    } else if (global.process && global.process.version) {\n      pVersionMajor = parseInt(process.version.split(\".\")[0].slice(1), 10);\n      defaultEncoding = pVersionMajor >= 6 ? \"utf-8\" : \"binary\";\n    } else {\n      defaultEncoding = \"utf-8\";\n    }\n    var pVersionMajor;\n    module.exports = defaultEncoding;\n  }\n});\n\n// node_modules/pbkdf2/lib/to-buffer.js\nvar require_to_buffer = __commonJS({\n  \"node_modules/pbkdf2/lib/to-buffer.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    module.exports = function(thing, encoding, name) {\n      if (Buffer2.isBuffer(thing)) {\n        return thing;\n      } else if (typeof thing === \"string\") {\n        return Buffer2.from(thing, encoding);\n      } else if (ArrayBuffer.isView(thing)) {\n        return Buffer2.from(thing.buffer);\n      } else {\n        throw new TypeError(name + \" must be a string, a Buffer, a typed array or a DataView\");\n      }\n    };\n  }\n});\n\n// node_modules/pbkdf2/lib/sync-browser.js\nvar require_sync_browser = __commonJS({\n  \"node_modules/pbkdf2/lib/sync-browser.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var md5 = require_md52();\n    var RIPEMD160 = require_ripemd160();\n    var sha = require_sha2();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var checkParameters = require_precondition();\n    var defaultEncoding = require_default_encoding();\n    var toBuffer = require_to_buffer();\n    var ZEROS = Buffer2.alloc(128);\n    var sizes = {\n      md5: 16,\n      sha1: 20,\n      sha224: 28,\n      sha256: 32,\n      sha384: 48,\n      sha512: 64,\n      rmd160: 20,\n      ripemd160: 20\n    };\n    function Hmac(alg, key, saltLen) {\n      var hash = getDigest(alg);\n      var blocksize = alg === \"sha512\" || alg === \"sha384\" ? 128 : 64;\n      if (key.length > blocksize) {\n        key = hash(key);\n      } else if (key.length < blocksize) {\n        key = Buffer2.concat([key, ZEROS], blocksize);\n      }\n      var ipad = Buffer2.allocUnsafe(blocksize + sizes[alg]);\n      var opad = Buffer2.allocUnsafe(blocksize + sizes[alg]);\n      for (var i = 0; i < blocksize; i++) {\n        ipad[i] = key[i] ^ 54;\n        opad[i] = key[i] ^ 92;\n      }\n      var ipad1 = Buffer2.allocUnsafe(blocksize + saltLen + 4);\n      ipad.copy(ipad1, 0, 0, blocksize);\n      this.ipad1 = ipad1;\n      this.ipad2 = ipad;\n      this.opad = opad;\n      this.alg = alg;\n      this.blocksize = blocksize;\n      this.hash = hash;\n      this.size = sizes[alg];\n    }\n    Hmac.prototype.run = function(data, ipad) {\n      data.copy(ipad, this.blocksize);\n      var h = this.hash(ipad);\n      h.copy(this.opad, this.blocksize);\n      return this.hash(this.opad);\n    };\n    function getDigest(alg) {\n      function shaFunc(data) {\n        return sha(alg).update(data).digest();\n      }\n      function rmd160Func(data) {\n        return new RIPEMD160().update(data).digest();\n      }\n      if (alg === \"rmd160\" || alg === \"ripemd160\")\n        return rmd160Func;\n      if (alg === \"md5\")\n        return md5;\n      return shaFunc;\n    }\n    function pbkdf2(password, salt, iterations, keylen, digest) {\n      checkParameters(iterations, keylen);\n      password = toBuffer(password, defaultEncoding, \"Password\");\n      salt = toBuffer(salt, defaultEncoding, \"Salt\");\n      digest = digest || \"sha1\";\n      var hmac = new Hmac(digest, password, salt.length);\n      var DK = Buffer2.allocUnsafe(keylen);\n      var block1 = Buffer2.allocUnsafe(salt.length + 4);\n      salt.copy(block1, 0, 0, salt.length);\n      var destPos = 0;\n      var hLen = sizes[digest];\n      var l = Math.ceil(keylen / hLen);\n      for (var i = 1; i <= l; i++) {\n        block1.writeUInt32BE(i, salt.length);\n        var T = hmac.run(block1, hmac.ipad1);\n        var U = T;\n        for (var j = 1; j < iterations; j++) {\n          U = hmac.run(U, hmac.ipad2);\n          for (var k = 0; k < hLen; k++)\n            T[k] ^= U[k];\n        }\n        T.copy(DK, destPos);\n        destPos += hLen;\n      }\n      return DK;\n    }\n    module.exports = pbkdf2;\n  }\n});\n\n// node_modules/pbkdf2/lib/async.js\nvar require_async = __commonJS({\n  \"node_modules/pbkdf2/lib/async.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var checkParameters = require_precondition();\n    var defaultEncoding = require_default_encoding();\n    var sync = require_sync_browser();\n    var toBuffer = require_to_buffer();\n    var ZERO_BUF;\n    var subtle = global.crypto && global.crypto.subtle;\n    var toBrowser = {\n      sha: \"SHA-1\",\n      \"sha-1\": \"SHA-1\",\n      sha1: \"SHA-1\",\n      sha256: \"SHA-256\",\n      \"sha-256\": \"SHA-256\",\n      sha384: \"SHA-384\",\n      \"sha-384\": \"SHA-384\",\n      \"sha-512\": \"SHA-512\",\n      sha512: \"SHA-512\"\n    };\n    var checks = [];\n    function checkNative(algo) {\n      if (global.process && !global.process.browser) {\n        return Promise.resolve(false);\n      }\n      if (!subtle || !subtle.importKey || !subtle.deriveBits) {\n        return Promise.resolve(false);\n      }\n      if (checks[algo] !== void 0) {\n        return checks[algo];\n      }\n      ZERO_BUF = ZERO_BUF || Buffer2.alloc(8);\n      var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {\n        return true;\n      }).catch(function() {\n        return false;\n      });\n      checks[algo] = prom;\n      return prom;\n    }\n    var nextTick;\n    function getNextTick() {\n      if (nextTick) {\n        return nextTick;\n      }\n      if (global.process && global.process.nextTick) {\n        nextTick = global.process.nextTick;\n      } else if (global.queueMicrotask) {\n        nextTick = global.queueMicrotask;\n      } else if (global.setImmediate) {\n        nextTick = global.setImmediate;\n      } else {\n        nextTick = global.setTimeout;\n      }\n      return nextTick;\n    }\n    function browserPbkdf2(password, salt, iterations, length, algo) {\n      return subtle.importKey(\n        \"raw\",\n        password,\n        { name: \"PBKDF2\" },\n        false,\n        [\"deriveBits\"]\n      ).then(function(key) {\n        return subtle.deriveBits({\n          name: \"PBKDF2\",\n          salt,\n          iterations,\n          hash: {\n            name: algo\n          }\n        }, key, length << 3);\n      }).then(function(res) {\n        return Buffer2.from(res);\n      });\n    }\n    function resolvePromise(promise, callback) {\n      promise.then(function(out) {\n        getNextTick()(function() {\n          callback(null, out);\n        });\n      }, function(e) {\n        getNextTick()(function() {\n          callback(e);\n        });\n      });\n    }\n    module.exports = function(password, salt, iterations, keylen, digest, callback) {\n      if (typeof digest === \"function\") {\n        callback = digest;\n        digest = void 0;\n      }\n      digest = digest || \"sha1\";\n      var algo = toBrowser[digest.toLowerCase()];\n      if (!algo || typeof global.Promise !== \"function\") {\n        getNextTick()(function() {\n          var out;\n          try {\n            out = sync(password, salt, iterations, keylen, digest);\n          } catch (e) {\n            return callback(e);\n          }\n          callback(null, out);\n        });\n        return;\n      }\n      checkParameters(iterations, keylen);\n      password = toBuffer(password, defaultEncoding, \"Password\");\n      salt = toBuffer(salt, defaultEncoding, \"Salt\");\n      if (typeof callback !== \"function\")\n        throw new Error(\"No callback provided to pbkdf2\");\n      resolvePromise(checkNative(algo).then(function(resp) {\n        if (resp)\n          return browserPbkdf2(password, salt, iterations, keylen, algo);\n        return sync(password, salt, iterations, keylen, digest);\n      }), callback);\n    };\n  }\n});\n\n// node_modules/pbkdf2/browser.js\nvar require_browser5 = __commonJS({\n  \"node_modules/pbkdf2/browser.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    exports.pbkdf2 = require_async();\n    exports.pbkdf2Sync = require_sync_browser();\n  }\n});\n\n// node_modules/des.js/lib/des/utils.js\nvar require_utils = __commonJS({\n  \"node_modules/des.js/lib/des/utils.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    exports.readUInt32BE = function readUInt32BE(bytes, off) {\n      var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];\n      return res >>> 0;\n    };\n    exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {\n      bytes[0 + off] = value >>> 24;\n      bytes[1 + off] = value >>> 16 & 255;\n      bytes[2 + off] = value >>> 8 & 255;\n      bytes[3 + off] = value & 255;\n    };\n    exports.ip = function ip(inL, inR, out, off) {\n      var outL = 0;\n      var outR = 0;\n      for (var i = 6; i >= 0; i -= 2) {\n        for (var j = 0; j <= 24; j += 8) {\n          outL <<= 1;\n          outL |= inR >>> j + i & 1;\n        }\n        for (var j = 0; j <= 24; j += 8) {\n          outL <<= 1;\n          outL |= inL >>> j + i & 1;\n        }\n      }\n      for (var i = 6; i >= 0; i -= 2) {\n        for (var j = 1; j <= 25; j += 8) {\n          outR <<= 1;\n          outR |= inR >>> j + i & 1;\n        }\n        for (var j = 1; j <= 25; j += 8) {\n          outR <<= 1;\n          outR |= inL >>> j + i & 1;\n        }\n      }\n      out[off + 0] = outL >>> 0;\n      out[off + 1] = outR >>> 0;\n    };\n    exports.rip = function rip(inL, inR, out, off) {\n      var outL = 0;\n      var outR = 0;\n      for (var i = 0; i < 4; i++) {\n        for (var j = 24; j >= 0; j -= 8) {\n          outL <<= 1;\n          outL |= inR >>> j + i & 1;\n          outL <<= 1;\n          outL |= inL >>> j + i & 1;\n        }\n      }\n      for (var i = 4; i < 8; i++) {\n        for (var j = 24; j >= 0; j -= 8) {\n          outR <<= 1;\n          outR |= inR >>> j + i & 1;\n          outR <<= 1;\n          outR |= inL >>> j + i & 1;\n        }\n      }\n      out[off + 0] = outL >>> 0;\n      out[off + 1] = outR >>> 0;\n    };\n    exports.pc1 = function pc1(inL, inR, out, off) {\n      var outL = 0;\n      var outR = 0;\n      for (var i = 7; i >= 5; i--) {\n        for (var j = 0; j <= 24; j += 8) {\n          outL <<= 1;\n          outL |= inR >> j + i & 1;\n        }\n        for (var j = 0; j <= 24; j += 8) {\n          outL <<= 1;\n          outL |= inL >> j + i & 1;\n        }\n      }\n      for (var j = 0; j <= 24; j += 8) {\n        outL <<= 1;\n        outL |= inR >> j + i & 1;\n      }\n      for (var i = 1; i <= 3; i++) {\n        for (var j = 0; j <= 24; j += 8) {\n          outR <<= 1;\n          outR |= inR >> j + i & 1;\n        }\n        for (var j = 0; j <= 24; j += 8) {\n          outR <<= 1;\n          outR |= inL >> j + i & 1;\n        }\n      }\n      for (var j = 0; j <= 24; j += 8) {\n        outR <<= 1;\n        outR |= inL >> j + i & 1;\n      }\n      out[off + 0] = outL >>> 0;\n      out[off + 1] = outR >>> 0;\n    };\n    exports.r28shl = function r28shl(num, shift) {\n      return num << shift & 268435455 | num >>> 28 - shift;\n    };\n    var pc2table = [\n      // inL => outL\n      14,\n      11,\n      17,\n      4,\n      27,\n      23,\n      25,\n      0,\n      13,\n      22,\n      7,\n      18,\n      5,\n      9,\n      16,\n      24,\n      2,\n      20,\n      12,\n      21,\n      1,\n      8,\n      15,\n      26,\n      // inR => outR\n      15,\n      4,\n      25,\n      19,\n      9,\n      1,\n      26,\n      16,\n      5,\n      11,\n      23,\n      8,\n      12,\n      7,\n      17,\n      0,\n      22,\n      3,\n      10,\n      14,\n      6,\n      20,\n      27,\n      24\n    ];\n    exports.pc2 = function pc2(inL, inR, out, off) {\n      var outL = 0;\n      var outR = 0;\n      var len = pc2table.length >>> 1;\n      for (var i = 0; i < len; i++) {\n        outL <<= 1;\n        outL |= inL >>> pc2table[i] & 1;\n      }\n      for (var i = len; i < pc2table.length; i++) {\n        outR <<= 1;\n        outR |= inR >>> pc2table[i] & 1;\n      }\n      out[off + 0] = outL >>> 0;\n      out[off + 1] = outR >>> 0;\n    };\n    exports.expand = function expand(r, out, off) {\n      var outL = 0;\n      var outR = 0;\n      outL = (r & 1) << 5 | r >>> 27;\n      for (var i = 23; i >= 15; i -= 4) {\n        outL <<= 6;\n        outL |= r >>> i & 63;\n      }\n      for (var i = 11; i >= 3; i -= 4) {\n        outR |= r >>> i & 63;\n        outR <<= 6;\n      }\n      outR |= (r & 31) << 1 | r >>> 31;\n      out[off + 0] = outL >>> 0;\n      out[off + 1] = outR >>> 0;\n    };\n    var sTable = [\n      14,\n      0,\n      4,\n      15,\n      13,\n      7,\n      1,\n      4,\n      2,\n      14,\n      15,\n      2,\n      11,\n      13,\n      8,\n      1,\n      3,\n      10,\n      10,\n      6,\n      6,\n      12,\n      12,\n      11,\n      5,\n      9,\n      9,\n      5,\n      0,\n      3,\n      7,\n      8,\n      4,\n      15,\n      1,\n      12,\n      14,\n      8,\n      8,\n      2,\n      13,\n      4,\n      6,\n      9,\n      2,\n      1,\n      11,\n      7,\n      15,\n      5,\n      12,\n      11,\n      9,\n      3,\n      7,\n      14,\n      3,\n      10,\n      10,\n      0,\n      5,\n      6,\n      0,\n      13,\n      15,\n      3,\n      1,\n      13,\n      8,\n      4,\n      14,\n      7,\n      6,\n      15,\n      11,\n      2,\n      3,\n      8,\n      4,\n      14,\n      9,\n      12,\n      7,\n      0,\n      2,\n      1,\n      13,\n      10,\n      12,\n      6,\n      0,\n      9,\n      5,\n      11,\n      10,\n      5,\n      0,\n      13,\n      14,\n      8,\n      7,\n      10,\n      11,\n      1,\n      10,\n      3,\n      4,\n      15,\n      13,\n      4,\n      1,\n      2,\n      5,\n      11,\n      8,\n      6,\n      12,\n      7,\n      6,\n      12,\n      9,\n      0,\n      3,\n      5,\n      2,\n      14,\n      15,\n      9,\n      10,\n      13,\n      0,\n      7,\n      9,\n      0,\n      14,\n      9,\n      6,\n      3,\n      3,\n      4,\n      15,\n      6,\n      5,\n      10,\n      1,\n      2,\n      13,\n      8,\n      12,\n      5,\n      7,\n      14,\n      11,\n      12,\n      4,\n      11,\n      2,\n      15,\n      8,\n      1,\n      13,\n      1,\n      6,\n      10,\n      4,\n      13,\n      9,\n      0,\n      8,\n      6,\n      15,\n      9,\n      3,\n      8,\n      0,\n      7,\n      11,\n      4,\n      1,\n      15,\n      2,\n      14,\n      12,\n      3,\n      5,\n      11,\n      10,\n      5,\n      14,\n      2,\n      7,\n      12,\n      7,\n      13,\n      13,\n      8,\n      14,\n      11,\n      3,\n      5,\n      0,\n      6,\n      6,\n      15,\n      9,\n      0,\n      10,\n      3,\n      1,\n      4,\n      2,\n      7,\n      8,\n      2,\n      5,\n      12,\n      11,\n      1,\n      12,\n      10,\n      4,\n      14,\n      15,\n      9,\n      10,\n      3,\n      6,\n      15,\n      9,\n      0,\n      0,\n      6,\n      12,\n      10,\n      11,\n      1,\n      7,\n      13,\n      13,\n      8,\n      15,\n      9,\n      1,\n      4,\n      3,\n      5,\n      14,\n      11,\n      5,\n      12,\n      2,\n      7,\n      8,\n      2,\n      4,\n      14,\n      2,\n      14,\n      12,\n      11,\n      4,\n      2,\n      1,\n      12,\n      7,\n      4,\n      10,\n      7,\n      11,\n      13,\n      6,\n      1,\n      8,\n      5,\n      5,\n      0,\n      3,\n      15,\n      15,\n      10,\n      13,\n      3,\n      0,\n      9,\n      14,\n      8,\n      9,\n      6,\n      4,\n      11,\n      2,\n      8,\n      1,\n      12,\n      11,\n      7,\n      10,\n      1,\n      13,\n      14,\n      7,\n      2,\n      8,\n      13,\n      15,\n      6,\n      9,\n      15,\n      12,\n      0,\n      5,\n      9,\n      6,\n      10,\n      3,\n      4,\n      0,\n      5,\n      14,\n      3,\n      12,\n      10,\n      1,\n      15,\n      10,\n      4,\n      15,\n      2,\n      9,\n      7,\n      2,\n      12,\n      6,\n      9,\n      8,\n      5,\n      0,\n      6,\n      13,\n      1,\n      3,\n      13,\n      4,\n      14,\n      14,\n      0,\n      7,\n      11,\n      5,\n      3,\n      11,\n      8,\n      9,\n      4,\n      14,\n      3,\n      15,\n      2,\n      5,\n      12,\n      2,\n      9,\n      8,\n      5,\n      12,\n      15,\n      3,\n      10,\n      7,\n      11,\n      0,\n      14,\n      4,\n      1,\n      10,\n      7,\n      1,\n      6,\n      13,\n      0,\n      11,\n      8,\n      6,\n      13,\n      4,\n      13,\n      11,\n      0,\n      2,\n      11,\n      14,\n      7,\n      15,\n      4,\n      0,\n      9,\n      8,\n      1,\n      13,\n      10,\n      3,\n      14,\n      12,\n      3,\n      9,\n      5,\n      7,\n      12,\n      5,\n      2,\n      10,\n      15,\n      6,\n      8,\n      1,\n      6,\n      1,\n      6,\n      4,\n      11,\n      11,\n      13,\n      13,\n      8,\n      12,\n      1,\n      3,\n      4,\n      7,\n      10,\n      14,\n      7,\n      10,\n      9,\n      15,\n      5,\n      6,\n      0,\n      8,\n      15,\n      0,\n      14,\n      5,\n      2,\n      9,\n      3,\n      2,\n      12,\n      13,\n      1,\n      2,\n      15,\n      8,\n      13,\n      4,\n      8,\n      6,\n      10,\n      15,\n      3,\n      11,\n      7,\n      1,\n      4,\n      10,\n      12,\n      9,\n      5,\n      3,\n      6,\n      14,\n      11,\n      5,\n      0,\n      0,\n      14,\n      12,\n      9,\n      7,\n      2,\n      7,\n      2,\n      11,\n      1,\n      4,\n      14,\n      1,\n      7,\n      9,\n      4,\n      12,\n      10,\n      14,\n      8,\n      2,\n      13,\n      0,\n      15,\n      6,\n      12,\n      10,\n      9,\n      13,\n      0,\n      15,\n      3,\n      3,\n      5,\n      5,\n      6,\n      8,\n      11\n    ];\n    exports.substitute = function substitute(inL, inR) {\n      var out = 0;\n      for (var i = 0; i < 4; i++) {\n        var b = inL >>> 18 - i * 6 & 63;\n        var sb = sTable[i * 64 + b];\n        out <<= 4;\n        out |= sb;\n      }\n      for (var i = 0; i < 4; i++) {\n        var b = inR >>> 18 - i * 6 & 63;\n        var sb = sTable[4 * 64 + i * 64 + b];\n        out <<= 4;\n        out |= sb;\n      }\n      return out >>> 0;\n    };\n    var permuteTable = [\n      16,\n      25,\n      12,\n      11,\n      3,\n      20,\n      4,\n      15,\n      31,\n      17,\n      9,\n      6,\n      27,\n      14,\n      1,\n      22,\n      30,\n      24,\n      8,\n      18,\n      0,\n      5,\n      29,\n      23,\n      13,\n      19,\n      2,\n      26,\n      10,\n      21,\n      28,\n      7\n    ];\n    exports.permute = function permute(num) {\n      var out = 0;\n      for (var i = 0; i < permuteTable.length; i++) {\n        out <<= 1;\n        out |= num >>> permuteTable[i] & 1;\n      }\n      return out >>> 0;\n    };\n    exports.padSplit = function padSplit(num, size, group) {\n      var str = num.toString(2);\n      while (str.length < size)\n        str = \"0\" + str;\n      var out = [];\n      for (var i = 0; i < size; i += group)\n        out.push(str.slice(i, i + group));\n      return out.join(\" \");\n    };\n  }\n});\n\n// node_modules/minimalistic-assert/index.js\nvar require_minimalistic_assert = __commonJS({\n  \"node_modules/minimalistic-assert/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = assert;\n    function assert(val, msg) {\n      if (!val)\n        throw new Error(msg || \"Assertion failed\");\n    }\n    assert.equal = function assertEqual(l, r, msg) {\n      if (l != r)\n        throw new Error(msg || \"Assertion failed: \" + l + \" != \" + r);\n    };\n  }\n});\n\n// node_modules/des.js/lib/des/cipher.js\nvar require_cipher = __commonJS({\n  \"node_modules/des.js/lib/des/cipher.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var assert = require_minimalistic_assert();\n    function Cipher(options) {\n      this.options = options;\n      this.type = this.options.type;\n      this.blockSize = 8;\n      this._init();\n      this.buffer = new Array(this.blockSize);\n      this.bufferOff = 0;\n      this.padding = options.padding !== false;\n    }\n    module.exports = Cipher;\n    Cipher.prototype._init = function _init() {\n    };\n    Cipher.prototype.update = function update(data) {\n      if (data.length === 0)\n        return [];\n      if (this.type === \"decrypt\")\n        return this._updateDecrypt(data);\n      else\n        return this._updateEncrypt(data);\n    };\n    Cipher.prototype._buffer = function _buffer(data, off) {\n      var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);\n      for (var i = 0; i < min; i++)\n        this.buffer[this.bufferOff + i] = data[off + i];\n      this.bufferOff += min;\n      return min;\n    };\n    Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {\n      this._update(this.buffer, 0, out, off);\n      this.bufferOff = 0;\n      return this.blockSize;\n    };\n    Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {\n      var inputOff = 0;\n      var outputOff = 0;\n      var count = (this.bufferOff + data.length) / this.blockSize | 0;\n      var out = new Array(count * this.blockSize);\n      if (this.bufferOff !== 0) {\n        inputOff += this._buffer(data, inputOff);\n        if (this.bufferOff === this.buffer.length)\n          outputOff += this._flushBuffer(out, outputOff);\n      }\n      var max = data.length - (data.length - inputOff) % this.blockSize;\n      for (; inputOff < max; inputOff += this.blockSize) {\n        this._update(data, inputOff, out, outputOff);\n        outputOff += this.blockSize;\n      }\n      for (; inputOff < data.length; inputOff++, this.bufferOff++)\n        this.buffer[this.bufferOff] = data[inputOff];\n      return out;\n    };\n    Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {\n      var inputOff = 0;\n      var outputOff = 0;\n      var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;\n      var out = new Array(count * this.blockSize);\n      for (; count > 0; count--) {\n        inputOff += this._buffer(data, inputOff);\n        outputOff += this._flushBuffer(out, outputOff);\n      }\n      inputOff += this._buffer(data, inputOff);\n      return out;\n    };\n    Cipher.prototype.final = function final(buffer) {\n      var first;\n      if (buffer)\n        first = this.update(buffer);\n      var last;\n      if (this.type === \"encrypt\")\n        last = this._finalEncrypt();\n      else\n        last = this._finalDecrypt();\n      if (first)\n        return first.concat(last);\n      else\n        return last;\n    };\n    Cipher.prototype._pad = function _pad(buffer, off) {\n      if (off === 0)\n        return false;\n      while (off < buffer.length)\n        buffer[off++] = 0;\n      return true;\n    };\n    Cipher.prototype._finalEncrypt = function _finalEncrypt() {\n      if (!this._pad(this.buffer, this.bufferOff))\n        return [];\n      var out = new Array(this.blockSize);\n      this._update(this.buffer, 0, out, 0);\n      return out;\n    };\n    Cipher.prototype._unpad = function _unpad(buffer) {\n      return buffer;\n    };\n    Cipher.prototype._finalDecrypt = function _finalDecrypt() {\n      assert.equal(this.bufferOff, this.blockSize, \"Not enough data to decrypt\");\n      var out = new Array(this.blockSize);\n      this._flushBuffer(out, 0);\n      return this._unpad(out);\n    };\n  }\n});\n\n// node_modules/des.js/lib/des/des.js\nvar require_des = __commonJS({\n  \"node_modules/des.js/lib/des/des.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var assert = require_minimalistic_assert();\n    var inherits = require_inherits_browser();\n    var utils = require_utils();\n    var Cipher = require_cipher();\n    function DESState() {\n      this.tmp = new Array(2);\n      this.keys = null;\n    }\n    function DES(options) {\n      Cipher.call(this, options);\n      var state = new DESState();\n      this._desState = state;\n      this.deriveKeys(state, options.key);\n    }\n    inherits(DES, Cipher);\n    module.exports = DES;\n    DES.create = function create(options) {\n      return new DES(options);\n    };\n    var shiftTable = [\n      1,\n      1,\n      2,\n      2,\n      2,\n      2,\n      2,\n      2,\n      1,\n      2,\n      2,\n      2,\n      2,\n      2,\n      2,\n      1\n    ];\n    DES.prototype.deriveKeys = function deriveKeys(state, key) {\n      state.keys = new Array(16 * 2);\n      assert.equal(key.length, this.blockSize, \"Invalid key length\");\n      var kL = utils.readUInt32BE(key, 0);\n      var kR = utils.readUInt32BE(key, 4);\n      utils.pc1(kL, kR, state.tmp, 0);\n      kL = state.tmp[0];\n      kR = state.tmp[1];\n      for (var i = 0; i < state.keys.length; i += 2) {\n        var shift = shiftTable[i >>> 1];\n        kL = utils.r28shl(kL, shift);\n        kR = utils.r28shl(kR, shift);\n        utils.pc2(kL, kR, state.keys, i);\n      }\n    };\n    DES.prototype._update = function _update(inp, inOff, out, outOff) {\n      var state = this._desState;\n      var l = utils.readUInt32BE(inp, inOff);\n      var r = utils.readUInt32BE(inp, inOff + 4);\n      utils.ip(l, r, state.tmp, 0);\n      l = state.tmp[0];\n      r = state.tmp[1];\n      if (this.type === \"encrypt\")\n        this._encrypt(state, l, r, state.tmp, 0);\n      else\n        this._decrypt(state, l, r, state.tmp, 0);\n      l = state.tmp[0];\n      r = state.tmp[1];\n      utils.writeUInt32BE(out, l, outOff);\n      utils.writeUInt32BE(out, r, outOff + 4);\n    };\n    DES.prototype._pad = function _pad(buffer, off) {\n      if (this.padding === false) {\n        return false;\n      }\n      var value = buffer.length - off;\n      for (var i = off; i < buffer.length; i++)\n        buffer[i] = value;\n      return true;\n    };\n    DES.prototype._unpad = function _unpad(buffer) {\n      if (this.padding === false) {\n        return buffer;\n      }\n      var pad = buffer[buffer.length - 1];\n      for (var i = buffer.length - pad; i < buffer.length; i++)\n        assert.equal(buffer[i], pad);\n      return buffer.slice(0, buffer.length - pad);\n    };\n    DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {\n      var l = lStart;\n      var r = rStart;\n      for (var i = 0; i < state.keys.length; i += 2) {\n        var keyL = state.keys[i];\n        var keyR = state.keys[i + 1];\n        utils.expand(r, state.tmp, 0);\n        keyL ^= state.tmp[0];\n        keyR ^= state.tmp[1];\n        var s = utils.substitute(keyL, keyR);\n        var f = utils.permute(s);\n        var t = r;\n        r = (l ^ f) >>> 0;\n        l = t;\n      }\n      utils.rip(r, l, out, off);\n    };\n    DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {\n      var l = rStart;\n      var r = lStart;\n      for (var i = state.keys.length - 2; i >= 0; i -= 2) {\n        var keyL = state.keys[i];\n        var keyR = state.keys[i + 1];\n        utils.expand(l, state.tmp, 0);\n        keyL ^= state.tmp[0];\n        keyR ^= state.tmp[1];\n        var s = utils.substitute(keyL, keyR);\n        var f = utils.permute(s);\n        var t = l;\n        l = (r ^ f) >>> 0;\n        r = t;\n      }\n      utils.rip(l, r, out, off);\n    };\n  }\n});\n\n// node_modules/des.js/lib/des/cbc.js\nvar require_cbc = __commonJS({\n  \"node_modules/des.js/lib/des/cbc.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var assert = require_minimalistic_assert();\n    var inherits = require_inherits_browser();\n    var proto = {};\n    function CBCState(iv) {\n      assert.equal(iv.length, 8, \"Invalid IV length\");\n      this.iv = new Array(8);\n      for (var i = 0; i < this.iv.length; i++)\n        this.iv[i] = iv[i];\n    }\n    function instantiate(Base) {\n      function CBC(options) {\n        Base.call(this, options);\n        this._cbcInit();\n      }\n      inherits(CBC, Base);\n      var keys = Object.keys(proto);\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        CBC.prototype[key] = proto[key];\n      }\n      CBC.create = function create(options) {\n        return new CBC(options);\n      };\n      return CBC;\n    }\n    exports.instantiate = instantiate;\n    proto._cbcInit = function _cbcInit() {\n      var state = new CBCState(this.options.iv);\n      this._cbcState = state;\n    };\n    proto._update = function _update(inp, inOff, out, outOff) {\n      var state = this._cbcState;\n      var superProto = this.constructor.super_.prototype;\n      var iv = state.iv;\n      if (this.type === \"encrypt\") {\n        for (var i = 0; i < this.blockSize; i++)\n          iv[i] ^= inp[inOff + i];\n        superProto._update.call(this, iv, 0, out, outOff);\n        for (var i = 0; i < this.blockSize; i++)\n          iv[i] = out[outOff + i];\n      } else {\n        superProto._update.call(this, inp, inOff, out, outOff);\n        for (var i = 0; i < this.blockSize; i++)\n          out[outOff + i] ^= iv[i];\n        for (var i = 0; i < this.blockSize; i++)\n          iv[i] = inp[inOff + i];\n      }\n    };\n  }\n});\n\n// node_modules/des.js/lib/des/ede.js\nvar require_ede = __commonJS({\n  \"node_modules/des.js/lib/des/ede.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var assert = require_minimalistic_assert();\n    var inherits = require_inherits_browser();\n    var Cipher = require_cipher();\n    var DES = require_des();\n    function EDEState(type, key) {\n      assert.equal(key.length, 24, \"Invalid key length\");\n      var k1 = key.slice(0, 8);\n      var k2 = key.slice(8, 16);\n      var k3 = key.slice(16, 24);\n      if (type === \"encrypt\") {\n        this.ciphers = [\n          DES.create({ type: \"encrypt\", key: k1 }),\n          DES.create({ type: \"decrypt\", key: k2 }),\n          DES.create({ type: \"encrypt\", key: k3 })\n        ];\n      } else {\n        this.ciphers = [\n          DES.create({ type: \"decrypt\", key: k3 }),\n          DES.create({ type: \"encrypt\", key: k2 }),\n          DES.create({ type: \"decrypt\", key: k1 })\n        ];\n      }\n    }\n    function EDE(options) {\n      Cipher.call(this, options);\n      var state = new EDEState(this.type, this.options.key);\n      this._edeState = state;\n    }\n    inherits(EDE, Cipher);\n    module.exports = EDE;\n    EDE.create = function create(options) {\n      return new EDE(options);\n    };\n    EDE.prototype._update = function _update(inp, inOff, out, outOff) {\n      var state = this._edeState;\n      state.ciphers[0]._update(inp, inOff, out, outOff);\n      state.ciphers[1]._update(out, outOff, out, outOff);\n      state.ciphers[2]._update(out, outOff, out, outOff);\n    };\n    EDE.prototype._pad = DES.prototype._pad;\n    EDE.prototype._unpad = DES.prototype._unpad;\n  }\n});\n\n// node_modules/des.js/lib/des.js\nvar require_des2 = __commonJS({\n  \"node_modules/des.js/lib/des.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    exports.utils = require_utils();\n    exports.Cipher = require_cipher();\n    exports.DES = require_des();\n    exports.CBC = require_cbc();\n    exports.EDE = require_ede();\n  }\n});\n\n// node_modules/browserify-des/index.js\nvar require_browserify_des = __commonJS({\n  \"node_modules/browserify-des/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var CipherBase = require_cipher_base();\n    var des = require_des2();\n    var inherits = require_inherits_browser();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var modes = {\n      \"des-ede3-cbc\": des.CBC.instantiate(des.EDE),\n      \"des-ede3\": des.EDE,\n      \"des-ede-cbc\": des.CBC.instantiate(des.EDE),\n      \"des-ede\": des.EDE,\n      \"des-cbc\": des.CBC.instantiate(des.DES),\n      \"des-ecb\": des.DES\n    };\n    modes.des = modes[\"des-cbc\"];\n    modes.des3 = modes[\"des-ede3-cbc\"];\n    module.exports = DES;\n    inherits(DES, CipherBase);\n    function DES(opts) {\n      CipherBase.call(this);\n      var modeName = opts.mode.toLowerCase();\n      var mode = modes[modeName];\n      var type;\n      if (opts.decrypt) {\n        type = \"decrypt\";\n      } else {\n        type = \"encrypt\";\n      }\n      var key = opts.key;\n      if (!Buffer2.isBuffer(key)) {\n        key = Buffer2.from(key);\n      }\n      if (modeName === \"des-ede\" || modeName === \"des-ede-cbc\") {\n        key = Buffer2.concat([key, key.slice(0, 8)]);\n      }\n      var iv = opts.iv;\n      if (!Buffer2.isBuffer(iv)) {\n        iv = Buffer2.from(iv);\n      }\n      this._des = mode.create({\n        key,\n        iv,\n        type\n      });\n    }\n    DES.prototype._update = function(data) {\n      return Buffer2.from(this._des.update(data));\n    };\n    DES.prototype._final = function() {\n      return Buffer2.from(this._des.final());\n    };\n  }\n});\n\n// node_modules/browserify-aes/modes/ecb.js\nvar require_ecb = __commonJS({\n  \"node_modules/browserify-aes/modes/ecb.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    exports.encrypt = function(self2, block) {\n      return self2._cipher.encryptBlock(block);\n    };\n    exports.decrypt = function(self2, block) {\n      return self2._cipher.decryptBlock(block);\n    };\n  }\n});\n\n// node_modules/buffer-xor/index.js\nvar require_buffer_xor = __commonJS({\n  \"node_modules/buffer-xor/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = function xor(a, b) {\n      var length = Math.min(a.length, b.length);\n      var buffer = new Buffer(length);\n      for (var i = 0; i < length; ++i) {\n        buffer[i] = a[i] ^ b[i];\n      }\n      return buffer;\n    };\n  }\n});\n\n// node_modules/browserify-aes/modes/cbc.js\nvar require_cbc2 = __commonJS({\n  \"node_modules/browserify-aes/modes/cbc.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var xor = require_buffer_xor();\n    exports.encrypt = function(self2, block) {\n      var data = xor(block, self2._prev);\n      self2._prev = self2._cipher.encryptBlock(data);\n      return self2._prev;\n    };\n    exports.decrypt = function(self2, block) {\n      var pad = self2._prev;\n      self2._prev = block;\n      var out = self2._cipher.decryptBlock(block);\n      return xor(out, pad);\n    };\n  }\n});\n\n// node_modules/browserify-aes/modes/cfb.js\nvar require_cfb = __commonJS({\n  \"node_modules/browserify-aes/modes/cfb.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var xor = require_buffer_xor();\n    function encryptStart(self2, data, decrypt) {\n      var len = data.length;\n      var out = xor(data, self2._cache);\n      self2._cache = self2._cache.slice(len);\n      self2._prev = Buffer2.concat([self2._prev, decrypt ? data : out]);\n      return out;\n    }\n    exports.encrypt = function(self2, data, decrypt) {\n      var out = Buffer2.allocUnsafe(0);\n      var len;\n      while (data.length) {\n        if (self2._cache.length === 0) {\n          self2._cache = self2._cipher.encryptBlock(self2._prev);\n          self2._prev = Buffer2.allocUnsafe(0);\n        }\n        if (self2._cache.length <= data.length) {\n          len = self2._cache.length;\n          out = Buffer2.concat([out, encryptStart(self2, data.slice(0, len), decrypt)]);\n          data = data.slice(len);\n        } else {\n          out = Buffer2.concat([out, encryptStart(self2, data, decrypt)]);\n          break;\n        }\n      }\n      return out;\n    };\n  }\n});\n\n// node_modules/browserify-aes/modes/cfb8.js\nvar require_cfb8 = __commonJS({\n  \"node_modules/browserify-aes/modes/cfb8.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    function encryptByte(self2, byteParam, decrypt) {\n      var pad = self2._cipher.encryptBlock(self2._prev);\n      var out = pad[0] ^ byteParam;\n      self2._prev = Buffer2.concat([\n        self2._prev.slice(1),\n        Buffer2.from([decrypt ? byteParam : out])\n      ]);\n      return out;\n    }\n    exports.encrypt = function(self2, chunk, decrypt) {\n      var len = chunk.length;\n      var out = Buffer2.allocUnsafe(len);\n      var i = -1;\n      while (++i < len) {\n        out[i] = encryptByte(self2, chunk[i], decrypt);\n      }\n      return out;\n    };\n  }\n});\n\n// node_modules/browserify-aes/modes/cfb1.js\nvar require_cfb1 = __commonJS({\n  \"node_modules/browserify-aes/modes/cfb1.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    function encryptByte(self2, byteParam, decrypt) {\n      var pad;\n      var i = -1;\n      var len = 8;\n      var out = 0;\n      var bit, value;\n      while (++i < len) {\n        pad = self2._cipher.encryptBlock(self2._prev);\n        bit = byteParam & 1 << 7 - i ? 128 : 0;\n        value = pad[0] ^ bit;\n        out += (value & 128) >> i % 8;\n        self2._prev = shiftIn(self2._prev, decrypt ? bit : value);\n      }\n      return out;\n    }\n    function shiftIn(buffer, value) {\n      var len = buffer.length;\n      var i = -1;\n      var out = Buffer2.allocUnsafe(buffer.length);\n      buffer = Buffer2.concat([buffer, Buffer2.from([value])]);\n      while (++i < len) {\n        out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;\n      }\n      return out;\n    }\n    exports.encrypt = function(self2, chunk, decrypt) {\n      var len = chunk.length;\n      var out = Buffer2.allocUnsafe(len);\n      var i = -1;\n      while (++i < len) {\n        out[i] = encryptByte(self2, chunk[i], decrypt);\n      }\n      return out;\n    };\n  }\n});\n\n// node_modules/browserify-aes/modes/ofb.js\nvar require_ofb = __commonJS({\n  \"node_modules/browserify-aes/modes/ofb.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var xor = require_buffer_xor();\n    function getBlock(self2) {\n      self2._prev = self2._cipher.encryptBlock(self2._prev);\n      return self2._prev;\n    }\n    exports.encrypt = function(self2, chunk) {\n      while (self2._cache.length < chunk.length) {\n        self2._cache = Buffer.concat([self2._cache, getBlock(self2)]);\n      }\n      var pad = self2._cache.slice(0, chunk.length);\n      self2._cache = self2._cache.slice(chunk.length);\n      return xor(chunk, pad);\n    };\n  }\n});\n\n// node_modules/browserify-aes/incr32.js\nvar require_incr32 = __commonJS({\n  \"node_modules/browserify-aes/incr32.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    function incr32(iv) {\n      var len = iv.length;\n      var item;\n      while (len--) {\n        item = iv.readUInt8(len);\n        if (item === 255) {\n          iv.writeUInt8(0, len);\n        } else {\n          item++;\n          iv.writeUInt8(item, len);\n          break;\n        }\n      }\n    }\n    module.exports = incr32;\n  }\n});\n\n// node_modules/browserify-aes/modes/ctr.js\nvar require_ctr = __commonJS({\n  \"node_modules/browserify-aes/modes/ctr.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var xor = require_buffer_xor();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var incr32 = require_incr32();\n    function getBlock(self2) {\n      var out = self2._cipher.encryptBlockRaw(self2._prev);\n      incr32(self2._prev);\n      return out;\n    }\n    var blockSize = 16;\n    exports.encrypt = function(self2, chunk) {\n      var chunkNum = Math.ceil(chunk.length / blockSize);\n      var start = self2._cache.length;\n      self2._cache = Buffer2.concat([\n        self2._cache,\n        Buffer2.allocUnsafe(chunkNum * blockSize)\n      ]);\n      for (var i = 0; i < chunkNum; i++) {\n        var out = getBlock(self2);\n        var offset = start + i * blockSize;\n        self2._cache.writeUInt32BE(out[0], offset + 0);\n        self2._cache.writeUInt32BE(out[1], offset + 4);\n        self2._cache.writeUInt32BE(out[2], offset + 8);\n        self2._cache.writeUInt32BE(out[3], offset + 12);\n      }\n      var pad = self2._cache.slice(0, chunk.length);\n      self2._cache = self2._cache.slice(chunk.length);\n      return xor(chunk, pad);\n    };\n  }\n});\n\n// node_modules/browserify-aes/modes/list.json\nvar require_list = __commonJS({\n  \"node_modules/browserify-aes/modes/list.json\"(exports, module) {\n    module.exports = {\n      \"aes-128-ecb\": {\n        cipher: \"AES\",\n        key: 128,\n        iv: 0,\n        mode: \"ECB\",\n        type: \"block\"\n      },\n      \"aes-192-ecb\": {\n        cipher: \"AES\",\n        key: 192,\n        iv: 0,\n        mode: \"ECB\",\n        type: \"block\"\n      },\n      \"aes-256-ecb\": {\n        cipher: \"AES\",\n        key: 256,\n        iv: 0,\n        mode: \"ECB\",\n        type: \"block\"\n      },\n      \"aes-128-cbc\": {\n        cipher: \"AES\",\n        key: 128,\n        iv: 16,\n        mode: \"CBC\",\n        type: \"block\"\n      },\n      \"aes-192-cbc\": {\n        cipher: \"AES\",\n        key: 192,\n        iv: 16,\n        mode: \"CBC\",\n        type: \"block\"\n      },\n      \"aes-256-cbc\": {\n        cipher: \"AES\",\n        key: 256,\n        iv: 16,\n        mode: \"CBC\",\n        type: \"block\"\n      },\n      aes128: {\n        cipher: \"AES\",\n        key: 128,\n        iv: 16,\n        mode: \"CBC\",\n        type: \"block\"\n      },\n      aes192: {\n        cipher: \"AES\",\n        key: 192,\n        iv: 16,\n        mode: \"CBC\",\n        type: \"block\"\n      },\n      aes256: {\n        cipher: \"AES\",\n        key: 256,\n        iv: 16,\n        mode: \"CBC\",\n        type: \"block\"\n      },\n      \"aes-128-cfb\": {\n        cipher: \"AES\",\n        key: 128,\n        iv: 16,\n        mode: \"CFB\",\n        type: \"stream\"\n      },\n      \"aes-192-cfb\": {\n        cipher: \"AES\",\n        key: 192,\n        iv: 16,\n        mode: \"CFB\",\n        type: \"stream\"\n      },\n      \"aes-256-cfb\": {\n        cipher: \"AES\",\n        key: 256,\n        iv: 16,\n        mode: \"CFB\",\n        type: \"stream\"\n      },\n      \"aes-128-cfb8\": {\n        cipher: \"AES\",\n        key: 128,\n        iv: 16,\n        mode: \"CFB8\",\n        type: \"stream\"\n      },\n      \"aes-192-cfb8\": {\n        cipher: \"AES\",\n        key: 192,\n        iv: 16,\n        mode: \"CFB8\",\n        type: \"stream\"\n      },\n      \"aes-256-cfb8\": {\n        cipher: \"AES\",\n        key: 256,\n        iv: 16,\n        mode: \"CFB8\",\n        type: \"stream\"\n      },\n      \"aes-128-cfb1\": {\n        cipher: \"AES\",\n        key: 128,\n        iv: 16,\n        mode: \"CFB1\",\n        type: \"stream\"\n      },\n      \"aes-192-cfb1\": {\n        cipher: \"AES\",\n        key: 192,\n        iv: 16,\n        mode: \"CFB1\",\n        type: \"stream\"\n      },\n      \"aes-256-cfb1\": {\n        cipher: \"AES\",\n        key: 256,\n        iv: 16,\n        mode: \"CFB1\",\n        type: \"stream\"\n      },\n      \"aes-128-ofb\": {\n        cipher: \"AES\",\n        key: 128,\n        iv: 16,\n        mode: \"OFB\",\n        type: \"stream\"\n      },\n      \"aes-192-ofb\": {\n        cipher: \"AES\",\n        key: 192,\n        iv: 16,\n        mode: \"OFB\",\n        type: \"stream\"\n      },\n      \"aes-256-ofb\": {\n        cipher: \"AES\",\n        key: 256,\n        iv: 16,\n        mode: \"OFB\",\n        type: \"stream\"\n      },\n      \"aes-128-ctr\": {\n        cipher: \"AES\",\n        key: 128,\n        iv: 16,\n        mode: \"CTR\",\n        type: \"stream\"\n      },\n      \"aes-192-ctr\": {\n        cipher: \"AES\",\n        key: 192,\n        iv: 16,\n        mode: \"CTR\",\n        type: \"stream\"\n      },\n      \"aes-256-ctr\": {\n        cipher: \"AES\",\n        key: 256,\n        iv: 16,\n        mode: \"CTR\",\n        type: \"stream\"\n      },\n      \"aes-128-gcm\": {\n        cipher: \"AES\",\n        key: 128,\n        iv: 12,\n        mode: \"GCM\",\n        type: \"auth\"\n      },\n      \"aes-192-gcm\": {\n        cipher: \"AES\",\n        key: 192,\n        iv: 12,\n        mode: \"GCM\",\n        type: \"auth\"\n      },\n      \"aes-256-gcm\": {\n        cipher: \"AES\",\n        key: 256,\n        iv: 12,\n        mode: \"GCM\",\n        type: \"auth\"\n      }\n    };\n  }\n});\n\n// node_modules/browserify-aes/modes/index.js\nvar require_modes = __commonJS({\n  \"node_modules/browserify-aes/modes/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var modeModules = {\n      ECB: require_ecb(),\n      CBC: require_cbc2(),\n      CFB: require_cfb(),\n      CFB8: require_cfb8(),\n      CFB1: require_cfb1(),\n      OFB: require_ofb(),\n      CTR: require_ctr(),\n      GCM: require_ctr()\n    };\n    var modes = require_list();\n    for (key in modes) {\n      modes[key].module = modeModules[modes[key].mode];\n    }\n    var key;\n    module.exports = modes;\n  }\n});\n\n// node_modules/browserify-aes/aes.js\nvar require_aes = __commonJS({\n  \"node_modules/browserify-aes/aes.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    function asUInt32Array(buf) {\n      if (!Buffer2.isBuffer(buf))\n        buf = Buffer2.from(buf);\n      var len = buf.length / 4 | 0;\n      var out = new Array(len);\n      for (var i = 0; i < len; i++) {\n        out[i] = buf.readUInt32BE(i * 4);\n      }\n      return out;\n    }\n    function scrubVec(v) {\n      for (var i = 0; i < v.length; v++) {\n        v[i] = 0;\n      }\n    }\n    function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {\n      var SUB_MIX0 = SUB_MIX[0];\n      var SUB_MIX1 = SUB_MIX[1];\n      var SUB_MIX2 = SUB_MIX[2];\n      var SUB_MIX3 = SUB_MIX[3];\n      var s0 = M[0] ^ keySchedule[0];\n      var s1 = M[1] ^ keySchedule[1];\n      var s2 = M[2] ^ keySchedule[2];\n      var s3 = M[3] ^ keySchedule[3];\n      var t0, t1, t2, t3;\n      var ksRow = 4;\n      for (var round = 1; round < nRounds; round++) {\n        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s2 >>> 8 & 255] ^ SUB_MIX3[s3 & 255] ^ keySchedule[ksRow++];\n        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 255] ^ SUB_MIX2[s3 >>> 8 & 255] ^ SUB_MIX3[s0 & 255] ^ keySchedule[ksRow++];\n        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[s1 & 255] ^ keySchedule[ksRow++];\n        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[s2 & 255] ^ keySchedule[ksRow++];\n        s0 = t0;\n        s1 = t1;\n        s2 = t2;\n        s3 = t3;\n      }\n      t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];\n      t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];\n      t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];\n      t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s2 & 255]) ^ keySchedule[ksRow++];\n      t0 = t0 >>> 0;\n      t1 = t1 >>> 0;\n      t2 = t2 >>> 0;\n      t3 = t3 >>> 0;\n      return [t0, t1, t2, t3];\n    }\n    var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];\n    var G = function() {\n      var d = new Array(256);\n      for (var j = 0; j < 256; j++) {\n        if (j < 128) {\n          d[j] = j << 1;\n        } else {\n          d[j] = j << 1 ^ 283;\n        }\n      }\n      var SBOX = [];\n      var INV_SBOX = [];\n      var SUB_MIX = [[], [], [], []];\n      var INV_SUB_MIX = [[], [], [], []];\n      var x = 0;\n      var xi = 0;\n      for (var i = 0; i < 256; ++i) {\n        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;\n        sx = sx >>> 8 ^ sx & 255 ^ 99;\n        SBOX[x] = sx;\n        INV_SBOX[sx] = x;\n        var x2 = d[x];\n        var x4 = d[x2];\n        var x8 = d[x4];\n        var t = d[sx] * 257 ^ sx * 16843008;\n        SUB_MIX[0][x] = t << 24 | t >>> 8;\n        SUB_MIX[1][x] = t << 16 | t >>> 16;\n        SUB_MIX[2][x] = t << 8 | t >>> 24;\n        SUB_MIX[3][x] = t;\n        t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;\n        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;\n        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;\n        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;\n        INV_SUB_MIX[3][sx] = t;\n        if (x === 0) {\n          x = xi = 1;\n        } else {\n          x = x2 ^ d[d[d[x8 ^ x2]]];\n          xi ^= d[d[xi]];\n        }\n      }\n      return {\n        SBOX,\n        INV_SBOX,\n        SUB_MIX,\n        INV_SUB_MIX\n      };\n    }();\n    function AES(key) {\n      this._key = asUInt32Array(key);\n      this._reset();\n    }\n    AES.blockSize = 4 * 4;\n    AES.keySize = 256 / 8;\n    AES.prototype.blockSize = AES.blockSize;\n    AES.prototype.keySize = AES.keySize;\n    AES.prototype._reset = function() {\n      var keyWords = this._key;\n      var keySize = keyWords.length;\n      var nRounds = keySize + 6;\n      var ksRows = (nRounds + 1) * 4;\n      var keySchedule = [];\n      for (var k = 0; k < keySize; k++) {\n        keySchedule[k] = keyWords[k];\n      }\n      for (k = keySize; k < ksRows; k++) {\n        var t = keySchedule[k - 1];\n        if (k % keySize === 0) {\n          t = t << 8 | t >>> 24;\n          t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[t & 255];\n          t ^= RCON[k / keySize | 0] << 24;\n        } else if (keySize > 6 && k % keySize === 4) {\n          t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[t & 255];\n        }\n        keySchedule[k] = keySchedule[k - keySize] ^ t;\n      }\n      var invKeySchedule = [];\n      for (var ik = 0; ik < ksRows; ik++) {\n        var ksR = ksRows - ik;\n        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];\n        if (ik < 4 || ksR <= 4) {\n          invKeySchedule[ik] = tt;\n        } else {\n          invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 255]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 255]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 255]];\n        }\n      }\n      this._nRounds = nRounds;\n      this._keySchedule = keySchedule;\n      this._invKeySchedule = invKeySchedule;\n    };\n    AES.prototype.encryptBlockRaw = function(M) {\n      M = asUInt32Array(M);\n      return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);\n    };\n    AES.prototype.encryptBlock = function(M) {\n      var out = this.encryptBlockRaw(M);\n      var buf = Buffer2.allocUnsafe(16);\n      buf.writeUInt32BE(out[0], 0);\n      buf.writeUInt32BE(out[1], 4);\n      buf.writeUInt32BE(out[2], 8);\n      buf.writeUInt32BE(out[3], 12);\n      return buf;\n    };\n    AES.prototype.decryptBlock = function(M) {\n      M = asUInt32Array(M);\n      var m1 = M[1];\n      M[1] = M[3];\n      M[3] = m1;\n      var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);\n      var buf = Buffer2.allocUnsafe(16);\n      buf.writeUInt32BE(out[0], 0);\n      buf.writeUInt32BE(out[3], 4);\n      buf.writeUInt32BE(out[2], 8);\n      buf.writeUInt32BE(out[1], 12);\n      return buf;\n    };\n    AES.prototype.scrub = function() {\n      scrubVec(this._keySchedule);\n      scrubVec(this._invKeySchedule);\n      scrubVec(this._key);\n    };\n    module.exports.AES = AES;\n  }\n});\n\n// node_modules/browserify-aes/ghash.js\nvar require_ghash = __commonJS({\n  \"node_modules/browserify-aes/ghash.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var ZEROES = Buffer2.alloc(16, 0);\n    function toArray(buf) {\n      return [\n        buf.readUInt32BE(0),\n        buf.readUInt32BE(4),\n        buf.readUInt32BE(8),\n        buf.readUInt32BE(12)\n      ];\n    }\n    function fromArray(out) {\n      var buf = Buffer2.allocUnsafe(16);\n      buf.writeUInt32BE(out[0] >>> 0, 0);\n      buf.writeUInt32BE(out[1] >>> 0, 4);\n      buf.writeUInt32BE(out[2] >>> 0, 8);\n      buf.writeUInt32BE(out[3] >>> 0, 12);\n      return buf;\n    }\n    function GHASH(key) {\n      this.h = key;\n      this.state = Buffer2.alloc(16, 0);\n      this.cache = Buffer2.allocUnsafe(0);\n    }\n    GHASH.prototype.ghash = function(block) {\n      var i = -1;\n      while (++i < block.length) {\n        this.state[i] ^= block[i];\n      }\n      this._multiply();\n    };\n    GHASH.prototype._multiply = function() {\n      var Vi = toArray(this.h);\n      var Zi = [0, 0, 0, 0];\n      var j, xi, lsbVi;\n      var i = -1;\n      while (++i < 128) {\n        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;\n        if (xi) {\n          Zi[0] ^= Vi[0];\n          Zi[1] ^= Vi[1];\n          Zi[2] ^= Vi[2];\n          Zi[3] ^= Vi[3];\n        }\n        lsbVi = (Vi[3] & 1) !== 0;\n        for (j = 3; j > 0; j--) {\n          Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;\n        }\n        Vi[0] = Vi[0] >>> 1;\n        if (lsbVi) {\n          Vi[0] = Vi[0] ^ 225 << 24;\n        }\n      }\n      this.state = fromArray(Zi);\n    };\n    GHASH.prototype.update = function(buf) {\n      this.cache = Buffer2.concat([this.cache, buf]);\n      var chunk;\n      while (this.cache.length >= 16) {\n        chunk = this.cache.slice(0, 16);\n        this.cache = this.cache.slice(16);\n        this.ghash(chunk);\n      }\n    };\n    GHASH.prototype.final = function(abl, bl) {\n      if (this.cache.length) {\n        this.ghash(Buffer2.concat([this.cache, ZEROES], 16));\n      }\n      this.ghash(fromArray([0, abl, 0, bl]));\n      return this.state;\n    };\n    module.exports = GHASH;\n  }\n});\n\n// node_modules/browserify-aes/authCipher.js\nvar require_authCipher = __commonJS({\n  \"node_modules/browserify-aes/authCipher.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var aes = require_aes();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var Transform = require_cipher_base();\n    var inherits = require_inherits_browser();\n    var GHASH = require_ghash();\n    var xor = require_buffer_xor();\n    var incr32 = require_incr32();\n    function xorTest(a, b) {\n      var out = 0;\n      if (a.length !== b.length)\n        out++;\n      var len = Math.min(a.length, b.length);\n      for (var i = 0; i < len; ++i) {\n        out += a[i] ^ b[i];\n      }\n      return out;\n    }\n    function calcIv(self2, iv, ck) {\n      if (iv.length === 12) {\n        self2._finID = Buffer2.concat([iv, Buffer2.from([0, 0, 0, 1])]);\n        return Buffer2.concat([iv, Buffer2.from([0, 0, 0, 2])]);\n      }\n      var ghash = new GHASH(ck);\n      var len = iv.length;\n      var toPad = len % 16;\n      ghash.update(iv);\n      if (toPad) {\n        toPad = 16 - toPad;\n        ghash.update(Buffer2.alloc(toPad, 0));\n      }\n      ghash.update(Buffer2.alloc(8, 0));\n      var ivBits = len * 8;\n      var tail = Buffer2.alloc(8);\n      tail.writeUIntBE(ivBits, 0, 8);\n      ghash.update(tail);\n      self2._finID = ghash.state;\n      var out = Buffer2.from(self2._finID);\n      incr32(out);\n      return out;\n    }\n    function StreamCipher(mode, key, iv, decrypt) {\n      Transform.call(this);\n      var h = Buffer2.alloc(4, 0);\n      this._cipher = new aes.AES(key);\n      var ck = this._cipher.encryptBlock(h);\n      this._ghash = new GHASH(ck);\n      iv = calcIv(this, iv, ck);\n      this._prev = Buffer2.from(iv);\n      this._cache = Buffer2.allocUnsafe(0);\n      this._secCache = Buffer2.allocUnsafe(0);\n      this._decrypt = decrypt;\n      this._alen = 0;\n      this._len = 0;\n      this._mode = mode;\n      this._authTag = null;\n      this._called = false;\n    }\n    inherits(StreamCipher, Transform);\n    StreamCipher.prototype._update = function(chunk) {\n      if (!this._called && this._alen) {\n        var rump = 16 - this._alen % 16;\n        if (rump < 16) {\n          rump = Buffer2.alloc(rump, 0);\n          this._ghash.update(rump);\n        }\n      }\n      this._called = true;\n      var out = this._mode.encrypt(this, chunk);\n      if (this._decrypt) {\n        this._ghash.update(chunk);\n      } else {\n        this._ghash.update(out);\n      }\n      this._len += chunk.length;\n      return out;\n    };\n    StreamCipher.prototype._final = function() {\n      if (this._decrypt && !this._authTag)\n        throw new Error(\"Unsupported state or unable to authenticate data\");\n      var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));\n      if (this._decrypt && xorTest(tag, this._authTag))\n        throw new Error(\"Unsupported state or unable to authenticate data\");\n      this._authTag = tag;\n      this._cipher.scrub();\n    };\n    StreamCipher.prototype.getAuthTag = function getAuthTag() {\n      if (this._decrypt || !Buffer2.isBuffer(this._authTag))\n        throw new Error(\"Attempting to get auth tag in unsupported state\");\n      return this._authTag;\n    };\n    StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {\n      if (!this._decrypt)\n        throw new Error(\"Attempting to set auth tag in unsupported state\");\n      this._authTag = tag;\n    };\n    StreamCipher.prototype.setAAD = function setAAD(buf) {\n      if (this._called)\n        throw new Error(\"Attempting to set AAD in unsupported state\");\n      this._ghash.update(buf);\n      this._alen += buf.length;\n    };\n    module.exports = StreamCipher;\n  }\n});\n\n// node_modules/browserify-aes/streamCipher.js\nvar require_streamCipher = __commonJS({\n  \"node_modules/browserify-aes/streamCipher.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var aes = require_aes();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var Transform = require_cipher_base();\n    var inherits = require_inherits_browser();\n    function StreamCipher(mode, key, iv, decrypt) {\n      Transform.call(this);\n      this._cipher = new aes.AES(key);\n      this._prev = Buffer2.from(iv);\n      this._cache = Buffer2.allocUnsafe(0);\n      this._secCache = Buffer2.allocUnsafe(0);\n      this._decrypt = decrypt;\n      this._mode = mode;\n    }\n    inherits(StreamCipher, Transform);\n    StreamCipher.prototype._update = function(chunk) {\n      return this._mode.encrypt(this, chunk, this._decrypt);\n    };\n    StreamCipher.prototype._final = function() {\n      this._cipher.scrub();\n    };\n    module.exports = StreamCipher;\n  }\n});\n\n// node_modules/evp_bytestokey/index.js\nvar require_evp_bytestokey = __commonJS({\n  \"node_modules/evp_bytestokey/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var MD5 = require_md5();\n    function EVP_BytesToKey(password, salt, keyBits, ivLen) {\n      if (!Buffer2.isBuffer(password))\n        password = Buffer2.from(password, \"binary\");\n      if (salt) {\n        if (!Buffer2.isBuffer(salt))\n          salt = Buffer2.from(salt, \"binary\");\n        if (salt.length !== 8)\n          throw new RangeError(\"salt should be Buffer with 8 byte length\");\n      }\n      var keyLen = keyBits / 8;\n      var key = Buffer2.alloc(keyLen);\n      var iv = Buffer2.alloc(ivLen || 0);\n      var tmp = Buffer2.alloc(0);\n      while (keyLen > 0 || ivLen > 0) {\n        var hash = new MD5();\n        hash.update(tmp);\n        hash.update(password);\n        if (salt)\n          hash.update(salt);\n        tmp = hash.digest();\n        var used = 0;\n        if (keyLen > 0) {\n          var keyStart = key.length - keyLen;\n          used = Math.min(keyLen, tmp.length);\n          tmp.copy(key, keyStart, 0, used);\n          keyLen -= used;\n        }\n        if (used < tmp.length && ivLen > 0) {\n          var ivStart = iv.length - ivLen;\n          var length = Math.min(ivLen, tmp.length - used);\n          tmp.copy(iv, ivStart, used, used + length);\n          ivLen -= length;\n        }\n      }\n      tmp.fill(0);\n      return { key, iv };\n    }\n    module.exports = EVP_BytesToKey;\n  }\n});\n\n// node_modules/browserify-aes/encrypter.js\nvar require_encrypter = __commonJS({\n  \"node_modules/browserify-aes/encrypter.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var MODES = require_modes();\n    var AuthCipher = require_authCipher();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var StreamCipher = require_streamCipher();\n    var Transform = require_cipher_base();\n    var aes = require_aes();\n    var ebtk = require_evp_bytestokey();\n    var inherits = require_inherits_browser();\n    function Cipher(mode, key, iv) {\n      Transform.call(this);\n      this._cache = new Splitter();\n      this._cipher = new aes.AES(key);\n      this._prev = Buffer2.from(iv);\n      this._mode = mode;\n      this._autopadding = true;\n    }\n    inherits(Cipher, Transform);\n    Cipher.prototype._update = function(data) {\n      this._cache.add(data);\n      var chunk;\n      var thing;\n      var out = [];\n      while (chunk = this._cache.get()) {\n        thing = this._mode.encrypt(this, chunk);\n        out.push(thing);\n      }\n      return Buffer2.concat(out);\n    };\n    var PADDING = Buffer2.alloc(16, 16);\n    Cipher.prototype._final = function() {\n      var chunk = this._cache.flush();\n      if (this._autopadding) {\n        chunk = this._mode.encrypt(this, chunk);\n        this._cipher.scrub();\n        return chunk;\n      }\n      if (!chunk.equals(PADDING)) {\n        this._cipher.scrub();\n        throw new Error(\"data not multiple of block length\");\n      }\n    };\n    Cipher.prototype.setAutoPadding = function(setTo) {\n      this._autopadding = !!setTo;\n      return this;\n    };\n    function Splitter() {\n      this.cache = Buffer2.allocUnsafe(0);\n    }\n    Splitter.prototype.add = function(data) {\n      this.cache = Buffer2.concat([this.cache, data]);\n    };\n    Splitter.prototype.get = function() {\n      if (this.cache.length > 15) {\n        var out = this.cache.slice(0, 16);\n        this.cache = this.cache.slice(16);\n        return out;\n      }\n      return null;\n    };\n    Splitter.prototype.flush = function() {\n      var len = 16 - this.cache.length;\n      var padBuff = Buffer2.allocUnsafe(len);\n      var i = -1;\n      while (++i < len) {\n        padBuff.writeUInt8(len, i);\n      }\n      return Buffer2.concat([this.cache, padBuff]);\n    };\n    function createCipheriv(suite, password, iv) {\n      var config = MODES[suite.toLowerCase()];\n      if (!config)\n        throw new TypeError(\"invalid suite type\");\n      if (typeof password === \"string\")\n        password = Buffer2.from(password);\n      if (password.length !== config.key / 8)\n        throw new TypeError(\"invalid key length \" + password.length);\n      if (typeof iv === \"string\")\n        iv = Buffer2.from(iv);\n      if (config.mode !== \"GCM\" && iv.length !== config.iv)\n        throw new TypeError(\"invalid iv length \" + iv.length);\n      if (config.type === \"stream\") {\n        return new StreamCipher(config.module, password, iv);\n      } else if (config.type === \"auth\") {\n        return new AuthCipher(config.module, password, iv);\n      }\n      return new Cipher(config.module, password, iv);\n    }\n    function createCipher(suite, password) {\n      var config = MODES[suite.toLowerCase()];\n      if (!config)\n        throw new TypeError(\"invalid suite type\");\n      var keys = ebtk(password, false, config.key, config.iv);\n      return createCipheriv(suite, keys.key, keys.iv);\n    }\n    exports.createCipheriv = createCipheriv;\n    exports.createCipher = createCipher;\n  }\n});\n\n// node_modules/browserify-aes/decrypter.js\nvar require_decrypter = __commonJS({\n  \"node_modules/browserify-aes/decrypter.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var AuthCipher = require_authCipher();\n    var Buffer2 = require_safe_buffer().Buffer;\n    var MODES = require_modes();\n    var StreamCipher = require_streamCipher();\n    var Transform = require_cipher_base();\n    var aes = require_aes();\n    var ebtk = require_evp_bytestokey();\n    var inherits = require_inherits_browser();\n    function Decipher(mode, key, iv) {\n      Transform.call(this);\n      this._cache = new Splitter();\n      this._last = void 0;\n      this._cipher = new aes.AES(key);\n      this._prev = Buffer2.from(iv);\n      this._mode = mode;\n      this._autopadding = true;\n    }\n    inherits(Decipher, Transform);\n    Decipher.prototype._update = function(data) {\n      this._cache.add(data);\n      var chunk;\n      var thing;\n      var out = [];\n      while (chunk = this._cache.get(this._autopadding)) {\n        thing = this._mode.decrypt(this, chunk);\n        out.push(thing);\n      }\n      return Buffer2.concat(out);\n    };\n    Decipher.prototype._final = function() {\n      var chunk = this._cache.flush();\n      if (this._autopadding) {\n        return unpad(this._mode.decrypt(this, chunk));\n      } else if (chunk) {\n        throw new Error(\"data not multiple of block length\");\n      }\n    };\n    Decipher.prototype.setAutoPadding = function(setTo) {\n      this._autopadding = !!setTo;\n      return this;\n    };\n    function Splitter() {\n      this.cache = Buffer2.allocUnsafe(0);\n    }\n    Splitter.prototype.add = function(data) {\n      this.cache = Buffer2.concat([this.cache, data]);\n    };\n    Splitter.prototype.get = function(autoPadding) {\n      var out;\n      if (autoPadding) {\n        if (this.cache.length > 16) {\n          out = this.cache.slice(0, 16);\n          this.cache = this.cache.slice(16);\n          return out;\n        }\n      } else {\n        if (this.cache.length >= 16) {\n          out = this.cache.slice(0, 16);\n          this.cache = this.cache.slice(16);\n          return out;\n        }\n      }\n      return null;\n    };\n    Splitter.prototype.flush = function() {\n      if (this.cache.length)\n        return this.cache;\n    };\n    function unpad(last) {\n      var padded = last[15];\n      if (padded < 1 || padded > 16) {\n        throw new Error(\"unable to decrypt data\");\n      }\n      var i = -1;\n      while (++i < padded) {\n        if (last[i + (16 - padded)] !== padded) {\n          throw new Error(\"unable to decrypt data\");\n        }\n      }\n      if (padded === 16)\n        return;\n      return last.slice(0, 16 - padded);\n    }\n    function createDecipheriv(suite, password, iv) {\n      var config = MODES[suite.toLowerCase()];\n      if (!config)\n        throw new TypeError(\"invalid suite type\");\n      if (typeof iv === \"string\")\n        iv = Buffer2.from(iv);\n      if (config.mode !== \"GCM\" && iv.length !== config.iv)\n        throw new TypeError(\"invalid iv length \" + iv.length);\n      if (typeof password === \"string\")\n        password = Buffer2.from(password);\n      if (password.length !== config.key / 8)\n        throw new TypeError(\"invalid key length \" + password.length);\n      if (config.type === \"stream\") {\n        return new StreamCipher(config.module, password, iv, true);\n      } else if (config.type === \"auth\") {\n        return new AuthCipher(config.module, password, iv, true);\n      }\n      return new Decipher(config.module, password, iv);\n    }\n    function createDecipher(suite, password) {\n      var config = MODES[suite.toLowerCase()];\n      if (!config)\n        throw new TypeError(\"invalid suite type\");\n      var keys = ebtk(password, false, config.key, config.iv);\n      return createDecipheriv(suite, keys.key, keys.iv);\n    }\n    exports.createDecipher = createDecipher;\n    exports.createDecipheriv = createDecipheriv;\n  }\n});\n\n// node_modules/browserify-aes/browser.js\nvar require_browser6 = __commonJS({\n  \"node_modules/browserify-aes/browser.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var ciphers = require_encrypter();\n    var deciphers = require_decrypter();\n    var modes = require_list();\n    function getCiphers() {\n      return Object.keys(modes);\n    }\n    exports.createCipher = exports.Cipher = ciphers.createCipher;\n    exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;\n    exports.createDecipher = exports.Decipher = deciphers.createDecipher;\n    exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;\n    exports.listCiphers = exports.getCiphers = getCiphers;\n  }\n});\n\n// node_modules/browserify-des/modes.js\nvar require_modes2 = __commonJS({\n  \"node_modules/browserify-des/modes.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    exports[\"des-ecb\"] = {\n      key: 8,\n      iv: 0\n    };\n    exports[\"des-cbc\"] = exports.des = {\n      key: 8,\n      iv: 8\n    };\n    exports[\"des-ede3-cbc\"] = exports.des3 = {\n      key: 24,\n      iv: 8\n    };\n    exports[\"des-ede3\"] = {\n      key: 24,\n      iv: 0\n    };\n    exports[\"des-ede-cbc\"] = {\n      key: 16,\n      iv: 8\n    };\n    exports[\"des-ede\"] = {\n      key: 16,\n      iv: 0\n    };\n  }\n});\n\n// node_modules/browserify-cipher/browser.js\nvar require_browser7 = __commonJS({\n  \"node_modules/browserify-cipher/browser.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var DES = require_browserify_des();\n    var aes = require_browser6();\n    var aesModes = require_modes();\n    var desModes = require_modes2();\n    var ebtk = require_evp_bytestokey();\n    function createCipher(suite, password) {\n      suite = suite.toLowerCase();\n      var keyLen, ivLen;\n      if (aesModes[suite]) {\n        keyLen = aesModes[suite].key;\n        ivLen = aesModes[suite].iv;\n      } else if (desModes[suite]) {\n        keyLen = desModes[suite].key * 8;\n        ivLen = desModes[suite].iv;\n      } else {\n        throw new TypeError(\"invalid suite type\");\n      }\n      var keys = ebtk(password, false, keyLen, ivLen);\n      return createCipheriv(suite, keys.key, keys.iv);\n    }\n    function createDecipher(suite, password) {\n      suite = suite.toLowerCase();\n      var keyLen, ivLen;\n      if (aesModes[suite]) {\n        keyLen = aesModes[suite].key;\n        ivLen = aesModes[suite].iv;\n      } else if (desModes[suite]) {\n        keyLen = desModes[suite].key * 8;\n        ivLen = desModes[suite].iv;\n      } else {\n        throw new TypeError(\"invalid suite type\");\n      }\n      var keys = ebtk(password, false, keyLen, ivLen);\n      return createDecipheriv(suite, keys.key, keys.iv);\n    }\n    function createCipheriv(suite, key, iv) {\n      suite = suite.toLowerCase();\n      if (aesModes[suite])\n        return aes.createCipheriv(suite, key, iv);\n      if (desModes[suite])\n        return new DES({ key, iv, mode: suite });\n      throw new TypeError(\"invalid suite type\");\n    }\n    function createDecipheriv(suite, key, iv) {\n      suite = suite.toLowerCase();\n      if (aesModes[suite])\n        return aes.createDecipheriv(suite, key, iv);\n      if (desModes[suite])\n        return new DES({ key, iv, mode: suite, decrypt: true });\n      throw new TypeError(\"invalid suite type\");\n    }\n    function getCiphers() {\n      return Object.keys(desModes).concat(aes.getCiphers());\n    }\n    exports.createCipher = exports.Cipher = createCipher;\n    exports.createCipheriv = exports.Cipheriv = createCipheriv;\n    exports.createDecipher = exports.Decipher = createDecipher;\n    exports.createDecipheriv = exports.Decipheriv = createDecipheriv;\n    exports.listCiphers = exports.getCiphers = getCiphers;\n  }\n});\n\n// node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js\nvar require_bn = __commonJS({\n  \"node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    (function(module2, exports2) {\n      \"use strict\";\n      function assert(val, msg) {\n        if (!val)\n          throw new Error(msg || \"Assertion failed\");\n      }\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {\n        };\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      }\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        this.red = null;\n        if (number !== null) {\n          if (base === \"le\" || base === \"be\") {\n            endian = base;\n            base = 10;\n          }\n          this._init(number || 0, base || 10, endian || \"be\");\n        }\n      }\n      if (typeof module2 === \"object\") {\n        module2.exports = BN;\n      } else {\n        exports2.BN = BN;\n      }\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer2;\n      try {\n        if (typeof window !== \"undefined\" && typeof window.Buffer !== \"undefined\") {\n          Buffer2 = window.Buffer;\n        } else {\n          Buffer2 = require_buffer_polyfill().Buffer;\n        }\n      } catch (e) {\n      }\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0)\n          return left;\n        return right;\n      };\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0)\n          return left;\n        return right;\n      };\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n          return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n          return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n          base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n          start++;\n          this.negative = 1;\n        }\n        if (start < number.length) {\n          if (base === 16) {\n            this._parseHex(number, start, endian);\n          } else {\n            this._parseBase(number, base, start);\n            if (endian === \"le\") {\n              this._initArray(this.toArray(), base, endian);\n            }\n          }\n        }\n      };\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n        if (number < 67108864) {\n          this.words = [number & 67108863];\n          this.length = 1;\n        } else if (number < 4503599627370496) {\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863\n          ];\n          this.length = 2;\n        } else {\n          assert(number < 9007199254740992);\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863,\n            1\n          ];\n          this.length = 3;\n        }\n        if (endian !== \"le\")\n          return;\n        this._initArray(this.toArray(), base, endian);\n      };\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === \"le\") {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n        return this.strip();\n      };\n      function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        if (c >= 65 && c <= 70) {\n          return c - 55;\n        } else if (c >= 97 && c <= 102) {\n          return c - 87;\n        } else {\n          return c - 48 & 15;\n        }\n      }\n      function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n          r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n      }\n      BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n          for (i = number.length - 1; i >= start; i -= 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        } else {\n          var parseLength = number.length - start;\n          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        }\n        this.strip();\n      };\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul;\n          if (c >= 49) {\n            r += c - 49 + 10;\n          } else if (c >= 17) {\n            r += c - 17 + 10;\n          } else {\n            r += c;\n          }\n        }\n        return r;\n      }\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        this.words = [0];\n        this.length = 1;\n        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {\n          limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n          this.imuln(pow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        this.strip();\n      };\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n        return this;\n      };\n      BN.prototype.strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n        return this._normSign();\n      };\n      BN.prototype._normSign = function _normSign() {\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n        return this;\n      };\n      BN.prototype.inspect = function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      };\n      var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ];\n      var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ];\n      var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n          out = \"\";\n          var off = 0;\n          var carry = 0;\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 16777215).toString(16);\n            carry = w >>> 24 - off & 16777215;\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n            off += 2;\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n          }\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          var groupSize = groupSizes[base];\n          var groupBase = groupBases[base];\n          out = \"\";\n          var c = this.clone();\n          c.negative = 0;\n          while (!c.isZero()) {\n            var r = c.modn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n          if (this.isZero()) {\n            out = \"0\" + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n      };\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n          ret += this.words[1] * 67108864;\n        } else if (this.length === 3 && this.words[2] === 1) {\n          ret += 4503599627370496 + this.words[1] * 67108864;\n        } else if (this.length > 2) {\n          assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n      };\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n      };\n      BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer2 !== \"undefined\");\n        return this.toArrayLike(Buffer2, endian, length);\n      };\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        this.strip();\n        var littleEndian = endian === \"le\";\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n        if (!littleEndian) {\n          for (i = 0; i < reqLength - byteLength; i++) {\n            res[i] = 0;\n          }\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[reqLength - i - 1] = b;\n          }\n        } else {\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[i] = b;\n          }\n          for (; i < reqLength; i++) {\n            res[i] = 0;\n          }\n        }\n        return res;\n      };\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n          if (t >= 4096) {\n            r += 13;\n            t >>>= 13;\n          }\n          if (t >= 64) {\n            r += 7;\n            t >>>= 7;\n          }\n          if (t >= 8) {\n            r += 4;\n            t >>>= 4;\n          }\n          if (t >= 2) {\n            r += 2;\n            t >>>= 2;\n          }\n          return r + t;\n        };\n      }\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        if (w === 0)\n          return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 8191) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n        if ((t & 127) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n        if ((t & 15) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n        if ((t & 3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n        if ((t & 1) === 0) {\n          r++;\n        }\n        return r;\n      };\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n      };\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n        return w;\n      }\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero())\n          return 0;\n        var r = 0;\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n          r += b;\n          if (b !== 26)\n            break;\n        }\n        return r;\n      };\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n      };\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n      };\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      };\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n        return this;\n      };\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n        return this.strip();\n      };\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      };\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length)\n          return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length)\n          return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      };\n      BN.prototype.iuand = function iuand(num) {\n        var b;\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this.strip();\n      };\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      };\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length)\n          return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length)\n          return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      };\n      BN.prototype.iuxor = function iuxor(num) {\n        var a;\n        var b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = a.length;\n        return this.strip();\n      };\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      };\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length)\n          return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length)\n          return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      };\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        }\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 67108863;\n        }\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;\n        }\n        return this.strip();\n      };\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      };\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this.strip();\n      };\n      BN.prototype.iadd = function iadd(num) {\n        var r;\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign();\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        }\n        var a, b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++;\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        return this;\n      };\n      BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n        if (this.length > num.length)\n          return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      };\n      BN.prototype.isub = function isub(num) {\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign();\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        }\n        var cmp = this.cmp(num);\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        }\n        var a, b;\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n          this.negative = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n      function smallMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        var len = self2.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        var a = self2.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 67108863;\n        var carry = r / 67108864 | 0;\n        out.words[0] = lo;\n        for (var k = 1; k < len; k++) {\n          var ncarry = carry >>> 26;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self2.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 67108864 | 0;\n            rword = r & 67108863;\n          }\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      var comb10MulTo = function comb10MulTo2(self2, num, out) {\n        var a = self2.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 8191;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 8191;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 8191;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 8191;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 8191;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 8191;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 8191;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 8191;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 8191;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 8191;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 8191;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 8191;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 8191;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 8191;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 8191;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 8191;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 8191;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 8191;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 8191;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 8191;\n        var bh9 = b9 >>> 13;\n        out.negative = self2.negative ^ num.negative;\n        out.length = 19;\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 67108863;\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 67108863;\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 67108863;\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 67108863;\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 67108863;\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 67108863;\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 67108863;\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 67108863;\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 67108863;\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 67108863;\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 67108863;\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 67108863;\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 67108863;\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 67108863;\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 67108863;\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 67108863;\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 67108863;\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 67108863;\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 67108863;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n        return out;\n      };\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n      function bigMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        out.length = self2.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for (var k = 0; k < out.length - 1; k++) {\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self2.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 67108863;\n            ncarry = ncarry + (r / 67108864 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 67108863;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 67108863;\n          }\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      function jumboMulTo(self2, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self2, num, out);\n      }\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n        return res;\n      };\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n        return t;\n      };\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1)\n          return x;\n        var rb = 0;\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n        return rb;\n      };\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n        return 1 << i + 1 + odd;\n      };\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1)\n          return;\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 67108863;\n          if (w < 67108864) {\n            carry = 0;\n          } else {\n            carry = w / 67108864 | 0;\n          }\n        }\n        return ws;\n      };\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 8191;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 8191;\n          carry = carry >>> 13;\n        }\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~8191) === 0);\n      };\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n        return ph;\n      };\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n      };\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      };\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      };\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n      BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        var carry = 0;\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 67108863) + (carry & 67108863);\n          carry >>= 26;\n          carry += w / 67108864 | 0;\n          carry += lo >>> 26;\n          this.words[i] = lo & 67108863;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      };\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      };\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      };\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0)\n          return new BN(1);\n        var res = this;\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0)\n            break;\n        }\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0)\n              continue;\n            res = res.mul(q);\n          }\n        }\n        return res;\n      };\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 67108863 >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n          var carry = 0;\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n          this.length += s;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishln = function ishln(bits) {\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      };\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 67108863 ^ 67108863 >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n          maskedWords.length = s;\n        }\n        if (s === 0) {\n        } else if (this.length > s) {\n          this.length -= s;\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        }\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      };\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      };\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      };\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s)\n          return false;\n        var w = this.words[s];\n        return !!(w & q);\n      };\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n          return this;\n        }\n        if (r !== 0) {\n          s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n          var mask = 67108863 ^ 67108863 >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n        return this.strip();\n      };\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      };\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.isubn(-num);\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) < num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        }\n        return this._iaddn(num);\n      };\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {\n          this.words[i] -= 67108864;\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      };\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.iaddn(-num);\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 67108864;\n            this.words[i + 1] -= 1;\n          }\n        }\n        return this.strip();\n      };\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 67108863;\n          carry = (w >> 26) - (right / 67108864 | 0);\n          this.words[i + shift] = w & 67108863;\n        }\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 67108863;\n        }\n        if (carry === 0)\n          return this.strip();\n        assert(carry === -1);\n        carry = 0;\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 67108863;\n        }\n        this.negative = 1;\n        return this.strip();\n      };\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        }\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n          a = diff;\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);\n          qj = Math.min(qj / bhi | 0, 67108863);\n          a._ishlnsubmul(b, qj, j);\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n            a._ishlnsubmul(b, 1, j);\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n        if (q) {\n          q.strip();\n        }\n        a.strip();\n        if (mode !== \"div\" && shift !== 0) {\n          a.iushrn(shift);\n        }\n        return {\n          div: q || null,\n          mod: a\n        };\n      };\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n          return {\n            div,\n            mod\n          };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          return {\n            div,\n            mod: res.mod\n          };\n        }\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n          return {\n            div: res.div,\n            mod\n          };\n        }\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        }\n        if (num.length === 1) {\n          if (mode === \"div\") {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n          if (mode === \"mod\") {\n            return {\n              div: null,\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n        return this._wordDiv(num, mode);\n      };\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n      };\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n      };\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n      };\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        if (dm.mod.isZero())\n          return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        if (cmp < 0 || r2 === 1 && cmp === 0)\n          return dm.div;\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n      BN.prototype.modn = function modn(num) {\n        assert(num <= 67108863);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return acc;\n      };\n      BN.prototype.idivn = function idivn(num) {\n        assert(num <= 67108863);\n        var carry = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 67108864;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n        return this.strip();\n      };\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        }\n        var A = new BN(1);\n        var B = new BN(0);\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            x.iushrn(i);\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            y.iushrn(j);\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      };\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            a.iushrn(i);\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n              x1.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            b.iushrn(j);\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n              x2.iushrn(1);\n            }\n          }\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n        return res;\n      };\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero())\n          return num.abs();\n        if (num.isZero())\n          return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n          var r = a.cmp(b);\n          if (r < 0) {\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n          a.isub(b);\n        } while (true);\n        return b.iushln(shift);\n      };\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      };\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      };\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s) {\n          this._expand(s + 1);\n          this.words[s] |= q;\n          return this;\n        }\n        var carry = q;\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 67108863;\n          this.words[i] = w;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative)\n          return -1;\n        if (this.negative === 0 && negative)\n          return 1;\n        this.strip();\n        var res;\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n          assert(num <= 67108863, \"Number is too big\");\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0)\n          return -1;\n        if (this.negative === 0 && num.negative !== 0)\n          return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.ucmp = function ucmp(num) {\n        if (this.length > num.length)\n          return 1;\n        if (this.length < num.length)\n          return -1;\n        var res = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b)\n            continue;\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n          break;\n        }\n        return res;\n      };\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      };\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n      };\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n      };\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n      };\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n      };\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n      };\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n      };\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n      };\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n      };\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n      };\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n      };\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n      };\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n      };\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n      };\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n      };\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n      };\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function MPrime(name, p) {\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n      MPrime.prototype.ireduce = function ireduce(num) {\n        var r = num;\n        var rlen;\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== void 0) {\n            r.strip();\n          } else {\n            r._strip();\n          }\n        }\n        return r;\n      };\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n      function K256() {\n        MPrime.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      inherits(K256, MPrime);\n      K256.prototype.split = function split(input, output) {\n        var mask = 4194303;\n        var outLen = Math.min(input.length, 9);\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        }\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n      K256.prototype.imulK = function imulK(num) {\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        var lo = 0;\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 977;\n          num.words[i] = lo & 67108863;\n          lo = w * 64 + (lo / 67108864 | 0);\n        }\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n        return num;\n      };\n      function P224() {\n        MPrime.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      inherits(P224, MPrime);\n      function P192() {\n        MPrime.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      inherits(P192, MPrime);\n      function P25519() {\n        MPrime.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      inherits(P25519, MPrime);\n      P25519.prototype.imulK = function imulK(num) {\n        var carry = 0;\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 19 + carry;\n          var lo = hi & 67108863;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n        return num;\n      };\n      BN._prime = function prime(name) {\n        if (primes[name])\n          return primes[name];\n        var prime2;\n        if (name === \"k256\") {\n          prime2 = new K256();\n        } else if (name === \"p224\") {\n          prime2 = new P224();\n        } else if (name === \"p192\") {\n          prime2 = new P192();\n        } else if (name === \"p25519\") {\n          prime2 = new P25519();\n        } else {\n          throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime2;\n        return prime2;\n      };\n      function Red(m) {\n        if (typeof m === \"string\") {\n          var prime = BN._prime(m);\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), \"modulus must be greater than 1\");\n          this.m = m;\n          this.prime = null;\n        }\n      }\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n      };\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(\n          a.red && a.red === b.red,\n          \"red works only with red numbers\"\n        );\n      };\n      Red.prototype.imod = function imod(a) {\n        if (this.prime)\n          return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n      };\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n      };\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res;\n      };\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res;\n      };\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n      };\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n      };\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n      };\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero())\n          return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        }\n        var q = this.m.subn(1);\n        var s = 0;\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n        return r;\n      };\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero())\n          return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0)\n          return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n          start = 26;\n        }\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0))\n              continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n          start = 26;\n        }\n        return res;\n      };\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      };\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n      inherits(Mont, Red);\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero())\n          return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.invm = function invm(a) {\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(typeof module === \"undefined\" || module, exports);\n  }\n});\n\n// node_modules/miller-rabin/node_modules/bn.js/lib/bn.js\nvar require_bn2 = __commonJS({\n  \"node_modules/miller-rabin/node_modules/bn.js/lib/bn.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    (function(module2, exports2) {\n      \"use strict\";\n      function assert(val, msg) {\n        if (!val)\n          throw new Error(msg || \"Assertion failed\");\n      }\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {\n        };\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      }\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        this.red = null;\n        if (number !== null) {\n          if (base === \"le\" || base === \"be\") {\n            endian = base;\n            base = 10;\n          }\n          this._init(number || 0, base || 10, endian || \"be\");\n        }\n      }\n      if (typeof module2 === \"object\") {\n        module2.exports = BN;\n      } else {\n        exports2.BN = BN;\n      }\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer2;\n      try {\n        if (typeof window !== \"undefined\" && typeof window.Buffer !== \"undefined\") {\n          Buffer2 = window.Buffer;\n        } else {\n          Buffer2 = require_buffer_polyfill().Buffer;\n        }\n      } catch (e) {\n      }\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0)\n          return left;\n        return right;\n      };\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0)\n          return left;\n        return right;\n      };\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n          return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n          return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n          base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n          start++;\n          this.negative = 1;\n        }\n        if (start < number.length) {\n          if (base === 16) {\n            this._parseHex(number, start, endian);\n          } else {\n            this._parseBase(number, base, start);\n            if (endian === \"le\") {\n              this._initArray(this.toArray(), base, endian);\n            }\n          }\n        }\n      };\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n        if (number < 67108864) {\n          this.words = [number & 67108863];\n          this.length = 1;\n        } else if (number < 4503599627370496) {\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863\n          ];\n          this.length = 2;\n        } else {\n          assert(number < 9007199254740992);\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863,\n            1\n          ];\n          this.length = 3;\n        }\n        if (endian !== \"le\")\n          return;\n        this._initArray(this.toArray(), base, endian);\n      };\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === \"le\") {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n        return this.strip();\n      };\n      function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        if (c >= 65 && c <= 70) {\n          return c - 55;\n        } else if (c >= 97 && c <= 102) {\n          return c - 87;\n        } else {\n          return c - 48 & 15;\n        }\n      }\n      function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n          r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n      }\n      BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n          for (i = number.length - 1; i >= start; i -= 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        } else {\n          var parseLength = number.length - start;\n          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        }\n        this.strip();\n      };\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul;\n          if (c >= 49) {\n            r += c - 49 + 10;\n          } else if (c >= 17) {\n            r += c - 17 + 10;\n          } else {\n            r += c;\n          }\n        }\n        return r;\n      }\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        this.words = [0];\n        this.length = 1;\n        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {\n          limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n          this.imuln(pow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        this.strip();\n      };\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n        return this;\n      };\n      BN.prototype.strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n        return this._normSign();\n      };\n      BN.prototype._normSign = function _normSign() {\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n        return this;\n      };\n      BN.prototype.inspect = function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      };\n      var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ];\n      var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ];\n      var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n          out = \"\";\n          var off = 0;\n          var carry = 0;\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 16777215).toString(16);\n            carry = w >>> 24 - off & 16777215;\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n            off += 2;\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n          }\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          var groupSize = groupSizes[base];\n          var groupBase = groupBases[base];\n          out = \"\";\n          var c = this.clone();\n          c.negative = 0;\n          while (!c.isZero()) {\n            var r = c.modn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n          if (this.isZero()) {\n            out = \"0\" + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n      };\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n          ret += this.words[1] * 67108864;\n        } else if (this.length === 3 && this.words[2] === 1) {\n          ret += 4503599627370496 + this.words[1] * 67108864;\n        } else if (this.length > 2) {\n          assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n      };\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n      };\n      BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer2 !== \"undefined\");\n        return this.toArrayLike(Buffer2, endian, length);\n      };\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        this.strip();\n        var littleEndian = endian === \"le\";\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n        if (!littleEndian) {\n          for (i = 0; i < reqLength - byteLength; i++) {\n            res[i] = 0;\n          }\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[reqLength - i - 1] = b;\n          }\n        } else {\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[i] = b;\n          }\n          for (; i < reqLength; i++) {\n            res[i] = 0;\n          }\n        }\n        return res;\n      };\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n          if (t >= 4096) {\n            r += 13;\n            t >>>= 13;\n          }\n          if (t >= 64) {\n            r += 7;\n            t >>>= 7;\n          }\n          if (t >= 8) {\n            r += 4;\n            t >>>= 4;\n          }\n          if (t >= 2) {\n            r += 2;\n            t >>>= 2;\n          }\n          return r + t;\n        };\n      }\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        if (w === 0)\n          return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 8191) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n        if ((t & 127) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n        if ((t & 15) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n        if ((t & 3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n        if ((t & 1) === 0) {\n          r++;\n        }\n        return r;\n      };\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n      };\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n        return w;\n      }\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero())\n          return 0;\n        var r = 0;\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n          r += b;\n          if (b !== 26)\n            break;\n        }\n        return r;\n      };\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n      };\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n      };\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      };\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n        return this;\n      };\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n        return this.strip();\n      };\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      };\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length)\n          return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length)\n          return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      };\n      BN.prototype.iuand = function iuand(num) {\n        var b;\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this.strip();\n      };\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      };\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length)\n          return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length)\n          return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      };\n      BN.prototype.iuxor = function iuxor(num) {\n        var a;\n        var b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = a.length;\n        return this.strip();\n      };\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      };\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length)\n          return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length)\n          return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      };\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        }\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 67108863;\n        }\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;\n        }\n        return this.strip();\n      };\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      };\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this.strip();\n      };\n      BN.prototype.iadd = function iadd(num) {\n        var r;\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign();\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        }\n        var a, b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++;\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        return this;\n      };\n      BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n        if (this.length > num.length)\n          return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      };\n      BN.prototype.isub = function isub(num) {\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign();\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        }\n        var cmp = this.cmp(num);\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        }\n        var a, b;\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n          this.negative = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n      function smallMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        var len = self2.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        var a = self2.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 67108863;\n        var carry = r / 67108864 | 0;\n        out.words[0] = lo;\n        for (var k = 1; k < len; k++) {\n          var ncarry = carry >>> 26;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self2.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 67108864 | 0;\n            rword = r & 67108863;\n          }\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      var comb10MulTo = function comb10MulTo2(self2, num, out) {\n        var a = self2.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 8191;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 8191;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 8191;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 8191;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 8191;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 8191;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 8191;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 8191;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 8191;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 8191;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 8191;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 8191;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 8191;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 8191;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 8191;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 8191;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 8191;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 8191;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 8191;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 8191;\n        var bh9 = b9 >>> 13;\n        out.negative = self2.negative ^ num.negative;\n        out.length = 19;\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 67108863;\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 67108863;\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 67108863;\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 67108863;\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 67108863;\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 67108863;\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 67108863;\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 67108863;\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 67108863;\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 67108863;\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 67108863;\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 67108863;\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 67108863;\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 67108863;\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 67108863;\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 67108863;\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 67108863;\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 67108863;\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 67108863;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n        return out;\n      };\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n      function bigMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        out.length = self2.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for (var k = 0; k < out.length - 1; k++) {\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self2.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 67108863;\n            ncarry = ncarry + (r / 67108864 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 67108863;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 67108863;\n          }\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      function jumboMulTo(self2, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self2, num, out);\n      }\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n        return res;\n      };\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n        return t;\n      };\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1)\n          return x;\n        var rb = 0;\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n        return rb;\n      };\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n        return 1 << i + 1 + odd;\n      };\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1)\n          return;\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 67108863;\n          if (w < 67108864) {\n            carry = 0;\n          } else {\n            carry = w / 67108864 | 0;\n          }\n        }\n        return ws;\n      };\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 8191;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 8191;\n          carry = carry >>> 13;\n        }\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~8191) === 0);\n      };\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n        return ph;\n      };\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n      };\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      };\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      };\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n      BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        var carry = 0;\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 67108863) + (carry & 67108863);\n          carry >>= 26;\n          carry += w / 67108864 | 0;\n          carry += lo >>> 26;\n          this.words[i] = lo & 67108863;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      };\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      };\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      };\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0)\n          return new BN(1);\n        var res = this;\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0)\n            break;\n        }\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0)\n              continue;\n            res = res.mul(q);\n          }\n        }\n        return res;\n      };\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 67108863 >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n          var carry = 0;\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n          this.length += s;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishln = function ishln(bits) {\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      };\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 67108863 ^ 67108863 >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n          maskedWords.length = s;\n        }\n        if (s === 0) {\n        } else if (this.length > s) {\n          this.length -= s;\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        }\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      };\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      };\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      };\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s)\n          return false;\n        var w = this.words[s];\n        return !!(w & q);\n      };\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n          return this;\n        }\n        if (r !== 0) {\n          s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n          var mask = 67108863 ^ 67108863 >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n        return this.strip();\n      };\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      };\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.isubn(-num);\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) < num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        }\n        return this._iaddn(num);\n      };\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {\n          this.words[i] -= 67108864;\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      };\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.iaddn(-num);\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 67108864;\n            this.words[i + 1] -= 1;\n          }\n        }\n        return this.strip();\n      };\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 67108863;\n          carry = (w >> 26) - (right / 67108864 | 0);\n          this.words[i + shift] = w & 67108863;\n        }\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 67108863;\n        }\n        if (carry === 0)\n          return this.strip();\n        assert(carry === -1);\n        carry = 0;\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 67108863;\n        }\n        this.negative = 1;\n        return this.strip();\n      };\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        }\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n          a = diff;\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);\n          qj = Math.min(qj / bhi | 0, 67108863);\n          a._ishlnsubmul(b, qj, j);\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n            a._ishlnsubmul(b, 1, j);\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n        if (q) {\n          q.strip();\n        }\n        a.strip();\n        if (mode !== \"div\" && shift !== 0) {\n          a.iushrn(shift);\n        }\n        return {\n          div: q || null,\n          mod: a\n        };\n      };\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n          return {\n            div,\n            mod\n          };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          return {\n            div,\n            mod: res.mod\n          };\n        }\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n          return {\n            div: res.div,\n            mod\n          };\n        }\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        }\n        if (num.length === 1) {\n          if (mode === \"div\") {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n          if (mode === \"mod\") {\n            return {\n              div: null,\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n        return this._wordDiv(num, mode);\n      };\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n      };\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n      };\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n      };\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        if (dm.mod.isZero())\n          return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        if (cmp < 0 || r2 === 1 && cmp === 0)\n          return dm.div;\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n      BN.prototype.modn = function modn(num) {\n        assert(num <= 67108863);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return acc;\n      };\n      BN.prototype.idivn = function idivn(num) {\n        assert(num <= 67108863);\n        var carry = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 67108864;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n        return this.strip();\n      };\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        }\n        var A = new BN(1);\n        var B = new BN(0);\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            x.iushrn(i);\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            y.iushrn(j);\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      };\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            a.iushrn(i);\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n              x1.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            b.iushrn(j);\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n              x2.iushrn(1);\n            }\n          }\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n        return res;\n      };\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero())\n          return num.abs();\n        if (num.isZero())\n          return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n          var r = a.cmp(b);\n          if (r < 0) {\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n          a.isub(b);\n        } while (true);\n        return b.iushln(shift);\n      };\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      };\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      };\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s) {\n          this._expand(s + 1);\n          this.words[s] |= q;\n          return this;\n        }\n        var carry = q;\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 67108863;\n          this.words[i] = w;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative)\n          return -1;\n        if (this.negative === 0 && negative)\n          return 1;\n        this.strip();\n        var res;\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n          assert(num <= 67108863, \"Number is too big\");\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0)\n          return -1;\n        if (this.negative === 0 && num.negative !== 0)\n          return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.ucmp = function ucmp(num) {\n        if (this.length > num.length)\n          return 1;\n        if (this.length < num.length)\n          return -1;\n        var res = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b)\n            continue;\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n          break;\n        }\n        return res;\n      };\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      };\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n      };\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n      };\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n      };\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n      };\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n      };\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n      };\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n      };\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n      };\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n      };\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n      };\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n      };\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n      };\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n      };\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n      };\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n      };\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function MPrime(name, p) {\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n      MPrime.prototype.ireduce = function ireduce(num) {\n        var r = num;\n        var rlen;\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== void 0) {\n            r.strip();\n          } else {\n            r._strip();\n          }\n        }\n        return r;\n      };\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n      function K256() {\n        MPrime.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      inherits(K256, MPrime);\n      K256.prototype.split = function split(input, output) {\n        var mask = 4194303;\n        var outLen = Math.min(input.length, 9);\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        }\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n      K256.prototype.imulK = function imulK(num) {\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        var lo = 0;\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 977;\n          num.words[i] = lo & 67108863;\n          lo = w * 64 + (lo / 67108864 | 0);\n        }\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n        return num;\n      };\n      function P224() {\n        MPrime.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      inherits(P224, MPrime);\n      function P192() {\n        MPrime.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      inherits(P192, MPrime);\n      function P25519() {\n        MPrime.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      inherits(P25519, MPrime);\n      P25519.prototype.imulK = function imulK(num) {\n        var carry = 0;\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 19 + carry;\n          var lo = hi & 67108863;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n        return num;\n      };\n      BN._prime = function prime(name) {\n        if (primes[name])\n          return primes[name];\n        var prime2;\n        if (name === \"k256\") {\n          prime2 = new K256();\n        } else if (name === \"p224\") {\n          prime2 = new P224();\n        } else if (name === \"p192\") {\n          prime2 = new P192();\n        } else if (name === \"p25519\") {\n          prime2 = new P25519();\n        } else {\n          throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime2;\n        return prime2;\n      };\n      function Red(m) {\n        if (typeof m === \"string\") {\n          var prime = BN._prime(m);\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), \"modulus must be greater than 1\");\n          this.m = m;\n          this.prime = null;\n        }\n      }\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n      };\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(\n          a.red && a.red === b.red,\n          \"red works only with red numbers\"\n        );\n      };\n      Red.prototype.imod = function imod(a) {\n        if (this.prime)\n          return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n      };\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n      };\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res;\n      };\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res;\n      };\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n      };\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n      };\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n      };\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero())\n          return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        }\n        var q = this.m.subn(1);\n        var s = 0;\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n        return r;\n      };\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero())\n          return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0)\n          return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n          start = 26;\n        }\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0))\n              continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n          start = 26;\n        }\n        return res;\n      };\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      };\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n      inherits(Mont, Red);\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero())\n          return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.invm = function invm(a) {\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(typeof module === \"undefined\" || module, exports);\n  }\n});\n\n// node_modules/brorand/index.js\nvar require_brorand = __commonJS({\n  \"node_modules/brorand/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var r;\n    module.exports = function rand(len) {\n      if (!r)\n        r = new Rand(null);\n      return r.generate(len);\n    };\n    function Rand(rand) {\n      this.rand = rand;\n    }\n    module.exports.Rand = Rand;\n    Rand.prototype.generate = function generate(len) {\n      return this._rand(len);\n    };\n    Rand.prototype._rand = function _rand(n) {\n      if (this.rand.getBytes)\n        return this.rand.getBytes(n);\n      var res = new Uint8Array(n);\n      for (var i = 0; i < res.length; i++)\n        res[i] = this.rand.getByte();\n      return res;\n    };\n    if (typeof self === \"object\") {\n      if (self.crypto && self.crypto.getRandomValues) {\n        Rand.prototype._rand = function _rand(n) {\n          var arr = new Uint8Array(n);\n          self.crypto.getRandomValues(arr);\n          return arr;\n        };\n      } else if (self.msCrypto && self.msCrypto.getRandomValues) {\n        Rand.prototype._rand = function _rand(n) {\n          var arr = new Uint8Array(n);\n          self.msCrypto.getRandomValues(arr);\n          return arr;\n        };\n      } else if (typeof window === \"object\") {\n        Rand.prototype._rand = function() {\n          throw new Error(\"Not implemented yet\");\n        };\n      }\n    } else {\n      try {\n        crypto = require_crypto_browserify();\n        if (typeof crypto.randomBytes !== \"function\")\n          throw new Error(\"Not supported\");\n        Rand.prototype._rand = function _rand(n) {\n          return crypto.randomBytes(n);\n        };\n      } catch (e) {\n      }\n    }\n    var crypto;\n  }\n});\n\n// node_modules/miller-rabin/lib/mr.js\nvar require_mr = __commonJS({\n  \"node_modules/miller-rabin/lib/mr.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var bn = require_bn2();\n    var brorand = require_brorand();\n    function MillerRabin(rand) {\n      this.rand = rand || new brorand.Rand();\n    }\n    module.exports = MillerRabin;\n    MillerRabin.create = function create(rand) {\n      return new MillerRabin(rand);\n    };\n    MillerRabin.prototype._randbelow = function _randbelow(n) {\n      var len = n.bitLength();\n      var min_bytes = Math.ceil(len / 8);\n      do\n        var a = new bn(this.rand.generate(min_bytes));\n      while (a.cmp(n) >= 0);\n      return a;\n    };\n    MillerRabin.prototype._randrange = function _randrange(start, stop) {\n      var size = stop.sub(start);\n      return start.add(this._randbelow(size));\n    };\n    MillerRabin.prototype.test = function test(n, k, cb) {\n      var len = n.bitLength();\n      var red = bn.mont(n);\n      var rone = new bn(1).toRed(red);\n      if (!k)\n        k = Math.max(1, len / 48 | 0);\n      var n1 = n.subn(1);\n      for (var s = 0; !n1.testn(s); s++) {\n      }\n      var d = n.shrn(s);\n      var rn1 = n1.toRed(red);\n      var prime = true;\n      for (; k > 0; k--) {\n        var a = this._randrange(new bn(2), n1);\n        if (cb)\n          cb(a);\n        var x = a.toRed(red).redPow(d);\n        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)\n          continue;\n        for (var i = 1; i < s; i++) {\n          x = x.redSqr();\n          if (x.cmp(rone) === 0)\n            return false;\n          if (x.cmp(rn1) === 0)\n            break;\n        }\n        if (i === s)\n          return false;\n      }\n      return prime;\n    };\n    MillerRabin.prototype.getDivisor = function getDivisor(n, k) {\n      var len = n.bitLength();\n      var red = bn.mont(n);\n      var rone = new bn(1).toRed(red);\n      if (!k)\n        k = Math.max(1, len / 48 | 0);\n      var n1 = n.subn(1);\n      for (var s = 0; !n1.testn(s); s++) {\n      }\n      var d = n.shrn(s);\n      var rn1 = n1.toRed(red);\n      for (; k > 0; k--) {\n        var a = this._randrange(new bn(2), n1);\n        var g = n.gcd(a);\n        if (g.cmpn(1) !== 0)\n          return g;\n        var x = a.toRed(red).redPow(d);\n        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)\n          continue;\n        for (var i = 1; i < s; i++) {\n          x = x.redSqr();\n          if (x.cmp(rone) === 0)\n            return x.fromRed().subn(1).gcd(n);\n          if (x.cmp(rn1) === 0)\n            break;\n        }\n        if (i === s) {\n          x = x.redSqr();\n          return x.fromRed().subn(1).gcd(n);\n        }\n      }\n      return false;\n    };\n  }\n});\n\n// node_modules/diffie-hellman/lib/generatePrime.js\nvar require_generatePrime = __commonJS({\n  \"node_modules/diffie-hellman/lib/generatePrime.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var randomBytes = require_browser();\n    module.exports = findPrime;\n    findPrime.simpleSieve = simpleSieve;\n    findPrime.fermatTest = fermatTest;\n    var BN = require_bn();\n    var TWENTYFOUR = new BN(24);\n    var MillerRabin = require_mr();\n    var millerRabin = new MillerRabin();\n    var ONE = new BN(1);\n    var TWO = new BN(2);\n    var FIVE = new BN(5);\n    var SIXTEEN = new BN(16);\n    var EIGHT = new BN(8);\n    var TEN = new BN(10);\n    var THREE = new BN(3);\n    var SEVEN = new BN(7);\n    var ELEVEN = new BN(11);\n    var FOUR = new BN(4);\n    var TWELVE = new BN(12);\n    var primes = null;\n    function _getPrimes() {\n      if (primes !== null)\n        return primes;\n      var limit = 1048576;\n      var res = [];\n      res[0] = 2;\n      for (var i = 1, k = 3; k < limit; k += 2) {\n        var sqrt = Math.ceil(Math.sqrt(k));\n        for (var j = 0; j < i && res[j] <= sqrt; j++)\n          if (k % res[j] === 0)\n            break;\n        if (i !== j && res[j] <= sqrt)\n          continue;\n        res[i++] = k;\n      }\n      primes = res;\n      return res;\n    }\n    function simpleSieve(p) {\n      var primes2 = _getPrimes();\n      for (var i = 0; i < primes2.length; i++)\n        if (p.modn(primes2[i]) === 0) {\n          if (p.cmpn(primes2[i]) === 0) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      return true;\n    }\n    function fermatTest(p) {\n      var red = BN.mont(p);\n      return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;\n    }\n    function findPrime(bits, gen) {\n      if (bits < 16) {\n        if (gen === 2 || gen === 5) {\n          return new BN([140, 123]);\n        } else {\n          return new BN([140, 39]);\n        }\n      }\n      gen = new BN(gen);\n      var num, n2;\n      while (true) {\n        num = new BN(randomBytes(Math.ceil(bits / 8)));\n        while (num.bitLength() > bits) {\n          num.ishrn(1);\n        }\n        if (num.isEven()) {\n          num.iadd(ONE);\n        }\n        if (!num.testn(1)) {\n          num.iadd(TWO);\n        }\n        if (!gen.cmp(TWO)) {\n          while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {\n            num.iadd(FOUR);\n          }\n        } else if (!gen.cmp(FIVE)) {\n          while (num.mod(TEN).cmp(THREE)) {\n            num.iadd(FOUR);\n          }\n        }\n        n2 = num.shrn(1);\n        if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {\n          return num;\n        }\n      }\n    }\n  }\n});\n\n// node_modules/diffie-hellman/lib/primes.json\nvar require_primes = __commonJS({\n  \"node_modules/diffie-hellman/lib/primes.json\"(exports, module) {\n    module.exports = {\n      modp1: {\n        gen: \"02\",\n        prime: \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"\n      },\n      modp2: {\n        gen: \"02\",\n        prime: \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"\n      },\n      modp5: {\n        gen: \"02\",\n        prime: \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"\n      },\n      modp14: {\n        gen: \"02\",\n        prime: \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"\n      },\n      modp15: {\n        gen: \"02\",\n        prime: \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"\n      },\n      modp16: {\n        gen: \"02\",\n        prime: \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"\n      },\n      modp17: {\n        gen: \"02\",\n        prime: \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"\n      },\n      modp18: {\n        gen: \"02\",\n        prime: \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"\n      }\n    };\n  }\n});\n\n// node_modules/diffie-hellman/lib/dh.js\nvar require_dh = __commonJS({\n  \"node_modules/diffie-hellman/lib/dh.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn();\n    var MillerRabin = require_mr();\n    var millerRabin = new MillerRabin();\n    var TWENTYFOUR = new BN(24);\n    var ELEVEN = new BN(11);\n    var TEN = new BN(10);\n    var THREE = new BN(3);\n    var SEVEN = new BN(7);\n    var primes = require_generatePrime();\n    var randomBytes = require_browser();\n    module.exports = DH;\n    function setPublicKey(pub, enc) {\n      enc = enc || \"utf8\";\n      if (!Buffer.isBuffer(pub)) {\n        pub = new Buffer(pub, enc);\n      }\n      this._pub = new BN(pub);\n      return this;\n    }\n    function setPrivateKey(priv, enc) {\n      enc = enc || \"utf8\";\n      if (!Buffer.isBuffer(priv)) {\n        priv = new Buffer(priv, enc);\n      }\n      this._priv = new BN(priv);\n      return this;\n    }\n    var primeCache = {};\n    function checkPrime(prime, generator) {\n      var gen = generator.toString(\"hex\");\n      var hex = [gen, prime.toString(16)].join(\"_\");\n      if (hex in primeCache) {\n        return primeCache[hex];\n      }\n      var error = 0;\n      if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {\n        error += 1;\n        if (gen === \"02\" || gen === \"05\") {\n          error += 8;\n        } else {\n          error += 4;\n        }\n        primeCache[hex] = error;\n        return error;\n      }\n      if (!millerRabin.test(prime.shrn(1))) {\n        error += 2;\n      }\n      var rem;\n      switch (gen) {\n        case \"02\":\n          if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {\n            error += 8;\n          }\n          break;\n        case \"05\":\n          rem = prime.mod(TEN);\n          if (rem.cmp(THREE) && rem.cmp(SEVEN)) {\n            error += 8;\n          }\n          break;\n        default:\n          error += 4;\n      }\n      primeCache[hex] = error;\n      return error;\n    }\n    function DH(prime, generator, malleable) {\n      this.setGenerator(generator);\n      this.__prime = new BN(prime);\n      this._prime = BN.mont(this.__prime);\n      this._primeLen = prime.length;\n      this._pub = void 0;\n      this._priv = void 0;\n      this._primeCode = void 0;\n      if (malleable) {\n        this.setPublicKey = setPublicKey;\n        this.setPrivateKey = setPrivateKey;\n      } else {\n        this._primeCode = 8;\n      }\n    }\n    Object.defineProperty(DH.prototype, \"verifyError\", {\n      enumerable: true,\n      get: function() {\n        if (typeof this._primeCode !== \"number\") {\n          this._primeCode = checkPrime(this.__prime, this.__gen);\n        }\n        return this._primeCode;\n      }\n    });\n    DH.prototype.generateKeys = function() {\n      if (!this._priv) {\n        this._priv = new BN(randomBytes(this._primeLen));\n      }\n      this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();\n      return this.getPublicKey();\n    };\n    DH.prototype.computeSecret = function(other) {\n      other = new BN(other);\n      other = other.toRed(this._prime);\n      var secret = other.redPow(this._priv).fromRed();\n      var out = new Buffer(secret.toArray());\n      var prime = this.getPrime();\n      if (out.length < prime.length) {\n        var front = new Buffer(prime.length - out.length);\n        front.fill(0);\n        out = Buffer.concat([front, out]);\n      }\n      return out;\n    };\n    DH.prototype.getPublicKey = function getPublicKey(enc) {\n      return formatReturnValue(this._pub, enc);\n    };\n    DH.prototype.getPrivateKey = function getPrivateKey(enc) {\n      return formatReturnValue(this._priv, enc);\n    };\n    DH.prototype.getPrime = function(enc) {\n      return formatReturnValue(this.__prime, enc);\n    };\n    DH.prototype.getGenerator = function(enc) {\n      return formatReturnValue(this._gen, enc);\n    };\n    DH.prototype.setGenerator = function(gen, enc) {\n      enc = enc || \"utf8\";\n      if (!Buffer.isBuffer(gen)) {\n        gen = new Buffer(gen, enc);\n      }\n      this.__gen = gen;\n      this._gen = new BN(gen);\n      return this;\n    };\n    function formatReturnValue(bn, enc) {\n      var buf = new Buffer(bn.toArray());\n      if (!enc) {\n        return buf;\n      } else {\n        return buf.toString(enc);\n      }\n    }\n  }\n});\n\n// node_modules/diffie-hellman/browser.js\nvar require_browser8 = __commonJS({\n  \"node_modules/diffie-hellman/browser.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var generatePrime = require_generatePrime();\n    var primes = require_primes();\n    var DH = require_dh();\n    function getDiffieHellman(mod) {\n      var prime = new Buffer(primes[mod].prime, \"hex\");\n      var gen = new Buffer(primes[mod].gen, \"hex\");\n      return new DH(prime, gen);\n    }\n    var ENCODINGS = {\n      \"binary\": true,\n      \"hex\": true,\n      \"base64\": true\n    };\n    function createDiffieHellman(prime, enc, generator, genc) {\n      if (Buffer.isBuffer(enc) || ENCODINGS[enc] === void 0) {\n        return createDiffieHellman(prime, \"binary\", enc, generator);\n      }\n      enc = enc || \"binary\";\n      genc = genc || \"binary\";\n      generator = generator || new Buffer([2]);\n      if (!Buffer.isBuffer(generator)) {\n        generator = new Buffer(generator, genc);\n      }\n      if (typeof prime === \"number\") {\n        return new DH(generatePrime(prime, generator), generator, true);\n      }\n      if (!Buffer.isBuffer(prime)) {\n        prime = new Buffer(prime, enc);\n      }\n      return new DH(prime, generator, true);\n    }\n    exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;\n    exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;\n  }\n});\n\n// node_modules/bn.js/lib/bn.js\nvar require_bn3 = __commonJS({\n  \"node_modules/bn.js/lib/bn.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    (function(module2, exports2) {\n      \"use strict\";\n      function assert(val, msg) {\n        if (!val)\n          throw new Error(msg || \"Assertion failed\");\n      }\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {\n        };\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      }\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        this.red = null;\n        if (number !== null) {\n          if (base === \"le\" || base === \"be\") {\n            endian = base;\n            base = 10;\n          }\n          this._init(number || 0, base || 10, endian || \"be\");\n        }\n      }\n      if (typeof module2 === \"object\") {\n        module2.exports = BN;\n      } else {\n        exports2.BN = BN;\n      }\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer2;\n      try {\n        if (typeof window !== \"undefined\" && typeof window.Buffer !== \"undefined\") {\n          Buffer2 = window.Buffer;\n        } else {\n          Buffer2 = require_buffer_polyfill().Buffer;\n        }\n      } catch (e) {\n      }\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0)\n          return left;\n        return right;\n      };\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0)\n          return left;\n        return right;\n      };\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n          return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n          return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n          base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n          start++;\n          this.negative = 1;\n        }\n        if (start < number.length) {\n          if (base === 16) {\n            this._parseHex(number, start, endian);\n          } else {\n            this._parseBase(number, base, start);\n            if (endian === \"le\") {\n              this._initArray(this.toArray(), base, endian);\n            }\n          }\n        }\n      };\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n        if (number < 67108864) {\n          this.words = [number & 67108863];\n          this.length = 1;\n        } else if (number < 4503599627370496) {\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863\n          ];\n          this.length = 2;\n        } else {\n          assert(number < 9007199254740992);\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863,\n            1\n          ];\n          this.length = 3;\n        }\n        if (endian !== \"le\")\n          return;\n        this._initArray(this.toArray(), base, endian);\n      };\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === \"le\") {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n        return this._strip();\n      };\n      function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        if (c >= 48 && c <= 57) {\n          return c - 48;\n        } else if (c >= 65 && c <= 70) {\n          return c - 55;\n        } else if (c >= 97 && c <= 102) {\n          return c - 87;\n        } else {\n          assert(false, \"Invalid character in \" + string);\n        }\n      }\n      function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n          r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n      }\n      BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n          for (i = number.length - 1; i >= start; i -= 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        } else {\n          var parseLength = number.length - start;\n          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        }\n        this._strip();\n      };\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var b = 0;\n        var len = Math.min(str.length, end);\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul;\n          if (c >= 49) {\n            b = c - 49 + 10;\n          } else if (c >= 17) {\n            b = c - 17 + 10;\n          } else {\n            b = c;\n          }\n          assert(c >= 0 && b < mul, \"Invalid character\");\n          r += b;\n        }\n        return r;\n      }\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        this.words = [0];\n        this.length = 1;\n        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {\n          limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n          this.imuln(pow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        this._strip();\n      };\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n      function move(dest, src) {\n        dest.words = src.words;\n        dest.length = src.length;\n        dest.negative = src.negative;\n        dest.red = src.red;\n      }\n      BN.prototype._move = function _move(dest) {\n        move(dest, this);\n      };\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n        return this;\n      };\n      BN.prototype._strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n        return this._normSign();\n      };\n      BN.prototype._normSign = function _normSign() {\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n        return this;\n      };\n      if (typeof Symbol !== \"undefined\" && typeof Symbol.for === \"function\") {\n        try {\n          BN.prototype[Symbol.for(\"nodejs.util.inspect.custom\")] = inspect;\n        } catch (e) {\n          BN.prototype.inspect = inspect;\n        }\n      } else {\n        BN.prototype.inspect = inspect;\n      }\n      function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      }\n      var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ];\n      var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ];\n      var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n          out = \"\";\n          var off = 0;\n          var carry = 0;\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 16777215).toString(16);\n            carry = w >>> 24 - off & 16777215;\n            off += 2;\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n          }\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          var groupSize = groupSizes[base];\n          var groupBase = groupBases[base];\n          out = \"\";\n          var c = this.clone();\n          c.negative = 0;\n          while (!c.isZero()) {\n            var r = c.modrn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n          if (this.isZero()) {\n            out = \"0\" + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n      };\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n          ret += this.words[1] * 67108864;\n        } else if (this.length === 3 && this.words[2] === 1) {\n          ret += 4503599627370496 + this.words[1] * 67108864;\n        } else if (this.length > 2) {\n          assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n      };\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16, 2);\n      };\n      if (Buffer2) {\n        BN.prototype.toBuffer = function toBuffer(endian, length) {\n          return this.toArrayLike(Buffer2, endian, length);\n        };\n      }\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n      var allocate = function allocate2(ArrayType, size) {\n        if (ArrayType.allocUnsafe) {\n          return ArrayType.allocUnsafe(size);\n        }\n        return new ArrayType(size);\n      };\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        this._strip();\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        var res = allocate(ArrayType, reqLength);\n        var postfix = endian === \"le\" ? \"LE\" : \"BE\";\n        this[\"_toArrayLike\" + postfix](res, byteLength);\n        return res;\n      };\n      BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {\n        var position = 0;\n        var carry = 0;\n        for (var i = 0, shift = 0; i < this.length; i++) {\n          var word = this.words[i] << shift | carry;\n          res[position++] = word & 255;\n          if (position < res.length) {\n            res[position++] = word >> 8 & 255;\n          }\n          if (position < res.length) {\n            res[position++] = word >> 16 & 255;\n          }\n          if (shift === 6) {\n            if (position < res.length) {\n              res[position++] = word >> 24 & 255;\n            }\n            carry = 0;\n            shift = 0;\n          } else {\n            carry = word >>> 24;\n            shift += 2;\n          }\n        }\n        if (position < res.length) {\n          res[position++] = carry;\n          while (position < res.length) {\n            res[position++] = 0;\n          }\n        }\n      };\n      BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {\n        var position = res.length - 1;\n        var carry = 0;\n        for (var i = 0, shift = 0; i < this.length; i++) {\n          var word = this.words[i] << shift | carry;\n          res[position--] = word & 255;\n          if (position >= 0) {\n            res[position--] = word >> 8 & 255;\n          }\n          if (position >= 0) {\n            res[position--] = word >> 16 & 255;\n          }\n          if (shift === 6) {\n            if (position >= 0) {\n              res[position--] = word >> 24 & 255;\n            }\n            carry = 0;\n            shift = 0;\n          } else {\n            carry = word >>> 24;\n            shift += 2;\n          }\n        }\n        if (position >= 0) {\n          res[position--] = carry;\n          while (position >= 0) {\n            res[position--] = 0;\n          }\n        }\n      };\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n          if (t >= 4096) {\n            r += 13;\n            t >>>= 13;\n          }\n          if (t >= 64) {\n            r += 7;\n            t >>>= 7;\n          }\n          if (t >= 8) {\n            r += 4;\n            t >>>= 4;\n          }\n          if (t >= 2) {\n            r += 2;\n            t >>>= 2;\n          }\n          return r + t;\n        };\n      }\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        if (w === 0)\n          return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 8191) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n        if ((t & 127) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n        if ((t & 15) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n        if ((t & 3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n        if ((t & 1) === 0) {\n          r++;\n        }\n        return r;\n      };\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n      };\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = num.words[off] >>> wbit & 1;\n        }\n        return w;\n      }\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero())\n          return 0;\n        var r = 0;\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n          r += b;\n          if (b !== 26)\n            break;\n        }\n        return r;\n      };\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n      };\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n      };\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      };\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n        return this;\n      };\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n        return this._strip();\n      };\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      };\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length)\n          return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length)\n          return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      };\n      BN.prototype.iuand = function iuand(num) {\n        var b;\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this._strip();\n      };\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      };\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length)\n          return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length)\n          return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      };\n      BN.prototype.iuxor = function iuxor(num) {\n        var a;\n        var b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = a.length;\n        return this._strip();\n      };\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      };\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length)\n          return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length)\n          return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      };\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        }\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 67108863;\n        }\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;\n        }\n        return this._strip();\n      };\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      };\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this._strip();\n      };\n      BN.prototype.iadd = function iadd(num) {\n        var r;\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign();\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        }\n        var a, b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++;\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        return this;\n      };\n      BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n        if (this.length > num.length)\n          return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      };\n      BN.prototype.isub = function isub(num) {\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign();\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        }\n        var cmp = this.cmp(num);\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        }\n        var a, b;\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n          this.negative = 1;\n        }\n        return this._strip();\n      };\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n      function smallMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        var len = self2.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        var a = self2.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 67108863;\n        var carry = r / 67108864 | 0;\n        out.words[0] = lo;\n        for (var k = 1; k < len; k++) {\n          var ncarry = carry >>> 26;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self2.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 67108864 | 0;\n            rword = r & 67108863;\n          }\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n        return out._strip();\n      }\n      var comb10MulTo = function comb10MulTo2(self2, num, out) {\n        var a = self2.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 8191;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 8191;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 8191;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 8191;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 8191;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 8191;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 8191;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 8191;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 8191;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 8191;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 8191;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 8191;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 8191;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 8191;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 8191;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 8191;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 8191;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 8191;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 8191;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 8191;\n        var bh9 = b9 >>> 13;\n        out.negative = self2.negative ^ num.negative;\n        out.length = 19;\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 67108863;\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 67108863;\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 67108863;\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 67108863;\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 67108863;\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 67108863;\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 67108863;\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 67108863;\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 67108863;\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 67108863;\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 67108863;\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 67108863;\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 67108863;\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 67108863;\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 67108863;\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 67108863;\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 67108863;\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 67108863;\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 67108863;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n        return out;\n      };\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n      function bigMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        out.length = self2.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for (var k = 0; k < out.length - 1; k++) {\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self2.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 67108863;\n            ncarry = ncarry + (r / 67108864 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 67108863;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 67108863;\n          }\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n        return out._strip();\n      }\n      function jumboMulTo(self2, num, out) {\n        return bigMulTo(self2, num, out);\n      }\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n        return res;\n      };\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n        return t;\n      };\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1)\n          return x;\n        var rb = 0;\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n        return rb;\n      };\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n        return 1 << i + 1 + odd;\n      };\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1)\n          return;\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 67108863;\n          if (w < 67108864) {\n            carry = 0;\n          } else {\n            carry = w / 67108864 | 0;\n          }\n        }\n        return ws;\n      };\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 8191;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 8191;\n          carry = carry >>> 13;\n        }\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~8191) === 0);\n      };\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n        return ph;\n      };\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out._strip();\n      };\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      };\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      };\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n      BN.prototype.imuln = function imuln(num) {\n        var isNegNum = num < 0;\n        if (isNegNum)\n          num = -num;\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        var carry = 0;\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 67108863) + (carry & 67108863);\n          carry >>= 26;\n          carry += w / 67108864 | 0;\n          carry += lo >>> 26;\n          this.words[i] = lo & 67108863;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return isNegNum ? this.ineg() : this;\n      };\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      };\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      };\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      };\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0)\n          return new BN(1);\n        var res = this;\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0)\n            break;\n        }\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0)\n              continue;\n            res = res.mul(q);\n          }\n        }\n        return res;\n      };\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 67108863 >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n          var carry = 0;\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n          this.length += s;\n        }\n        return this._strip();\n      };\n      BN.prototype.ishln = function ishln(bits) {\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      };\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 67108863 ^ 67108863 >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n          maskedWords.length = s;\n        }\n        if (s === 0) {\n        } else if (this.length > s) {\n          this.length -= s;\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        }\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        return this._strip();\n      };\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      };\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      };\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      };\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s)\n          return false;\n        var w = this.words[s];\n        return !!(w & q);\n      };\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n          return this;\n        }\n        if (r !== 0) {\n          s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n          var mask = 67108863 ^ 67108863 >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n        return this._strip();\n      };\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      };\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.isubn(-num);\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) <= num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        }\n        return this._iaddn(num);\n      };\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {\n          this.words[i] -= 67108864;\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      };\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.iaddn(-num);\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 67108864;\n            this.words[i + 1] -= 1;\n          }\n        }\n        return this._strip();\n      };\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 67108863;\n          carry = (w >> 26) - (right / 67108864 | 0);\n          this.words[i + shift] = w & 67108863;\n        }\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 67108863;\n        }\n        if (carry === 0)\n          return this._strip();\n        assert(carry === -1);\n        carry = 0;\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 67108863;\n        }\n        this.negative = 1;\n        return this._strip();\n      };\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        }\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n          a = diff;\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);\n          qj = Math.min(qj / bhi | 0, 67108863);\n          a._ishlnsubmul(b, qj, j);\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n            a._ishlnsubmul(b, 1, j);\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n        if (q) {\n          q._strip();\n        }\n        a._strip();\n        if (mode !== \"div\" && shift !== 0) {\n          a.iushrn(shift);\n        }\n        return {\n          div: q || null,\n          mod: a\n        };\n      };\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n          return {\n            div,\n            mod\n          };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          return {\n            div,\n            mod: res.mod\n          };\n        }\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n          return {\n            div: res.div,\n            mod\n          };\n        }\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        }\n        if (num.length === 1) {\n          if (mode === \"div\") {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n          if (mode === \"mod\") {\n            return {\n              div: null,\n              mod: new BN(this.modrn(num.words[0]))\n            };\n          }\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modrn(num.words[0]))\n          };\n        }\n        return this._wordDiv(num, mode);\n      };\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n      };\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n      };\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n      };\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        if (dm.mod.isZero())\n          return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        if (cmp < 0 || r2 === 1 && cmp === 0)\n          return dm.div;\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n      BN.prototype.modrn = function modrn(num) {\n        var isNegNum = num < 0;\n        if (isNegNum)\n          num = -num;\n        assert(num <= 67108863);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return isNegNum ? -acc : acc;\n      };\n      BN.prototype.modn = function modn(num) {\n        return this.modrn(num);\n      };\n      BN.prototype.idivn = function idivn(num) {\n        var isNegNum = num < 0;\n        if (isNegNum)\n          num = -num;\n        assert(num <= 67108863);\n        var carry = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 67108864;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n        this._strip();\n        return isNegNum ? this.ineg() : this;\n      };\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        }\n        var A = new BN(1);\n        var B = new BN(0);\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            x.iushrn(i);\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            y.iushrn(j);\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      };\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            a.iushrn(i);\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n              x1.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            b.iushrn(j);\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n              x2.iushrn(1);\n            }\n          }\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n        return res;\n      };\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero())\n          return num.abs();\n        if (num.isZero())\n          return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n          var r = a.cmp(b);\n          if (r < 0) {\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n          a.isub(b);\n        } while (true);\n        return b.iushln(shift);\n      };\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      };\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      };\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s) {\n          this._expand(s + 1);\n          this.words[s] |= q;\n          return this;\n        }\n        var carry = q;\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 67108863;\n          this.words[i] = w;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative)\n          return -1;\n        if (this.negative === 0 && negative)\n          return 1;\n        this._strip();\n        var res;\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n          assert(num <= 67108863, \"Number is too big\");\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0)\n          return -1;\n        if (this.negative === 0 && num.negative !== 0)\n          return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.ucmp = function ucmp(num) {\n        if (this.length > num.length)\n          return 1;\n        if (this.length < num.length)\n          return -1;\n        var res = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b)\n            continue;\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n          break;\n        }\n        return res;\n      };\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      };\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n      };\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n      };\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n      };\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n      };\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n      };\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n      };\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n      };\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n      };\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n      };\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n      };\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n      };\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n      };\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n      };\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n      };\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n      };\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function MPrime(name, p) {\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n      MPrime.prototype.ireduce = function ireduce(num) {\n        var r = num;\n        var rlen;\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== void 0) {\n            r.strip();\n          } else {\n            r._strip();\n          }\n        }\n        return r;\n      };\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n      function K256() {\n        MPrime.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      inherits(K256, MPrime);\n      K256.prototype.split = function split(input, output) {\n        var mask = 4194303;\n        var outLen = Math.min(input.length, 9);\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        }\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n      K256.prototype.imulK = function imulK(num) {\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        var lo = 0;\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 977;\n          num.words[i] = lo & 67108863;\n          lo = w * 64 + (lo / 67108864 | 0);\n        }\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n        return num;\n      };\n      function P224() {\n        MPrime.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      inherits(P224, MPrime);\n      function P192() {\n        MPrime.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      inherits(P192, MPrime);\n      function P25519() {\n        MPrime.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      inherits(P25519, MPrime);\n      P25519.prototype.imulK = function imulK(num) {\n        var carry = 0;\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 19 + carry;\n          var lo = hi & 67108863;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n        return num;\n      };\n      BN._prime = function prime(name) {\n        if (primes[name])\n          return primes[name];\n        var prime2;\n        if (name === \"k256\") {\n          prime2 = new K256();\n        } else if (name === \"p224\") {\n          prime2 = new P224();\n        } else if (name === \"p192\") {\n          prime2 = new P192();\n        } else if (name === \"p25519\") {\n          prime2 = new P25519();\n        } else {\n          throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime2;\n        return prime2;\n      };\n      function Red(m) {\n        if (typeof m === \"string\") {\n          var prime = BN._prime(m);\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), \"modulus must be greater than 1\");\n          this.m = m;\n          this.prime = null;\n        }\n      }\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n      };\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(\n          a.red && a.red === b.red,\n          \"red works only with red numbers\"\n        );\n      };\n      Red.prototype.imod = function imod(a) {\n        if (this.prime)\n          return this.prime.ireduce(a)._forceRed(this);\n        move(a, a.umod(this.m)._forceRed(this));\n        return a;\n      };\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n      };\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res;\n      };\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res;\n      };\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n      };\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n      };\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n      };\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero())\n          return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        }\n        var q = this.m.subn(1);\n        var s = 0;\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n        return r;\n      };\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero())\n          return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0)\n          return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n          start = 26;\n        }\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0))\n              continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n          start = 26;\n        }\n        return res;\n      };\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      };\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n      inherits(Mont, Red);\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero())\n          return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.invm = function invm(a) {\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(typeof module === \"undefined\" || module, exports);\n  }\n});\n\n// node_modules/browserify-rsa/index.js\nvar require_browserify_rsa = __commonJS({\n  \"node_modules/browserify-rsa/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn3();\n    var randomBytes = require_browser();\n    function blind(priv) {\n      var r = getr(priv);\n      var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();\n      return { blinder, unblinder: r.invm(priv.modulus) };\n    }\n    function getr(priv) {\n      var len = priv.modulus.byteLength();\n      var r;\n      do {\n        r = new BN(randomBytes(len));\n      } while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2));\n      return r;\n    }\n    function crt(msg, priv) {\n      var blinds = blind(priv);\n      var len = priv.modulus.byteLength();\n      var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);\n      var c1 = blinded.toRed(BN.mont(priv.prime1));\n      var c2 = blinded.toRed(BN.mont(priv.prime2));\n      var qinv = priv.coefficient;\n      var p = priv.prime1;\n      var q = priv.prime2;\n      var m1 = c1.redPow(priv.exponent1).fromRed();\n      var m2 = c2.redPow(priv.exponent2).fromRed();\n      var h = m1.isub(m2).imul(qinv).umod(p).imul(q);\n      return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, \"be\", len);\n    }\n    crt.getr = getr;\n    module.exports = crt;\n  }\n});\n\n// node_modules/elliptic/package.json\nvar require_package = __commonJS({\n  \"node_modules/elliptic/package.json\"(exports, module) {\n    module.exports = {\n      name: \"elliptic\",\n      version: \"6.5.4\",\n      description: \"EC cryptography\",\n      main: \"lib/elliptic.js\",\n      files: [\n        \"lib\"\n      ],\n      scripts: {\n        lint: \"eslint lib test\",\n        \"lint:fix\": \"npm run lint -- --fix\",\n        unit: \"istanbul test _mocha --reporter=spec test/index.js\",\n        test: \"npm run lint && npm run unit\",\n        version: \"grunt dist && git add dist/\"\n      },\n      repository: {\n        type: \"git\",\n        url: \"git@github.com:indutny/elliptic\"\n      },\n      keywords: [\n        \"EC\",\n        \"Elliptic\",\n        \"curve\",\n        \"Cryptography\"\n      ],\n      author: \"Fedor Indutny <fedor@indutny.com>\",\n      license: \"MIT\",\n      bugs: {\n        url: \"https://github.com/indutny/elliptic/issues\"\n      },\n      homepage: \"https://github.com/indutny/elliptic\",\n      devDependencies: {\n        brfs: \"^2.0.2\",\n        coveralls: \"^3.1.0\",\n        eslint: \"^7.6.0\",\n        grunt: \"^1.2.1\",\n        \"grunt-browserify\": \"^5.3.0\",\n        \"grunt-cli\": \"^1.3.2\",\n        \"grunt-contrib-connect\": \"^3.0.0\",\n        \"grunt-contrib-copy\": \"^1.0.0\",\n        \"grunt-contrib-uglify\": \"^5.0.0\",\n        \"grunt-mocha-istanbul\": \"^5.0.2\",\n        \"grunt-saucelabs\": \"^9.0.1\",\n        istanbul: \"^0.4.5\",\n        mocha: \"^8.0.1\"\n      },\n      dependencies: {\n        \"bn.js\": \"^4.11.9\",\n        brorand: \"^1.1.0\",\n        \"hash.js\": \"^1.0.0\",\n        \"hmac-drbg\": \"^1.0.1\",\n        inherits: \"^2.0.4\",\n        \"minimalistic-assert\": \"^1.0.1\",\n        \"minimalistic-crypto-utils\": \"^1.0.1\"\n      }\n    };\n  }\n});\n\n// node_modules/elliptic/node_modules/bn.js/lib/bn.js\nvar require_bn4 = __commonJS({\n  \"node_modules/elliptic/node_modules/bn.js/lib/bn.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    (function(module2, exports2) {\n      \"use strict\";\n      function assert(val, msg) {\n        if (!val)\n          throw new Error(msg || \"Assertion failed\");\n      }\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {\n        };\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      }\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        this.red = null;\n        if (number !== null) {\n          if (base === \"le\" || base === \"be\") {\n            endian = base;\n            base = 10;\n          }\n          this._init(number || 0, base || 10, endian || \"be\");\n        }\n      }\n      if (typeof module2 === \"object\") {\n        module2.exports = BN;\n      } else {\n        exports2.BN = BN;\n      }\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer2;\n      try {\n        if (typeof window !== \"undefined\" && typeof window.Buffer !== \"undefined\") {\n          Buffer2 = window.Buffer;\n        } else {\n          Buffer2 = require_buffer_polyfill().Buffer;\n        }\n      } catch (e) {\n      }\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0)\n          return left;\n        return right;\n      };\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0)\n          return left;\n        return right;\n      };\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n          return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n          return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n          base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n          start++;\n          this.negative = 1;\n        }\n        if (start < number.length) {\n          if (base === 16) {\n            this._parseHex(number, start, endian);\n          } else {\n            this._parseBase(number, base, start);\n            if (endian === \"le\") {\n              this._initArray(this.toArray(), base, endian);\n            }\n          }\n        }\n      };\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n        if (number < 67108864) {\n          this.words = [number & 67108863];\n          this.length = 1;\n        } else if (number < 4503599627370496) {\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863\n          ];\n          this.length = 2;\n        } else {\n          assert(number < 9007199254740992);\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863,\n            1\n          ];\n          this.length = 3;\n        }\n        if (endian !== \"le\")\n          return;\n        this._initArray(this.toArray(), base, endian);\n      };\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === \"le\") {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n        return this.strip();\n      };\n      function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        if (c >= 65 && c <= 70) {\n          return c - 55;\n        } else if (c >= 97 && c <= 102) {\n          return c - 87;\n        } else {\n          return c - 48 & 15;\n        }\n      }\n      function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n          r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n      }\n      BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n          for (i = number.length - 1; i >= start; i -= 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        } else {\n          var parseLength = number.length - start;\n          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        }\n        this.strip();\n      };\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul;\n          if (c >= 49) {\n            r += c - 49 + 10;\n          } else if (c >= 17) {\n            r += c - 17 + 10;\n          } else {\n            r += c;\n          }\n        }\n        return r;\n      }\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        this.words = [0];\n        this.length = 1;\n        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {\n          limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n          this.imuln(pow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        this.strip();\n      };\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n        return this;\n      };\n      BN.prototype.strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n        return this._normSign();\n      };\n      BN.prototype._normSign = function _normSign() {\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n        return this;\n      };\n      BN.prototype.inspect = function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      };\n      var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ];\n      var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ];\n      var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n          out = \"\";\n          var off = 0;\n          var carry = 0;\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 16777215).toString(16);\n            carry = w >>> 24 - off & 16777215;\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n            off += 2;\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n          }\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          var groupSize = groupSizes[base];\n          var groupBase = groupBases[base];\n          out = \"\";\n          var c = this.clone();\n          c.negative = 0;\n          while (!c.isZero()) {\n            var r = c.modn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n          if (this.isZero()) {\n            out = \"0\" + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n      };\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n          ret += this.words[1] * 67108864;\n        } else if (this.length === 3 && this.words[2] === 1) {\n          ret += 4503599627370496 + this.words[1] * 67108864;\n        } else if (this.length > 2) {\n          assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n      };\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n      };\n      BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer2 !== \"undefined\");\n        return this.toArrayLike(Buffer2, endian, length);\n      };\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        this.strip();\n        var littleEndian = endian === \"le\";\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n        if (!littleEndian) {\n          for (i = 0; i < reqLength - byteLength; i++) {\n            res[i] = 0;\n          }\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[reqLength - i - 1] = b;\n          }\n        } else {\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[i] = b;\n          }\n          for (; i < reqLength; i++) {\n            res[i] = 0;\n          }\n        }\n        return res;\n      };\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n          if (t >= 4096) {\n            r += 13;\n            t >>>= 13;\n          }\n          if (t >= 64) {\n            r += 7;\n            t >>>= 7;\n          }\n          if (t >= 8) {\n            r += 4;\n            t >>>= 4;\n          }\n          if (t >= 2) {\n            r += 2;\n            t >>>= 2;\n          }\n          return r + t;\n        };\n      }\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        if (w === 0)\n          return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 8191) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n        if ((t & 127) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n        if ((t & 15) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n        if ((t & 3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n        if ((t & 1) === 0) {\n          r++;\n        }\n        return r;\n      };\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n      };\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n        return w;\n      }\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero())\n          return 0;\n        var r = 0;\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n          r += b;\n          if (b !== 26)\n            break;\n        }\n        return r;\n      };\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n      };\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n      };\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      };\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n        return this;\n      };\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n        return this.strip();\n      };\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      };\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length)\n          return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length)\n          return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      };\n      BN.prototype.iuand = function iuand(num) {\n        var b;\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this.strip();\n      };\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      };\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length)\n          return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length)\n          return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      };\n      BN.prototype.iuxor = function iuxor(num) {\n        var a;\n        var b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = a.length;\n        return this.strip();\n      };\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      };\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length)\n          return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length)\n          return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      };\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        }\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 67108863;\n        }\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;\n        }\n        return this.strip();\n      };\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      };\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this.strip();\n      };\n      BN.prototype.iadd = function iadd(num) {\n        var r;\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign();\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        }\n        var a, b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++;\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        return this;\n      };\n      BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n        if (this.length > num.length)\n          return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      };\n      BN.prototype.isub = function isub(num) {\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign();\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        }\n        var cmp = this.cmp(num);\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        }\n        var a, b;\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n          this.negative = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n      function smallMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        var len = self2.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        var a = self2.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 67108863;\n        var carry = r / 67108864 | 0;\n        out.words[0] = lo;\n        for (var k = 1; k < len; k++) {\n          var ncarry = carry >>> 26;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self2.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 67108864 | 0;\n            rword = r & 67108863;\n          }\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      var comb10MulTo = function comb10MulTo2(self2, num, out) {\n        var a = self2.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 8191;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 8191;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 8191;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 8191;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 8191;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 8191;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 8191;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 8191;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 8191;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 8191;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 8191;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 8191;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 8191;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 8191;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 8191;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 8191;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 8191;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 8191;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 8191;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 8191;\n        var bh9 = b9 >>> 13;\n        out.negative = self2.negative ^ num.negative;\n        out.length = 19;\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 67108863;\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 67108863;\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 67108863;\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 67108863;\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 67108863;\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 67108863;\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 67108863;\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 67108863;\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 67108863;\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 67108863;\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 67108863;\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 67108863;\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 67108863;\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 67108863;\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 67108863;\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 67108863;\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 67108863;\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 67108863;\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 67108863;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n        return out;\n      };\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n      function bigMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        out.length = self2.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for (var k = 0; k < out.length - 1; k++) {\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self2.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 67108863;\n            ncarry = ncarry + (r / 67108864 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 67108863;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 67108863;\n          }\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      function jumboMulTo(self2, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self2, num, out);\n      }\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n        return res;\n      };\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n        return t;\n      };\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1)\n          return x;\n        var rb = 0;\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n        return rb;\n      };\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n        return 1 << i + 1 + odd;\n      };\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1)\n          return;\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 67108863;\n          if (w < 67108864) {\n            carry = 0;\n          } else {\n            carry = w / 67108864 | 0;\n          }\n        }\n        return ws;\n      };\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 8191;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 8191;\n          carry = carry >>> 13;\n        }\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~8191) === 0);\n      };\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n        return ph;\n      };\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n      };\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      };\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      };\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n      BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        var carry = 0;\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 67108863) + (carry & 67108863);\n          carry >>= 26;\n          carry += w / 67108864 | 0;\n          carry += lo >>> 26;\n          this.words[i] = lo & 67108863;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      };\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      };\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      };\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0)\n          return new BN(1);\n        var res = this;\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0)\n            break;\n        }\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0)\n              continue;\n            res = res.mul(q);\n          }\n        }\n        return res;\n      };\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 67108863 >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n          var carry = 0;\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n          this.length += s;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishln = function ishln(bits) {\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      };\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 67108863 ^ 67108863 >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n          maskedWords.length = s;\n        }\n        if (s === 0) {\n        } else if (this.length > s) {\n          this.length -= s;\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        }\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      };\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      };\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      };\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s)\n          return false;\n        var w = this.words[s];\n        return !!(w & q);\n      };\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n          return this;\n        }\n        if (r !== 0) {\n          s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n          var mask = 67108863 ^ 67108863 >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n        return this.strip();\n      };\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      };\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.isubn(-num);\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) < num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        }\n        return this._iaddn(num);\n      };\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {\n          this.words[i] -= 67108864;\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      };\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.iaddn(-num);\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 67108864;\n            this.words[i + 1] -= 1;\n          }\n        }\n        return this.strip();\n      };\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 67108863;\n          carry = (w >> 26) - (right / 67108864 | 0);\n          this.words[i + shift] = w & 67108863;\n        }\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 67108863;\n        }\n        if (carry === 0)\n          return this.strip();\n        assert(carry === -1);\n        carry = 0;\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 67108863;\n        }\n        this.negative = 1;\n        return this.strip();\n      };\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        }\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n          a = diff;\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);\n          qj = Math.min(qj / bhi | 0, 67108863);\n          a._ishlnsubmul(b, qj, j);\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n            a._ishlnsubmul(b, 1, j);\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n        if (q) {\n          q.strip();\n        }\n        a.strip();\n        if (mode !== \"div\" && shift !== 0) {\n          a.iushrn(shift);\n        }\n        return {\n          div: q || null,\n          mod: a\n        };\n      };\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n          return {\n            div,\n            mod\n          };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          return {\n            div,\n            mod: res.mod\n          };\n        }\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n          return {\n            div: res.div,\n            mod\n          };\n        }\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        }\n        if (num.length === 1) {\n          if (mode === \"div\") {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n          if (mode === \"mod\") {\n            return {\n              div: null,\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n        return this._wordDiv(num, mode);\n      };\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n      };\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n      };\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n      };\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        if (dm.mod.isZero())\n          return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        if (cmp < 0 || r2 === 1 && cmp === 0)\n          return dm.div;\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n      BN.prototype.modn = function modn(num) {\n        assert(num <= 67108863);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return acc;\n      };\n      BN.prototype.idivn = function idivn(num) {\n        assert(num <= 67108863);\n        var carry = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 67108864;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n        return this.strip();\n      };\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        }\n        var A = new BN(1);\n        var B = new BN(0);\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            x.iushrn(i);\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            y.iushrn(j);\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      };\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            a.iushrn(i);\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n              x1.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            b.iushrn(j);\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n              x2.iushrn(1);\n            }\n          }\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n        return res;\n      };\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero())\n          return num.abs();\n        if (num.isZero())\n          return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n          var r = a.cmp(b);\n          if (r < 0) {\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n          a.isub(b);\n        } while (true);\n        return b.iushln(shift);\n      };\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      };\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      };\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s) {\n          this._expand(s + 1);\n          this.words[s] |= q;\n          return this;\n        }\n        var carry = q;\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 67108863;\n          this.words[i] = w;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative)\n          return -1;\n        if (this.negative === 0 && negative)\n          return 1;\n        this.strip();\n        var res;\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n          assert(num <= 67108863, \"Number is too big\");\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0)\n          return -1;\n        if (this.negative === 0 && num.negative !== 0)\n          return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.ucmp = function ucmp(num) {\n        if (this.length > num.length)\n          return 1;\n        if (this.length < num.length)\n          return -1;\n        var res = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b)\n            continue;\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n          break;\n        }\n        return res;\n      };\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      };\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n      };\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n      };\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n      };\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n      };\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n      };\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n      };\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n      };\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n      };\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n      };\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n      };\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n      };\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n      };\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n      };\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n      };\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n      };\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function MPrime(name, p) {\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n      MPrime.prototype.ireduce = function ireduce(num) {\n        var r = num;\n        var rlen;\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== void 0) {\n            r.strip();\n          } else {\n            r._strip();\n          }\n        }\n        return r;\n      };\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n      function K256() {\n        MPrime.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      inherits(K256, MPrime);\n      K256.prototype.split = function split(input, output) {\n        var mask = 4194303;\n        var outLen = Math.min(input.length, 9);\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        }\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n      K256.prototype.imulK = function imulK(num) {\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        var lo = 0;\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 977;\n          num.words[i] = lo & 67108863;\n          lo = w * 64 + (lo / 67108864 | 0);\n        }\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n        return num;\n      };\n      function P224() {\n        MPrime.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      inherits(P224, MPrime);\n      function P192() {\n        MPrime.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      inherits(P192, MPrime);\n      function P25519() {\n        MPrime.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      inherits(P25519, MPrime);\n      P25519.prototype.imulK = function imulK(num) {\n        var carry = 0;\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 19 + carry;\n          var lo = hi & 67108863;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n        return num;\n      };\n      BN._prime = function prime(name) {\n        if (primes[name])\n          return primes[name];\n        var prime2;\n        if (name === \"k256\") {\n          prime2 = new K256();\n        } else if (name === \"p224\") {\n          prime2 = new P224();\n        } else if (name === \"p192\") {\n          prime2 = new P192();\n        } else if (name === \"p25519\") {\n          prime2 = new P25519();\n        } else {\n          throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime2;\n        return prime2;\n      };\n      function Red(m) {\n        if (typeof m === \"string\") {\n          var prime = BN._prime(m);\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), \"modulus must be greater than 1\");\n          this.m = m;\n          this.prime = null;\n        }\n      }\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n      };\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(\n          a.red && a.red === b.red,\n          \"red works only with red numbers\"\n        );\n      };\n      Red.prototype.imod = function imod(a) {\n        if (this.prime)\n          return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n      };\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n      };\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res;\n      };\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res;\n      };\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n      };\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n      };\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n      };\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero())\n          return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        }\n        var q = this.m.subn(1);\n        var s = 0;\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n        return r;\n      };\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero())\n          return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0)\n          return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n          start = 26;\n        }\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0))\n              continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n          start = 26;\n        }\n        return res;\n      };\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      };\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n      inherits(Mont, Red);\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero())\n          return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.invm = function invm(a) {\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(typeof module === \"undefined\" || module, exports);\n  }\n});\n\n// node_modules/minimalistic-crypto-utils/lib/utils.js\nvar require_utils2 = __commonJS({\n  \"node_modules/minimalistic-crypto-utils/lib/utils.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = exports;\n    function toArray(msg, enc) {\n      if (Array.isArray(msg))\n        return msg.slice();\n      if (!msg)\n        return [];\n      var res = [];\n      if (typeof msg !== \"string\") {\n        for (var i = 0; i < msg.length; i++)\n          res[i] = msg[i] | 0;\n        return res;\n      }\n      if (enc === \"hex\") {\n        msg = msg.replace(/[^a-z0-9]+/ig, \"\");\n        if (msg.length % 2 !== 0)\n          msg = \"0\" + msg;\n        for (var i = 0; i < msg.length; i += 2)\n          res.push(parseInt(msg[i] + msg[i + 1], 16));\n      } else {\n        for (var i = 0; i < msg.length; i++) {\n          var c = msg.charCodeAt(i);\n          var hi = c >> 8;\n          var lo = c & 255;\n          if (hi)\n            res.push(hi, lo);\n          else\n            res.push(lo);\n        }\n      }\n      return res;\n    }\n    utils.toArray = toArray;\n    function zero2(word) {\n      if (word.length === 1)\n        return \"0\" + word;\n      else\n        return word;\n    }\n    utils.zero2 = zero2;\n    function toHex(msg) {\n      var res = \"\";\n      for (var i = 0; i < msg.length; i++)\n        res += zero2(msg[i].toString(16));\n      return res;\n    }\n    utils.toHex = toHex;\n    utils.encode = function encode(arr, enc) {\n      if (enc === \"hex\")\n        return toHex(arr);\n      else\n        return arr;\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/utils.js\nvar require_utils3 = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/utils.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = exports;\n    var BN = require_bn4();\n    var minAssert = require_minimalistic_assert();\n    var minUtils = require_utils2();\n    utils.assert = minAssert;\n    utils.toArray = minUtils.toArray;\n    utils.zero2 = minUtils.zero2;\n    utils.toHex = minUtils.toHex;\n    utils.encode = minUtils.encode;\n    function getNAF(num, w, bits) {\n      var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n      naf.fill(0);\n      var ws = 1 << w + 1;\n      var k = num.clone();\n      for (var i = 0; i < naf.length; i++) {\n        var z;\n        var mod = k.andln(ws - 1);\n        if (k.isOdd()) {\n          if (mod > (ws >> 1) - 1)\n            z = (ws >> 1) - mod;\n          else\n            z = mod;\n          k.isubn(z);\n        } else {\n          z = 0;\n        }\n        naf[i] = z;\n        k.iushrn(1);\n      }\n      return naf;\n    }\n    utils.getNAF = getNAF;\n    function getJSF(k1, k2) {\n      var jsf = [\n        [],\n        []\n      ];\n      k1 = k1.clone();\n      k2 = k2.clone();\n      var d1 = 0;\n      var d2 = 0;\n      var m8;\n      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n        var m14 = k1.andln(3) + d1 & 3;\n        var m24 = k2.andln(3) + d2 & 3;\n        if (m14 === 3)\n          m14 = -1;\n        if (m24 === 3)\n          m24 = -1;\n        var u1;\n        if ((m14 & 1) === 0) {\n          u1 = 0;\n        } else {\n          m8 = k1.andln(7) + d1 & 7;\n          if ((m8 === 3 || m8 === 5) && m24 === 2)\n            u1 = -m14;\n          else\n            u1 = m14;\n        }\n        jsf[0].push(u1);\n        var u2;\n        if ((m24 & 1) === 0) {\n          u2 = 0;\n        } else {\n          m8 = k2.andln(7) + d2 & 7;\n          if ((m8 === 3 || m8 === 5) && m14 === 2)\n            u2 = -m24;\n          else\n            u2 = m24;\n        }\n        jsf[1].push(u2);\n        if (2 * d1 === u1 + 1)\n          d1 = 1 - d1;\n        if (2 * d2 === u2 + 1)\n          d2 = 1 - d2;\n        k1.iushrn(1);\n        k2.iushrn(1);\n      }\n      return jsf;\n    }\n    utils.getJSF = getJSF;\n    function cachedProperty(obj, name, computer) {\n      var key = \"_\" + name;\n      obj.prototype[name] = function cachedProperty2() {\n        return this[key] !== void 0 ? this[key] : this[key] = computer.call(this);\n      };\n    }\n    utils.cachedProperty = cachedProperty;\n    function parseBytes(bytes) {\n      return typeof bytes === \"string\" ? utils.toArray(bytes, \"hex\") : bytes;\n    }\n    utils.parseBytes = parseBytes;\n    function intFromLE(bytes) {\n      return new BN(bytes, \"hex\", \"le\");\n    }\n    utils.intFromLE = intFromLE;\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/curve/base.js\nvar require_base = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/curve/base.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn4();\n    var utils = require_utils3();\n    var getNAF = utils.getNAF;\n    var getJSF = utils.getJSF;\n    var assert = utils.assert;\n    function BaseCurve(type, conf) {\n      this.type = type;\n      this.p = new BN(conf.p, 16);\n      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n      this.zero = new BN(0).toRed(this.red);\n      this.one = new BN(1).toRed(this.red);\n      this.two = new BN(2).toRed(this.red);\n      this.n = conf.n && new BN(conf.n, 16);\n      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n      this._wnafT1 = new Array(4);\n      this._wnafT2 = new Array(4);\n      this._wnafT3 = new Array(4);\n      this._wnafT4 = new Array(4);\n      this._bitLength = this.n ? this.n.bitLength() : 0;\n      var adjustCount = this.n && this.p.div(this.n);\n      if (!adjustCount || adjustCount.cmpn(100) > 0) {\n        this.redN = null;\n      } else {\n        this._maxwellTrick = true;\n        this.redN = this.n.toRed(this.red);\n      }\n    }\n    module.exports = BaseCurve;\n    BaseCurve.prototype.point = function point() {\n      throw new Error(\"Not implemented\");\n    };\n    BaseCurve.prototype.validate = function validate() {\n      throw new Error(\"Not implemented\");\n    };\n    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n      assert(p.precomputed);\n      var doubles = p._getDoubles();\n      var naf = getNAF(k, 1, this._bitLength);\n      var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);\n      I /= 3;\n      var repr = [];\n      var j;\n      var nafW;\n      for (j = 0; j < naf.length; j += doubles.step) {\n        nafW = 0;\n        for (var l = j + doubles.step - 1; l >= j; l--)\n          nafW = (nafW << 1) + naf[l];\n        repr.push(nafW);\n      }\n      var a = this.jpoint(null, null, null);\n      var b = this.jpoint(null, null, null);\n      for (var i = I; i > 0; i--) {\n        for (j = 0; j < repr.length; j++) {\n          nafW = repr[j];\n          if (nafW === i)\n            b = b.mixedAdd(doubles.points[j]);\n          else if (nafW === -i)\n            b = b.mixedAdd(doubles.points[j].neg());\n        }\n        a = a.add(b);\n      }\n      return a.toP();\n    };\n    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n      var w = 4;\n      var nafPoints = p._getNAFPoints(w);\n      w = nafPoints.wnd;\n      var wnd = nafPoints.points;\n      var naf = getNAF(k, w, this._bitLength);\n      var acc = this.jpoint(null, null, null);\n      for (var i = naf.length - 1; i >= 0; i--) {\n        for (var l = 0; i >= 0 && naf[i] === 0; i--)\n          l++;\n        if (i >= 0)\n          l++;\n        acc = acc.dblp(l);\n        if (i < 0)\n          break;\n        var z = naf[i];\n        assert(z !== 0);\n        if (p.type === \"affine\") {\n          if (z > 0)\n            acc = acc.mixedAdd(wnd[z - 1 >> 1]);\n          else\n            acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());\n        } else {\n          if (z > 0)\n            acc = acc.add(wnd[z - 1 >> 1]);\n          else\n            acc = acc.add(wnd[-z - 1 >> 1].neg());\n        }\n      }\n      return p.type === \"affine\" ? acc.toP() : acc;\n    };\n    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {\n      var wndWidth = this._wnafT1;\n      var wnd = this._wnafT2;\n      var naf = this._wnafT3;\n      var max = 0;\n      var i;\n      var j;\n      var p;\n      for (i = 0; i < len; i++) {\n        p = points[i];\n        var nafPoints = p._getNAFPoints(defW);\n        wndWidth[i] = nafPoints.wnd;\n        wnd[i] = nafPoints.points;\n      }\n      for (i = len - 1; i >= 1; i -= 2) {\n        var a = i - 1;\n        var b = i;\n        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n          max = Math.max(naf[a].length, max);\n          max = Math.max(naf[b].length, max);\n          continue;\n        }\n        var comb = [\n          points[a],\n          /* 1 */\n          null,\n          /* 3 */\n          null,\n          /* 5 */\n          points[b]\n          /* 7 */\n        ];\n        if (points[a].y.cmp(points[b].y) === 0) {\n          comb[1] = points[a].add(points[b]);\n          comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n          comb[1] = points[a].toJ().mixedAdd(points[b]);\n          comb[2] = points[a].add(points[b].neg());\n        } else {\n          comb[1] = points[a].toJ().mixedAdd(points[b]);\n          comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n        }\n        var index = [\n          -3,\n          /* -1 -1 */\n          -1,\n          /* -1 0 */\n          -5,\n          /* -1 1 */\n          -7,\n          /* 0 -1 */\n          0,\n          /* 0 0 */\n          7,\n          /* 0 1 */\n          5,\n          /* 1 -1 */\n          1,\n          /* 1 0 */\n          3\n          /* 1 1 */\n        ];\n        var jsf = getJSF(coeffs[a], coeffs[b]);\n        max = Math.max(jsf[0].length, max);\n        naf[a] = new Array(max);\n        naf[b] = new Array(max);\n        for (j = 0; j < max; j++) {\n          var ja = jsf[0][j] | 0;\n          var jb = jsf[1][j] | 0;\n          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n          naf[b][j] = 0;\n          wnd[a] = comb;\n        }\n      }\n      var acc = this.jpoint(null, null, null);\n      var tmp = this._wnafT4;\n      for (i = max; i >= 0; i--) {\n        var k = 0;\n        while (i >= 0) {\n          var zero = true;\n          for (j = 0; j < len; j++) {\n            tmp[j] = naf[j][i] | 0;\n            if (tmp[j] !== 0)\n              zero = false;\n          }\n          if (!zero)\n            break;\n          k++;\n          i--;\n        }\n        if (i >= 0)\n          k++;\n        acc = acc.dblp(k);\n        if (i < 0)\n          break;\n        for (j = 0; j < len; j++) {\n          var z = tmp[j];\n          p;\n          if (z === 0)\n            continue;\n          else if (z > 0)\n            p = wnd[j][z - 1 >> 1];\n          else if (z < 0)\n            p = wnd[j][-z - 1 >> 1].neg();\n          if (p.type === \"affine\")\n            acc = acc.mixedAdd(p);\n          else\n            acc = acc.add(p);\n        }\n      }\n      for (i = 0; i < len; i++)\n        wnd[i] = null;\n      if (jacobianResult)\n        return acc;\n      else\n        return acc.toP();\n    };\n    function BasePoint(curve, type) {\n      this.curve = curve;\n      this.type = type;\n      this.precomputed = null;\n    }\n    BaseCurve.BasePoint = BasePoint;\n    BasePoint.prototype.eq = function eq() {\n      throw new Error(\"Not implemented\");\n    };\n    BasePoint.prototype.validate = function validate() {\n      return this.curve.validate(this);\n    };\n    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n      bytes = utils.toArray(bytes, enc);\n      var len = this.p.byteLength();\n      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {\n        if (bytes[0] === 6)\n          assert(bytes[bytes.length - 1] % 2 === 0);\n        else if (bytes[0] === 7)\n          assert(bytes[bytes.length - 1] % 2 === 1);\n        var res = this.point(\n          bytes.slice(1, 1 + len),\n          bytes.slice(1 + len, 1 + 2 * len)\n        );\n        return res;\n      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {\n        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);\n      }\n      throw new Error(\"Unknown point format\");\n    };\n    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n      return this.encode(enc, true);\n    };\n    BasePoint.prototype._encode = function _encode(compact) {\n      var len = this.curve.p.byteLength();\n      var x = this.getX().toArray(\"be\", len);\n      if (compact)\n        return [this.getY().isEven() ? 2 : 3].concat(x);\n      return [4].concat(x, this.getY().toArray(\"be\", len));\n    };\n    BasePoint.prototype.encode = function encode(enc, compact) {\n      return utils.encode(this._encode(compact), enc);\n    };\n    BasePoint.prototype.precompute = function precompute(power) {\n      if (this.precomputed)\n        return this;\n      var precomputed = {\n        doubles: null,\n        naf: null,\n        beta: null\n      };\n      precomputed.naf = this._getNAFPoints(8);\n      precomputed.doubles = this._getDoubles(4, power);\n      precomputed.beta = this._getBeta();\n      this.precomputed = precomputed;\n      return this;\n    };\n    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n      if (!this.precomputed)\n        return false;\n      var doubles = this.precomputed.doubles;\n      if (!doubles)\n        return false;\n      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n    };\n    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n      if (this.precomputed && this.precomputed.doubles)\n        return this.precomputed.doubles;\n      var doubles = [this];\n      var acc = this;\n      for (var i = 0; i < power; i += step) {\n        for (var j = 0; j < step; j++)\n          acc = acc.dbl();\n        doubles.push(acc);\n      }\n      return {\n        step,\n        points: doubles\n      };\n    };\n    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n      if (this.precomputed && this.precomputed.naf)\n        return this.precomputed.naf;\n      var res = [this];\n      var max = (1 << wnd) - 1;\n      var dbl = max === 1 ? null : this.dbl();\n      for (var i = 1; i < max; i++)\n        res[i] = res[i - 1].add(dbl);\n      return {\n        wnd,\n        points: res\n      };\n    };\n    BasePoint.prototype._getBeta = function _getBeta() {\n      return null;\n    };\n    BasePoint.prototype.dblp = function dblp(k) {\n      var r = this;\n      for (var i = 0; i < k; i++)\n        r = r.dbl();\n      return r;\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/curve/short.js\nvar require_short = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/curve/short.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils3();\n    var BN = require_bn4();\n    var inherits = require_inherits_browser();\n    var Base = require_base();\n    var assert = utils.assert;\n    function ShortCurve(conf) {\n      Base.call(this, \"short\", conf);\n      this.a = new BN(conf.a, 16).toRed(this.red);\n      this.b = new BN(conf.b, 16).toRed(this.red);\n      this.tinv = this.two.redInvm();\n      this.zeroA = this.a.fromRed().cmpn(0) === 0;\n      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n      this.endo = this._getEndomorphism(conf);\n      this._endoWnafT1 = new Array(4);\n      this._endoWnafT2 = new Array(4);\n    }\n    inherits(ShortCurve, Base);\n    module.exports = ShortCurve;\n    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)\n        return;\n      var beta;\n      var lambda;\n      if (conf.beta) {\n        beta = new BN(conf.beta, 16).toRed(this.red);\n      } else {\n        var betas = this._getEndoRoots(this.p);\n        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n        beta = beta.toRed(this.red);\n      }\n      if (conf.lambda) {\n        lambda = new BN(conf.lambda, 16);\n      } else {\n        var lambdas = this._getEndoRoots(this.n);\n        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n          lambda = lambdas[0];\n        } else {\n          lambda = lambdas[1];\n          assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n        }\n      }\n      var basis;\n      if (conf.basis) {\n        basis = conf.basis.map(function(vec) {\n          return {\n            a: new BN(vec.a, 16),\n            b: new BN(vec.b, 16)\n          };\n        });\n      } else {\n        basis = this._getEndoBasis(lambda);\n      }\n      return {\n        beta,\n        lambda,\n        basis\n      };\n    };\n    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n      var red = num === this.p ? this.red : BN.mont(num);\n      var tinv = new BN(2).toRed(red).redInvm();\n      var ntinv = tinv.redNeg();\n      var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n      var l1 = ntinv.redAdd(s).fromRed();\n      var l2 = ntinv.redSub(s).fromRed();\n      return [l1, l2];\n    };\n    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n      var u = lambda;\n      var v = this.n.clone();\n      var x1 = new BN(1);\n      var y1 = new BN(0);\n      var x2 = new BN(0);\n      var y2 = new BN(1);\n      var a0;\n      var b0;\n      var a1;\n      var b1;\n      var a2;\n      var b2;\n      var prevR;\n      var i = 0;\n      var r;\n      var x;\n      while (u.cmpn(0) !== 0) {\n        var q = v.div(u);\n        r = v.sub(q.mul(u));\n        x = x2.sub(q.mul(x1));\n        var y = y2.sub(q.mul(y1));\n        if (!a1 && r.cmp(aprxSqrt) < 0) {\n          a0 = prevR.neg();\n          b0 = x1;\n          a1 = r.neg();\n          b1 = x;\n        } else if (a1 && ++i === 2) {\n          break;\n        }\n        prevR = r;\n        v = u;\n        u = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n      }\n      a2 = r.neg();\n      b2 = x;\n      var len1 = a1.sqr().add(b1.sqr());\n      var len2 = a2.sqr().add(b2.sqr());\n      if (len2.cmp(len1) >= 0) {\n        a2 = a0;\n        b2 = b0;\n      }\n      if (a1.negative) {\n        a1 = a1.neg();\n        b1 = b1.neg();\n      }\n      if (a2.negative) {\n        a2 = a2.neg();\n        b2 = b2.neg();\n      }\n      return [\n        { a: a1, b: b1 },\n        { a: a2, b: b2 }\n      ];\n    };\n    ShortCurve.prototype._endoSplit = function _endoSplit(k) {\n      var basis = this.endo.basis;\n      var v1 = basis[0];\n      var v2 = basis[1];\n      var c1 = v2.b.mul(k).divRound(this.n);\n      var c2 = v1.b.neg().mul(k).divRound(this.n);\n      var p1 = c1.mul(v1.a);\n      var p2 = c2.mul(v2.a);\n      var q1 = c1.mul(v1.b);\n      var q2 = c2.mul(v2.b);\n      var k1 = k.sub(p1).sub(p2);\n      var k2 = q1.add(q2).neg();\n      return { k1, k2 };\n    };\n    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n      x = new BN(x, 16);\n      if (!x.red)\n        x = x.toRed(this.red);\n      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n      var y = y2.redSqrt();\n      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n        throw new Error(\"invalid point\");\n      var isOdd = y.fromRed().isOdd();\n      if (odd && !isOdd || !odd && isOdd)\n        y = y.redNeg();\n      return this.point(x, y);\n    };\n    ShortCurve.prototype.validate = function validate(point) {\n      if (point.inf)\n        return true;\n      var x = point.x;\n      var y = point.y;\n      var ax = this.a.redMul(x);\n      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n      return y.redSqr().redISub(rhs).cmpn(0) === 0;\n    };\n    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n      var npoints = this._endoWnafT1;\n      var ncoeffs = this._endoWnafT2;\n      for (var i = 0; i < points.length; i++) {\n        var split = this._endoSplit(coeffs[i]);\n        var p = points[i];\n        var beta = p._getBeta();\n        if (split.k1.negative) {\n          split.k1.ineg();\n          p = p.neg(true);\n        }\n        if (split.k2.negative) {\n          split.k2.ineg();\n          beta = beta.neg(true);\n        }\n        npoints[i * 2] = p;\n        npoints[i * 2 + 1] = beta;\n        ncoeffs[i * 2] = split.k1;\n        ncoeffs[i * 2 + 1] = split.k2;\n      }\n      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n      for (var j = 0; j < i * 2; j++) {\n        npoints[j] = null;\n        ncoeffs[j] = null;\n      }\n      return res;\n    };\n    function Point(curve, x, y, isRed) {\n      Base.BasePoint.call(this, curve, \"affine\");\n      if (x === null && y === null) {\n        this.x = null;\n        this.y = null;\n        this.inf = true;\n      } else {\n        this.x = new BN(x, 16);\n        this.y = new BN(y, 16);\n        if (isRed) {\n          this.x.forceRed(this.curve.red);\n          this.y.forceRed(this.curve.red);\n        }\n        if (!this.x.red)\n          this.x = this.x.toRed(this.curve.red);\n        if (!this.y.red)\n          this.y = this.y.toRed(this.curve.red);\n        this.inf = false;\n      }\n    }\n    inherits(Point, Base.BasePoint);\n    ShortCurve.prototype.point = function point(x, y, isRed) {\n      return new Point(this, x, y, isRed);\n    };\n    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n      return Point.fromJSON(this, obj, red);\n    };\n    Point.prototype._getBeta = function _getBeta() {\n      if (!this.curve.endo)\n        return;\n      var pre = this.precomputed;\n      if (pre && pre.beta)\n        return pre.beta;\n      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n      if (pre) {\n        var curve = this.curve;\n        var endoMul = function(p) {\n          return curve.point(p.x.redMul(curve.endo.beta), p.y);\n        };\n        pre.beta = beta;\n        beta.precomputed = {\n          beta: null,\n          naf: pre.naf && {\n            wnd: pre.naf.wnd,\n            points: pre.naf.points.map(endoMul)\n          },\n          doubles: pre.doubles && {\n            step: pre.doubles.step,\n            points: pre.doubles.points.map(endoMul)\n          }\n        };\n      }\n      return beta;\n    };\n    Point.prototype.toJSON = function toJSON() {\n      if (!this.precomputed)\n        return [this.x, this.y];\n      return [this.x, this.y, this.precomputed && {\n        doubles: this.precomputed.doubles && {\n          step: this.precomputed.doubles.step,\n          points: this.precomputed.doubles.points.slice(1)\n        },\n        naf: this.precomputed.naf && {\n          wnd: this.precomputed.naf.wnd,\n          points: this.precomputed.naf.points.slice(1)\n        }\n      }];\n    };\n    Point.fromJSON = function fromJSON(curve, obj, red) {\n      if (typeof obj === \"string\")\n        obj = JSON.parse(obj);\n      var res = curve.point(obj[0], obj[1], red);\n      if (!obj[2])\n        return res;\n      function obj2point(obj2) {\n        return curve.point(obj2[0], obj2[1], red);\n      }\n      var pre = obj[2];\n      res.precomputed = {\n        beta: null,\n        doubles: pre.doubles && {\n          step: pre.doubles.step,\n          points: [res].concat(pre.doubles.points.map(obj2point))\n        },\n        naf: pre.naf && {\n          wnd: pre.naf.wnd,\n          points: [res].concat(pre.naf.points.map(obj2point))\n        }\n      };\n      return res;\n    };\n    Point.prototype.inspect = function inspect() {\n      if (this.isInfinity())\n        return \"<EC Point Infinity>\";\n      return \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" y: \" + this.y.fromRed().toString(16, 2) + \">\";\n    };\n    Point.prototype.isInfinity = function isInfinity() {\n      return this.inf;\n    };\n    Point.prototype.add = function add(p) {\n      if (this.inf)\n        return p;\n      if (p.inf)\n        return this;\n      if (this.eq(p))\n        return this.dbl();\n      if (this.neg().eq(p))\n        return this.curve.point(null, null);\n      if (this.x.cmp(p.x) === 0)\n        return this.curve.point(null, null);\n      var c = this.y.redSub(p.y);\n      if (c.cmpn(0) !== 0)\n        c = c.redMul(this.x.redSub(p.x).redInvm());\n      var nx = c.redSqr().redISub(this.x).redISub(p.x);\n      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n      return this.curve.point(nx, ny);\n    };\n    Point.prototype.dbl = function dbl() {\n      if (this.inf)\n        return this;\n      var ys1 = this.y.redAdd(this.y);\n      if (ys1.cmpn(0) === 0)\n        return this.curve.point(null, null);\n      var a = this.curve.a;\n      var x2 = this.x.redSqr();\n      var dyinv = ys1.redInvm();\n      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n      var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n      return this.curve.point(nx, ny);\n    };\n    Point.prototype.getX = function getX() {\n      return this.x.fromRed();\n    };\n    Point.prototype.getY = function getY() {\n      return this.y.fromRed();\n    };\n    Point.prototype.mul = function mul(k) {\n      k = new BN(k, 16);\n      if (this.isInfinity())\n        return this;\n      else if (this._hasDoubles(k))\n        return this.curve._fixedNafMul(this, k);\n      else if (this.curve.endo)\n        return this.curve._endoWnafMulAdd([this], [k]);\n      else\n        return this.curve._wnafMul(this, k);\n    };\n    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n      var points = [this, p2];\n      var coeffs = [k1, k2];\n      if (this.curve.endo)\n        return this.curve._endoWnafMulAdd(points, coeffs);\n      else\n        return this.curve._wnafMulAdd(1, points, coeffs, 2);\n    };\n    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n      var points = [this, p2];\n      var coeffs = [k1, k2];\n      if (this.curve.endo)\n        return this.curve._endoWnafMulAdd(points, coeffs, true);\n      else\n        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n    };\n    Point.prototype.eq = function eq(p) {\n      return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n    };\n    Point.prototype.neg = function neg(_precompute) {\n      if (this.inf)\n        return this;\n      var res = this.curve.point(this.x, this.y.redNeg());\n      if (_precompute && this.precomputed) {\n        var pre = this.precomputed;\n        var negate = function(p) {\n          return p.neg();\n        };\n        res.precomputed = {\n          naf: pre.naf && {\n            wnd: pre.naf.wnd,\n            points: pre.naf.points.map(negate)\n          },\n          doubles: pre.doubles && {\n            step: pre.doubles.step,\n            points: pre.doubles.points.map(negate)\n          }\n        };\n      }\n      return res;\n    };\n    Point.prototype.toJ = function toJ() {\n      if (this.inf)\n        return this.curve.jpoint(null, null, null);\n      var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n      return res;\n    };\n    function JPoint(curve, x, y, z) {\n      Base.BasePoint.call(this, curve, \"jacobian\");\n      if (x === null && y === null && z === null) {\n        this.x = this.curve.one;\n        this.y = this.curve.one;\n        this.z = new BN(0);\n      } else {\n        this.x = new BN(x, 16);\n        this.y = new BN(y, 16);\n        this.z = new BN(z, 16);\n      }\n      if (!this.x.red)\n        this.x = this.x.toRed(this.curve.red);\n      if (!this.y.red)\n        this.y = this.y.toRed(this.curve.red);\n      if (!this.z.red)\n        this.z = this.z.toRed(this.curve.red);\n      this.zOne = this.z === this.curve.one;\n    }\n    inherits(JPoint, Base.BasePoint);\n    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n      return new JPoint(this, x, y, z);\n    };\n    JPoint.prototype.toP = function toP() {\n      if (this.isInfinity())\n        return this.curve.point(null, null);\n      var zinv = this.z.redInvm();\n      var zinv2 = zinv.redSqr();\n      var ax = this.x.redMul(zinv2);\n      var ay = this.y.redMul(zinv2).redMul(zinv);\n      return this.curve.point(ax, ay);\n    };\n    JPoint.prototype.neg = function neg() {\n      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n    };\n    JPoint.prototype.add = function add(p) {\n      if (this.isInfinity())\n        return p;\n      if (p.isInfinity())\n        return this;\n      var pz2 = p.z.redSqr();\n      var z2 = this.z.redSqr();\n      var u1 = this.x.redMul(pz2);\n      var u2 = p.x.redMul(z2);\n      var s1 = this.y.redMul(pz2.redMul(p.z));\n      var s2 = p.y.redMul(z2.redMul(this.z));\n      var h = u1.redSub(u2);\n      var r = s1.redSub(s2);\n      if (h.cmpn(0) === 0) {\n        if (r.cmpn(0) !== 0)\n          return this.curve.jpoint(null, null, null);\n        else\n          return this.dbl();\n      }\n      var h2 = h.redSqr();\n      var h3 = h2.redMul(h);\n      var v = u1.redMul(h2);\n      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n      var nz = this.z.redMul(p.z).redMul(h);\n      return this.curve.jpoint(nx, ny, nz);\n    };\n    JPoint.prototype.mixedAdd = function mixedAdd(p) {\n      if (this.isInfinity())\n        return p.toJ();\n      if (p.isInfinity())\n        return this;\n      var z2 = this.z.redSqr();\n      var u1 = this.x;\n      var u2 = p.x.redMul(z2);\n      var s1 = this.y;\n      var s2 = p.y.redMul(z2).redMul(this.z);\n      var h = u1.redSub(u2);\n      var r = s1.redSub(s2);\n      if (h.cmpn(0) === 0) {\n        if (r.cmpn(0) !== 0)\n          return this.curve.jpoint(null, null, null);\n        else\n          return this.dbl();\n      }\n      var h2 = h.redSqr();\n      var h3 = h2.redMul(h);\n      var v = u1.redMul(h2);\n      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n      var nz = this.z.redMul(h);\n      return this.curve.jpoint(nx, ny, nz);\n    };\n    JPoint.prototype.dblp = function dblp(pow) {\n      if (pow === 0)\n        return this;\n      if (this.isInfinity())\n        return this;\n      if (!pow)\n        return this.dbl();\n      var i;\n      if (this.curve.zeroA || this.curve.threeA) {\n        var r = this;\n        for (i = 0; i < pow; i++)\n          r = r.dbl();\n        return r;\n      }\n      var a = this.curve.a;\n      var tinv = this.curve.tinv;\n      var jx = this.x;\n      var jy = this.y;\n      var jz = this.z;\n      var jz4 = jz.redSqr().redSqr();\n      var jyd = jy.redAdd(jy);\n      for (i = 0; i < pow; i++) {\n        var jx2 = jx.redSqr();\n        var jyd2 = jyd.redSqr();\n        var jyd4 = jyd2.redSqr();\n        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n        var t1 = jx.redMul(jyd2);\n        var nx = c.redSqr().redISub(t1.redAdd(t1));\n        var t2 = t1.redISub(nx);\n        var dny = c.redMul(t2);\n        dny = dny.redIAdd(dny).redISub(jyd4);\n        var nz = jyd.redMul(jz);\n        if (i + 1 < pow)\n          jz4 = jz4.redMul(jyd4);\n        jx = nx;\n        jz = nz;\n        jyd = dny;\n      }\n      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n    };\n    JPoint.prototype.dbl = function dbl() {\n      if (this.isInfinity())\n        return this;\n      if (this.curve.zeroA)\n        return this._zeroDbl();\n      else if (this.curve.threeA)\n        return this._threeDbl();\n      else\n        return this._dbl();\n    };\n    JPoint.prototype._zeroDbl = function _zeroDbl() {\n      var nx;\n      var ny;\n      var nz;\n      if (this.zOne) {\n        var xx = this.x.redSqr();\n        var yy = this.y.redSqr();\n        var yyyy = yy.redSqr();\n        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n        s = s.redIAdd(s);\n        var m = xx.redAdd(xx).redIAdd(xx);\n        var t = m.redSqr().redISub(s).redISub(s);\n        var yyyy8 = yyyy.redIAdd(yyyy);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        nx = t;\n        ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n        nz = this.y.redAdd(this.y);\n      } else {\n        var a = this.x.redSqr();\n        var b = this.y.redSqr();\n        var c = b.redSqr();\n        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n        d = d.redIAdd(d);\n        var e = a.redAdd(a).redIAdd(a);\n        var f = e.redSqr();\n        var c8 = c.redIAdd(c);\n        c8 = c8.redIAdd(c8);\n        c8 = c8.redIAdd(c8);\n        nx = f.redISub(d).redISub(d);\n        ny = e.redMul(d.redISub(nx)).redISub(c8);\n        nz = this.y.redMul(this.z);\n        nz = nz.redIAdd(nz);\n      }\n      return this.curve.jpoint(nx, ny, nz);\n    };\n    JPoint.prototype._threeDbl = function _threeDbl() {\n      var nx;\n      var ny;\n      var nz;\n      if (this.zOne) {\n        var xx = this.x.redSqr();\n        var yy = this.y.redSqr();\n        var yyyy = yy.redSqr();\n        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n        s = s.redIAdd(s);\n        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n        var t = m.redSqr().redISub(s).redISub(s);\n        nx = t;\n        var yyyy8 = yyyy.redIAdd(yyyy);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n        nz = this.y.redAdd(this.y);\n      } else {\n        var delta = this.z.redSqr();\n        var gamma = this.y.redSqr();\n        var beta = this.x.redMul(gamma);\n        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n        alpha = alpha.redAdd(alpha).redIAdd(alpha);\n        var beta4 = beta.redIAdd(beta);\n        beta4 = beta4.redIAdd(beta4);\n        var beta8 = beta4.redAdd(beta4);\n        nx = alpha.redSqr().redISub(beta8);\n        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n        var ggamma8 = gamma.redSqr();\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n      }\n      return this.curve.jpoint(nx, ny, nz);\n    };\n    JPoint.prototype._dbl = function _dbl() {\n      var a = this.curve.a;\n      var jx = this.x;\n      var jy = this.y;\n      var jz = this.z;\n      var jz4 = jz.redSqr().redSqr();\n      var jx2 = jx.redSqr();\n      var jy2 = jy.redSqr();\n      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n      var jxd4 = jx.redAdd(jx);\n      jxd4 = jxd4.redIAdd(jxd4);\n      var t1 = jxd4.redMul(jy2);\n      var nx = c.redSqr().redISub(t1.redAdd(t1));\n      var t2 = t1.redISub(nx);\n      var jyd8 = jy2.redSqr();\n      jyd8 = jyd8.redIAdd(jyd8);\n      jyd8 = jyd8.redIAdd(jyd8);\n      jyd8 = jyd8.redIAdd(jyd8);\n      var ny = c.redMul(t2).redISub(jyd8);\n      var nz = jy.redAdd(jy).redMul(jz);\n      return this.curve.jpoint(nx, ny, nz);\n    };\n    JPoint.prototype.trpl = function trpl() {\n      if (!this.curve.zeroA)\n        return this.dbl().add(this);\n      var xx = this.x.redSqr();\n      var yy = this.y.redSqr();\n      var zz = this.z.redSqr();\n      var yyyy = yy.redSqr();\n      var m = xx.redAdd(xx).redIAdd(xx);\n      var mm = m.redSqr();\n      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n      e = e.redIAdd(e);\n      e = e.redAdd(e).redIAdd(e);\n      e = e.redISub(mm);\n      var ee = e.redSqr();\n      var t = yyyy.redIAdd(yyyy);\n      t = t.redIAdd(t);\n      t = t.redIAdd(t);\n      t = t.redIAdd(t);\n      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n      var yyu4 = yy.redMul(u);\n      yyu4 = yyu4.redIAdd(yyu4);\n      yyu4 = yyu4.redIAdd(yyu4);\n      var nx = this.x.redMul(ee).redISub(yyu4);\n      nx = nx.redIAdd(nx);\n      nx = nx.redIAdd(nx);\n      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n      ny = ny.redIAdd(ny);\n      ny = ny.redIAdd(ny);\n      ny = ny.redIAdd(ny);\n      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n      return this.curve.jpoint(nx, ny, nz);\n    };\n    JPoint.prototype.mul = function mul(k, kbase) {\n      k = new BN(k, kbase);\n      return this.curve._wnafMul(this, k);\n    };\n    JPoint.prototype.eq = function eq(p) {\n      if (p.type === \"affine\")\n        return this.eq(p.toJ());\n      if (this === p)\n        return true;\n      var z2 = this.z.redSqr();\n      var pz2 = p.z.redSqr();\n      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)\n        return false;\n      var z3 = z2.redMul(this.z);\n      var pz3 = pz2.redMul(p.z);\n      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n    };\n    JPoint.prototype.eqXToP = function eqXToP(x) {\n      var zs = this.z.redSqr();\n      var rx = x.toRed(this.curve.red).redMul(zs);\n      if (this.x.cmp(rx) === 0)\n        return true;\n      var xc = x.clone();\n      var t = this.curve.redN.redMul(zs);\n      for (; ; ) {\n        xc.iadd(this.curve.n);\n        if (xc.cmp(this.curve.p) >= 0)\n          return false;\n        rx.redIAdd(t);\n        if (this.x.cmp(rx) === 0)\n          return true;\n      }\n    };\n    JPoint.prototype.inspect = function inspect() {\n      if (this.isInfinity())\n        return \"<EC JPoint Infinity>\";\n      return \"<EC JPoint x: \" + this.x.toString(16, 2) + \" y: \" + this.y.toString(16, 2) + \" z: \" + this.z.toString(16, 2) + \">\";\n    };\n    JPoint.prototype.isInfinity = function isInfinity() {\n      return this.z.cmpn(0) === 0;\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/curve/mont.js\nvar require_mont = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/curve/mont.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn4();\n    var inherits = require_inherits_browser();\n    var Base = require_base();\n    var utils = require_utils3();\n    function MontCurve(conf) {\n      Base.call(this, \"mont\", conf);\n      this.a = new BN(conf.a, 16).toRed(this.red);\n      this.b = new BN(conf.b, 16).toRed(this.red);\n      this.i4 = new BN(4).toRed(this.red).redInvm();\n      this.two = new BN(2).toRed(this.red);\n      this.a24 = this.i4.redMul(this.a.redAdd(this.two));\n    }\n    inherits(MontCurve, Base);\n    module.exports = MontCurve;\n    MontCurve.prototype.validate = function validate(point) {\n      var x = point.normalize().x;\n      var x2 = x.redSqr();\n      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\n      var y = rhs.redSqrt();\n      return y.redSqr().cmp(rhs) === 0;\n    };\n    function Point(curve, x, z) {\n      Base.BasePoint.call(this, curve, \"projective\");\n      if (x === null && z === null) {\n        this.x = this.curve.one;\n        this.z = this.curve.zero;\n      } else {\n        this.x = new BN(x, 16);\n        this.z = new BN(z, 16);\n        if (!this.x.red)\n          this.x = this.x.toRed(this.curve.red);\n        if (!this.z.red)\n          this.z = this.z.toRed(this.curve.red);\n      }\n    }\n    inherits(Point, Base.BasePoint);\n    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n      return this.point(utils.toArray(bytes, enc), 1);\n    };\n    MontCurve.prototype.point = function point(x, z) {\n      return new Point(this, x, z);\n    };\n    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n      return Point.fromJSON(this, obj);\n    };\n    Point.prototype.precompute = function precompute() {\n    };\n    Point.prototype._encode = function _encode() {\n      return this.getX().toArray(\"be\", this.curve.p.byteLength());\n    };\n    Point.fromJSON = function fromJSON(curve, obj) {\n      return new Point(curve, obj[0], obj[1] || curve.one);\n    };\n    Point.prototype.inspect = function inspect() {\n      if (this.isInfinity())\n        return \"<EC Point Infinity>\";\n      return \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" z: \" + this.z.fromRed().toString(16, 2) + \">\";\n    };\n    Point.prototype.isInfinity = function isInfinity() {\n      return this.z.cmpn(0) === 0;\n    };\n    Point.prototype.dbl = function dbl() {\n      var a = this.x.redAdd(this.z);\n      var aa = a.redSqr();\n      var b = this.x.redSub(this.z);\n      var bb = b.redSqr();\n      var c = aa.redSub(bb);\n      var nx = aa.redMul(bb);\n      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\n      return this.curve.point(nx, nz);\n    };\n    Point.prototype.add = function add() {\n      throw new Error(\"Not supported on Montgomery curve\");\n    };\n    Point.prototype.diffAdd = function diffAdd(p, diff) {\n      var a = this.x.redAdd(this.z);\n      var b = this.x.redSub(this.z);\n      var c = p.x.redAdd(p.z);\n      var d = p.x.redSub(p.z);\n      var da = d.redMul(a);\n      var cb = c.redMul(b);\n      var nx = diff.z.redMul(da.redAdd(cb).redSqr());\n      var nz = diff.x.redMul(da.redISub(cb).redSqr());\n      return this.curve.point(nx, nz);\n    };\n    Point.prototype.mul = function mul(k) {\n      var t = k.clone();\n      var a = this;\n      var b = this.curve.point(null, null);\n      var c = this;\n      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))\n        bits.push(t.andln(1));\n      for (var i = bits.length - 1; i >= 0; i--) {\n        if (bits[i] === 0) {\n          a = a.diffAdd(b, c);\n          b = b.dbl();\n        } else {\n          b = a.diffAdd(b, c);\n          a = a.dbl();\n        }\n      }\n      return b;\n    };\n    Point.prototype.mulAdd = function mulAdd() {\n      throw new Error(\"Not supported on Montgomery curve\");\n    };\n    Point.prototype.jumlAdd = function jumlAdd() {\n      throw new Error(\"Not supported on Montgomery curve\");\n    };\n    Point.prototype.eq = function eq(other) {\n      return this.getX().cmp(other.getX()) === 0;\n    };\n    Point.prototype.normalize = function normalize() {\n      this.x = this.x.redMul(this.z.redInvm());\n      this.z = this.curve.one;\n      return this;\n    };\n    Point.prototype.getX = function getX() {\n      this.normalize();\n      return this.x.fromRed();\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/curve/edwards.js\nvar require_edwards = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/curve/edwards.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils3();\n    var BN = require_bn4();\n    var inherits = require_inherits_browser();\n    var Base = require_base();\n    var assert = utils.assert;\n    function EdwardsCurve(conf) {\n      this.twisted = (conf.a | 0) !== 1;\n      this.mOneA = this.twisted && (conf.a | 0) === -1;\n      this.extended = this.mOneA;\n      Base.call(this, \"edwards\", conf);\n      this.a = new BN(conf.a, 16).umod(this.red.m);\n      this.a = this.a.toRed(this.red);\n      this.c = new BN(conf.c, 16).toRed(this.red);\n      this.c2 = this.c.redSqr();\n      this.d = new BN(conf.d, 16).toRed(this.red);\n      this.dd = this.d.redAdd(this.d);\n      assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);\n      this.oneC = (conf.c | 0) === 1;\n    }\n    inherits(EdwardsCurve, Base);\n    module.exports = EdwardsCurve;\n    EdwardsCurve.prototype._mulA = function _mulA(num) {\n      if (this.mOneA)\n        return num.redNeg();\n      else\n        return this.a.redMul(num);\n    };\n    EdwardsCurve.prototype._mulC = function _mulC(num) {\n      if (this.oneC)\n        return num;\n      else\n        return this.c.redMul(num);\n    };\n    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\n      return this.point(x, y, z, t);\n    };\n    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\n      x = new BN(x, 16);\n      if (!x.red)\n        x = x.toRed(this.red);\n      var x2 = x.redSqr();\n      var rhs = this.c2.redSub(this.a.redMul(x2));\n      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\n      var y2 = rhs.redMul(lhs.redInvm());\n      var y = y2.redSqrt();\n      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n        throw new Error(\"invalid point\");\n      var isOdd = y.fromRed().isOdd();\n      if (odd && !isOdd || !odd && isOdd)\n        y = y.redNeg();\n      return this.point(x, y);\n    };\n    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\n      y = new BN(y, 16);\n      if (!y.red)\n        y = y.toRed(this.red);\n      var y2 = y.redSqr();\n      var lhs = y2.redSub(this.c2);\n      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);\n      var x2 = lhs.redMul(rhs.redInvm());\n      if (x2.cmp(this.zero) === 0) {\n        if (odd)\n          throw new Error(\"invalid point\");\n        else\n          return this.point(this.zero, y);\n      }\n      var x = x2.redSqrt();\n      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)\n        throw new Error(\"invalid point\");\n      if (x.fromRed().isOdd() !== odd)\n        x = x.redNeg();\n      return this.point(x, y);\n    };\n    EdwardsCurve.prototype.validate = function validate(point) {\n      if (point.isInfinity())\n        return true;\n      point.normalize();\n      var x2 = point.x.redSqr();\n      var y2 = point.y.redSqr();\n      var lhs = x2.redMul(this.a).redAdd(y2);\n      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\n      return lhs.cmp(rhs) === 0;\n    };\n    function Point(curve, x, y, z, t) {\n      Base.BasePoint.call(this, curve, \"projective\");\n      if (x === null && y === null && z === null) {\n        this.x = this.curve.zero;\n        this.y = this.curve.one;\n        this.z = this.curve.one;\n        this.t = this.curve.zero;\n        this.zOne = true;\n      } else {\n        this.x = new BN(x, 16);\n        this.y = new BN(y, 16);\n        this.z = z ? new BN(z, 16) : this.curve.one;\n        this.t = t && new BN(t, 16);\n        if (!this.x.red)\n          this.x = this.x.toRed(this.curve.red);\n        if (!this.y.red)\n          this.y = this.y.toRed(this.curve.red);\n        if (!this.z.red)\n          this.z = this.z.toRed(this.curve.red);\n        if (this.t && !this.t.red)\n          this.t = this.t.toRed(this.curve.red);\n        this.zOne = this.z === this.curve.one;\n        if (this.curve.extended && !this.t) {\n          this.t = this.x.redMul(this.y);\n          if (!this.zOne)\n            this.t = this.t.redMul(this.z.redInvm());\n        }\n      }\n    }\n    inherits(Point, Base.BasePoint);\n    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n      return Point.fromJSON(this, obj);\n    };\n    EdwardsCurve.prototype.point = function point(x, y, z, t) {\n      return new Point(this, x, y, z, t);\n    };\n    Point.fromJSON = function fromJSON(curve, obj) {\n      return new Point(curve, obj[0], obj[1], obj[2]);\n    };\n    Point.prototype.inspect = function inspect() {\n      if (this.isInfinity())\n        return \"<EC Point Infinity>\";\n      return \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" y: \" + this.y.fromRed().toString(16, 2) + \" z: \" + this.z.fromRed().toString(16, 2) + \">\";\n    };\n    Point.prototype.isInfinity = function isInfinity() {\n      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);\n    };\n    Point.prototype._extDbl = function _extDbl() {\n      var a = this.x.redSqr();\n      var b = this.y.redSqr();\n      var c = this.z.redSqr();\n      c = c.redIAdd(c);\n      var d = this.curve._mulA(a);\n      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\n      var g = d.redAdd(b);\n      var f = g.redSub(c);\n      var h = d.redSub(b);\n      var nx = e.redMul(f);\n      var ny = g.redMul(h);\n      var nt = e.redMul(h);\n      var nz = f.redMul(g);\n      return this.curve.point(nx, ny, nz, nt);\n    };\n    Point.prototype._projDbl = function _projDbl() {\n      var b = this.x.redAdd(this.y).redSqr();\n      var c = this.x.redSqr();\n      var d = this.y.redSqr();\n      var nx;\n      var ny;\n      var nz;\n      var e;\n      var h;\n      var j;\n      if (this.curve.twisted) {\n        e = this.curve._mulA(c);\n        var f = e.redAdd(d);\n        if (this.zOne) {\n          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));\n          ny = f.redMul(e.redSub(d));\n          nz = f.redSqr().redSub(f).redSub(f);\n        } else {\n          h = this.z.redSqr();\n          j = f.redSub(h).redISub(h);\n          nx = b.redSub(c).redISub(d).redMul(j);\n          ny = f.redMul(e.redSub(d));\n          nz = f.redMul(j);\n        }\n      } else {\n        e = c.redAdd(d);\n        h = this.curve._mulC(this.z).redSqr();\n        j = e.redSub(h).redSub(h);\n        nx = this.curve._mulC(b.redISub(e)).redMul(j);\n        ny = this.curve._mulC(e).redMul(c.redISub(d));\n        nz = e.redMul(j);\n      }\n      return this.curve.point(nx, ny, nz);\n    };\n    Point.prototype.dbl = function dbl() {\n      if (this.isInfinity())\n        return this;\n      if (this.curve.extended)\n        return this._extDbl();\n      else\n        return this._projDbl();\n    };\n    Point.prototype._extAdd = function _extAdd(p) {\n      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\n      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\n      var c = this.t.redMul(this.curve.dd).redMul(p.t);\n      var d = this.z.redMul(p.z.redAdd(p.z));\n      var e = b.redSub(a);\n      var f = d.redSub(c);\n      var g = d.redAdd(c);\n      var h = b.redAdd(a);\n      var nx = e.redMul(f);\n      var ny = g.redMul(h);\n      var nt = e.redMul(h);\n      var nz = f.redMul(g);\n      return this.curve.point(nx, ny, nz, nt);\n    };\n    Point.prototype._projAdd = function _projAdd(p) {\n      var a = this.z.redMul(p.z);\n      var b = a.redSqr();\n      var c = this.x.redMul(p.x);\n      var d = this.y.redMul(p.y);\n      var e = this.curve.d.redMul(c).redMul(d);\n      var f = b.redSub(e);\n      var g = b.redAdd(e);\n      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\n      var nx = a.redMul(f).redMul(tmp);\n      var ny;\n      var nz;\n      if (this.curve.twisted) {\n        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));\n        nz = f.redMul(g);\n      } else {\n        ny = a.redMul(g).redMul(d.redSub(c));\n        nz = this.curve._mulC(f).redMul(g);\n      }\n      return this.curve.point(nx, ny, nz);\n    };\n    Point.prototype.add = function add(p) {\n      if (this.isInfinity())\n        return p;\n      if (p.isInfinity())\n        return this;\n      if (this.curve.extended)\n        return this._extAdd(p);\n      else\n        return this._projAdd(p);\n    };\n    Point.prototype.mul = function mul(k) {\n      if (this._hasDoubles(k))\n        return this.curve._fixedNafMul(this, k);\n      else\n        return this.curve._wnafMul(this, k);\n    };\n    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {\n      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);\n    };\n    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\n      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);\n    };\n    Point.prototype.normalize = function normalize() {\n      if (this.zOne)\n        return this;\n      var zi = this.z.redInvm();\n      this.x = this.x.redMul(zi);\n      this.y = this.y.redMul(zi);\n      if (this.t)\n        this.t = this.t.redMul(zi);\n      this.z = this.curve.one;\n      this.zOne = true;\n      return this;\n    };\n    Point.prototype.neg = function neg() {\n      return this.curve.point(\n        this.x.redNeg(),\n        this.y,\n        this.z,\n        this.t && this.t.redNeg()\n      );\n    };\n    Point.prototype.getX = function getX() {\n      this.normalize();\n      return this.x.fromRed();\n    };\n    Point.prototype.getY = function getY() {\n      this.normalize();\n      return this.y.fromRed();\n    };\n    Point.prototype.eq = function eq(other) {\n      return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;\n    };\n    Point.prototype.eqXToP = function eqXToP(x) {\n      var rx = x.toRed(this.curve.red).redMul(this.z);\n      if (this.x.cmp(rx) === 0)\n        return true;\n      var xc = x.clone();\n      var t = this.curve.redN.redMul(this.z);\n      for (; ; ) {\n        xc.iadd(this.curve.n);\n        if (xc.cmp(this.curve.p) >= 0)\n          return false;\n        rx.redIAdd(t);\n        if (this.x.cmp(rx) === 0)\n          return true;\n      }\n    };\n    Point.prototype.toP = Point.prototype.normalize;\n    Point.prototype.mixedAdd = Point.prototype.add;\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/curve/index.js\nvar require_curve = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/curve/index.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var curve = exports;\n    curve.base = require_base();\n    curve.short = require_short();\n    curve.mont = require_mont();\n    curve.edwards = require_edwards();\n  }\n});\n\n// node_modules/hash.js/lib/hash/utils.js\nvar require_utils4 = __commonJS({\n  \"node_modules/hash.js/lib/hash/utils.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var assert = require_minimalistic_assert();\n    var inherits = require_inherits_browser();\n    exports.inherits = inherits;\n    function isSurrogatePair(msg, i) {\n      if ((msg.charCodeAt(i) & 64512) !== 55296) {\n        return false;\n      }\n      if (i < 0 || i + 1 >= msg.length) {\n        return false;\n      }\n      return (msg.charCodeAt(i + 1) & 64512) === 56320;\n    }\n    function toArray(msg, enc) {\n      if (Array.isArray(msg))\n        return msg.slice();\n      if (!msg)\n        return [];\n      var res = [];\n      if (typeof msg === \"string\") {\n        if (!enc) {\n          var p = 0;\n          for (var i = 0; i < msg.length; i++) {\n            var c = msg.charCodeAt(i);\n            if (c < 128) {\n              res[p++] = c;\n            } else if (c < 2048) {\n              res[p++] = c >> 6 | 192;\n              res[p++] = c & 63 | 128;\n            } else if (isSurrogatePair(msg, i)) {\n              c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);\n              res[p++] = c >> 18 | 240;\n              res[p++] = c >> 12 & 63 | 128;\n              res[p++] = c >> 6 & 63 | 128;\n              res[p++] = c & 63 | 128;\n            } else {\n              res[p++] = c >> 12 | 224;\n              res[p++] = c >> 6 & 63 | 128;\n              res[p++] = c & 63 | 128;\n            }\n          }\n        } else if (enc === \"hex\") {\n          msg = msg.replace(/[^a-z0-9]+/ig, \"\");\n          if (msg.length % 2 !== 0)\n            msg = \"0\" + msg;\n          for (i = 0; i < msg.length; i += 2)\n            res.push(parseInt(msg[i] + msg[i + 1], 16));\n        }\n      } else {\n        for (i = 0; i < msg.length; i++)\n          res[i] = msg[i] | 0;\n      }\n      return res;\n    }\n    exports.toArray = toArray;\n    function toHex(msg) {\n      var res = \"\";\n      for (var i = 0; i < msg.length; i++)\n        res += zero2(msg[i].toString(16));\n      return res;\n    }\n    exports.toHex = toHex;\n    function htonl(w) {\n      var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;\n      return res >>> 0;\n    }\n    exports.htonl = htonl;\n    function toHex32(msg, endian) {\n      var res = \"\";\n      for (var i = 0; i < msg.length; i++) {\n        var w = msg[i];\n        if (endian === \"little\")\n          w = htonl(w);\n        res += zero8(w.toString(16));\n      }\n      return res;\n    }\n    exports.toHex32 = toHex32;\n    function zero2(word) {\n      if (word.length === 1)\n        return \"0\" + word;\n      else\n        return word;\n    }\n    exports.zero2 = zero2;\n    function zero8(word) {\n      if (word.length === 7)\n        return \"0\" + word;\n      else if (word.length === 6)\n        return \"00\" + word;\n      else if (word.length === 5)\n        return \"000\" + word;\n      else if (word.length === 4)\n        return \"0000\" + word;\n      else if (word.length === 3)\n        return \"00000\" + word;\n      else if (word.length === 2)\n        return \"000000\" + word;\n      else if (word.length === 1)\n        return \"0000000\" + word;\n      else\n        return word;\n    }\n    exports.zero8 = zero8;\n    function join32(msg, start, end, endian) {\n      var len = end - start;\n      assert(len % 4 === 0);\n      var res = new Array(len / 4);\n      for (var i = 0, k = start; i < res.length; i++, k += 4) {\n        var w;\n        if (endian === \"big\")\n          w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];\n        else\n          w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n        res[i] = w >>> 0;\n      }\n      return res;\n    }\n    exports.join32 = join32;\n    function split32(msg, endian) {\n      var res = new Array(msg.length * 4);\n      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n        var m = msg[i];\n        if (endian === \"big\") {\n          res[k] = m >>> 24;\n          res[k + 1] = m >>> 16 & 255;\n          res[k + 2] = m >>> 8 & 255;\n          res[k + 3] = m & 255;\n        } else {\n          res[k + 3] = m >>> 24;\n          res[k + 2] = m >>> 16 & 255;\n          res[k + 1] = m >>> 8 & 255;\n          res[k] = m & 255;\n        }\n      }\n      return res;\n    }\n    exports.split32 = split32;\n    function rotr32(w, b) {\n      return w >>> b | w << 32 - b;\n    }\n    exports.rotr32 = rotr32;\n    function rotl32(w, b) {\n      return w << b | w >>> 32 - b;\n    }\n    exports.rotl32 = rotl32;\n    function sum32(a, b) {\n      return a + b >>> 0;\n    }\n    exports.sum32 = sum32;\n    function sum32_3(a, b, c) {\n      return a + b + c >>> 0;\n    }\n    exports.sum32_3 = sum32_3;\n    function sum32_4(a, b, c, d) {\n      return a + b + c + d >>> 0;\n    }\n    exports.sum32_4 = sum32_4;\n    function sum32_5(a, b, c, d, e) {\n      return a + b + c + d + e >>> 0;\n    }\n    exports.sum32_5 = sum32_5;\n    function sum64(buf, pos, ah, al) {\n      var bh = buf[pos];\n      var bl = buf[pos + 1];\n      var lo = al + bl >>> 0;\n      var hi = (lo < al ? 1 : 0) + ah + bh;\n      buf[pos] = hi >>> 0;\n      buf[pos + 1] = lo;\n    }\n    exports.sum64 = sum64;\n    function sum64_hi(ah, al, bh, bl) {\n      var lo = al + bl >>> 0;\n      var hi = (lo < al ? 1 : 0) + ah + bh;\n      return hi >>> 0;\n    }\n    exports.sum64_hi = sum64_hi;\n    function sum64_lo(ah, al, bh, bl) {\n      var lo = al + bl;\n      return lo >>> 0;\n    }\n    exports.sum64_lo = sum64_lo;\n    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n      var carry = 0;\n      var lo = al;\n      lo = lo + bl >>> 0;\n      carry += lo < al ? 1 : 0;\n      lo = lo + cl >>> 0;\n      carry += lo < cl ? 1 : 0;\n      lo = lo + dl >>> 0;\n      carry += lo < dl ? 1 : 0;\n      var hi = ah + bh + ch + dh + carry;\n      return hi >>> 0;\n    }\n    exports.sum64_4_hi = sum64_4_hi;\n    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n      var lo = al + bl + cl + dl;\n      return lo >>> 0;\n    }\n    exports.sum64_4_lo = sum64_4_lo;\n    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n      var carry = 0;\n      var lo = al;\n      lo = lo + bl >>> 0;\n      carry += lo < al ? 1 : 0;\n      lo = lo + cl >>> 0;\n      carry += lo < cl ? 1 : 0;\n      lo = lo + dl >>> 0;\n      carry += lo < dl ? 1 : 0;\n      lo = lo + el >>> 0;\n      carry += lo < el ? 1 : 0;\n      var hi = ah + bh + ch + dh + eh + carry;\n      return hi >>> 0;\n    }\n    exports.sum64_5_hi = sum64_5_hi;\n    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n      var lo = al + bl + cl + dl + el;\n      return lo >>> 0;\n    }\n    exports.sum64_5_lo = sum64_5_lo;\n    function rotr64_hi(ah, al, num) {\n      var r = al << 32 - num | ah >>> num;\n      return r >>> 0;\n    }\n    exports.rotr64_hi = rotr64_hi;\n    function rotr64_lo(ah, al, num) {\n      var r = ah << 32 - num | al >>> num;\n      return r >>> 0;\n    }\n    exports.rotr64_lo = rotr64_lo;\n    function shr64_hi(ah, al, num) {\n      return ah >>> num;\n    }\n    exports.shr64_hi = shr64_hi;\n    function shr64_lo(ah, al, num) {\n      var r = ah << 32 - num | al >>> num;\n      return r >>> 0;\n    }\n    exports.shr64_lo = shr64_lo;\n  }\n});\n\n// node_modules/hash.js/lib/hash/common.js\nvar require_common = __commonJS({\n  \"node_modules/hash.js/lib/hash/common.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var assert = require_minimalistic_assert();\n    function BlockHash() {\n      this.pending = null;\n      this.pendingTotal = 0;\n      this.blockSize = this.constructor.blockSize;\n      this.outSize = this.constructor.outSize;\n      this.hmacStrength = this.constructor.hmacStrength;\n      this.padLength = this.constructor.padLength / 8;\n      this.endian = \"big\";\n      this._delta8 = this.blockSize / 8;\n      this._delta32 = this.blockSize / 32;\n    }\n    exports.BlockHash = BlockHash;\n    BlockHash.prototype.update = function update(msg, enc) {\n      msg = utils.toArray(msg, enc);\n      if (!this.pending)\n        this.pending = msg;\n      else\n        this.pending = this.pending.concat(msg);\n      this.pendingTotal += msg.length;\n      if (this.pending.length >= this._delta8) {\n        msg = this.pending;\n        var r = msg.length % this._delta8;\n        this.pending = msg.slice(msg.length - r, msg.length);\n        if (this.pending.length === 0)\n          this.pending = null;\n        msg = utils.join32(msg, 0, msg.length - r, this.endian);\n        for (var i = 0; i < msg.length; i += this._delta32)\n          this._update(msg, i, i + this._delta32);\n      }\n      return this;\n    };\n    BlockHash.prototype.digest = function digest(enc) {\n      this.update(this._pad());\n      assert(this.pending === null);\n      return this._digest(enc);\n    };\n    BlockHash.prototype._pad = function pad() {\n      var len = this.pendingTotal;\n      var bytes = this._delta8;\n      var k = bytes - (len + this.padLength) % bytes;\n      var res = new Array(k + this.padLength);\n      res[0] = 128;\n      for (var i = 1; i < k; i++)\n        res[i] = 0;\n      len <<= 3;\n      if (this.endian === \"big\") {\n        for (var t = 8; t < this.padLength; t++)\n          res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = len >>> 24 & 255;\n        res[i++] = len >>> 16 & 255;\n        res[i++] = len >>> 8 & 255;\n        res[i++] = len & 255;\n      } else {\n        res[i++] = len & 255;\n        res[i++] = len >>> 8 & 255;\n        res[i++] = len >>> 16 & 255;\n        res[i++] = len >>> 24 & 255;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        for (t = 8; t < this.padLength; t++)\n          res[i++] = 0;\n      }\n      return res;\n    };\n  }\n});\n\n// node_modules/hash.js/lib/hash/sha/common.js\nvar require_common2 = __commonJS({\n  \"node_modules/hash.js/lib/hash/sha/common.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var rotr32 = utils.rotr32;\n    function ft_1(s, x, y, z) {\n      if (s === 0)\n        return ch32(x, y, z);\n      if (s === 1 || s === 3)\n        return p32(x, y, z);\n      if (s === 2)\n        return maj32(x, y, z);\n    }\n    exports.ft_1 = ft_1;\n    function ch32(x, y, z) {\n      return x & y ^ ~x & z;\n    }\n    exports.ch32 = ch32;\n    function maj32(x, y, z) {\n      return x & y ^ x & z ^ y & z;\n    }\n    exports.maj32 = maj32;\n    function p32(x, y, z) {\n      return x ^ y ^ z;\n    }\n    exports.p32 = p32;\n    function s0_256(x) {\n      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n    }\n    exports.s0_256 = s0_256;\n    function s1_256(x) {\n      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n    }\n    exports.s1_256 = s1_256;\n    function g0_256(x) {\n      return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n    }\n    exports.g0_256 = g0_256;\n    function g1_256(x) {\n      return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n    }\n    exports.g1_256 = g1_256;\n  }\n});\n\n// node_modules/hash.js/lib/hash/sha/1.js\nvar require__ = __commonJS({\n  \"node_modules/hash.js/lib/hash/sha/1.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var common = require_common();\n    var shaCommon = require_common2();\n    var rotl32 = utils.rotl32;\n    var sum32 = utils.sum32;\n    var sum32_5 = utils.sum32_5;\n    var ft_1 = shaCommon.ft_1;\n    var BlockHash = common.BlockHash;\n    var sha1_K = [\n      1518500249,\n      1859775393,\n      2400959708,\n      3395469782\n    ];\n    function SHA1() {\n      if (!(this instanceof SHA1))\n        return new SHA1();\n      BlockHash.call(this);\n      this.h = [\n        1732584193,\n        4023233417,\n        2562383102,\n        271733878,\n        3285377520\n      ];\n      this.W = new Array(80);\n    }\n    utils.inherits(SHA1, BlockHash);\n    module.exports = SHA1;\n    SHA1.blockSize = 512;\n    SHA1.outSize = 160;\n    SHA1.hmacStrength = 80;\n    SHA1.padLength = 64;\n    SHA1.prototype._update = function _update(msg, start) {\n      var W = this.W;\n      for (var i = 0; i < 16; i++)\n        W[i] = msg[start + i];\n      for (; i < W.length; i++)\n        W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n      var a = this.h[0];\n      var b = this.h[1];\n      var c = this.h[2];\n      var d = this.h[3];\n      var e = this.h[4];\n      for (i = 0; i < W.length; i++) {\n        var s = ~~(i / 20);\n        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n        e = d;\n        d = c;\n        c = rotl32(b, 30);\n        b = a;\n        a = t;\n      }\n      this.h[0] = sum32(this.h[0], a);\n      this.h[1] = sum32(this.h[1], b);\n      this.h[2] = sum32(this.h[2], c);\n      this.h[3] = sum32(this.h[3], d);\n      this.h[4] = sum32(this.h[4], e);\n    };\n    SHA1.prototype._digest = function digest(enc) {\n      if (enc === \"hex\")\n        return utils.toHex32(this.h, \"big\");\n      else\n        return utils.split32(this.h, \"big\");\n    };\n  }\n});\n\n// node_modules/hash.js/lib/hash/sha/256.js\nvar require__2 = __commonJS({\n  \"node_modules/hash.js/lib/hash/sha/256.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var common = require_common();\n    var shaCommon = require_common2();\n    var assert = require_minimalistic_assert();\n    var sum32 = utils.sum32;\n    var sum32_4 = utils.sum32_4;\n    var sum32_5 = utils.sum32_5;\n    var ch32 = shaCommon.ch32;\n    var maj32 = shaCommon.maj32;\n    var s0_256 = shaCommon.s0_256;\n    var s1_256 = shaCommon.s1_256;\n    var g0_256 = shaCommon.g0_256;\n    var g1_256 = shaCommon.g1_256;\n    var BlockHash = common.BlockHash;\n    var sha256_K = [\n      1116352408,\n      1899447441,\n      3049323471,\n      3921009573,\n      961987163,\n      1508970993,\n      2453635748,\n      2870763221,\n      3624381080,\n      310598401,\n      607225278,\n      1426881987,\n      1925078388,\n      2162078206,\n      2614888103,\n      3248222580,\n      3835390401,\n      4022224774,\n      264347078,\n      604807628,\n      770255983,\n      1249150122,\n      1555081692,\n      1996064986,\n      2554220882,\n      2821834349,\n      2952996808,\n      3210313671,\n      3336571891,\n      3584528711,\n      113926993,\n      338241895,\n      666307205,\n      773529912,\n      1294757372,\n      1396182291,\n      1695183700,\n      1986661051,\n      2177026350,\n      2456956037,\n      2730485921,\n      2820302411,\n      3259730800,\n      3345764771,\n      3516065817,\n      3600352804,\n      4094571909,\n      275423344,\n      430227734,\n      506948616,\n      659060556,\n      883997877,\n      958139571,\n      1322822218,\n      1537002063,\n      1747873779,\n      1955562222,\n      2024104815,\n      2227730452,\n      2361852424,\n      2428436474,\n      2756734187,\n      3204031479,\n      3329325298\n    ];\n    function SHA256() {\n      if (!(this instanceof SHA256))\n        return new SHA256();\n      BlockHash.call(this);\n      this.h = [\n        1779033703,\n        3144134277,\n        1013904242,\n        2773480762,\n        1359893119,\n        2600822924,\n        528734635,\n        1541459225\n      ];\n      this.k = sha256_K;\n      this.W = new Array(64);\n    }\n    utils.inherits(SHA256, BlockHash);\n    module.exports = SHA256;\n    SHA256.blockSize = 512;\n    SHA256.outSize = 256;\n    SHA256.hmacStrength = 192;\n    SHA256.padLength = 64;\n    SHA256.prototype._update = function _update(msg, start) {\n      var W = this.W;\n      for (var i = 0; i < 16; i++)\n        W[i] = msg[start + i];\n      for (; i < W.length; i++)\n        W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n      var a = this.h[0];\n      var b = this.h[1];\n      var c = this.h[2];\n      var d = this.h[3];\n      var e = this.h[4];\n      var f = this.h[5];\n      var g = this.h[6];\n      var h = this.h[7];\n      assert(this.k.length === W.length);\n      for (i = 0; i < W.length; i++) {\n        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n        var T2 = sum32(s0_256(a), maj32(a, b, c));\n        h = g;\n        g = f;\n        f = e;\n        e = sum32(d, T1);\n        d = c;\n        c = b;\n        b = a;\n        a = sum32(T1, T2);\n      }\n      this.h[0] = sum32(this.h[0], a);\n      this.h[1] = sum32(this.h[1], b);\n      this.h[2] = sum32(this.h[2], c);\n      this.h[3] = sum32(this.h[3], d);\n      this.h[4] = sum32(this.h[4], e);\n      this.h[5] = sum32(this.h[5], f);\n      this.h[6] = sum32(this.h[6], g);\n      this.h[7] = sum32(this.h[7], h);\n    };\n    SHA256.prototype._digest = function digest(enc) {\n      if (enc === \"hex\")\n        return utils.toHex32(this.h, \"big\");\n      else\n        return utils.split32(this.h, \"big\");\n    };\n  }\n});\n\n// node_modules/hash.js/lib/hash/sha/224.js\nvar require__3 = __commonJS({\n  \"node_modules/hash.js/lib/hash/sha/224.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var SHA256 = require__2();\n    function SHA224() {\n      if (!(this instanceof SHA224))\n        return new SHA224();\n      SHA256.call(this);\n      this.h = [\n        3238371032,\n        914150663,\n        812702999,\n        4144912697,\n        4290775857,\n        1750603025,\n        1694076839,\n        3204075428\n      ];\n    }\n    utils.inherits(SHA224, SHA256);\n    module.exports = SHA224;\n    SHA224.blockSize = 512;\n    SHA224.outSize = 224;\n    SHA224.hmacStrength = 192;\n    SHA224.padLength = 64;\n    SHA224.prototype._digest = function digest(enc) {\n      if (enc === \"hex\")\n        return utils.toHex32(this.h.slice(0, 7), \"big\");\n      else\n        return utils.split32(this.h.slice(0, 7), \"big\");\n    };\n  }\n});\n\n// node_modules/hash.js/lib/hash/sha/512.js\nvar require__4 = __commonJS({\n  \"node_modules/hash.js/lib/hash/sha/512.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var common = require_common();\n    var assert = require_minimalistic_assert();\n    var rotr64_hi = utils.rotr64_hi;\n    var rotr64_lo = utils.rotr64_lo;\n    var shr64_hi = utils.shr64_hi;\n    var shr64_lo = utils.shr64_lo;\n    var sum64 = utils.sum64;\n    var sum64_hi = utils.sum64_hi;\n    var sum64_lo = utils.sum64_lo;\n    var sum64_4_hi = utils.sum64_4_hi;\n    var sum64_4_lo = utils.sum64_4_lo;\n    var sum64_5_hi = utils.sum64_5_hi;\n    var sum64_5_lo = utils.sum64_5_lo;\n    var BlockHash = common.BlockHash;\n    var sha512_K = [\n      1116352408,\n      3609767458,\n      1899447441,\n      602891725,\n      3049323471,\n      3964484399,\n      3921009573,\n      2173295548,\n      961987163,\n      4081628472,\n      1508970993,\n      3053834265,\n      2453635748,\n      2937671579,\n      2870763221,\n      3664609560,\n      3624381080,\n      2734883394,\n      310598401,\n      1164996542,\n      607225278,\n      1323610764,\n      1426881987,\n      3590304994,\n      1925078388,\n      4068182383,\n      2162078206,\n      991336113,\n      2614888103,\n      633803317,\n      3248222580,\n      3479774868,\n      3835390401,\n      2666613458,\n      4022224774,\n      944711139,\n      264347078,\n      2341262773,\n      604807628,\n      2007800933,\n      770255983,\n      1495990901,\n      1249150122,\n      1856431235,\n      1555081692,\n      3175218132,\n      1996064986,\n      2198950837,\n      2554220882,\n      3999719339,\n      2821834349,\n      766784016,\n      2952996808,\n      2566594879,\n      3210313671,\n      3203337956,\n      3336571891,\n      1034457026,\n      3584528711,\n      2466948901,\n      113926993,\n      3758326383,\n      338241895,\n      168717936,\n      666307205,\n      1188179964,\n      773529912,\n      1546045734,\n      1294757372,\n      1522805485,\n      1396182291,\n      2643833823,\n      1695183700,\n      2343527390,\n      1986661051,\n      1014477480,\n      2177026350,\n      1206759142,\n      2456956037,\n      344077627,\n      2730485921,\n      1290863460,\n      2820302411,\n      3158454273,\n      3259730800,\n      3505952657,\n      3345764771,\n      106217008,\n      3516065817,\n      3606008344,\n      3600352804,\n      1432725776,\n      4094571909,\n      1467031594,\n      275423344,\n      851169720,\n      430227734,\n      3100823752,\n      506948616,\n      1363258195,\n      659060556,\n      3750685593,\n      883997877,\n      3785050280,\n      958139571,\n      3318307427,\n      1322822218,\n      3812723403,\n      1537002063,\n      2003034995,\n      1747873779,\n      3602036899,\n      1955562222,\n      1575990012,\n      2024104815,\n      1125592928,\n      2227730452,\n      2716904306,\n      2361852424,\n      442776044,\n      2428436474,\n      593698344,\n      2756734187,\n      3733110249,\n      3204031479,\n      2999351573,\n      3329325298,\n      3815920427,\n      3391569614,\n      3928383900,\n      3515267271,\n      566280711,\n      3940187606,\n      3454069534,\n      4118630271,\n      4000239992,\n      116418474,\n      1914138554,\n      174292421,\n      2731055270,\n      289380356,\n      3203993006,\n      460393269,\n      320620315,\n      685471733,\n      587496836,\n      852142971,\n      1086792851,\n      1017036298,\n      365543100,\n      1126000580,\n      2618297676,\n      1288033470,\n      3409855158,\n      1501505948,\n      4234509866,\n      1607167915,\n      987167468,\n      1816402316,\n      1246189591\n    ];\n    function SHA512() {\n      if (!(this instanceof SHA512))\n        return new SHA512();\n      BlockHash.call(this);\n      this.h = [\n        1779033703,\n        4089235720,\n        3144134277,\n        2227873595,\n        1013904242,\n        4271175723,\n        2773480762,\n        1595750129,\n        1359893119,\n        2917565137,\n        2600822924,\n        725511199,\n        528734635,\n        4215389547,\n        1541459225,\n        327033209\n      ];\n      this.k = sha512_K;\n      this.W = new Array(160);\n    }\n    utils.inherits(SHA512, BlockHash);\n    module.exports = SHA512;\n    SHA512.blockSize = 1024;\n    SHA512.outSize = 512;\n    SHA512.hmacStrength = 192;\n    SHA512.padLength = 128;\n    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n      var W = this.W;\n      for (var i = 0; i < 32; i++)\n        W[i] = msg[start + i];\n      for (; i < W.length; i += 2) {\n        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);\n        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n        var c1_hi = W[i - 14];\n        var c1_lo = W[i - 13];\n        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);\n        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n        var c3_hi = W[i - 32];\n        var c3_lo = W[i - 31];\n        W[i] = sum64_4_hi(\n          c0_hi,\n          c0_lo,\n          c1_hi,\n          c1_lo,\n          c2_hi,\n          c2_lo,\n          c3_hi,\n          c3_lo\n        );\n        W[i + 1] = sum64_4_lo(\n          c0_hi,\n          c0_lo,\n          c1_hi,\n          c1_lo,\n          c2_hi,\n          c2_lo,\n          c3_hi,\n          c3_lo\n        );\n      }\n    };\n    SHA512.prototype._update = function _update(msg, start) {\n      this._prepareBlock(msg, start);\n      var W = this.W;\n      var ah = this.h[0];\n      var al = this.h[1];\n      var bh = this.h[2];\n      var bl = this.h[3];\n      var ch = this.h[4];\n      var cl = this.h[5];\n      var dh = this.h[6];\n      var dl = this.h[7];\n      var eh = this.h[8];\n      var el = this.h[9];\n      var fh = this.h[10];\n      var fl = this.h[11];\n      var gh = this.h[12];\n      var gl = this.h[13];\n      var hh = this.h[14];\n      var hl = this.h[15];\n      assert(this.k.length === W.length);\n      for (var i = 0; i < W.length; i += 2) {\n        var c0_hi = hh;\n        var c0_lo = hl;\n        var c1_hi = s1_512_hi(eh, el);\n        var c1_lo = s1_512_lo(eh, el);\n        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n        var c3_hi = this.k[i];\n        var c3_lo = this.k[i + 1];\n        var c4_hi = W[i];\n        var c4_lo = W[i + 1];\n        var T1_hi = sum64_5_hi(\n          c0_hi,\n          c0_lo,\n          c1_hi,\n          c1_lo,\n          c2_hi,\n          c2_lo,\n          c3_hi,\n          c3_lo,\n          c4_hi,\n          c4_lo\n        );\n        var T1_lo = sum64_5_lo(\n          c0_hi,\n          c0_lo,\n          c1_hi,\n          c1_lo,\n          c2_hi,\n          c2_lo,\n          c3_hi,\n          c3_lo,\n          c4_hi,\n          c4_lo\n        );\n        c0_hi = s0_512_hi(ah, al);\n        c0_lo = s0_512_lo(ah, al);\n        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n        hh = gh;\n        hl = gl;\n        gh = fh;\n        gl = fl;\n        fh = eh;\n        fl = el;\n        eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n        el = sum64_lo(dl, dl, T1_hi, T1_lo);\n        dh = ch;\n        dl = cl;\n        ch = bh;\n        cl = bl;\n        bh = ah;\n        bl = al;\n        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n      }\n      sum64(this.h, 0, ah, al);\n      sum64(this.h, 2, bh, bl);\n      sum64(this.h, 4, ch, cl);\n      sum64(this.h, 6, dh, dl);\n      sum64(this.h, 8, eh, el);\n      sum64(this.h, 10, fh, fl);\n      sum64(this.h, 12, gh, gl);\n      sum64(this.h, 14, hh, hl);\n    };\n    SHA512.prototype._digest = function digest(enc) {\n      if (enc === \"hex\")\n        return utils.toHex32(this.h, \"big\");\n      else\n        return utils.split32(this.h, \"big\");\n    };\n    function ch64_hi(xh, xl, yh, yl, zh) {\n      var r = xh & yh ^ ~xh & zh;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function ch64_lo(xh, xl, yh, yl, zh, zl) {\n      var r = xl & yl ^ ~xl & zl;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function maj64_hi(xh, xl, yh, yl, zh) {\n      var r = xh & yh ^ xh & zh ^ yh & zh;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function maj64_lo(xh, xl, yh, yl, zh, zl) {\n      var r = xl & yl ^ xl & zl ^ yl & zl;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function s0_512_hi(xh, xl) {\n      var c0_hi = rotr64_hi(xh, xl, 28);\n      var c1_hi = rotr64_hi(xl, xh, 2);\n      var c2_hi = rotr64_hi(xl, xh, 7);\n      var r = c0_hi ^ c1_hi ^ c2_hi;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function s0_512_lo(xh, xl) {\n      var c0_lo = rotr64_lo(xh, xl, 28);\n      var c1_lo = rotr64_lo(xl, xh, 2);\n      var c2_lo = rotr64_lo(xl, xh, 7);\n      var r = c0_lo ^ c1_lo ^ c2_lo;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function s1_512_hi(xh, xl) {\n      var c0_hi = rotr64_hi(xh, xl, 14);\n      var c1_hi = rotr64_hi(xh, xl, 18);\n      var c2_hi = rotr64_hi(xl, xh, 9);\n      var r = c0_hi ^ c1_hi ^ c2_hi;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function s1_512_lo(xh, xl) {\n      var c0_lo = rotr64_lo(xh, xl, 14);\n      var c1_lo = rotr64_lo(xh, xl, 18);\n      var c2_lo = rotr64_lo(xl, xh, 9);\n      var r = c0_lo ^ c1_lo ^ c2_lo;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function g0_512_hi(xh, xl) {\n      var c0_hi = rotr64_hi(xh, xl, 1);\n      var c1_hi = rotr64_hi(xh, xl, 8);\n      var c2_hi = shr64_hi(xh, xl, 7);\n      var r = c0_hi ^ c1_hi ^ c2_hi;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function g0_512_lo(xh, xl) {\n      var c0_lo = rotr64_lo(xh, xl, 1);\n      var c1_lo = rotr64_lo(xh, xl, 8);\n      var c2_lo = shr64_lo(xh, xl, 7);\n      var r = c0_lo ^ c1_lo ^ c2_lo;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function g1_512_hi(xh, xl) {\n      var c0_hi = rotr64_hi(xh, xl, 19);\n      var c1_hi = rotr64_hi(xl, xh, 29);\n      var c2_hi = shr64_hi(xh, xl, 6);\n      var r = c0_hi ^ c1_hi ^ c2_hi;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n    function g1_512_lo(xh, xl) {\n      var c0_lo = rotr64_lo(xh, xl, 19);\n      var c1_lo = rotr64_lo(xl, xh, 29);\n      var c2_lo = shr64_lo(xh, xl, 6);\n      var r = c0_lo ^ c1_lo ^ c2_lo;\n      if (r < 0)\n        r += 4294967296;\n      return r;\n    }\n  }\n});\n\n// node_modules/hash.js/lib/hash/sha/384.js\nvar require__5 = __commonJS({\n  \"node_modules/hash.js/lib/hash/sha/384.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var SHA512 = require__4();\n    function SHA384() {\n      if (!(this instanceof SHA384))\n        return new SHA384();\n      SHA512.call(this);\n      this.h = [\n        3418070365,\n        3238371032,\n        1654270250,\n        914150663,\n        2438529370,\n        812702999,\n        355462360,\n        4144912697,\n        1731405415,\n        4290775857,\n        2394180231,\n        1750603025,\n        3675008525,\n        1694076839,\n        1203062813,\n        3204075428\n      ];\n    }\n    utils.inherits(SHA384, SHA512);\n    module.exports = SHA384;\n    SHA384.blockSize = 1024;\n    SHA384.outSize = 384;\n    SHA384.hmacStrength = 192;\n    SHA384.padLength = 128;\n    SHA384.prototype._digest = function digest(enc) {\n      if (enc === \"hex\")\n        return utils.toHex32(this.h.slice(0, 12), \"big\");\n      else\n        return utils.split32(this.h.slice(0, 12), \"big\");\n    };\n  }\n});\n\n// node_modules/hash.js/lib/hash/sha.js\nvar require_sha3 = __commonJS({\n  \"node_modules/hash.js/lib/hash/sha.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    exports.sha1 = require__();\n    exports.sha224 = require__3();\n    exports.sha256 = require__2();\n    exports.sha384 = require__5();\n    exports.sha512 = require__4();\n  }\n});\n\n// node_modules/hash.js/lib/hash/ripemd.js\nvar require_ripemd = __commonJS({\n  \"node_modules/hash.js/lib/hash/ripemd.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var common = require_common();\n    var rotl32 = utils.rotl32;\n    var sum32 = utils.sum32;\n    var sum32_3 = utils.sum32_3;\n    var sum32_4 = utils.sum32_4;\n    var BlockHash = common.BlockHash;\n    function RIPEMD160() {\n      if (!(this instanceof RIPEMD160))\n        return new RIPEMD160();\n      BlockHash.call(this);\n      this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];\n      this.endian = \"little\";\n    }\n    utils.inherits(RIPEMD160, BlockHash);\n    exports.ripemd160 = RIPEMD160;\n    RIPEMD160.blockSize = 512;\n    RIPEMD160.outSize = 160;\n    RIPEMD160.hmacStrength = 192;\n    RIPEMD160.padLength = 64;\n    RIPEMD160.prototype._update = function update(msg, start) {\n      var A = this.h[0];\n      var B = this.h[1];\n      var C = this.h[2];\n      var D = this.h[3];\n      var E = this.h[4];\n      var Ah = A;\n      var Bh = B;\n      var Ch = C;\n      var Dh = D;\n      var Eh = E;\n      for (var j = 0; j < 80; j++) {\n        var T = sum32(\n          rotl32(\n            sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n            s[j]\n          ),\n          E\n        );\n        A = E;\n        E = D;\n        D = rotl32(C, 10);\n        C = B;\n        B = T;\n        T = sum32(\n          rotl32(\n            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n            sh[j]\n          ),\n          Eh\n        );\n        Ah = Eh;\n        Eh = Dh;\n        Dh = rotl32(Ch, 10);\n        Ch = Bh;\n        Bh = T;\n      }\n      T = sum32_3(this.h[1], C, Dh);\n      this.h[1] = sum32_3(this.h[2], D, Eh);\n      this.h[2] = sum32_3(this.h[3], E, Ah);\n      this.h[3] = sum32_3(this.h[4], A, Bh);\n      this.h[4] = sum32_3(this.h[0], B, Ch);\n      this.h[0] = T;\n    };\n    RIPEMD160.prototype._digest = function digest(enc) {\n      if (enc === \"hex\")\n        return utils.toHex32(this.h, \"little\");\n      else\n        return utils.split32(this.h, \"little\");\n    };\n    function f(j, x, y, z) {\n      if (j <= 15)\n        return x ^ y ^ z;\n      else if (j <= 31)\n        return x & y | ~x & z;\n      else if (j <= 47)\n        return (x | ~y) ^ z;\n      else if (j <= 63)\n        return x & z | y & ~z;\n      else\n        return x ^ (y | ~z);\n    }\n    function K(j) {\n      if (j <= 15)\n        return 0;\n      else if (j <= 31)\n        return 1518500249;\n      else if (j <= 47)\n        return 1859775393;\n      else if (j <= 63)\n        return 2400959708;\n      else\n        return 2840853838;\n    }\n    function Kh(j) {\n      if (j <= 15)\n        return 1352829926;\n      else if (j <= 31)\n        return 1548603684;\n      else if (j <= 47)\n        return 1836072691;\n      else if (j <= 63)\n        return 2053994217;\n      else\n        return 0;\n    }\n    var r = [\n      0,\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10,\n      11,\n      12,\n      13,\n      14,\n      15,\n      7,\n      4,\n      13,\n      1,\n      10,\n      6,\n      15,\n      3,\n      12,\n      0,\n      9,\n      5,\n      2,\n      14,\n      11,\n      8,\n      3,\n      10,\n      14,\n      4,\n      9,\n      15,\n      8,\n      1,\n      2,\n      7,\n      0,\n      6,\n      13,\n      11,\n      5,\n      12,\n      1,\n      9,\n      11,\n      10,\n      0,\n      8,\n      12,\n      4,\n      13,\n      3,\n      7,\n      15,\n      14,\n      5,\n      6,\n      2,\n      4,\n      0,\n      5,\n      9,\n      7,\n      12,\n      2,\n      10,\n      14,\n      1,\n      3,\n      8,\n      11,\n      6,\n      15,\n      13\n    ];\n    var rh = [\n      5,\n      14,\n      7,\n      0,\n      9,\n      2,\n      11,\n      4,\n      13,\n      6,\n      15,\n      8,\n      1,\n      10,\n      3,\n      12,\n      6,\n      11,\n      3,\n      7,\n      0,\n      13,\n      5,\n      10,\n      14,\n      15,\n      8,\n      12,\n      4,\n      9,\n      1,\n      2,\n      15,\n      5,\n      1,\n      3,\n      7,\n      14,\n      6,\n      9,\n      11,\n      8,\n      12,\n      2,\n      10,\n      0,\n      4,\n      13,\n      8,\n      6,\n      4,\n      1,\n      3,\n      11,\n      15,\n      0,\n      5,\n      12,\n      2,\n      13,\n      9,\n      7,\n      10,\n      14,\n      12,\n      15,\n      10,\n      4,\n      1,\n      5,\n      8,\n      7,\n      6,\n      2,\n      13,\n      14,\n      0,\n      3,\n      9,\n      11\n    ];\n    var s = [\n      11,\n      14,\n      15,\n      12,\n      5,\n      8,\n      7,\n      9,\n      11,\n      13,\n      14,\n      15,\n      6,\n      7,\n      9,\n      8,\n      7,\n      6,\n      8,\n      13,\n      11,\n      9,\n      7,\n      15,\n      7,\n      12,\n      15,\n      9,\n      11,\n      7,\n      13,\n      12,\n      11,\n      13,\n      6,\n      7,\n      14,\n      9,\n      13,\n      15,\n      14,\n      8,\n      13,\n      6,\n      5,\n      12,\n      7,\n      5,\n      11,\n      12,\n      14,\n      15,\n      14,\n      15,\n      9,\n      8,\n      9,\n      14,\n      5,\n      6,\n      8,\n      6,\n      5,\n      12,\n      9,\n      15,\n      5,\n      11,\n      6,\n      8,\n      13,\n      12,\n      5,\n      12,\n      13,\n      14,\n      11,\n      8,\n      5,\n      6\n    ];\n    var sh = [\n      8,\n      9,\n      9,\n      11,\n      13,\n      15,\n      15,\n      5,\n      7,\n      7,\n      8,\n      11,\n      14,\n      14,\n      12,\n      6,\n      9,\n      13,\n      15,\n      7,\n      12,\n      8,\n      9,\n      11,\n      7,\n      7,\n      12,\n      7,\n      6,\n      15,\n      13,\n      11,\n      9,\n      7,\n      15,\n      11,\n      8,\n      6,\n      6,\n      14,\n      12,\n      13,\n      5,\n      14,\n      13,\n      13,\n      7,\n      5,\n      15,\n      5,\n      8,\n      11,\n      14,\n      14,\n      6,\n      14,\n      6,\n      9,\n      12,\n      9,\n      12,\n      5,\n      15,\n      8,\n      8,\n      5,\n      12,\n      9,\n      12,\n      5,\n      14,\n      6,\n      8,\n      13,\n      6,\n      5,\n      15,\n      13,\n      11,\n      11\n    ];\n  }\n});\n\n// node_modules/hash.js/lib/hash/hmac.js\nvar require_hmac = __commonJS({\n  \"node_modules/hash.js/lib/hash/hmac.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils4();\n    var assert = require_minimalistic_assert();\n    function Hmac(hash, key, enc) {\n      if (!(this instanceof Hmac))\n        return new Hmac(hash, key, enc);\n      this.Hash = hash;\n      this.blockSize = hash.blockSize / 8;\n      this.outSize = hash.outSize / 8;\n      this.inner = null;\n      this.outer = null;\n      this._init(utils.toArray(key, enc));\n    }\n    module.exports = Hmac;\n    Hmac.prototype._init = function init(key) {\n      if (key.length > this.blockSize)\n        key = new this.Hash().update(key).digest();\n      assert(key.length <= this.blockSize);\n      for (var i = key.length; i < this.blockSize; i++)\n        key.push(0);\n      for (i = 0; i < key.length; i++)\n        key[i] ^= 54;\n      this.inner = new this.Hash().update(key);\n      for (i = 0; i < key.length; i++)\n        key[i] ^= 106;\n      this.outer = new this.Hash().update(key);\n    };\n    Hmac.prototype.update = function update(msg, enc) {\n      this.inner.update(msg, enc);\n      return this;\n    };\n    Hmac.prototype.digest = function digest(enc) {\n      this.outer.update(this.inner.digest());\n      return this.outer.digest(enc);\n    };\n  }\n});\n\n// node_modules/hash.js/lib/hash.js\nvar require_hash2 = __commonJS({\n  \"node_modules/hash.js/lib/hash.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var hash = exports;\n    hash.utils = require_utils4();\n    hash.common = require_common();\n    hash.sha = require_sha3();\n    hash.ripemd = require_ripemd();\n    hash.hmac = require_hmac();\n    hash.sha1 = hash.sha.sha1;\n    hash.sha256 = hash.sha.sha256;\n    hash.sha224 = hash.sha.sha224;\n    hash.sha384 = hash.sha.sha384;\n    hash.sha512 = hash.sha.sha512;\n    hash.ripemd160 = hash.ripemd.ripemd160;\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js\nvar require_secp256k1 = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = {\n      doubles: {\n        step: 4,\n        points: [\n          [\n            \"e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a\",\n            \"f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821\"\n          ],\n          [\n            \"8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508\",\n            \"11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n          ],\n          [\n            \"175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739\",\n            \"d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695\"\n          ],\n          [\n            \"363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\",\n            \"4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9\"\n          ],\n          [\n            \"8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c\",\n            \"4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36\"\n          ],\n          [\n            \"723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda\",\n            \"96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f\"\n          ],\n          [\n            \"eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa\",\n            \"5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999\"\n          ],\n          [\n            \"100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0\",\n            \"cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09\"\n          ],\n          [\n            \"e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d\",\n            \"9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d\"\n          ],\n          [\n            \"feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d\",\n            \"e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088\"\n          ],\n          [\n            \"da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1\",\n            \"9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d\"\n          ],\n          [\n            \"53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0\",\n            \"5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8\"\n          ],\n          [\n            \"8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047\",\n            \"10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a\"\n          ],\n          [\n            \"385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862\",\n            \"283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453\"\n          ],\n          [\n            \"6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7\",\n            \"7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160\"\n          ],\n          [\n            \"3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd\",\n            \"56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0\"\n          ],\n          [\n            \"85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83\",\n            \"7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6\"\n          ],\n          [\n            \"948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a\",\n            \"53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589\"\n          ],\n          [\n            \"6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8\",\n            \"bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17\"\n          ],\n          [\n            \"e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d\",\n            \"4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda\"\n          ],\n          [\n            \"e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725\",\n            \"7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd\"\n          ],\n          [\n            \"213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754\",\n            \"4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2\"\n          ],\n          [\n            \"4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c\",\n            \"17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6\"\n          ],\n          [\n            \"fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6\",\n            \"6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f\"\n          ],\n          [\n            \"76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39\",\n            \"c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01\"\n          ],\n          [\n            \"c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891\",\n            \"893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3\"\n          ],\n          [\n            \"d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b\",\n            \"febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f\"\n          ],\n          [\n            \"b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03\",\n            \"2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7\"\n          ],\n          [\n            \"e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d\",\n            \"eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78\"\n          ],\n          [\n            \"a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070\",\n            \"7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1\"\n          ],\n          [\n            \"90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4\",\n            \"e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150\"\n          ],\n          [\n            \"8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da\",\n            \"662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82\"\n          ],\n          [\n            \"e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11\",\n            \"1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc\"\n          ],\n          [\n            \"8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e\",\n            \"efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b\"\n          ],\n          [\n            \"e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41\",\n            \"2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51\"\n          ],\n          [\n            \"b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef\",\n            \"67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45\"\n          ],\n          [\n            \"d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8\",\n            \"db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120\"\n          ],\n          [\n            \"324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d\",\n            \"648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84\"\n          ],\n          [\n            \"4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96\",\n            \"35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d\"\n          ],\n          [\n            \"9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd\",\n            \"ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d\"\n          ],\n          [\n            \"6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5\",\n            \"9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8\"\n          ],\n          [\n            \"a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266\",\n            \"40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8\"\n          ],\n          [\n            \"7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71\",\n            \"34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac\"\n          ],\n          [\n            \"928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac\",\n            \"c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f\"\n          ],\n          [\n            \"85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751\",\n            \"1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962\"\n          ],\n          [\n            \"ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e\",\n            \"493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907\"\n          ],\n          [\n            \"827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241\",\n            \"c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec\"\n          ],\n          [\n            \"eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3\",\n            \"be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d\"\n          ],\n          [\n            \"e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f\",\n            \"4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414\"\n          ],\n          [\n            \"1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19\",\n            \"aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd\"\n          ],\n          [\n            \"146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be\",\n            \"b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0\"\n          ],\n          [\n            \"fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9\",\n            \"6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811\"\n          ],\n          [\n            \"da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2\",\n            \"8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1\"\n          ],\n          [\n            \"a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13\",\n            \"7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c\"\n          ],\n          [\n            \"174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c\",\n            \"ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73\"\n          ],\n          [\n            \"959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba\",\n            \"2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd\"\n          ],\n          [\n            \"d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151\",\n            \"e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405\"\n          ],\n          [\n            \"64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073\",\n            \"d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589\"\n          ],\n          [\n            \"8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458\",\n            \"38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e\"\n          ],\n          [\n            \"13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b\",\n            \"69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27\"\n          ],\n          [\n            \"bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366\",\n            \"d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1\"\n          ],\n          [\n            \"8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa\",\n            \"40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482\"\n          ],\n          [\n            \"8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0\",\n            \"620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945\"\n          ],\n          [\n            \"dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787\",\n            \"7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573\"\n          ],\n          [\n            \"f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e\",\n            \"ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82\"\n          ]\n        ]\n      },\n      naf: {\n        wnd: 7,\n        points: [\n          [\n            \"f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9\",\n            \"388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672\"\n          ],\n          [\n            \"2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4\",\n            \"d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6\"\n          ],\n          [\n            \"5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc\",\n            \"6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da\"\n          ],\n          [\n            \"acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe\",\n            \"cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37\"\n          ],\n          [\n            \"774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb\",\n            \"d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b\"\n          ],\n          [\n            \"f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8\",\n            \"ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81\"\n          ],\n          [\n            \"d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e\",\n            \"581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58\"\n          ],\n          [\n            \"defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34\",\n            \"4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77\"\n          ],\n          [\n            \"2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c\",\n            \"85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a\"\n          ],\n          [\n            \"352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5\",\n            \"321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c\"\n          ],\n          [\n            \"2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f\",\n            \"2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67\"\n          ],\n          [\n            \"9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714\",\n            \"73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402\"\n          ],\n          [\n            \"daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729\",\n            \"a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55\"\n          ],\n          [\n            \"c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db\",\n            \"2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482\"\n          ],\n          [\n            \"6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4\",\n            \"e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82\"\n          ],\n          [\n            \"1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5\",\n            \"b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396\"\n          ],\n          [\n            \"605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479\",\n            \"2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49\"\n          ],\n          [\n            \"62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d\",\n            \"80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf\"\n          ],\n          [\n            \"80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f\",\n            \"1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a\"\n          ],\n          [\n            \"7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb\",\n            \"d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7\"\n          ],\n          [\n            \"d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9\",\n            \"eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933\"\n          ],\n          [\n            \"49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963\",\n            \"758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a\"\n          ],\n          [\n            \"77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74\",\n            \"958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6\"\n          ],\n          [\n            \"f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530\",\n            \"e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37\"\n          ],\n          [\n            \"463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b\",\n            \"5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e\"\n          ],\n          [\n            \"f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247\",\n            \"cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6\"\n          ],\n          [\n            \"caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1\",\n            \"cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476\"\n          ],\n          [\n            \"2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120\",\n            \"4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40\"\n          ],\n          [\n            \"7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435\",\n            \"91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61\"\n          ],\n          [\n            \"754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18\",\n            \"673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683\"\n          ],\n          [\n            \"e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8\",\n            \"59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5\"\n          ],\n          [\n            \"186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb\",\n            \"3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b\"\n          ],\n          [\n            \"df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f\",\n            \"55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417\"\n          ],\n          [\n            \"5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143\",\n            \"efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868\"\n          ],\n          [\n            \"290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba\",\n            \"e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a\"\n          ],\n          [\n            \"af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45\",\n            \"f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6\"\n          ],\n          [\n            \"766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a\",\n            \"744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996\"\n          ],\n          [\n            \"59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e\",\n            \"c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e\"\n          ],\n          [\n            \"f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8\",\n            \"e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d\"\n          ],\n          [\n            \"7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c\",\n            \"30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2\"\n          ],\n          [\n            \"948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519\",\n            \"e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e\"\n          ],\n          [\n            \"7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab\",\n            \"100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437\"\n          ],\n          [\n            \"3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca\",\n            \"ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311\"\n          ],\n          [\n            \"d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf\",\n            \"8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4\"\n          ],\n          [\n            \"1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610\",\n            \"68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575\"\n          ],\n          [\n            \"733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4\",\n            \"f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d\"\n          ],\n          [\n            \"15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c\",\n            \"d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d\"\n          ],\n          [\n            \"a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940\",\n            \"edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629\"\n          ],\n          [\n            \"e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980\",\n            \"a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06\"\n          ],\n          [\n            \"311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3\",\n            \"66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374\"\n          ],\n          [\n            \"34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf\",\n            \"9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee\"\n          ],\n          [\n            \"f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63\",\n            \"4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1\"\n          ],\n          [\n            \"d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448\",\n            \"fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b\"\n          ],\n          [\n            \"32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf\",\n            \"5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661\"\n          ],\n          [\n            \"7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5\",\n            \"8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6\"\n          ],\n          [\n            \"ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6\",\n            \"8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e\"\n          ],\n          [\n            \"16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5\",\n            \"5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d\"\n          ],\n          [\n            \"eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99\",\n            \"f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc\"\n          ],\n          [\n            \"78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51\",\n            \"f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4\"\n          ],\n          [\n            \"494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5\",\n            \"42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c\"\n          ],\n          [\n            \"a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5\",\n            \"204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b\"\n          ],\n          [\n            \"c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997\",\n            \"4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913\"\n          ],\n          [\n            \"841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881\",\n            \"73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154\"\n          ],\n          [\n            \"5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5\",\n            \"39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865\"\n          ],\n          [\n            \"36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66\",\n            \"d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc\"\n          ],\n          [\n            \"336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726\",\n            \"ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224\"\n          ],\n          [\n            \"8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede\",\n            \"6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e\"\n          ],\n          [\n            \"1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94\",\n            \"60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6\"\n          ],\n          [\n            \"85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31\",\n            \"3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511\"\n          ],\n          [\n            \"29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51\",\n            \"b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b\"\n          ],\n          [\n            \"a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252\",\n            \"ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2\"\n          ],\n          [\n            \"4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5\",\n            \"cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c\"\n          ],\n          [\n            \"d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b\",\n            \"6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3\"\n          ],\n          [\n            \"ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4\",\n            \"322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d\"\n          ],\n          [\n            \"af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f\",\n            \"6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700\"\n          ],\n          [\n            \"e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889\",\n            \"2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4\"\n          ],\n          [\n            \"591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246\",\n            \"b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196\"\n          ],\n          [\n            \"11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984\",\n            \"998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4\"\n          ],\n          [\n            \"3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a\",\n            \"b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257\"\n          ],\n          [\n            \"cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030\",\n            \"bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13\"\n          ],\n          [\n            \"c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197\",\n            \"6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096\"\n          ],\n          [\n            \"c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593\",\n            \"c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38\"\n          ],\n          [\n            \"a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef\",\n            \"21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f\"\n          ],\n          [\n            \"347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38\",\n            \"60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448\"\n          ],\n          [\n            \"da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a\",\n            \"49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a\"\n          ],\n          [\n            \"c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111\",\n            \"5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4\"\n          ],\n          [\n            \"4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502\",\n            \"7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437\"\n          ],\n          [\n            \"3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea\",\n            \"be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7\"\n          ],\n          [\n            \"cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26\",\n            \"8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d\"\n          ],\n          [\n            \"b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986\",\n            \"39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a\"\n          ],\n          [\n            \"d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e\",\n            \"62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54\"\n          ],\n          [\n            \"48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4\",\n            \"25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77\"\n          ],\n          [\n            \"dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda\",\n            \"ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517\"\n          ],\n          [\n            \"6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859\",\n            \"cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10\"\n          ],\n          [\n            \"e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f\",\n            \"f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125\"\n          ],\n          [\n            \"eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c\",\n            \"6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e\"\n          ],\n          [\n            \"13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942\",\n            \"fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1\"\n          ],\n          [\n            \"ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a\",\n            \"1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2\"\n          ],\n          [\n            \"b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80\",\n            \"5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423\"\n          ],\n          [\n            \"ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d\",\n            \"438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8\"\n          ],\n          [\n            \"8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1\",\n            \"cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758\"\n          ],\n          [\n            \"52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63\",\n            \"c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375\"\n          ],\n          [\n            \"e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352\",\n            \"6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d\"\n          ],\n          [\n            \"7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193\",\n            \"ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec\"\n          ],\n          [\n            \"5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00\",\n            \"9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0\"\n          ],\n          [\n            \"32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58\",\n            \"ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c\"\n          ],\n          [\n            \"e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7\",\n            \"d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4\"\n          ],\n          [\n            \"8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8\",\n            \"c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f\"\n          ],\n          [\n            \"4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e\",\n            \"67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649\"\n          ],\n          [\n            \"3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d\",\n            \"cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826\"\n          ],\n          [\n            \"674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b\",\n            \"299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5\"\n          ],\n          [\n            \"d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f\",\n            \"f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87\"\n          ],\n          [\n            \"30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6\",\n            \"462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b\"\n          ],\n          [\n            \"be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297\",\n            \"62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc\"\n          ],\n          [\n            \"93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a\",\n            \"7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c\"\n          ],\n          [\n            \"b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c\",\n            \"ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f\"\n          ],\n          [\n            \"d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52\",\n            \"4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a\"\n          ],\n          [\n            \"d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb\",\n            \"bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46\"\n          ],\n          [\n            \"463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065\",\n            \"bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f\"\n          ],\n          [\n            \"7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917\",\n            \"603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03\"\n          ],\n          [\n            \"74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9\",\n            \"cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08\"\n          ],\n          [\n            \"30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3\",\n            \"553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8\"\n          ],\n          [\n            \"9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57\",\n            \"712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373\"\n          ],\n          [\n            \"176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66\",\n            \"ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3\"\n          ],\n          [\n            \"75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8\",\n            \"9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8\"\n          ],\n          [\n            \"809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721\",\n            \"9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1\"\n          ],\n          [\n            \"1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180\",\n            \"4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9\"\n          ]\n        ]\n      }\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/curves.js\nvar require_curves = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/curves.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var curves = exports;\n    var hash = require_hash2();\n    var curve = require_curve();\n    var utils = require_utils3();\n    var assert = utils.assert;\n    function PresetCurve(options) {\n      if (options.type === \"short\")\n        this.curve = new curve.short(options);\n      else if (options.type === \"edwards\")\n        this.curve = new curve.edwards(options);\n      else\n        this.curve = new curve.mont(options);\n      this.g = this.curve.g;\n      this.n = this.curve.n;\n      this.hash = options.hash;\n      assert(this.g.validate(), \"Invalid curve\");\n      assert(this.g.mul(this.n).isInfinity(), \"Invalid curve, G*N != O\");\n    }\n    curves.PresetCurve = PresetCurve;\n    function defineCurve(name, options) {\n      Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        get: function() {\n          var curve2 = new PresetCurve(options);\n          Object.defineProperty(curves, name, {\n            configurable: true,\n            enumerable: true,\n            value: curve2\n          });\n          return curve2;\n        }\n      });\n    }\n    defineCurve(\"p192\", {\n      type: \"short\",\n      prime: \"p192\",\n      p: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\",\n      a: \"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc\",\n      b: \"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1\",\n      n: \"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831\",\n      hash: hash.sha256,\n      gRed: false,\n      g: [\n        \"188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012\",\n        \"07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811\"\n      ]\n    });\n    defineCurve(\"p224\", {\n      type: \"short\",\n      prime: \"p224\",\n      p: \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\",\n      a: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe\",\n      b: \"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4\",\n      n: \"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d\",\n      hash: hash.sha256,\n      gRed: false,\n      g: [\n        \"b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21\",\n        \"bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34\"\n      ]\n    });\n    defineCurve(\"p256\", {\n      type: \"short\",\n      prime: null,\n      p: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff\",\n      a: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc\",\n      b: \"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b\",\n      n: \"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551\",\n      hash: hash.sha256,\n      gRed: false,\n      g: [\n        \"6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296\",\n        \"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5\"\n      ]\n    });\n    defineCurve(\"p384\", {\n      type: \"short\",\n      prime: null,\n      p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff\",\n      a: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc\",\n      b: \"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef\",\n      n: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973\",\n      hash: hash.sha384,\n      gRed: false,\n      g: [\n        \"aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7\",\n        \"3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\"\n      ]\n    });\n    defineCurve(\"p521\", {\n      type: \"short\",\n      prime: null,\n      p: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff\",\n      a: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc\",\n      b: \"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00\",\n      n: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409\",\n      hash: hash.sha512,\n      gRed: false,\n      g: [\n        \"000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66\",\n        \"00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650\"\n      ]\n    });\n    defineCurve(\"curve25519\", {\n      type: \"mont\",\n      prime: \"p25519\",\n      p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n      a: \"76d06\",\n      b: \"1\",\n      n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n      hash: hash.sha256,\n      gRed: false,\n      g: [\n        \"9\"\n      ]\n    });\n    defineCurve(\"ed25519\", {\n      type: \"edwards\",\n      prime: \"p25519\",\n      p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n      a: \"-1\",\n      c: \"1\",\n      // -121665 * (121666^(-1)) (mod P)\n      d: \"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3\",\n      n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n      hash: hash.sha256,\n      gRed: false,\n      g: [\n        \"216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a\",\n        // 4/5\n        \"6666666666666666666666666666666666666666666666666666666666666658\"\n      ]\n    });\n    var pre;\n    try {\n      pre = require_secp256k1();\n    } catch (e) {\n      pre = void 0;\n    }\n    defineCurve(\"secp256k1\", {\n      type: \"short\",\n      prime: \"k256\",\n      p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\",\n      a: \"0\",\n      b: \"7\",\n      n: \"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141\",\n      h: \"1\",\n      hash: hash.sha256,\n      // Precomputed endomorphism\n      beta: \"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\",\n      lambda: \"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72\",\n      basis: [\n        {\n          a: \"3086d221a7d46bcde86c90e49284eb15\",\n          b: \"-e4437ed6010e88286f547fa90abfe4c3\"\n        },\n        {\n          a: \"114ca50f7a8e2f3f657c1108d9d44cfd8\",\n          b: \"3086d221a7d46bcde86c90e49284eb15\"\n        }\n      ],\n      gRed: false,\n      g: [\n        \"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n        \"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n        pre\n      ]\n    });\n  }\n});\n\n// node_modules/hmac-drbg/lib/hmac-drbg.js\nvar require_hmac_drbg = __commonJS({\n  \"node_modules/hmac-drbg/lib/hmac-drbg.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var hash = require_hash2();\n    var utils = require_utils2();\n    var assert = require_minimalistic_assert();\n    function HmacDRBG(options) {\n      if (!(this instanceof HmacDRBG))\n        return new HmacDRBG(options);\n      this.hash = options.hash;\n      this.predResist = !!options.predResist;\n      this.outLen = this.hash.outSize;\n      this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n      this._reseed = null;\n      this.reseedInterval = null;\n      this.K = null;\n      this.V = null;\n      var entropy = utils.toArray(options.entropy, options.entropyEnc || \"hex\");\n      var nonce = utils.toArray(options.nonce, options.nonceEnc || \"hex\");\n      var pers = utils.toArray(options.pers, options.persEnc || \"hex\");\n      assert(\n        entropy.length >= this.minEntropy / 8,\n        \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\"\n      );\n      this._init(entropy, nonce, pers);\n    }\n    module.exports = HmacDRBG;\n    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n      var seed = entropy.concat(nonce).concat(pers);\n      this.K = new Array(this.outLen / 8);\n      this.V = new Array(this.outLen / 8);\n      for (var i = 0; i < this.V.length; i++) {\n        this.K[i] = 0;\n        this.V[i] = 1;\n      }\n      this._update(seed);\n      this._reseed = 1;\n      this.reseedInterval = 281474976710656;\n    };\n    HmacDRBG.prototype._hmac = function hmac() {\n      return new hash.hmac(this.hash, this.K);\n    };\n    HmacDRBG.prototype._update = function update(seed) {\n      var kmac = this._hmac().update(this.V).update([0]);\n      if (seed)\n        kmac = kmac.update(seed);\n      this.K = kmac.digest();\n      this.V = this._hmac().update(this.V).digest();\n      if (!seed)\n        return;\n      this.K = this._hmac().update(this.V).update([1]).update(seed).digest();\n      this.V = this._hmac().update(this.V).digest();\n    };\n    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n      if (typeof entropyEnc !== \"string\") {\n        addEnc = add;\n        add = entropyEnc;\n        entropyEnc = null;\n      }\n      entropy = utils.toArray(entropy, entropyEnc);\n      add = utils.toArray(add, addEnc);\n      assert(\n        entropy.length >= this.minEntropy / 8,\n        \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\"\n      );\n      this._update(entropy.concat(add || []));\n      this._reseed = 1;\n    };\n    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n      if (this._reseed > this.reseedInterval)\n        throw new Error(\"Reseed is required\");\n      if (typeof enc !== \"string\") {\n        addEnc = add;\n        add = enc;\n        enc = null;\n      }\n      if (add) {\n        add = utils.toArray(add, addEnc || \"hex\");\n        this._update(add);\n      }\n      var temp = [];\n      while (temp.length < len) {\n        this.V = this._hmac().update(this.V).digest();\n        temp = temp.concat(this.V);\n      }\n      var res = temp.slice(0, len);\n      this._update(add);\n      this._reseed++;\n      return utils.encode(res, enc);\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/ec/key.js\nvar require_key = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/ec/key.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn4();\n    var utils = require_utils3();\n    var assert = utils.assert;\n    function KeyPair(ec, options) {\n      this.ec = ec;\n      this.priv = null;\n      this.pub = null;\n      if (options.priv)\n        this._importPrivate(options.priv, options.privEnc);\n      if (options.pub)\n        this._importPublic(options.pub, options.pubEnc);\n    }\n    module.exports = KeyPair;\n    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n      if (pub instanceof KeyPair)\n        return pub;\n      return new KeyPair(ec, {\n        pub,\n        pubEnc: enc\n      });\n    };\n    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n      if (priv instanceof KeyPair)\n        return priv;\n      return new KeyPair(ec, {\n        priv,\n        privEnc: enc\n      });\n    };\n    KeyPair.prototype.validate = function validate() {\n      var pub = this.getPublic();\n      if (pub.isInfinity())\n        return { result: false, reason: \"Invalid public key\" };\n      if (!pub.validate())\n        return { result: false, reason: \"Public key is not a point\" };\n      if (!pub.mul(this.ec.curve.n).isInfinity())\n        return { result: false, reason: \"Public key * N != O\" };\n      return { result: true, reason: null };\n    };\n    KeyPair.prototype.getPublic = function getPublic(compact, enc) {\n      if (typeof compact === \"string\") {\n        enc = compact;\n        compact = null;\n      }\n      if (!this.pub)\n        this.pub = this.ec.g.mul(this.priv);\n      if (!enc)\n        return this.pub;\n      return this.pub.encode(enc, compact);\n    };\n    KeyPair.prototype.getPrivate = function getPrivate(enc) {\n      if (enc === \"hex\")\n        return this.priv.toString(16, 2);\n      else\n        return this.priv;\n    };\n    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n      this.priv = new BN(key, enc || 16);\n      this.priv = this.priv.umod(this.ec.curve.n);\n    };\n    KeyPair.prototype._importPublic = function _importPublic(key, enc) {\n      if (key.x || key.y) {\n        if (this.ec.curve.type === \"mont\") {\n          assert(key.x, \"Need x coordinate\");\n        } else if (this.ec.curve.type === \"short\" || this.ec.curve.type === \"edwards\") {\n          assert(key.x && key.y, \"Need both x and y coordinate\");\n        }\n        this.pub = this.ec.curve.point(key.x, key.y);\n        return;\n      }\n      this.pub = this.ec.curve.decodePoint(key, enc);\n    };\n    KeyPair.prototype.derive = function derive(pub) {\n      if (!pub.validate()) {\n        assert(pub.validate(), \"public point not validated\");\n      }\n      return pub.mul(this.priv).getX();\n    };\n    KeyPair.prototype.sign = function sign(msg, enc, options) {\n      return this.ec.sign(msg, this, enc, options);\n    };\n    KeyPair.prototype.verify = function verify(msg, signature) {\n      return this.ec.verify(msg, signature, this);\n    };\n    KeyPair.prototype.inspect = function inspect() {\n      return \"<Key priv: \" + (this.priv && this.priv.toString(16, 2)) + \" pub: \" + (this.pub && this.pub.inspect()) + \" >\";\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/ec/signature.js\nvar require_signature = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/ec/signature.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn4();\n    var utils = require_utils3();\n    var assert = utils.assert;\n    function Signature(options, enc) {\n      if (options instanceof Signature)\n        return options;\n      if (this._importDER(options, enc))\n        return;\n      assert(options.r && options.s, \"Signature without r or s\");\n      this.r = new BN(options.r, 16);\n      this.s = new BN(options.s, 16);\n      if (options.recoveryParam === void 0)\n        this.recoveryParam = null;\n      else\n        this.recoveryParam = options.recoveryParam;\n    }\n    module.exports = Signature;\n    function Position() {\n      this.place = 0;\n    }\n    function getLength(buf, p) {\n      var initial = buf[p.place++];\n      if (!(initial & 128)) {\n        return initial;\n      }\n      var octetLen = initial & 15;\n      if (octetLen === 0 || octetLen > 4) {\n        return false;\n      }\n      var val = 0;\n      for (var i = 0, off = p.place; i < octetLen; i++, off++) {\n        val <<= 8;\n        val |= buf[off];\n        val >>>= 0;\n      }\n      if (val <= 127) {\n        return false;\n      }\n      p.place = off;\n      return val;\n    }\n    function rmPadding(buf) {\n      var i = 0;\n      var len = buf.length - 1;\n      while (!buf[i] && !(buf[i + 1] & 128) && i < len) {\n        i++;\n      }\n      if (i === 0) {\n        return buf;\n      }\n      return buf.slice(i);\n    }\n    Signature.prototype._importDER = function _importDER(data, enc) {\n      data = utils.toArray(data, enc);\n      var p = new Position();\n      if (data[p.place++] !== 48) {\n        return false;\n      }\n      var len = getLength(data, p);\n      if (len === false) {\n        return false;\n      }\n      if (len + p.place !== data.length) {\n        return false;\n      }\n      if (data[p.place++] !== 2) {\n        return false;\n      }\n      var rlen = getLength(data, p);\n      if (rlen === false) {\n        return false;\n      }\n      var r = data.slice(p.place, rlen + p.place);\n      p.place += rlen;\n      if (data[p.place++] !== 2) {\n        return false;\n      }\n      var slen = getLength(data, p);\n      if (slen === false) {\n        return false;\n      }\n      if (data.length !== slen + p.place) {\n        return false;\n      }\n      var s = data.slice(p.place, slen + p.place);\n      if (r[0] === 0) {\n        if (r[1] & 128) {\n          r = r.slice(1);\n        } else {\n          return false;\n        }\n      }\n      if (s[0] === 0) {\n        if (s[1] & 128) {\n          s = s.slice(1);\n        } else {\n          return false;\n        }\n      }\n      this.r = new BN(r);\n      this.s = new BN(s);\n      this.recoveryParam = null;\n      return true;\n    };\n    function constructLength(arr, len) {\n      if (len < 128) {\n        arr.push(len);\n        return;\n      }\n      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n      arr.push(octets | 128);\n      while (--octets) {\n        arr.push(len >>> (octets << 3) & 255);\n      }\n      arr.push(len);\n    }\n    Signature.prototype.toDER = function toDER(enc) {\n      var r = this.r.toArray();\n      var s = this.s.toArray();\n      if (r[0] & 128)\n        r = [0].concat(r);\n      if (s[0] & 128)\n        s = [0].concat(s);\n      r = rmPadding(r);\n      s = rmPadding(s);\n      while (!s[0] && !(s[1] & 128)) {\n        s = s.slice(1);\n      }\n      var arr = [2];\n      constructLength(arr, r.length);\n      arr = arr.concat(r);\n      arr.push(2);\n      constructLength(arr, s.length);\n      var backHalf = arr.concat(s);\n      var res = [48];\n      constructLength(res, backHalf.length);\n      res = res.concat(backHalf);\n      return utils.encode(res, enc);\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/ec/index.js\nvar require_ec = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/ec/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn4();\n    var HmacDRBG = require_hmac_drbg();\n    var utils = require_utils3();\n    var curves = require_curves();\n    var rand = require_brorand();\n    var assert = utils.assert;\n    var KeyPair = require_key();\n    var Signature = require_signature();\n    function EC(options) {\n      if (!(this instanceof EC))\n        return new EC(options);\n      if (typeof options === \"string\") {\n        assert(\n          Object.prototype.hasOwnProperty.call(curves, options),\n          \"Unknown curve \" + options\n        );\n        options = curves[options];\n      }\n      if (options instanceof curves.PresetCurve)\n        options = { curve: options };\n      this.curve = options.curve.curve;\n      this.n = this.curve.n;\n      this.nh = this.n.ushrn(1);\n      this.g = this.curve.g;\n      this.g = options.curve.g;\n      this.g.precompute(options.curve.n.bitLength() + 1);\n      this.hash = options.hash || options.curve.hash;\n    }\n    module.exports = EC;\n    EC.prototype.keyPair = function keyPair(options) {\n      return new KeyPair(this, options);\n    };\n    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n      return KeyPair.fromPrivate(this, priv, enc);\n    };\n    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n      return KeyPair.fromPublic(this, pub, enc);\n    };\n    EC.prototype.genKeyPair = function genKeyPair(options) {\n      if (!options)\n        options = {};\n      var drbg = new HmacDRBG({\n        hash: this.hash,\n        pers: options.pers,\n        persEnc: options.persEnc || \"utf8\",\n        entropy: options.entropy || rand(this.hash.hmacStrength),\n        entropyEnc: options.entropy && options.entropyEnc || \"utf8\",\n        nonce: this.n.toArray()\n      });\n      var bytes = this.n.byteLength();\n      var ns2 = this.n.sub(new BN(2));\n      for (; ; ) {\n        var priv = new BN(drbg.generate(bytes));\n        if (priv.cmp(ns2) > 0)\n          continue;\n        priv.iaddn(1);\n        return this.keyFromPrivate(priv);\n      }\n    };\n    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {\n      var delta = msg.byteLength() * 8 - this.n.bitLength();\n      if (delta > 0)\n        msg = msg.ushrn(delta);\n      if (!truncOnly && msg.cmp(this.n) >= 0)\n        return msg.sub(this.n);\n      else\n        return msg;\n    };\n    EC.prototype.sign = function sign(msg, key, enc, options) {\n      if (typeof enc === \"object\") {\n        options = enc;\n        enc = null;\n      }\n      if (!options)\n        options = {};\n      key = this.keyFromPrivate(key, enc);\n      msg = this._truncateToN(new BN(msg, 16));\n      var bytes = this.n.byteLength();\n      var bkey = key.getPrivate().toArray(\"be\", bytes);\n      var nonce = msg.toArray(\"be\", bytes);\n      var drbg = new HmacDRBG({\n        hash: this.hash,\n        entropy: bkey,\n        nonce,\n        pers: options.pers,\n        persEnc: options.persEnc || \"utf8\"\n      });\n      var ns1 = this.n.sub(new BN(1));\n      for (var iter = 0; ; iter++) {\n        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));\n        k = this._truncateToN(k, true);\n        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)\n          continue;\n        var kp = this.g.mul(k);\n        if (kp.isInfinity())\n          continue;\n        var kpX = kp.getX();\n        var r = kpX.umod(this.n);\n        if (r.cmpn(0) === 0)\n          continue;\n        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n        s = s.umod(this.n);\n        if (s.cmpn(0) === 0)\n          continue;\n        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);\n        if (options.canonical && s.cmp(this.nh) > 0) {\n          s = this.n.sub(s);\n          recoveryParam ^= 1;\n        }\n        return new Signature({ r, s, recoveryParam });\n      }\n    };\n    EC.prototype.verify = function verify(msg, signature, key, enc) {\n      msg = this._truncateToN(new BN(msg, 16));\n      key = this.keyFromPublic(key, enc);\n      signature = new Signature(signature, \"hex\");\n      var r = signature.r;\n      var s = signature.s;\n      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)\n        return false;\n      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)\n        return false;\n      var sinv = s.invm(this.n);\n      var u1 = sinv.mul(msg).umod(this.n);\n      var u2 = sinv.mul(r).umod(this.n);\n      var p;\n      if (!this.curve._maxwellTrick) {\n        p = this.g.mulAdd(u1, key.getPublic(), u2);\n        if (p.isInfinity())\n          return false;\n        return p.getX().umod(this.n).cmp(r) === 0;\n      }\n      p = this.g.jmulAdd(u1, key.getPublic(), u2);\n      if (p.isInfinity())\n        return false;\n      return p.eqXToP(r);\n    };\n    EC.prototype.recoverPubKey = function(msg, signature, j, enc) {\n      assert((3 & j) === j, \"The recovery param is more than two bits\");\n      signature = new Signature(signature, enc);\n      var n = this.n;\n      var e = new BN(msg);\n      var r = signature.r;\n      var s = signature.s;\n      var isYOdd = j & 1;\n      var isSecondKey = j >> 1;\n      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)\n        throw new Error(\"Unable to find sencond key candinate\");\n      if (isSecondKey)\n        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n      else\n        r = this.curve.pointFromX(r, isYOdd);\n      var rInv = signature.r.invm(n);\n      var s1 = n.sub(e).mul(rInv).umod(n);\n      var s2 = s.mul(rInv).umod(n);\n      return this.g.mulAdd(s1, r, s2);\n    };\n    EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {\n      signature = new Signature(signature, enc);\n      if (signature.recoveryParam !== null)\n        return signature.recoveryParam;\n      for (var i = 0; i < 4; i++) {\n        var Qprime;\n        try {\n          Qprime = this.recoverPubKey(e, signature, i);\n        } catch (e2) {\n          continue;\n        }\n        if (Qprime.eq(Q))\n          return i;\n      }\n      throw new Error(\"Unable to find valid recovery factor\");\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/eddsa/key.js\nvar require_key2 = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/eddsa/key.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var utils = require_utils3();\n    var assert = utils.assert;\n    var parseBytes = utils.parseBytes;\n    var cachedProperty = utils.cachedProperty;\n    function KeyPair(eddsa, params) {\n      this.eddsa = eddsa;\n      this._secret = parseBytes(params.secret);\n      if (eddsa.isPoint(params.pub))\n        this._pub = params.pub;\n      else\n        this._pubBytes = parseBytes(params.pub);\n    }\n    KeyPair.fromPublic = function fromPublic(eddsa, pub) {\n      if (pub instanceof KeyPair)\n        return pub;\n      return new KeyPair(eddsa, { pub });\n    };\n    KeyPair.fromSecret = function fromSecret(eddsa, secret) {\n      if (secret instanceof KeyPair)\n        return secret;\n      return new KeyPair(eddsa, { secret });\n    };\n    KeyPair.prototype.secret = function secret() {\n      return this._secret;\n    };\n    cachedProperty(KeyPair, \"pubBytes\", function pubBytes() {\n      return this.eddsa.encodePoint(this.pub());\n    });\n    cachedProperty(KeyPair, \"pub\", function pub() {\n      if (this._pubBytes)\n        return this.eddsa.decodePoint(this._pubBytes);\n      return this.eddsa.g.mul(this.priv());\n    });\n    cachedProperty(KeyPair, \"privBytes\", function privBytes() {\n      var eddsa = this.eddsa;\n      var hash = this.hash();\n      var lastIx = eddsa.encodingLength - 1;\n      var a = hash.slice(0, eddsa.encodingLength);\n      a[0] &= 248;\n      a[lastIx] &= 127;\n      a[lastIx] |= 64;\n      return a;\n    });\n    cachedProperty(KeyPair, \"priv\", function priv() {\n      return this.eddsa.decodeInt(this.privBytes());\n    });\n    cachedProperty(KeyPair, \"hash\", function hash() {\n      return this.eddsa.hash().update(this.secret()).digest();\n    });\n    cachedProperty(KeyPair, \"messagePrefix\", function messagePrefix() {\n      return this.hash().slice(this.eddsa.encodingLength);\n    });\n    KeyPair.prototype.sign = function sign(message) {\n      assert(this._secret, \"KeyPair can only verify\");\n      return this.eddsa.sign(message, this);\n    };\n    KeyPair.prototype.verify = function verify(message, sig) {\n      return this.eddsa.verify(message, sig, this);\n    };\n    KeyPair.prototype.getSecret = function getSecret(enc) {\n      assert(this._secret, \"KeyPair is public only\");\n      return utils.encode(this.secret(), enc);\n    };\n    KeyPair.prototype.getPublic = function getPublic(enc) {\n      return utils.encode(this.pubBytes(), enc);\n    };\n    module.exports = KeyPair;\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/eddsa/signature.js\nvar require_signature2 = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/eddsa/signature.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn4();\n    var utils = require_utils3();\n    var assert = utils.assert;\n    var cachedProperty = utils.cachedProperty;\n    var parseBytes = utils.parseBytes;\n    function Signature(eddsa, sig) {\n      this.eddsa = eddsa;\n      if (typeof sig !== \"object\")\n        sig = parseBytes(sig);\n      if (Array.isArray(sig)) {\n        sig = {\n          R: sig.slice(0, eddsa.encodingLength),\n          S: sig.slice(eddsa.encodingLength)\n        };\n      }\n      assert(sig.R && sig.S, \"Signature without R or S\");\n      if (eddsa.isPoint(sig.R))\n        this._R = sig.R;\n      if (sig.S instanceof BN)\n        this._S = sig.S;\n      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n    }\n    cachedProperty(Signature, \"S\", function S() {\n      return this.eddsa.decodeInt(this.Sencoded());\n    });\n    cachedProperty(Signature, \"R\", function R() {\n      return this.eddsa.decodePoint(this.Rencoded());\n    });\n    cachedProperty(Signature, \"Rencoded\", function Rencoded() {\n      return this.eddsa.encodePoint(this.R());\n    });\n    cachedProperty(Signature, \"Sencoded\", function Sencoded() {\n      return this.eddsa.encodeInt(this.S());\n    });\n    Signature.prototype.toBytes = function toBytes() {\n      return this.Rencoded().concat(this.Sencoded());\n    };\n    Signature.prototype.toHex = function toHex() {\n      return utils.encode(this.toBytes(), \"hex\").toUpperCase();\n    };\n    module.exports = Signature;\n  }\n});\n\n// node_modules/elliptic/lib/elliptic/eddsa/index.js\nvar require_eddsa = __commonJS({\n  \"node_modules/elliptic/lib/elliptic/eddsa/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var hash = require_hash2();\n    var curves = require_curves();\n    var utils = require_utils3();\n    var assert = utils.assert;\n    var parseBytes = utils.parseBytes;\n    var KeyPair = require_key2();\n    var Signature = require_signature2();\n    function EDDSA(curve) {\n      assert(curve === \"ed25519\", \"only tested with ed25519 so far\");\n      if (!(this instanceof EDDSA))\n        return new EDDSA(curve);\n      curve = curves[curve].curve;\n      this.curve = curve;\n      this.g = curve.g;\n      this.g.precompute(curve.n.bitLength() + 1);\n      this.pointClass = curve.point().constructor;\n      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n      this.hash = hash.sha512;\n    }\n    module.exports = EDDSA;\n    EDDSA.prototype.sign = function sign(message, secret) {\n      message = parseBytes(message);\n      var key = this.keyFromSecret(secret);\n      var r = this.hashInt(key.messagePrefix(), message);\n      var R = this.g.mul(r);\n      var Rencoded = this.encodePoint(R);\n      var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());\n      var S = r.add(s_).umod(this.curve.n);\n      return this.makeSignature({ R, S, Rencoded });\n    };\n    EDDSA.prototype.verify = function verify(message, sig, pub) {\n      message = parseBytes(message);\n      sig = this.makeSignature(sig);\n      var key = this.keyFromPublic(pub);\n      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n      var SG = this.g.mul(sig.S());\n      var RplusAh = sig.R().add(key.pub().mul(h));\n      return RplusAh.eq(SG);\n    };\n    EDDSA.prototype.hashInt = function hashInt() {\n      var hash2 = this.hash();\n      for (var i = 0; i < arguments.length; i++)\n        hash2.update(arguments[i]);\n      return utils.intFromLE(hash2.digest()).umod(this.curve.n);\n    };\n    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n      return KeyPair.fromPublic(this, pub);\n    };\n    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n      return KeyPair.fromSecret(this, secret);\n    };\n    EDDSA.prototype.makeSignature = function makeSignature(sig) {\n      if (sig instanceof Signature)\n        return sig;\n      return new Signature(this, sig);\n    };\n    EDDSA.prototype.encodePoint = function encodePoint(point) {\n      var enc = point.getY().toArray(\"le\", this.encodingLength);\n      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;\n      return enc;\n    };\n    EDDSA.prototype.decodePoint = function decodePoint(bytes) {\n      bytes = utils.parseBytes(bytes);\n      var lastIx = bytes.length - 1;\n      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);\n      var xIsOdd = (bytes[lastIx] & 128) !== 0;\n      var y = utils.intFromLE(normed);\n      return this.curve.pointFromY(y, xIsOdd);\n    };\n    EDDSA.prototype.encodeInt = function encodeInt(num) {\n      return num.toArray(\"le\", this.encodingLength);\n    };\n    EDDSA.prototype.decodeInt = function decodeInt(bytes) {\n      return utils.intFromLE(bytes);\n    };\n    EDDSA.prototype.isPoint = function isPoint(val) {\n      return val instanceof this.pointClass;\n    };\n  }\n});\n\n// node_modules/elliptic/lib/elliptic.js\nvar require_elliptic = __commonJS({\n  \"node_modules/elliptic/lib/elliptic.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var elliptic = exports;\n    elliptic.version = require_package().version;\n    elliptic.utils = require_utils3();\n    elliptic.rand = require_brorand();\n    elliptic.curve = require_curve();\n    elliptic.curves = require_curves();\n    elliptic.ec = require_ec();\n    elliptic.eddsa = require_eddsa();\n  }\n});\n\n// node_modules/asn1.js/node_modules/bn.js/lib/bn.js\nvar require_bn5 = __commonJS({\n  \"node_modules/asn1.js/node_modules/bn.js/lib/bn.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    (function(module2, exports2) {\n      \"use strict\";\n      function assert(val, msg) {\n        if (!val)\n          throw new Error(msg || \"Assertion failed\");\n      }\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {\n        };\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      }\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        this.red = null;\n        if (number !== null) {\n          if (base === \"le\" || base === \"be\") {\n            endian = base;\n            base = 10;\n          }\n          this._init(number || 0, base || 10, endian || \"be\");\n        }\n      }\n      if (typeof module2 === \"object\") {\n        module2.exports = BN;\n      } else {\n        exports2.BN = BN;\n      }\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer2;\n      try {\n        if (typeof window !== \"undefined\" && typeof window.Buffer !== \"undefined\") {\n          Buffer2 = window.Buffer;\n        } else {\n          Buffer2 = require_buffer_polyfill().Buffer;\n        }\n      } catch (e) {\n      }\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0)\n          return left;\n        return right;\n      };\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0)\n          return left;\n        return right;\n      };\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n          return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n          return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n          base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n          start++;\n          this.negative = 1;\n        }\n        if (start < number.length) {\n          if (base === 16) {\n            this._parseHex(number, start, endian);\n          } else {\n            this._parseBase(number, base, start);\n            if (endian === \"le\") {\n              this._initArray(this.toArray(), base, endian);\n            }\n          }\n        }\n      };\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n        if (number < 67108864) {\n          this.words = [number & 67108863];\n          this.length = 1;\n        } else if (number < 4503599627370496) {\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863\n          ];\n          this.length = 2;\n        } else {\n          assert(number < 9007199254740992);\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863,\n            1\n          ];\n          this.length = 3;\n        }\n        if (endian !== \"le\")\n          return;\n        this._initArray(this.toArray(), base, endian);\n      };\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === \"le\") {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n        return this.strip();\n      };\n      function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        if (c >= 65 && c <= 70) {\n          return c - 55;\n        } else if (c >= 97 && c <= 102) {\n          return c - 87;\n        } else {\n          return c - 48 & 15;\n        }\n      }\n      function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n          r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n      }\n      BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n          for (i = number.length - 1; i >= start; i -= 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        } else {\n          var parseLength = number.length - start;\n          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        }\n        this.strip();\n      };\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul;\n          if (c >= 49) {\n            r += c - 49 + 10;\n          } else if (c >= 17) {\n            r += c - 17 + 10;\n          } else {\n            r += c;\n          }\n        }\n        return r;\n      }\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        this.words = [0];\n        this.length = 1;\n        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {\n          limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n          this.imuln(pow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        this.strip();\n      };\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n        return this;\n      };\n      BN.prototype.strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n        return this._normSign();\n      };\n      BN.prototype._normSign = function _normSign() {\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n        return this;\n      };\n      BN.prototype.inspect = function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      };\n      var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ];\n      var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ];\n      var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n          out = \"\";\n          var off = 0;\n          var carry = 0;\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 16777215).toString(16);\n            carry = w >>> 24 - off & 16777215;\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n            off += 2;\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n          }\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          var groupSize = groupSizes[base];\n          var groupBase = groupBases[base];\n          out = \"\";\n          var c = this.clone();\n          c.negative = 0;\n          while (!c.isZero()) {\n            var r = c.modn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n          if (this.isZero()) {\n            out = \"0\" + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n      };\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n          ret += this.words[1] * 67108864;\n        } else if (this.length === 3 && this.words[2] === 1) {\n          ret += 4503599627370496 + this.words[1] * 67108864;\n        } else if (this.length > 2) {\n          assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n      };\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n      };\n      BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer2 !== \"undefined\");\n        return this.toArrayLike(Buffer2, endian, length);\n      };\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        this.strip();\n        var littleEndian = endian === \"le\";\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n        if (!littleEndian) {\n          for (i = 0; i < reqLength - byteLength; i++) {\n            res[i] = 0;\n          }\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[reqLength - i - 1] = b;\n          }\n        } else {\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[i] = b;\n          }\n          for (; i < reqLength; i++) {\n            res[i] = 0;\n          }\n        }\n        return res;\n      };\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n          if (t >= 4096) {\n            r += 13;\n            t >>>= 13;\n          }\n          if (t >= 64) {\n            r += 7;\n            t >>>= 7;\n          }\n          if (t >= 8) {\n            r += 4;\n            t >>>= 4;\n          }\n          if (t >= 2) {\n            r += 2;\n            t >>>= 2;\n          }\n          return r + t;\n        };\n      }\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        if (w === 0)\n          return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 8191) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n        if ((t & 127) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n        if ((t & 15) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n        if ((t & 3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n        if ((t & 1) === 0) {\n          r++;\n        }\n        return r;\n      };\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n      };\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n        return w;\n      }\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero())\n          return 0;\n        var r = 0;\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n          r += b;\n          if (b !== 26)\n            break;\n        }\n        return r;\n      };\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n      };\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n      };\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      };\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n        return this;\n      };\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n        return this.strip();\n      };\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      };\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length)\n          return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length)\n          return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      };\n      BN.prototype.iuand = function iuand(num) {\n        var b;\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this.strip();\n      };\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      };\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length)\n          return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length)\n          return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      };\n      BN.prototype.iuxor = function iuxor(num) {\n        var a;\n        var b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = a.length;\n        return this.strip();\n      };\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      };\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length)\n          return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length)\n          return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      };\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        }\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 67108863;\n        }\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;\n        }\n        return this.strip();\n      };\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      };\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this.strip();\n      };\n      BN.prototype.iadd = function iadd(num) {\n        var r;\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign();\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        }\n        var a, b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++;\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        return this;\n      };\n      BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n        if (this.length > num.length)\n          return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      };\n      BN.prototype.isub = function isub(num) {\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign();\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        }\n        var cmp = this.cmp(num);\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        }\n        var a, b;\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n          this.negative = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n      function smallMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        var len = self2.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        var a = self2.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 67108863;\n        var carry = r / 67108864 | 0;\n        out.words[0] = lo;\n        for (var k = 1; k < len; k++) {\n          var ncarry = carry >>> 26;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self2.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 67108864 | 0;\n            rword = r & 67108863;\n          }\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      var comb10MulTo = function comb10MulTo2(self2, num, out) {\n        var a = self2.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 8191;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 8191;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 8191;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 8191;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 8191;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 8191;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 8191;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 8191;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 8191;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 8191;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 8191;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 8191;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 8191;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 8191;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 8191;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 8191;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 8191;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 8191;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 8191;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 8191;\n        var bh9 = b9 >>> 13;\n        out.negative = self2.negative ^ num.negative;\n        out.length = 19;\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 67108863;\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 67108863;\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 67108863;\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 67108863;\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 67108863;\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 67108863;\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 67108863;\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 67108863;\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 67108863;\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 67108863;\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 67108863;\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 67108863;\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 67108863;\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 67108863;\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 67108863;\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 67108863;\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 67108863;\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 67108863;\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 67108863;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n        return out;\n      };\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n      function bigMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        out.length = self2.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for (var k = 0; k < out.length - 1; k++) {\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self2.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 67108863;\n            ncarry = ncarry + (r / 67108864 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 67108863;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 67108863;\n          }\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      function jumboMulTo(self2, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self2, num, out);\n      }\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n        return res;\n      };\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n        return t;\n      };\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1)\n          return x;\n        var rb = 0;\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n        return rb;\n      };\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n        return 1 << i + 1 + odd;\n      };\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1)\n          return;\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 67108863;\n          if (w < 67108864) {\n            carry = 0;\n          } else {\n            carry = w / 67108864 | 0;\n          }\n        }\n        return ws;\n      };\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 8191;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 8191;\n          carry = carry >>> 13;\n        }\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~8191) === 0);\n      };\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n        return ph;\n      };\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n      };\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      };\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      };\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n      BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        var carry = 0;\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 67108863) + (carry & 67108863);\n          carry >>= 26;\n          carry += w / 67108864 | 0;\n          carry += lo >>> 26;\n          this.words[i] = lo & 67108863;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      };\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      };\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      };\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0)\n          return new BN(1);\n        var res = this;\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0)\n            break;\n        }\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0)\n              continue;\n            res = res.mul(q);\n          }\n        }\n        return res;\n      };\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 67108863 >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n          var carry = 0;\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n          this.length += s;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishln = function ishln(bits) {\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      };\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 67108863 ^ 67108863 >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n          maskedWords.length = s;\n        }\n        if (s === 0) {\n        } else if (this.length > s) {\n          this.length -= s;\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        }\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      };\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      };\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      };\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s)\n          return false;\n        var w = this.words[s];\n        return !!(w & q);\n      };\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n          return this;\n        }\n        if (r !== 0) {\n          s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n          var mask = 67108863 ^ 67108863 >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n        return this.strip();\n      };\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      };\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.isubn(-num);\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) < num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        }\n        return this._iaddn(num);\n      };\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {\n          this.words[i] -= 67108864;\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      };\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.iaddn(-num);\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 67108864;\n            this.words[i + 1] -= 1;\n          }\n        }\n        return this.strip();\n      };\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 67108863;\n          carry = (w >> 26) - (right / 67108864 | 0);\n          this.words[i + shift] = w & 67108863;\n        }\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 67108863;\n        }\n        if (carry === 0)\n          return this.strip();\n        assert(carry === -1);\n        carry = 0;\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 67108863;\n        }\n        this.negative = 1;\n        return this.strip();\n      };\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        }\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n          a = diff;\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);\n          qj = Math.min(qj / bhi | 0, 67108863);\n          a._ishlnsubmul(b, qj, j);\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n            a._ishlnsubmul(b, 1, j);\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n        if (q) {\n          q.strip();\n        }\n        a.strip();\n        if (mode !== \"div\" && shift !== 0) {\n          a.iushrn(shift);\n        }\n        return {\n          div: q || null,\n          mod: a\n        };\n      };\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n          return {\n            div,\n            mod\n          };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          return {\n            div,\n            mod: res.mod\n          };\n        }\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n          return {\n            div: res.div,\n            mod\n          };\n        }\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        }\n        if (num.length === 1) {\n          if (mode === \"div\") {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n          if (mode === \"mod\") {\n            return {\n              div: null,\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n        return this._wordDiv(num, mode);\n      };\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n      };\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n      };\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n      };\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        if (dm.mod.isZero())\n          return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        if (cmp < 0 || r2 === 1 && cmp === 0)\n          return dm.div;\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n      BN.prototype.modn = function modn(num) {\n        assert(num <= 67108863);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return acc;\n      };\n      BN.prototype.idivn = function idivn(num) {\n        assert(num <= 67108863);\n        var carry = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 67108864;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n        return this.strip();\n      };\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        }\n        var A = new BN(1);\n        var B = new BN(0);\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            x.iushrn(i);\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            y.iushrn(j);\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      };\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            a.iushrn(i);\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n              x1.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            b.iushrn(j);\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n              x2.iushrn(1);\n            }\n          }\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n        return res;\n      };\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero())\n          return num.abs();\n        if (num.isZero())\n          return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n          var r = a.cmp(b);\n          if (r < 0) {\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n          a.isub(b);\n        } while (true);\n        return b.iushln(shift);\n      };\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      };\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      };\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s) {\n          this._expand(s + 1);\n          this.words[s] |= q;\n          return this;\n        }\n        var carry = q;\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 67108863;\n          this.words[i] = w;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative)\n          return -1;\n        if (this.negative === 0 && negative)\n          return 1;\n        this.strip();\n        var res;\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n          assert(num <= 67108863, \"Number is too big\");\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0)\n          return -1;\n        if (this.negative === 0 && num.negative !== 0)\n          return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.ucmp = function ucmp(num) {\n        if (this.length > num.length)\n          return 1;\n        if (this.length < num.length)\n          return -1;\n        var res = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b)\n            continue;\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n          break;\n        }\n        return res;\n      };\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      };\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n      };\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n      };\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n      };\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n      };\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n      };\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n      };\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n      };\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n      };\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n      };\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n      };\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n      };\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n      };\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n      };\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n      };\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n      };\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function MPrime(name, p) {\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n      MPrime.prototype.ireduce = function ireduce(num) {\n        var r = num;\n        var rlen;\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== void 0) {\n            r.strip();\n          } else {\n            r._strip();\n          }\n        }\n        return r;\n      };\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n      function K256() {\n        MPrime.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      inherits(K256, MPrime);\n      K256.prototype.split = function split(input, output) {\n        var mask = 4194303;\n        var outLen = Math.min(input.length, 9);\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        }\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n      K256.prototype.imulK = function imulK(num) {\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        var lo = 0;\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 977;\n          num.words[i] = lo & 67108863;\n          lo = w * 64 + (lo / 67108864 | 0);\n        }\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n        return num;\n      };\n      function P224() {\n        MPrime.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      inherits(P224, MPrime);\n      function P192() {\n        MPrime.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      inherits(P192, MPrime);\n      function P25519() {\n        MPrime.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      inherits(P25519, MPrime);\n      P25519.prototype.imulK = function imulK(num) {\n        var carry = 0;\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 19 + carry;\n          var lo = hi & 67108863;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n        return num;\n      };\n      BN._prime = function prime(name) {\n        if (primes[name])\n          return primes[name];\n        var prime2;\n        if (name === \"k256\") {\n          prime2 = new K256();\n        } else if (name === \"p224\") {\n          prime2 = new P224();\n        } else if (name === \"p192\") {\n          prime2 = new P192();\n        } else if (name === \"p25519\") {\n          prime2 = new P25519();\n        } else {\n          throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime2;\n        return prime2;\n      };\n      function Red(m) {\n        if (typeof m === \"string\") {\n          var prime = BN._prime(m);\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), \"modulus must be greater than 1\");\n          this.m = m;\n          this.prime = null;\n        }\n      }\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n      };\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(\n          a.red && a.red === b.red,\n          \"red works only with red numbers\"\n        );\n      };\n      Red.prototype.imod = function imod(a) {\n        if (this.prime)\n          return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n      };\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n      };\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res;\n      };\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res;\n      };\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n      };\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n      };\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n      };\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero())\n          return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        }\n        var q = this.m.subn(1);\n        var s = 0;\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n        return r;\n      };\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero())\n          return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0)\n          return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n          start = 26;\n        }\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0))\n              continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n          start = 26;\n        }\n        return res;\n      };\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      };\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n      inherits(Mont, Red);\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero())\n          return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.invm = function invm(a) {\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(typeof module === \"undefined\" || module, exports);\n  }\n});\n\n// node_modules/safer-buffer/safer.js\nvar require_safer = __commonJS({\n  \"node_modules/safer-buffer/safer.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var buffer = require_buffer_polyfill();\n    var Buffer2 = buffer.Buffer;\n    var safer = {};\n    var key;\n    for (key in buffer) {\n      if (!buffer.hasOwnProperty(key))\n        continue;\n      if (key === \"SlowBuffer\" || key === \"Buffer\")\n        continue;\n      safer[key] = buffer[key];\n    }\n    var Safer = safer.Buffer = {};\n    for (key in Buffer2) {\n      if (!Buffer2.hasOwnProperty(key))\n        continue;\n      if (key === \"allocUnsafe\" || key === \"allocUnsafeSlow\")\n        continue;\n      Safer[key] = Buffer2[key];\n    }\n    safer.Buffer.prototype = Buffer2.prototype;\n    if (!Safer.from || Safer.from === Uint8Array.from) {\n      Safer.from = function(value, encodingOrOffset, length) {\n        if (typeof value === \"number\") {\n          throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value);\n        }\n        if (value && typeof value.length === \"undefined\") {\n          throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value);\n        }\n        return Buffer2(value, encodingOrOffset, length);\n      };\n    }\n    if (!Safer.alloc) {\n      Safer.alloc = function(size, fill, encoding) {\n        if (typeof size !== \"number\") {\n          throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size);\n        }\n        if (size < 0 || size >= 2 * (1 << 30)) {\n          throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n        }\n        var buf = Buffer2(size);\n        if (!fill || fill.length === 0) {\n          buf.fill(0);\n        } else if (typeof encoding === \"string\") {\n          buf.fill(fill, encoding);\n        } else {\n          buf.fill(fill);\n        }\n        return buf;\n      };\n    }\n    if (!safer.kStringMaxLength) {\n      try {\n        safer.kStringMaxLength = process.binding(\"buffer\").kStringMaxLength;\n      } catch (e) {\n      }\n    }\n    if (!safer.constants) {\n      safer.constants = {\n        MAX_LENGTH: safer.kMaxLength\n      };\n      if (safer.kStringMaxLength) {\n        safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;\n      }\n    }\n    module.exports = safer;\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/base/reporter.js\nvar require_reporter = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/base/reporter.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    function Reporter(options) {\n      this._reporterState = {\n        obj: null,\n        path: [],\n        options: options || {},\n        errors: []\n      };\n    }\n    exports.Reporter = Reporter;\n    Reporter.prototype.isError = function isError(obj) {\n      return obj instanceof ReporterError;\n    };\n    Reporter.prototype.save = function save() {\n      const state = this._reporterState;\n      return { obj: state.obj, pathLen: state.path.length };\n    };\n    Reporter.prototype.restore = function restore(data) {\n      const state = this._reporterState;\n      state.obj = data.obj;\n      state.path = state.path.slice(0, data.pathLen);\n    };\n    Reporter.prototype.enterKey = function enterKey(key) {\n      return this._reporterState.path.push(key);\n    };\n    Reporter.prototype.exitKey = function exitKey(index) {\n      const state = this._reporterState;\n      state.path = state.path.slice(0, index - 1);\n    };\n    Reporter.prototype.leaveKey = function leaveKey(index, key, value) {\n      const state = this._reporterState;\n      this.exitKey(index);\n      if (state.obj !== null)\n        state.obj[key] = value;\n    };\n    Reporter.prototype.path = function path() {\n      return this._reporterState.path.join(\"/\");\n    };\n    Reporter.prototype.enterObject = function enterObject() {\n      const state = this._reporterState;\n      const prev = state.obj;\n      state.obj = {};\n      return prev;\n    };\n    Reporter.prototype.leaveObject = function leaveObject(prev) {\n      const state = this._reporterState;\n      const now = state.obj;\n      state.obj = prev;\n      return now;\n    };\n    Reporter.prototype.error = function error(msg) {\n      let err;\n      const state = this._reporterState;\n      const inherited = msg instanceof ReporterError;\n      if (inherited) {\n        err = msg;\n      } else {\n        err = new ReporterError(state.path.map(function(elem) {\n          return \"[\" + JSON.stringify(elem) + \"]\";\n        }).join(\"\"), msg.message || msg, msg.stack);\n      }\n      if (!state.options.partial)\n        throw err;\n      if (!inherited)\n        state.errors.push(err);\n      return err;\n    };\n    Reporter.prototype.wrapResult = function wrapResult(result) {\n      const state = this._reporterState;\n      if (!state.options.partial)\n        return result;\n      return {\n        result: this.isError(result) ? null : result,\n        errors: state.errors\n      };\n    };\n    function ReporterError(path, msg) {\n      this.path = path;\n      this.rethrow(msg);\n    }\n    inherits(ReporterError, Error);\n    ReporterError.prototype.rethrow = function rethrow(msg) {\n      this.message = msg + \" at: \" + (this.path || \"(shallow)\");\n      if (Error.captureStackTrace)\n        Error.captureStackTrace(this, ReporterError);\n      if (!this.stack) {\n        try {\n          throw new Error(this.message);\n        } catch (e) {\n          this.stack = e.stack;\n        }\n      }\n      return this;\n    };\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/base/buffer.js\nvar require_buffer = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/base/buffer.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Reporter = require_reporter().Reporter;\n    var Buffer2 = require_safer().Buffer;\n    function DecoderBuffer(base, options) {\n      Reporter.call(this, options);\n      if (!Buffer2.isBuffer(base)) {\n        this.error(\"Input not Buffer\");\n        return;\n      }\n      this.base = base;\n      this.offset = 0;\n      this.length = base.length;\n    }\n    inherits(DecoderBuffer, Reporter);\n    exports.DecoderBuffer = DecoderBuffer;\n    DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {\n      if (data instanceof DecoderBuffer) {\n        return true;\n      }\n      const isCompatible = typeof data === \"object\" && Buffer2.isBuffer(data.base) && data.constructor.name === \"DecoderBuffer\" && typeof data.offset === \"number\" && typeof data.length === \"number\" && typeof data.save === \"function\" && typeof data.restore === \"function\" && typeof data.isEmpty === \"function\" && typeof data.readUInt8 === \"function\" && typeof data.skip === \"function\" && typeof data.raw === \"function\";\n      return isCompatible;\n    };\n    DecoderBuffer.prototype.save = function save() {\n      return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };\n    };\n    DecoderBuffer.prototype.restore = function restore(save) {\n      const res = new DecoderBuffer(this.base);\n      res.offset = save.offset;\n      res.length = this.offset;\n      this.offset = save.offset;\n      Reporter.prototype.restore.call(this, save.reporter);\n      return res;\n    };\n    DecoderBuffer.prototype.isEmpty = function isEmpty() {\n      return this.offset === this.length;\n    };\n    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {\n      if (this.offset + 1 <= this.length)\n        return this.base.readUInt8(this.offset++, true);\n      else\n        return this.error(fail || \"DecoderBuffer overrun\");\n    };\n    DecoderBuffer.prototype.skip = function skip(bytes, fail) {\n      if (!(this.offset + bytes <= this.length))\n        return this.error(fail || \"DecoderBuffer overrun\");\n      const res = new DecoderBuffer(this.base);\n      res._reporterState = this._reporterState;\n      res.offset = this.offset;\n      res.length = this.offset + bytes;\n      this.offset += bytes;\n      return res;\n    };\n    DecoderBuffer.prototype.raw = function raw(save) {\n      return this.base.slice(save ? save.offset : this.offset, this.length);\n    };\n    function EncoderBuffer(value, reporter) {\n      if (Array.isArray(value)) {\n        this.length = 0;\n        this.value = value.map(function(item) {\n          if (!EncoderBuffer.isEncoderBuffer(item))\n            item = new EncoderBuffer(item, reporter);\n          this.length += item.length;\n          return item;\n        }, this);\n      } else if (typeof value === \"number\") {\n        if (!(0 <= value && value <= 255))\n          return reporter.error(\"non-byte EncoderBuffer value\");\n        this.value = value;\n        this.length = 1;\n      } else if (typeof value === \"string\") {\n        this.value = value;\n        this.length = Buffer2.byteLength(value);\n      } else if (Buffer2.isBuffer(value)) {\n        this.value = value;\n        this.length = value.length;\n      } else {\n        return reporter.error(\"Unsupported type: \" + typeof value);\n      }\n    }\n    exports.EncoderBuffer = EncoderBuffer;\n    EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {\n      if (data instanceof EncoderBuffer) {\n        return true;\n      }\n      const isCompatible = typeof data === \"object\" && data.constructor.name === \"EncoderBuffer\" && typeof data.length === \"number\" && typeof data.join === \"function\";\n      return isCompatible;\n    };\n    EncoderBuffer.prototype.join = function join(out, offset) {\n      if (!out)\n        out = Buffer2.alloc(this.length);\n      if (!offset)\n        offset = 0;\n      if (this.length === 0)\n        return out;\n      if (Array.isArray(this.value)) {\n        this.value.forEach(function(item) {\n          item.join(out, offset);\n          offset += item.length;\n        });\n      } else {\n        if (typeof this.value === \"number\")\n          out[offset] = this.value;\n        else if (typeof this.value === \"string\")\n          out.write(this.value, offset);\n        else if (Buffer2.isBuffer(this.value))\n          this.value.copy(out, offset);\n        offset += this.length;\n      }\n      return out;\n    };\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/base/node.js\nvar require_node = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/base/node.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var Reporter = require_reporter().Reporter;\n    var EncoderBuffer = require_buffer().EncoderBuffer;\n    var DecoderBuffer = require_buffer().DecoderBuffer;\n    var assert = require_minimalistic_assert();\n    var tags = [\n      \"seq\",\n      \"seqof\",\n      \"set\",\n      \"setof\",\n      \"objid\",\n      \"bool\",\n      \"gentime\",\n      \"utctime\",\n      \"null_\",\n      \"enum\",\n      \"int\",\n      \"objDesc\",\n      \"bitstr\",\n      \"bmpstr\",\n      \"charstr\",\n      \"genstr\",\n      \"graphstr\",\n      \"ia5str\",\n      \"iso646str\",\n      \"numstr\",\n      \"octstr\",\n      \"printstr\",\n      \"t61str\",\n      \"unistr\",\n      \"utf8str\",\n      \"videostr\"\n    ];\n    var methods = [\n      \"key\",\n      \"obj\",\n      \"use\",\n      \"optional\",\n      \"explicit\",\n      \"implicit\",\n      \"def\",\n      \"choice\",\n      \"any\",\n      \"contains\"\n    ].concat(tags);\n    var overrided = [\n      \"_peekTag\",\n      \"_decodeTag\",\n      \"_use\",\n      \"_decodeStr\",\n      \"_decodeObjid\",\n      \"_decodeTime\",\n      \"_decodeNull\",\n      \"_decodeInt\",\n      \"_decodeBool\",\n      \"_decodeList\",\n      \"_encodeComposite\",\n      \"_encodeStr\",\n      \"_encodeObjid\",\n      \"_encodeTime\",\n      \"_encodeNull\",\n      \"_encodeInt\",\n      \"_encodeBool\"\n    ];\n    function Node(enc, parent, name) {\n      const state = {};\n      this._baseState = state;\n      state.name = name;\n      state.enc = enc;\n      state.parent = parent || null;\n      state.children = null;\n      state.tag = null;\n      state.args = null;\n      state.reverseArgs = null;\n      state.choice = null;\n      state.optional = false;\n      state.any = false;\n      state.obj = false;\n      state.use = null;\n      state.useDecoder = null;\n      state.key = null;\n      state[\"default\"] = null;\n      state.explicit = null;\n      state.implicit = null;\n      state.contains = null;\n      if (!state.parent) {\n        state.children = [];\n        this._wrap();\n      }\n    }\n    module.exports = Node;\n    var stateProps = [\n      \"enc\",\n      \"parent\",\n      \"children\",\n      \"tag\",\n      \"args\",\n      \"reverseArgs\",\n      \"choice\",\n      \"optional\",\n      \"any\",\n      \"obj\",\n      \"use\",\n      \"alteredUse\",\n      \"key\",\n      \"default\",\n      \"explicit\",\n      \"implicit\",\n      \"contains\"\n    ];\n    Node.prototype.clone = function clone() {\n      const state = this._baseState;\n      const cstate = {};\n      stateProps.forEach(function(prop) {\n        cstate[prop] = state[prop];\n      });\n      const res = new this.constructor(cstate.parent);\n      res._baseState = cstate;\n      return res;\n    };\n    Node.prototype._wrap = function wrap() {\n      const state = this._baseState;\n      methods.forEach(function(method) {\n        this[method] = function _wrappedMethod() {\n          const clone = new this.constructor(this);\n          state.children.push(clone);\n          return clone[method].apply(clone, arguments);\n        };\n      }, this);\n    };\n    Node.prototype._init = function init(body) {\n      const state = this._baseState;\n      assert(state.parent === null);\n      body.call(this);\n      state.children = state.children.filter(function(child) {\n        return child._baseState.parent === this;\n      }, this);\n      assert.equal(state.children.length, 1, \"Root node can have only one child\");\n    };\n    Node.prototype._useArgs = function useArgs(args) {\n      const state = this._baseState;\n      const children = args.filter(function(arg) {\n        return arg instanceof this.constructor;\n      }, this);\n      args = args.filter(function(arg) {\n        return !(arg instanceof this.constructor);\n      }, this);\n      if (children.length !== 0) {\n        assert(state.children === null);\n        state.children = children;\n        children.forEach(function(child) {\n          child._baseState.parent = this;\n        }, this);\n      }\n      if (args.length !== 0) {\n        assert(state.args === null);\n        state.args = args;\n        state.reverseArgs = args.map(function(arg) {\n          if (typeof arg !== \"object\" || arg.constructor !== Object)\n            return arg;\n          const res = {};\n          Object.keys(arg).forEach(function(key) {\n            if (key == (key | 0))\n              key |= 0;\n            const value = arg[key];\n            res[value] = key;\n          });\n          return res;\n        });\n      }\n    };\n    overrided.forEach(function(method) {\n      Node.prototype[method] = function _overrided() {\n        const state = this._baseState;\n        throw new Error(method + \" not implemented for encoding: \" + state.enc);\n      };\n    });\n    tags.forEach(function(tag) {\n      Node.prototype[tag] = function _tagMethod() {\n        const state = this._baseState;\n        const args = Array.prototype.slice.call(arguments);\n        assert(state.tag === null);\n        state.tag = tag;\n        this._useArgs(args);\n        return this;\n      };\n    });\n    Node.prototype.use = function use(item) {\n      assert(item);\n      const state = this._baseState;\n      assert(state.use === null);\n      state.use = item;\n      return this;\n    };\n    Node.prototype.optional = function optional() {\n      const state = this._baseState;\n      state.optional = true;\n      return this;\n    };\n    Node.prototype.def = function def(val) {\n      const state = this._baseState;\n      assert(state[\"default\"] === null);\n      state[\"default\"] = val;\n      state.optional = true;\n      return this;\n    };\n    Node.prototype.explicit = function explicit(num) {\n      const state = this._baseState;\n      assert(state.explicit === null && state.implicit === null);\n      state.explicit = num;\n      return this;\n    };\n    Node.prototype.implicit = function implicit(num) {\n      const state = this._baseState;\n      assert(state.explicit === null && state.implicit === null);\n      state.implicit = num;\n      return this;\n    };\n    Node.prototype.obj = function obj() {\n      const state = this._baseState;\n      const args = Array.prototype.slice.call(arguments);\n      state.obj = true;\n      if (args.length !== 0)\n        this._useArgs(args);\n      return this;\n    };\n    Node.prototype.key = function key(newKey) {\n      const state = this._baseState;\n      assert(state.key === null);\n      state.key = newKey;\n      return this;\n    };\n    Node.prototype.any = function any() {\n      const state = this._baseState;\n      state.any = true;\n      return this;\n    };\n    Node.prototype.choice = function choice(obj) {\n      const state = this._baseState;\n      assert(state.choice === null);\n      state.choice = obj;\n      this._useArgs(Object.keys(obj).map(function(key) {\n        return obj[key];\n      }));\n      return this;\n    };\n    Node.prototype.contains = function contains(item) {\n      const state = this._baseState;\n      assert(state.use === null);\n      state.contains = item;\n      return this;\n    };\n    Node.prototype._decode = function decode(input, options) {\n      const state = this._baseState;\n      if (state.parent === null)\n        return input.wrapResult(state.children[0]._decode(input, options));\n      let result = state[\"default\"];\n      let present = true;\n      let prevKey = null;\n      if (state.key !== null)\n        prevKey = input.enterKey(state.key);\n      if (state.optional) {\n        let tag = null;\n        if (state.explicit !== null)\n          tag = state.explicit;\n        else if (state.implicit !== null)\n          tag = state.implicit;\n        else if (state.tag !== null)\n          tag = state.tag;\n        if (tag === null && !state.any) {\n          const save = input.save();\n          try {\n            if (state.choice === null)\n              this._decodeGeneric(state.tag, input, options);\n            else\n              this._decodeChoice(input, options);\n            present = true;\n          } catch (e) {\n            present = false;\n          }\n          input.restore(save);\n        } else {\n          present = this._peekTag(input, tag, state.any);\n          if (input.isError(present))\n            return present;\n        }\n      }\n      let prevObj;\n      if (state.obj && present)\n        prevObj = input.enterObject();\n      if (present) {\n        if (state.explicit !== null) {\n          const explicit = this._decodeTag(input, state.explicit);\n          if (input.isError(explicit))\n            return explicit;\n          input = explicit;\n        }\n        const start = input.offset;\n        if (state.use === null && state.choice === null) {\n          let save;\n          if (state.any)\n            save = input.save();\n          const body = this._decodeTag(\n            input,\n            state.implicit !== null ? state.implicit : state.tag,\n            state.any\n          );\n          if (input.isError(body))\n            return body;\n          if (state.any)\n            result = input.raw(save);\n          else\n            input = body;\n        }\n        if (options && options.track && state.tag !== null)\n          options.track(input.path(), start, input.length, \"tagged\");\n        if (options && options.track && state.tag !== null)\n          options.track(input.path(), input.offset, input.length, \"content\");\n        if (state.any) {\n        } else if (state.choice === null) {\n          result = this._decodeGeneric(state.tag, input, options);\n        } else {\n          result = this._decodeChoice(input, options);\n        }\n        if (input.isError(result))\n          return result;\n        if (!state.any && state.choice === null && state.children !== null) {\n          state.children.forEach(function decodeChildren(child) {\n            child._decode(input, options);\n          });\n        }\n        if (state.contains && (state.tag === \"octstr\" || state.tag === \"bitstr\")) {\n          const data = new DecoderBuffer(result);\n          result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);\n        }\n      }\n      if (state.obj && present)\n        result = input.leaveObject(prevObj);\n      if (state.key !== null && (result !== null || present === true))\n        input.leaveKey(prevKey, state.key, result);\n      else if (prevKey !== null)\n        input.exitKey(prevKey);\n      return result;\n    };\n    Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {\n      const state = this._baseState;\n      if (tag === \"seq\" || tag === \"set\")\n        return null;\n      if (tag === \"seqof\" || tag === \"setof\")\n        return this._decodeList(input, tag, state.args[0], options);\n      else if (/str$/.test(tag))\n        return this._decodeStr(input, tag, options);\n      else if (tag === \"objid\" && state.args)\n        return this._decodeObjid(input, state.args[0], state.args[1], options);\n      else if (tag === \"objid\")\n        return this._decodeObjid(input, null, null, options);\n      else if (tag === \"gentime\" || tag === \"utctime\")\n        return this._decodeTime(input, tag, options);\n      else if (tag === \"null_\")\n        return this._decodeNull(input, options);\n      else if (tag === \"bool\")\n        return this._decodeBool(input, options);\n      else if (tag === \"objDesc\")\n        return this._decodeStr(input, tag, options);\n      else if (tag === \"int\" || tag === \"enum\")\n        return this._decodeInt(input, state.args && state.args[0], options);\n      if (state.use !== null) {\n        return this._getUse(state.use, input._reporterState.obj)._decode(input, options);\n      } else {\n        return input.error(\"unknown tag: \" + tag);\n      }\n    };\n    Node.prototype._getUse = function _getUse(entity, obj) {\n      const state = this._baseState;\n      state.useDecoder = this._use(entity, obj);\n      assert(state.useDecoder._baseState.parent === null);\n      state.useDecoder = state.useDecoder._baseState.children[0];\n      if (state.implicit !== state.useDecoder._baseState.implicit) {\n        state.useDecoder = state.useDecoder.clone();\n        state.useDecoder._baseState.implicit = state.implicit;\n      }\n      return state.useDecoder;\n    };\n    Node.prototype._decodeChoice = function decodeChoice(input, options) {\n      const state = this._baseState;\n      let result = null;\n      let match = false;\n      Object.keys(state.choice).some(function(key) {\n        const save = input.save();\n        const node = state.choice[key];\n        try {\n          const value = node._decode(input, options);\n          if (input.isError(value))\n            return false;\n          result = { type: key, value };\n          match = true;\n        } catch (e) {\n          input.restore(save);\n          return false;\n        }\n        return true;\n      }, this);\n      if (!match)\n        return input.error(\"Choice not matched\");\n      return result;\n    };\n    Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {\n      return new EncoderBuffer(data, this.reporter);\n    };\n    Node.prototype._encode = function encode(data, reporter, parent) {\n      const state = this._baseState;\n      if (state[\"default\"] !== null && state[\"default\"] === data)\n        return;\n      const result = this._encodeValue(data, reporter, parent);\n      if (result === void 0)\n        return;\n      if (this._skipDefault(result, reporter, parent))\n        return;\n      return result;\n    };\n    Node.prototype._encodeValue = function encode(data, reporter, parent) {\n      const state = this._baseState;\n      if (state.parent === null)\n        return state.children[0]._encode(data, reporter || new Reporter());\n      let result = null;\n      this.reporter = reporter;\n      if (state.optional && data === void 0) {\n        if (state[\"default\"] !== null)\n          data = state[\"default\"];\n        else\n          return;\n      }\n      let content = null;\n      let primitive = false;\n      if (state.any) {\n        result = this._createEncoderBuffer(data);\n      } else if (state.choice) {\n        result = this._encodeChoice(data, reporter);\n      } else if (state.contains) {\n        content = this._getUse(state.contains, parent)._encode(data, reporter);\n        primitive = true;\n      } else if (state.children) {\n        content = state.children.map(function(child) {\n          if (child._baseState.tag === \"null_\")\n            return child._encode(null, reporter, data);\n          if (child._baseState.key === null)\n            return reporter.error(\"Child should have a key\");\n          const prevKey = reporter.enterKey(child._baseState.key);\n          if (typeof data !== \"object\")\n            return reporter.error(\"Child expected, but input is not object\");\n          const res = child._encode(data[child._baseState.key], reporter, data);\n          reporter.leaveKey(prevKey);\n          return res;\n        }, this).filter(function(child) {\n          return child;\n        });\n        content = this._createEncoderBuffer(content);\n      } else {\n        if (state.tag === \"seqof\" || state.tag === \"setof\") {\n          if (!(state.args && state.args.length === 1))\n            return reporter.error(\"Too many args for : \" + state.tag);\n          if (!Array.isArray(data))\n            return reporter.error(\"seqof/setof, but data is not Array\");\n          const child = this.clone();\n          child._baseState.implicit = null;\n          content = this._createEncoderBuffer(data.map(function(item) {\n            const state2 = this._baseState;\n            return this._getUse(state2.args[0], data)._encode(item, reporter);\n          }, child));\n        } else if (state.use !== null) {\n          result = this._getUse(state.use, parent)._encode(data, reporter);\n        } else {\n          content = this._encodePrimitive(state.tag, data);\n          primitive = true;\n        }\n      }\n      if (!state.any && state.choice === null) {\n        const tag = state.implicit !== null ? state.implicit : state.tag;\n        const cls = state.implicit === null ? \"universal\" : \"context\";\n        if (tag === null) {\n          if (state.use === null)\n            reporter.error(\"Tag could be omitted only for .use()\");\n        } else {\n          if (state.use === null)\n            result = this._encodeComposite(tag, primitive, cls, content);\n        }\n      }\n      if (state.explicit !== null)\n        result = this._encodeComposite(state.explicit, false, \"context\", result);\n      return result;\n    };\n    Node.prototype._encodeChoice = function encodeChoice(data, reporter) {\n      const state = this._baseState;\n      const node = state.choice[data.type];\n      if (!node) {\n        assert(\n          false,\n          data.type + \" not found in \" + JSON.stringify(Object.keys(state.choice))\n        );\n      }\n      return node._encode(data.value, reporter);\n    };\n    Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {\n      const state = this._baseState;\n      if (/str$/.test(tag))\n        return this._encodeStr(data, tag);\n      else if (tag === \"objid\" && state.args)\n        return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);\n      else if (tag === \"objid\")\n        return this._encodeObjid(data, null, null);\n      else if (tag === \"gentime\" || tag === \"utctime\")\n        return this._encodeTime(data, tag);\n      else if (tag === \"null_\")\n        return this._encodeNull();\n      else if (tag === \"int\" || tag === \"enum\")\n        return this._encodeInt(data, state.args && state.reverseArgs[0]);\n      else if (tag === \"bool\")\n        return this._encodeBool(data);\n      else if (tag === \"objDesc\")\n        return this._encodeStr(data, tag);\n      else\n        throw new Error(\"Unsupported tag: \" + tag);\n    };\n    Node.prototype._isNumstr = function isNumstr(str) {\n      return /^[0-9 ]*$/.test(str);\n    };\n    Node.prototype._isPrintstr = function isPrintstr(str) {\n      return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);\n    };\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/constants/der.js\nvar require_der = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/constants/der.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    function reverse(map) {\n      const res = {};\n      Object.keys(map).forEach(function(key) {\n        if ((key | 0) == key)\n          key = key | 0;\n        const value = map[key];\n        res[value] = key;\n      });\n      return res;\n    }\n    exports.tagClass = {\n      0: \"universal\",\n      1: \"application\",\n      2: \"context\",\n      3: \"private\"\n    };\n    exports.tagClassByName = reverse(exports.tagClass);\n    exports.tag = {\n      0: \"end\",\n      1: \"bool\",\n      2: \"int\",\n      3: \"bitstr\",\n      4: \"octstr\",\n      5: \"null_\",\n      6: \"objid\",\n      7: \"objDesc\",\n      8: \"external\",\n      9: \"real\",\n      10: \"enum\",\n      11: \"embed\",\n      12: \"utf8str\",\n      13: \"relativeOid\",\n      16: \"seq\",\n      17: \"set\",\n      18: \"numstr\",\n      19: \"printstr\",\n      20: \"t61str\",\n      21: \"videostr\",\n      22: \"ia5str\",\n      23: \"utctime\",\n      24: \"gentime\",\n      25: \"graphstr\",\n      26: \"iso646str\",\n      27: \"genstr\",\n      28: \"unistr\",\n      29: \"charstr\",\n      30: \"bmpstr\"\n    };\n    exports.tagByName = reverse(exports.tag);\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/encoders/der.js\nvar require_der2 = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/encoders/der.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Buffer2 = require_safer().Buffer;\n    var Node = require_node();\n    var der = require_der();\n    function DEREncoder(entity) {\n      this.enc = \"der\";\n      this.name = entity.name;\n      this.entity = entity;\n      this.tree = new DERNode();\n      this.tree._init(entity.body);\n    }\n    module.exports = DEREncoder;\n    DEREncoder.prototype.encode = function encode(data, reporter) {\n      return this.tree._encode(data, reporter).join();\n    };\n    function DERNode(parent) {\n      Node.call(this, \"der\", parent);\n    }\n    inherits(DERNode, Node);\n    DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {\n      const encodedTag = encodeTag(tag, primitive, cls, this.reporter);\n      if (content.length < 128) {\n        const header2 = Buffer2.alloc(2);\n        header2[0] = encodedTag;\n        header2[1] = content.length;\n        return this._createEncoderBuffer([header2, content]);\n      }\n      let lenOctets = 1;\n      for (let i = content.length; i >= 256; i >>= 8)\n        lenOctets++;\n      const header = Buffer2.alloc(1 + 1 + lenOctets);\n      header[0] = encodedTag;\n      header[1] = 128 | lenOctets;\n      for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)\n        header[i] = j & 255;\n      return this._createEncoderBuffer([header, content]);\n    };\n    DERNode.prototype._encodeStr = function encodeStr(str, tag) {\n      if (tag === \"bitstr\") {\n        return this._createEncoderBuffer([str.unused | 0, str.data]);\n      } else if (tag === \"bmpstr\") {\n        const buf = Buffer2.alloc(str.length * 2);\n        for (let i = 0; i < str.length; i++) {\n          buf.writeUInt16BE(str.charCodeAt(i), i * 2);\n        }\n        return this._createEncoderBuffer(buf);\n      } else if (tag === \"numstr\") {\n        if (!this._isNumstr(str)) {\n          return this.reporter.error(\"Encoding of string type: numstr supports only digits and space\");\n        }\n        return this._createEncoderBuffer(str);\n      } else if (tag === \"printstr\") {\n        if (!this._isPrintstr(str)) {\n          return this.reporter.error(\"Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark\");\n        }\n        return this._createEncoderBuffer(str);\n      } else if (/str$/.test(tag)) {\n        return this._createEncoderBuffer(str);\n      } else if (tag === \"objDesc\") {\n        return this._createEncoderBuffer(str);\n      } else {\n        return this.reporter.error(\"Encoding of string type: \" + tag + \" unsupported\");\n      }\n    };\n    DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {\n      if (typeof id === \"string\") {\n        if (!values)\n          return this.reporter.error(\"string objid given, but no values map found\");\n        if (!values.hasOwnProperty(id))\n          return this.reporter.error(\"objid not found in values map\");\n        id = values[id].split(/[\\s.]+/g);\n        for (let i = 0; i < id.length; i++)\n          id[i] |= 0;\n      } else if (Array.isArray(id)) {\n        id = id.slice();\n        for (let i = 0; i < id.length; i++)\n          id[i] |= 0;\n      }\n      if (!Array.isArray(id)) {\n        return this.reporter.error(\"objid() should be either array or string, got: \" + JSON.stringify(id));\n      }\n      if (!relative) {\n        if (id[1] >= 40)\n          return this.reporter.error(\"Second objid identifier OOB\");\n        id.splice(0, 2, id[0] * 40 + id[1]);\n      }\n      let size = 0;\n      for (let i = 0; i < id.length; i++) {\n        let ident = id[i];\n        for (size++; ident >= 128; ident >>= 7)\n          size++;\n      }\n      const objid = Buffer2.alloc(size);\n      let offset = objid.length - 1;\n      for (let i = id.length - 1; i >= 0; i--) {\n        let ident = id[i];\n        objid[offset--] = ident & 127;\n        while ((ident >>= 7) > 0)\n          objid[offset--] = 128 | ident & 127;\n      }\n      return this._createEncoderBuffer(objid);\n    };\n    function two(num) {\n      if (num < 10)\n        return \"0\" + num;\n      else\n        return num;\n    }\n    DERNode.prototype._encodeTime = function encodeTime(time, tag) {\n      let str;\n      const date = new Date(time);\n      if (tag === \"gentime\") {\n        str = [\n          two(date.getUTCFullYear()),\n          two(date.getUTCMonth() + 1),\n          two(date.getUTCDate()),\n          two(date.getUTCHours()),\n          two(date.getUTCMinutes()),\n          two(date.getUTCSeconds()),\n          \"Z\"\n        ].join(\"\");\n      } else if (tag === \"utctime\") {\n        str = [\n          two(date.getUTCFullYear() % 100),\n          two(date.getUTCMonth() + 1),\n          two(date.getUTCDate()),\n          two(date.getUTCHours()),\n          two(date.getUTCMinutes()),\n          two(date.getUTCSeconds()),\n          \"Z\"\n        ].join(\"\");\n      } else {\n        this.reporter.error(\"Encoding \" + tag + \" time is not supported yet\");\n      }\n      return this._encodeStr(str, \"octstr\");\n    };\n    DERNode.prototype._encodeNull = function encodeNull() {\n      return this._createEncoderBuffer(\"\");\n    };\n    DERNode.prototype._encodeInt = function encodeInt(num, values) {\n      if (typeof num === \"string\") {\n        if (!values)\n          return this.reporter.error(\"String int or enum given, but no values map\");\n        if (!values.hasOwnProperty(num)) {\n          return this.reporter.error(\"Values map doesn't contain: \" + JSON.stringify(num));\n        }\n        num = values[num];\n      }\n      if (typeof num !== \"number\" && !Buffer2.isBuffer(num)) {\n        const numArray = num.toArray();\n        if (!num.sign && numArray[0] & 128) {\n          numArray.unshift(0);\n        }\n        num = Buffer2.from(numArray);\n      }\n      if (Buffer2.isBuffer(num)) {\n        let size2 = num.length;\n        if (num.length === 0)\n          size2++;\n        const out2 = Buffer2.alloc(size2);\n        num.copy(out2);\n        if (num.length === 0)\n          out2[0] = 0;\n        return this._createEncoderBuffer(out2);\n      }\n      if (num < 128)\n        return this._createEncoderBuffer(num);\n      if (num < 256)\n        return this._createEncoderBuffer([0, num]);\n      let size = 1;\n      for (let i = num; i >= 256; i >>= 8)\n        size++;\n      const out = new Array(size);\n      for (let i = out.length - 1; i >= 0; i--) {\n        out[i] = num & 255;\n        num >>= 8;\n      }\n      if (out[0] & 128) {\n        out.unshift(0);\n      }\n      return this._createEncoderBuffer(Buffer2.from(out));\n    };\n    DERNode.prototype._encodeBool = function encodeBool(value) {\n      return this._createEncoderBuffer(value ? 255 : 0);\n    };\n    DERNode.prototype._use = function use(entity, obj) {\n      if (typeof entity === \"function\")\n        entity = entity(obj);\n      return entity._getEncoder(\"der\").tree;\n    };\n    DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {\n      const state = this._baseState;\n      let i;\n      if (state[\"default\"] === null)\n        return false;\n      const data = dataBuffer.join();\n      if (state.defaultBuffer === void 0)\n        state.defaultBuffer = this._encodeValue(state[\"default\"], reporter, parent).join();\n      if (data.length !== state.defaultBuffer.length)\n        return false;\n      for (i = 0; i < data.length; i++)\n        if (data[i] !== state.defaultBuffer[i])\n          return false;\n      return true;\n    };\n    function encodeTag(tag, primitive, cls, reporter) {\n      let res;\n      if (tag === \"seqof\")\n        tag = \"seq\";\n      else if (tag === \"setof\")\n        tag = \"set\";\n      if (der.tagByName.hasOwnProperty(tag))\n        res = der.tagByName[tag];\n      else if (typeof tag === \"number\" && (tag | 0) === tag)\n        res = tag;\n      else\n        return reporter.error(\"Unknown tag: \" + tag);\n      if (res >= 31)\n        return reporter.error(\"Multi-octet tag encoding unsupported\");\n      if (!primitive)\n        res |= 32;\n      res |= der.tagClassByName[cls || \"universal\"] << 6;\n      return res;\n    }\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/encoders/pem.js\nvar require_pem = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/encoders/pem.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var DEREncoder = require_der2();\n    function PEMEncoder(entity) {\n      DEREncoder.call(this, entity);\n      this.enc = \"pem\";\n    }\n    inherits(PEMEncoder, DEREncoder);\n    module.exports = PEMEncoder;\n    PEMEncoder.prototype.encode = function encode(data, options) {\n      const buf = DEREncoder.prototype.encode.call(this, data);\n      const p = buf.toString(\"base64\");\n      const out = [\"-----BEGIN \" + options.label + \"-----\"];\n      for (let i = 0; i < p.length; i += 64)\n        out.push(p.slice(i, i + 64));\n      out.push(\"-----END \" + options.label + \"-----\");\n      return out.join(\"\\n\");\n    };\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/encoders/index.js\nvar require_encoders = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/encoders/index.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var encoders = exports;\n    encoders.der = require_der2();\n    encoders.pem = require_pem();\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/decoders/der.js\nvar require_der3 = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/decoders/der.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var bignum = require_bn5();\n    var DecoderBuffer = require_buffer().DecoderBuffer;\n    var Node = require_node();\n    var der = require_der();\n    function DERDecoder(entity) {\n      this.enc = \"der\";\n      this.name = entity.name;\n      this.entity = entity;\n      this.tree = new DERNode();\n      this.tree._init(entity.body);\n    }\n    module.exports = DERDecoder;\n    DERDecoder.prototype.decode = function decode(data, options) {\n      if (!DecoderBuffer.isDecoderBuffer(data)) {\n        data = new DecoderBuffer(data, options);\n      }\n      return this.tree._decode(data, options);\n    };\n    function DERNode(parent) {\n      Node.call(this, \"der\", parent);\n    }\n    inherits(DERNode, Node);\n    DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {\n      if (buffer.isEmpty())\n        return false;\n      const state = buffer.save();\n      const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: \"' + tag + '\"');\n      if (buffer.isError(decodedTag))\n        return decodedTag;\n      buffer.restore(state);\n      return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + \"of\" === tag || any;\n    };\n    DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {\n      const decodedTag = derDecodeTag(\n        buffer,\n        'Failed to decode tag of \"' + tag + '\"'\n      );\n      if (buffer.isError(decodedTag))\n        return decodedTag;\n      let len = derDecodeLen(\n        buffer,\n        decodedTag.primitive,\n        'Failed to get length of \"' + tag + '\"'\n      );\n      if (buffer.isError(len))\n        return len;\n      if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + \"of\" !== tag) {\n        return buffer.error('Failed to match tag: \"' + tag + '\"');\n      }\n      if (decodedTag.primitive || len !== null)\n        return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n      const state = buffer.save();\n      const res = this._skipUntilEnd(\n        buffer,\n        'Failed to skip indefinite length body: \"' + this.tag + '\"'\n      );\n      if (buffer.isError(res))\n        return res;\n      len = buffer.offset - state.offset;\n      buffer.restore(state);\n      return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n    };\n    DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {\n      for (; ; ) {\n        const tag = derDecodeTag(buffer, fail);\n        if (buffer.isError(tag))\n          return tag;\n        const len = derDecodeLen(buffer, tag.primitive, fail);\n        if (buffer.isError(len))\n          return len;\n        let res;\n        if (tag.primitive || len !== null)\n          res = buffer.skip(len);\n        else\n          res = this._skipUntilEnd(buffer, fail);\n        if (buffer.isError(res))\n          return res;\n        if (tag.tagStr === \"end\")\n          break;\n      }\n    };\n    DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {\n      const result = [];\n      while (!buffer.isEmpty()) {\n        const possibleEnd = this._peekTag(buffer, \"end\");\n        if (buffer.isError(possibleEnd))\n          return possibleEnd;\n        const res = decoder.decode(buffer, \"der\", options);\n        if (buffer.isError(res) && possibleEnd)\n          break;\n        result.push(res);\n      }\n      return result;\n    };\n    DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {\n      if (tag === \"bitstr\") {\n        const unused = buffer.readUInt8();\n        if (buffer.isError(unused))\n          return unused;\n        return { unused, data: buffer.raw() };\n      } else if (tag === \"bmpstr\") {\n        const raw = buffer.raw();\n        if (raw.length % 2 === 1)\n          return buffer.error(\"Decoding of string type: bmpstr length mismatch\");\n        let str = \"\";\n        for (let i = 0; i < raw.length / 2; i++) {\n          str += String.fromCharCode(raw.readUInt16BE(i * 2));\n        }\n        return str;\n      } else if (tag === \"numstr\") {\n        const numstr = buffer.raw().toString(\"ascii\");\n        if (!this._isNumstr(numstr)) {\n          return buffer.error(\"Decoding of string type: numstr unsupported characters\");\n        }\n        return numstr;\n      } else if (tag === \"octstr\") {\n        return buffer.raw();\n      } else if (tag === \"objDesc\") {\n        return buffer.raw();\n      } else if (tag === \"printstr\") {\n        const printstr = buffer.raw().toString(\"ascii\");\n        if (!this._isPrintstr(printstr)) {\n          return buffer.error(\"Decoding of string type: printstr unsupported characters\");\n        }\n        return printstr;\n      } else if (/str$/.test(tag)) {\n        return buffer.raw().toString();\n      } else {\n        return buffer.error(\"Decoding of string type: \" + tag + \" unsupported\");\n      }\n    };\n    DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {\n      let result;\n      const identifiers = [];\n      let ident = 0;\n      let subident = 0;\n      while (!buffer.isEmpty()) {\n        subident = buffer.readUInt8();\n        ident <<= 7;\n        ident |= subident & 127;\n        if ((subident & 128) === 0) {\n          identifiers.push(ident);\n          ident = 0;\n        }\n      }\n      if (subident & 128)\n        identifiers.push(ident);\n      const first = identifiers[0] / 40 | 0;\n      const second = identifiers[0] % 40;\n      if (relative)\n        result = identifiers;\n      else\n        result = [first, second].concat(identifiers.slice(1));\n      if (values) {\n        let tmp = values[result.join(\" \")];\n        if (tmp === void 0)\n          tmp = values[result.join(\".\")];\n        if (tmp !== void 0)\n          result = tmp;\n      }\n      return result;\n    };\n    DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {\n      const str = buffer.raw().toString();\n      let year;\n      let mon;\n      let day;\n      let hour;\n      let min;\n      let sec;\n      if (tag === \"gentime\") {\n        year = str.slice(0, 4) | 0;\n        mon = str.slice(4, 6) | 0;\n        day = str.slice(6, 8) | 0;\n        hour = str.slice(8, 10) | 0;\n        min = str.slice(10, 12) | 0;\n        sec = str.slice(12, 14) | 0;\n      } else if (tag === \"utctime\") {\n        year = str.slice(0, 2) | 0;\n        mon = str.slice(2, 4) | 0;\n        day = str.slice(4, 6) | 0;\n        hour = str.slice(6, 8) | 0;\n        min = str.slice(8, 10) | 0;\n        sec = str.slice(10, 12) | 0;\n        if (year < 70)\n          year = 2e3 + year;\n        else\n          year = 1900 + year;\n      } else {\n        return buffer.error(\"Decoding \" + tag + \" time is not supported yet\");\n      }\n      return Date.UTC(year, mon - 1, day, hour, min, sec, 0);\n    };\n    DERNode.prototype._decodeNull = function decodeNull() {\n      return null;\n    };\n    DERNode.prototype._decodeBool = function decodeBool(buffer) {\n      const res = buffer.readUInt8();\n      if (buffer.isError(res))\n        return res;\n      else\n        return res !== 0;\n    };\n    DERNode.prototype._decodeInt = function decodeInt(buffer, values) {\n      const raw = buffer.raw();\n      let res = new bignum(raw);\n      if (values)\n        res = values[res.toString(10)] || res;\n      return res;\n    };\n    DERNode.prototype._use = function use(entity, obj) {\n      if (typeof entity === \"function\")\n        entity = entity(obj);\n      return entity._getDecoder(\"der\").tree;\n    };\n    function derDecodeTag(buf, fail) {\n      let tag = buf.readUInt8(fail);\n      if (buf.isError(tag))\n        return tag;\n      const cls = der.tagClass[tag >> 6];\n      const primitive = (tag & 32) === 0;\n      if ((tag & 31) === 31) {\n        let oct = tag;\n        tag = 0;\n        while ((oct & 128) === 128) {\n          oct = buf.readUInt8(fail);\n          if (buf.isError(oct))\n            return oct;\n          tag <<= 7;\n          tag |= oct & 127;\n        }\n      } else {\n        tag &= 31;\n      }\n      const tagStr = der.tag[tag];\n      return {\n        cls,\n        primitive,\n        tag,\n        tagStr\n      };\n    }\n    function derDecodeLen(buf, primitive, fail) {\n      let len = buf.readUInt8(fail);\n      if (buf.isError(len))\n        return len;\n      if (!primitive && len === 128)\n        return null;\n      if ((len & 128) === 0) {\n        return len;\n      }\n      const num = len & 127;\n      if (num > 4)\n        return buf.error(\"length octect is too long\");\n      len = 0;\n      for (let i = 0; i < num; i++) {\n        len <<= 8;\n        const j = buf.readUInt8(fail);\n        if (buf.isError(j))\n          return j;\n        len |= j;\n      }\n      return len;\n    }\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/decoders/pem.js\nvar require_pem2 = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/decoders/pem.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var inherits = require_inherits_browser();\n    var Buffer2 = require_safer().Buffer;\n    var DERDecoder = require_der3();\n    function PEMDecoder(entity) {\n      DERDecoder.call(this, entity);\n      this.enc = \"pem\";\n    }\n    inherits(PEMDecoder, DERDecoder);\n    module.exports = PEMDecoder;\n    PEMDecoder.prototype.decode = function decode(data, options) {\n      const lines = data.toString().split(/[\\r\\n]+/g);\n      const label = options.label.toUpperCase();\n      const re = /^-----(BEGIN|END) ([^-]+)-----$/;\n      let start = -1;\n      let end = -1;\n      for (let i = 0; i < lines.length; i++) {\n        const match = lines[i].match(re);\n        if (match === null)\n          continue;\n        if (match[2] !== label)\n          continue;\n        if (start === -1) {\n          if (match[1] !== \"BEGIN\")\n            break;\n          start = i;\n        } else {\n          if (match[1] !== \"END\")\n            break;\n          end = i;\n          break;\n        }\n      }\n      if (start === -1 || end === -1)\n        throw new Error(\"PEM section not found for: \" + label);\n      const base64 = lines.slice(start + 1, end).join(\"\");\n      base64.replace(/[^a-z0-9+/=]+/gi, \"\");\n      const input = Buffer2.from(base64, \"base64\");\n      return DERDecoder.prototype.decode.call(this, input, options);\n    };\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/decoders/index.js\nvar require_decoders = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/decoders/index.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var decoders = exports;\n    decoders.der = require_der3();\n    decoders.pem = require_pem2();\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/api.js\nvar require_api = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/api.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var encoders = require_encoders();\n    var decoders = require_decoders();\n    var inherits = require_inherits_browser();\n    var api = exports;\n    api.define = function define(name, body) {\n      return new Entity(name, body);\n    };\n    function Entity(name, body) {\n      this.name = name;\n      this.body = body;\n      this.decoders = {};\n      this.encoders = {};\n    }\n    Entity.prototype._createNamed = function createNamed(Base) {\n      const name = this.name;\n      function Generated(entity) {\n        this._initNamed(entity, name);\n      }\n      inherits(Generated, Base);\n      Generated.prototype._initNamed = function _initNamed(entity, name2) {\n        Base.call(this, entity, name2);\n      };\n      return new Generated(this);\n    };\n    Entity.prototype._getDecoder = function _getDecoder(enc) {\n      enc = enc || \"der\";\n      if (!this.decoders.hasOwnProperty(enc))\n        this.decoders[enc] = this._createNamed(decoders[enc]);\n      return this.decoders[enc];\n    };\n    Entity.prototype.decode = function decode(data, enc, options) {\n      return this._getDecoder(enc).decode(data, options);\n    };\n    Entity.prototype._getEncoder = function _getEncoder(enc) {\n      enc = enc || \"der\";\n      if (!this.encoders.hasOwnProperty(enc))\n        this.encoders[enc] = this._createNamed(encoders[enc]);\n      return this.encoders[enc];\n    };\n    Entity.prototype.encode = function encode(data, enc, reporter) {\n      return this._getEncoder(enc).encode(data, reporter);\n    };\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/base/index.js\nvar require_base2 = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/base/index.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var base = exports;\n    base.Reporter = require_reporter().Reporter;\n    base.DecoderBuffer = require_buffer().DecoderBuffer;\n    base.EncoderBuffer = require_buffer().EncoderBuffer;\n    base.Node = require_node();\n  }\n});\n\n// node_modules/asn1.js/lib/asn1/constants/index.js\nvar require_constants = __commonJS({\n  \"node_modules/asn1.js/lib/asn1/constants/index.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var constants = exports;\n    constants._reverse = function reverse(map) {\n      const res = {};\n      Object.keys(map).forEach(function(key) {\n        if ((key | 0) == key)\n          key = key | 0;\n        const value = map[key];\n        res[value] = key;\n      });\n      return res;\n    };\n    constants.der = require_der();\n  }\n});\n\n// node_modules/asn1.js/lib/asn1.js\nvar require_asn1 = __commonJS({\n  \"node_modules/asn1.js/lib/asn1.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var asn1 = exports;\n    asn1.bignum = require_bn5();\n    asn1.define = require_api().define;\n    asn1.base = require_base2();\n    asn1.constants = require_constants();\n    asn1.decoders = require_decoders();\n    asn1.encoders = require_encoders();\n  }\n});\n\n// node_modules/parse-asn1/certificate.js\nvar require_certificate = __commonJS({\n  \"node_modules/parse-asn1/certificate.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var asn = require_asn1();\n    var Time = asn.define(\"Time\", function() {\n      this.choice({\n        utcTime: this.utctime(),\n        generalTime: this.gentime()\n      });\n    });\n    var AttributeTypeValue = asn.define(\"AttributeTypeValue\", function() {\n      this.seq().obj(\n        this.key(\"type\").objid(),\n        this.key(\"value\").any()\n      );\n    });\n    var AlgorithmIdentifier = asn.define(\"AlgorithmIdentifier\", function() {\n      this.seq().obj(\n        this.key(\"algorithm\").objid(),\n        this.key(\"parameters\").optional(),\n        this.key(\"curve\").objid().optional()\n      );\n    });\n    var SubjectPublicKeyInfo = asn.define(\"SubjectPublicKeyInfo\", function() {\n      this.seq().obj(\n        this.key(\"algorithm\").use(AlgorithmIdentifier),\n        this.key(\"subjectPublicKey\").bitstr()\n      );\n    });\n    var RelativeDistinguishedName = asn.define(\"RelativeDistinguishedName\", function() {\n      this.setof(AttributeTypeValue);\n    });\n    var RDNSequence = asn.define(\"RDNSequence\", function() {\n      this.seqof(RelativeDistinguishedName);\n    });\n    var Name = asn.define(\"Name\", function() {\n      this.choice({\n        rdnSequence: this.use(RDNSequence)\n      });\n    });\n    var Validity = asn.define(\"Validity\", function() {\n      this.seq().obj(\n        this.key(\"notBefore\").use(Time),\n        this.key(\"notAfter\").use(Time)\n      );\n    });\n    var Extension = asn.define(\"Extension\", function() {\n      this.seq().obj(\n        this.key(\"extnID\").objid(),\n        this.key(\"critical\").bool().def(false),\n        this.key(\"extnValue\").octstr()\n      );\n    });\n    var TBSCertificate = asn.define(\"TBSCertificate\", function() {\n      this.seq().obj(\n        this.key(\"version\").explicit(0).int().optional(),\n        this.key(\"serialNumber\").int(),\n        this.key(\"signature\").use(AlgorithmIdentifier),\n        this.key(\"issuer\").use(Name),\n        this.key(\"validity\").use(Validity),\n        this.key(\"subject\").use(Name),\n        this.key(\"subjectPublicKeyInfo\").use(SubjectPublicKeyInfo),\n        this.key(\"issuerUniqueID\").implicit(1).bitstr().optional(),\n        this.key(\"subjectUniqueID\").implicit(2).bitstr().optional(),\n        this.key(\"extensions\").explicit(3).seqof(Extension).optional()\n      );\n    });\n    var X509Certificate = asn.define(\"X509Certificate\", function() {\n      this.seq().obj(\n        this.key(\"tbsCertificate\").use(TBSCertificate),\n        this.key(\"signatureAlgorithm\").use(AlgorithmIdentifier),\n        this.key(\"signatureValue\").bitstr()\n      );\n    });\n    module.exports = X509Certificate;\n  }\n});\n\n// node_modules/parse-asn1/asn1.js\nvar require_asn12 = __commonJS({\n  \"node_modules/parse-asn1/asn1.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var asn1 = require_asn1();\n    exports.certificate = require_certificate();\n    var RSAPrivateKey = asn1.define(\"RSAPrivateKey\", function() {\n      this.seq().obj(\n        this.key(\"version\").int(),\n        this.key(\"modulus\").int(),\n        this.key(\"publicExponent\").int(),\n        this.key(\"privateExponent\").int(),\n        this.key(\"prime1\").int(),\n        this.key(\"prime2\").int(),\n        this.key(\"exponent1\").int(),\n        this.key(\"exponent2\").int(),\n        this.key(\"coefficient\").int()\n      );\n    });\n    exports.RSAPrivateKey = RSAPrivateKey;\n    var RSAPublicKey = asn1.define(\"RSAPublicKey\", function() {\n      this.seq().obj(\n        this.key(\"modulus\").int(),\n        this.key(\"publicExponent\").int()\n      );\n    });\n    exports.RSAPublicKey = RSAPublicKey;\n    var PublicKey = asn1.define(\"SubjectPublicKeyInfo\", function() {\n      this.seq().obj(\n        this.key(\"algorithm\").use(AlgorithmIdentifier),\n        this.key(\"subjectPublicKey\").bitstr()\n      );\n    });\n    exports.PublicKey = PublicKey;\n    var AlgorithmIdentifier = asn1.define(\"AlgorithmIdentifier\", function() {\n      this.seq().obj(\n        this.key(\"algorithm\").objid(),\n        this.key(\"none\").null_().optional(),\n        this.key(\"curve\").objid().optional(),\n        this.key(\"params\").seq().obj(\n          this.key(\"p\").int(),\n          this.key(\"q\").int(),\n          this.key(\"g\").int()\n        ).optional()\n      );\n    });\n    var PrivateKeyInfo = asn1.define(\"PrivateKeyInfo\", function() {\n      this.seq().obj(\n        this.key(\"version\").int(),\n        this.key(\"algorithm\").use(AlgorithmIdentifier),\n        this.key(\"subjectPrivateKey\").octstr()\n      );\n    });\n    exports.PrivateKey = PrivateKeyInfo;\n    var EncryptedPrivateKeyInfo = asn1.define(\"EncryptedPrivateKeyInfo\", function() {\n      this.seq().obj(\n        this.key(\"algorithm\").seq().obj(\n          this.key(\"id\").objid(),\n          this.key(\"decrypt\").seq().obj(\n            this.key(\"kde\").seq().obj(\n              this.key(\"id\").objid(),\n              this.key(\"kdeparams\").seq().obj(\n                this.key(\"salt\").octstr(),\n                this.key(\"iters\").int()\n              )\n            ),\n            this.key(\"cipher\").seq().obj(\n              this.key(\"algo\").objid(),\n              this.key(\"iv\").octstr()\n            )\n          )\n        ),\n        this.key(\"subjectPrivateKey\").octstr()\n      );\n    });\n    exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;\n    var DSAPrivateKey = asn1.define(\"DSAPrivateKey\", function() {\n      this.seq().obj(\n        this.key(\"version\").int(),\n        this.key(\"p\").int(),\n        this.key(\"q\").int(),\n        this.key(\"g\").int(),\n        this.key(\"pub_key\").int(),\n        this.key(\"priv_key\").int()\n      );\n    });\n    exports.DSAPrivateKey = DSAPrivateKey;\n    exports.DSAparam = asn1.define(\"DSAparam\", function() {\n      this.int();\n    });\n    var ECPrivateKey = asn1.define(\"ECPrivateKey\", function() {\n      this.seq().obj(\n        this.key(\"version\").int(),\n        this.key(\"privateKey\").octstr(),\n        this.key(\"parameters\").optional().explicit(0).use(ECParameters),\n        this.key(\"publicKey\").optional().explicit(1).bitstr()\n      );\n    });\n    exports.ECPrivateKey = ECPrivateKey;\n    var ECParameters = asn1.define(\"ECParameters\", function() {\n      this.choice({\n        namedCurve: this.objid()\n      });\n    });\n    exports.signature = asn1.define(\"signature\", function() {\n      this.seq().obj(\n        this.key(\"r\").int(),\n        this.key(\"s\").int()\n      );\n    });\n  }\n});\n\n// node_modules/parse-asn1/aesid.json\nvar require_aesid = __commonJS({\n  \"node_modules/parse-asn1/aesid.json\"(exports, module) {\n    module.exports = {\n      \"2.16.840.1.101.3.4.1.1\": \"aes-128-ecb\",\n      \"2.16.840.1.101.3.4.1.2\": \"aes-128-cbc\",\n      \"2.16.840.1.101.3.4.1.3\": \"aes-128-ofb\",\n      \"2.16.840.1.101.3.4.1.4\": \"aes-128-cfb\",\n      \"2.16.840.1.101.3.4.1.21\": \"aes-192-ecb\",\n      \"2.16.840.1.101.3.4.1.22\": \"aes-192-cbc\",\n      \"2.16.840.1.101.3.4.1.23\": \"aes-192-ofb\",\n      \"2.16.840.1.101.3.4.1.24\": \"aes-192-cfb\",\n      \"2.16.840.1.101.3.4.1.41\": \"aes-256-ecb\",\n      \"2.16.840.1.101.3.4.1.42\": \"aes-256-cbc\",\n      \"2.16.840.1.101.3.4.1.43\": \"aes-256-ofb\",\n      \"2.16.840.1.101.3.4.1.44\": \"aes-256-cfb\"\n    };\n  }\n});\n\n// node_modules/parse-asn1/fixProc.js\nvar require_fixProc = __commonJS({\n  \"node_modules/parse-asn1/fixProc.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var findProc = /Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r+/=]+)[\\n\\r]+/m;\n    var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;\n    var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\\n\\r+/=]+)-----END \\1-----$/m;\n    var evp = require_evp_bytestokey();\n    var ciphers = require_browser6();\n    var Buffer2 = require_safe_buffer().Buffer;\n    module.exports = function(okey, password) {\n      var key = okey.toString();\n      var match = key.match(findProc);\n      var decrypted;\n      if (!match) {\n        var match2 = key.match(fullRegex);\n        decrypted = Buffer2.from(match2[2].replace(/[\\r\\n]/g, \"\"), \"base64\");\n      } else {\n        var suite = \"aes\" + match[1];\n        var iv = Buffer2.from(match[2], \"hex\");\n        var cipherText = Buffer2.from(match[3].replace(/[\\r\\n]/g, \"\"), \"base64\");\n        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;\n        var out = [];\n        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);\n        out.push(cipher.update(cipherText));\n        out.push(cipher.final());\n        decrypted = Buffer2.concat(out);\n      }\n      var tag = key.match(startRegex)[1];\n      return {\n        tag,\n        data: decrypted\n      };\n    };\n  }\n});\n\n// node_modules/parse-asn1/index.js\nvar require_parse_asn1 = __commonJS({\n  \"node_modules/parse-asn1/index.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var asn1 = require_asn12();\n    var aesid = require_aesid();\n    var fixProc = require_fixProc();\n    var ciphers = require_browser6();\n    var compat = require_browser5();\n    var Buffer2 = require_safe_buffer().Buffer;\n    module.exports = parseKeys;\n    function parseKeys(buffer) {\n      var password;\n      if (typeof buffer === \"object\" && !Buffer2.isBuffer(buffer)) {\n        password = buffer.passphrase;\n        buffer = buffer.key;\n      }\n      if (typeof buffer === \"string\") {\n        buffer = Buffer2.from(buffer);\n      }\n      var stripped = fixProc(buffer, password);\n      var type = stripped.tag;\n      var data = stripped.data;\n      var subtype, ndata;\n      switch (type) {\n        case \"CERTIFICATE\":\n          ndata = asn1.certificate.decode(data, \"der\").tbsCertificate.subjectPublicKeyInfo;\n        case \"PUBLIC KEY\":\n          if (!ndata) {\n            ndata = asn1.PublicKey.decode(data, \"der\");\n          }\n          subtype = ndata.algorithm.algorithm.join(\".\");\n          switch (subtype) {\n            case \"1.2.840.113549.1.1.1\":\n              return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, \"der\");\n            case \"1.2.840.10045.2.1\":\n              ndata.subjectPrivateKey = ndata.subjectPublicKey;\n              return {\n                type: \"ec\",\n                data: ndata\n              };\n            case \"1.2.840.10040.4.1\":\n              ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, \"der\");\n              return {\n                type: \"dsa\",\n                data: ndata.algorithm.params\n              };\n            default:\n              throw new Error(\"unknown key id \" + subtype);\n          }\n        case \"ENCRYPTED PRIVATE KEY\":\n          data = asn1.EncryptedPrivateKey.decode(data, \"der\");\n          data = decrypt(data, password);\n        case \"PRIVATE KEY\":\n          ndata = asn1.PrivateKey.decode(data, \"der\");\n          subtype = ndata.algorithm.algorithm.join(\".\");\n          switch (subtype) {\n            case \"1.2.840.113549.1.1.1\":\n              return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, \"der\");\n            case \"1.2.840.10045.2.1\":\n              return {\n                curve: ndata.algorithm.curve,\n                privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, \"der\").privateKey\n              };\n            case \"1.2.840.10040.4.1\":\n              ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, \"der\");\n              return {\n                type: \"dsa\",\n                params: ndata.algorithm.params\n              };\n            default:\n              throw new Error(\"unknown key id \" + subtype);\n          }\n        case \"RSA PUBLIC KEY\":\n          return asn1.RSAPublicKey.decode(data, \"der\");\n        case \"RSA PRIVATE KEY\":\n          return asn1.RSAPrivateKey.decode(data, \"der\");\n        case \"DSA PRIVATE KEY\":\n          return {\n            type: \"dsa\",\n            params: asn1.DSAPrivateKey.decode(data, \"der\")\n          };\n        case \"EC PRIVATE KEY\":\n          data = asn1.ECPrivateKey.decode(data, \"der\");\n          return {\n            curve: data.parameters.value,\n            privateKey: data.privateKey\n          };\n        default:\n          throw new Error(\"unknown key type \" + type);\n      }\n    }\n    parseKeys.signature = asn1.signature;\n    function decrypt(data, password) {\n      var salt = data.algorithm.decrypt.kde.kdeparams.salt;\n      var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);\n      var algo = aesid[data.algorithm.decrypt.cipher.algo.join(\".\")];\n      var iv = data.algorithm.decrypt.cipher.iv;\n      var cipherText = data.subjectPrivateKey;\n      var keylen = parseInt(algo.split(\"-\")[1], 10) / 8;\n      var key = compat.pbkdf2Sync(password, salt, iters, keylen, \"sha1\");\n      var cipher = ciphers.createDecipheriv(algo, key, iv);\n      var out = [];\n      out.push(cipher.update(cipherText));\n      out.push(cipher.final());\n      return Buffer2.concat(out);\n    }\n  }\n});\n\n// node_modules/browserify-sign/browser/curves.json\nvar require_curves2 = __commonJS({\n  \"node_modules/browserify-sign/browser/curves.json\"(exports, module) {\n    module.exports = {\n      \"1.3.132.0.10\": \"secp256k1\",\n      \"1.3.132.0.33\": \"p224\",\n      \"1.2.840.10045.3.1.1\": \"p192\",\n      \"1.2.840.10045.3.1.7\": \"p256\",\n      \"1.3.132.0.34\": \"p384\",\n      \"1.3.132.0.35\": \"p521\"\n    };\n  }\n});\n\n// node_modules/browserify-sign/browser/sign.js\nvar require_sign = __commonJS({\n  \"node_modules/browserify-sign/browser/sign.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var createHmac = require_browser4();\n    var crt = require_browserify_rsa();\n    var EC = require_elliptic().ec;\n    var BN = require_bn3();\n    var parseKeys = require_parse_asn1();\n    var curves = require_curves2();\n    var RSA_PKCS1_PADDING = 1;\n    function sign(hash, key, hashType, signType, tag) {\n      var priv = parseKeys(key);\n      if (priv.curve) {\n        if (signType !== \"ecdsa\" && signType !== \"ecdsa/rsa\") {\n          throw new Error(\"wrong private key type\");\n        }\n        return ecSign(hash, priv);\n      } else if (priv.type === \"dsa\") {\n        if (signType !== \"dsa\") {\n          throw new Error(\"wrong private key type\");\n        }\n        return dsaSign(hash, priv, hashType);\n      }\n      if (signType !== \"rsa\" && signType !== \"ecdsa/rsa\") {\n        throw new Error(\"wrong private key type\");\n      }\n      if (key.padding !== void 0 && key.padding !== RSA_PKCS1_PADDING) {\n        throw new Error(\"illegal or unsupported padding mode\");\n      }\n      hash = Buffer2.concat([tag, hash]);\n      var len = priv.modulus.byteLength();\n      var pad = [0, 1];\n      while (hash.length + pad.length + 1 < len) {\n        pad.push(255);\n      }\n      pad.push(0);\n      var i = -1;\n      while (++i < hash.length) {\n        pad.push(hash[i]);\n      }\n      var out = crt(pad, priv);\n      return out;\n    }\n    function ecSign(hash, priv) {\n      var curveId = curves[priv.curve.join(\".\")];\n      if (!curveId) {\n        throw new Error(\"unknown curve \" + priv.curve.join(\".\"));\n      }\n      var curve = new EC(curveId);\n      var key = curve.keyFromPrivate(priv.privateKey);\n      var out = key.sign(hash);\n      return Buffer2.from(out.toDER());\n    }\n    function dsaSign(hash, priv, algo) {\n      var x = priv.params.priv_key;\n      var p = priv.params.p;\n      var q = priv.params.q;\n      var g = priv.params.g;\n      var r = new BN(0);\n      var k;\n      var H = bits2int(hash, q).mod(q);\n      var s = false;\n      var kv = getKey(x, q, hash, algo);\n      while (s === false) {\n        k = makeKey(q, kv, algo);\n        r = makeR(g, k, p, q);\n        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);\n        if (s.cmpn(0) === 0) {\n          s = false;\n          r = new BN(0);\n        }\n      }\n      return toDER(r, s);\n    }\n    function toDER(r, s) {\n      r = r.toArray();\n      s = s.toArray();\n      if (r[0] & 128) {\n        r = [0].concat(r);\n      }\n      if (s[0] & 128) {\n        s = [0].concat(s);\n      }\n      var total = r.length + s.length + 4;\n      var res = [\n        48,\n        total,\n        2,\n        r.length\n      ];\n      res = res.concat(r, [2, s.length], s);\n      return Buffer2.from(res);\n    }\n    function getKey(x, q, hash, algo) {\n      x = Buffer2.from(x.toArray());\n      if (x.length < q.byteLength()) {\n        var zeros = Buffer2.alloc(q.byteLength() - x.length);\n        x = Buffer2.concat([zeros, x]);\n      }\n      var hlen = hash.length;\n      var hbits = bits2octets(hash, q);\n      var v = Buffer2.alloc(hlen);\n      v.fill(1);\n      var k = Buffer2.alloc(hlen);\n      k = createHmac(algo, k).update(v).update(Buffer2.from([0])).update(x).update(hbits).digest();\n      v = createHmac(algo, k).update(v).digest();\n      k = createHmac(algo, k).update(v).update(Buffer2.from([1])).update(x).update(hbits).digest();\n      v = createHmac(algo, k).update(v).digest();\n      return { k, v };\n    }\n    function bits2int(obits, q) {\n      var bits = new BN(obits);\n      var shift = (obits.length << 3) - q.bitLength();\n      if (shift > 0) {\n        bits.ishrn(shift);\n      }\n      return bits;\n    }\n    function bits2octets(bits, q) {\n      bits = bits2int(bits, q);\n      bits = bits.mod(q);\n      var out = Buffer2.from(bits.toArray());\n      if (out.length < q.byteLength()) {\n        var zeros = Buffer2.alloc(q.byteLength() - out.length);\n        out = Buffer2.concat([zeros, out]);\n      }\n      return out;\n    }\n    function makeKey(q, kv, algo) {\n      var t;\n      var k;\n      do {\n        t = Buffer2.alloc(0);\n        while (t.length * 8 < q.bitLength()) {\n          kv.v = createHmac(algo, kv.k).update(kv.v).digest();\n          t = Buffer2.concat([t, kv.v]);\n        }\n        k = bits2int(t, q);\n        kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer2.from([0])).digest();\n        kv.v = createHmac(algo, kv.k).update(kv.v).digest();\n      } while (k.cmp(q) !== -1);\n      return k;\n    }\n    function makeR(g, k, p, q) {\n      return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);\n    }\n    module.exports = sign;\n    module.exports.getKey = getKey;\n    module.exports.makeKey = makeKey;\n  }\n});\n\n// node_modules/browserify-sign/browser/verify.js\nvar require_verify = __commonJS({\n  \"node_modules/browserify-sign/browser/verify.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var BN = require_bn3();\n    var EC = require_elliptic().ec;\n    var parseKeys = require_parse_asn1();\n    var curves = require_curves2();\n    function verify(sig, hash, key, signType, tag) {\n      var pub = parseKeys(key);\n      if (pub.type === \"ec\") {\n        if (signType !== \"ecdsa\" && signType !== \"ecdsa/rsa\") {\n          throw new Error(\"wrong public key type\");\n        }\n        return ecVerify(sig, hash, pub);\n      } else if (pub.type === \"dsa\") {\n        if (signType !== \"dsa\") {\n          throw new Error(\"wrong public key type\");\n        }\n        return dsaVerify(sig, hash, pub);\n      }\n      if (signType !== \"rsa\" && signType !== \"ecdsa/rsa\") {\n        throw new Error(\"wrong public key type\");\n      }\n      hash = Buffer2.concat([tag, hash]);\n      var len = pub.modulus.byteLength();\n      var pad = [1];\n      var padNum = 0;\n      while (hash.length + pad.length + 2 < len) {\n        pad.push(255);\n        padNum += 1;\n      }\n      pad.push(0);\n      var i = -1;\n      while (++i < hash.length) {\n        pad.push(hash[i]);\n      }\n      pad = Buffer2.from(pad);\n      var red = BN.mont(pub.modulus);\n      sig = new BN(sig).toRed(red);\n      sig = sig.redPow(new BN(pub.publicExponent));\n      sig = Buffer2.from(sig.fromRed().toArray());\n      var out = padNum < 8 ? 1 : 0;\n      len = Math.min(sig.length, pad.length);\n      if (sig.length !== pad.length) {\n        out = 1;\n      }\n      i = -1;\n      while (++i < len) {\n        out |= sig[i] ^ pad[i];\n      }\n      return out === 0;\n    }\n    function ecVerify(sig, hash, pub) {\n      var curveId = curves[pub.data.algorithm.curve.join(\".\")];\n      if (!curveId) {\n        throw new Error(\"unknown curve \" + pub.data.algorithm.curve.join(\".\"));\n      }\n      var curve = new EC(curveId);\n      var pubkey = pub.data.subjectPrivateKey.data;\n      return curve.verify(hash, sig, pubkey);\n    }\n    function dsaVerify(sig, hash, pub) {\n      var p = pub.data.p;\n      var q = pub.data.q;\n      var g = pub.data.g;\n      var y = pub.data.pub_key;\n      var unpacked = parseKeys.signature.decode(sig, \"der\");\n      var s = unpacked.s;\n      var r = unpacked.r;\n      checkValue(s, q);\n      checkValue(r, q);\n      var montp = BN.mont(p);\n      var w = s.invm(q);\n      var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);\n      return v.cmp(r) === 0;\n    }\n    function checkValue(b, q) {\n      if (b.cmpn(0) <= 0) {\n        throw new Error(\"invalid sig\");\n      }\n      if (b.cmp(q) >= 0) {\n        throw new Error(\"invalid sig\");\n      }\n    }\n    module.exports = verify;\n  }\n});\n\n// node_modules/browserify-sign/browser/index.js\nvar require_browser9 = __commonJS({\n  \"node_modules/browserify-sign/browser/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var Buffer2 = require_safe_buffer().Buffer;\n    var createHash = require_browser3();\n    var stream = require_readable_browser();\n    var inherits = require_inherits_browser();\n    var sign = require_sign();\n    var verify = require_verify();\n    var algorithms = require_algorithms();\n    Object.keys(algorithms).forEach(function(key) {\n      algorithms[key].id = Buffer2.from(algorithms[key].id, \"hex\");\n      algorithms[key.toLowerCase()] = algorithms[key];\n    });\n    function Sign(algorithm) {\n      stream.Writable.call(this);\n      var data = algorithms[algorithm];\n      if (!data) {\n        throw new Error(\"Unknown message digest\");\n      }\n      this._hashType = data.hash;\n      this._hash = createHash(data.hash);\n      this._tag = data.id;\n      this._signType = data.sign;\n    }\n    inherits(Sign, stream.Writable);\n    Sign.prototype._write = function _write(data, _, done) {\n      this._hash.update(data);\n      done();\n    };\n    Sign.prototype.update = function update(data, enc) {\n      this._hash.update(typeof data === \"string\" ? Buffer2.from(data, enc) : data);\n      return this;\n    };\n    Sign.prototype.sign = function signMethod(key, enc) {\n      this.end();\n      var hash = this._hash.digest();\n      var sig = sign(hash, key, this._hashType, this._signType, this._tag);\n      return enc ? sig.toString(enc) : sig;\n    };\n    function Verify(algorithm) {\n      stream.Writable.call(this);\n      var data = algorithms[algorithm];\n      if (!data) {\n        throw new Error(\"Unknown message digest\");\n      }\n      this._hash = createHash(data.hash);\n      this._tag = data.id;\n      this._signType = data.sign;\n    }\n    inherits(Verify, stream.Writable);\n    Verify.prototype._write = function _write(data, _, done) {\n      this._hash.update(data);\n      done();\n    };\n    Verify.prototype.update = function update(data, enc) {\n      this._hash.update(typeof data === \"string\" ? Buffer2.from(data, enc) : data);\n      return this;\n    };\n    Verify.prototype.verify = function verifyMethod(key, sig, enc) {\n      var sigBuffer = typeof sig === \"string\" ? Buffer2.from(sig, enc) : sig;\n      this.end();\n      var hash = this._hash.digest();\n      return verify(sigBuffer, hash, key, this._signType, this._tag);\n    };\n    function createSign(algorithm) {\n      return new Sign(algorithm);\n    }\n    function createVerify(algorithm) {\n      return new Verify(algorithm);\n    }\n    module.exports = {\n      Sign: createSign,\n      Verify: createVerify,\n      createSign,\n      createVerify\n    };\n  }\n});\n\n// node_modules/create-ecdh/node_modules/bn.js/lib/bn.js\nvar require_bn6 = __commonJS({\n  \"node_modules/create-ecdh/node_modules/bn.js/lib/bn.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    (function(module2, exports2) {\n      \"use strict\";\n      function assert(val, msg) {\n        if (!val)\n          throw new Error(msg || \"Assertion failed\");\n      }\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {\n        };\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      }\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        this.red = null;\n        if (number !== null) {\n          if (base === \"le\" || base === \"be\") {\n            endian = base;\n            base = 10;\n          }\n          this._init(number || 0, base || 10, endian || \"be\");\n        }\n      }\n      if (typeof module2 === \"object\") {\n        module2.exports = BN;\n      } else {\n        exports2.BN = BN;\n      }\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer2;\n      try {\n        if (typeof window !== \"undefined\" && typeof window.Buffer !== \"undefined\") {\n          Buffer2 = window.Buffer;\n        } else {\n          Buffer2 = require_buffer_polyfill().Buffer;\n        }\n      } catch (e) {\n      }\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0)\n          return left;\n        return right;\n      };\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0)\n          return left;\n        return right;\n      };\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n          return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n          return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n          base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n          start++;\n          this.negative = 1;\n        }\n        if (start < number.length) {\n          if (base === 16) {\n            this._parseHex(number, start, endian);\n          } else {\n            this._parseBase(number, base, start);\n            if (endian === \"le\") {\n              this._initArray(this.toArray(), base, endian);\n            }\n          }\n        }\n      };\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n        if (number < 67108864) {\n          this.words = [number & 67108863];\n          this.length = 1;\n        } else if (number < 4503599627370496) {\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863\n          ];\n          this.length = 2;\n        } else {\n          assert(number < 9007199254740992);\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863,\n            1\n          ];\n          this.length = 3;\n        }\n        if (endian !== \"le\")\n          return;\n        this._initArray(this.toArray(), base, endian);\n      };\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === \"le\") {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n        return this.strip();\n      };\n      function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        if (c >= 65 && c <= 70) {\n          return c - 55;\n        } else if (c >= 97 && c <= 102) {\n          return c - 87;\n        } else {\n          return c - 48 & 15;\n        }\n      }\n      function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n          r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n      }\n      BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n          for (i = number.length - 1; i >= start; i -= 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        } else {\n          var parseLength = number.length - start;\n          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        }\n        this.strip();\n      };\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul;\n          if (c >= 49) {\n            r += c - 49 + 10;\n          } else if (c >= 17) {\n            r += c - 17 + 10;\n          } else {\n            r += c;\n          }\n        }\n        return r;\n      }\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        this.words = [0];\n        this.length = 1;\n        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {\n          limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n          this.imuln(pow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        this.strip();\n      };\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n        return this;\n      };\n      BN.prototype.strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n        return this._normSign();\n      };\n      BN.prototype._normSign = function _normSign() {\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n        return this;\n      };\n      BN.prototype.inspect = function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      };\n      var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ];\n      var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ];\n      var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n          out = \"\";\n          var off = 0;\n          var carry = 0;\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 16777215).toString(16);\n            carry = w >>> 24 - off & 16777215;\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n            off += 2;\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n          }\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          var groupSize = groupSizes[base];\n          var groupBase = groupBases[base];\n          out = \"\";\n          var c = this.clone();\n          c.negative = 0;\n          while (!c.isZero()) {\n            var r = c.modn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n          if (this.isZero()) {\n            out = \"0\" + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n      };\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n          ret += this.words[1] * 67108864;\n        } else if (this.length === 3 && this.words[2] === 1) {\n          ret += 4503599627370496 + this.words[1] * 67108864;\n        } else if (this.length > 2) {\n          assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n      };\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n      };\n      BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer2 !== \"undefined\");\n        return this.toArrayLike(Buffer2, endian, length);\n      };\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        this.strip();\n        var littleEndian = endian === \"le\";\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n        if (!littleEndian) {\n          for (i = 0; i < reqLength - byteLength; i++) {\n            res[i] = 0;\n          }\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[reqLength - i - 1] = b;\n          }\n        } else {\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[i] = b;\n          }\n          for (; i < reqLength; i++) {\n            res[i] = 0;\n          }\n        }\n        return res;\n      };\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n          if (t >= 4096) {\n            r += 13;\n            t >>>= 13;\n          }\n          if (t >= 64) {\n            r += 7;\n            t >>>= 7;\n          }\n          if (t >= 8) {\n            r += 4;\n            t >>>= 4;\n          }\n          if (t >= 2) {\n            r += 2;\n            t >>>= 2;\n          }\n          return r + t;\n        };\n      }\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        if (w === 0)\n          return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 8191) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n        if ((t & 127) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n        if ((t & 15) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n        if ((t & 3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n        if ((t & 1) === 0) {\n          r++;\n        }\n        return r;\n      };\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n      };\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n        return w;\n      }\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero())\n          return 0;\n        var r = 0;\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n          r += b;\n          if (b !== 26)\n            break;\n        }\n        return r;\n      };\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n      };\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n      };\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      };\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n        return this;\n      };\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n        return this.strip();\n      };\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      };\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length)\n          return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length)\n          return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      };\n      BN.prototype.iuand = function iuand(num) {\n        var b;\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this.strip();\n      };\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      };\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length)\n          return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length)\n          return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      };\n      BN.prototype.iuxor = function iuxor(num) {\n        var a;\n        var b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = a.length;\n        return this.strip();\n      };\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      };\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length)\n          return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length)\n          return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      };\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        }\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 67108863;\n        }\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;\n        }\n        return this.strip();\n      };\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      };\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this.strip();\n      };\n      BN.prototype.iadd = function iadd(num) {\n        var r;\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign();\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        }\n        var a, b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++;\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        return this;\n      };\n      BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n        if (this.length > num.length)\n          return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      };\n      BN.prototype.isub = function isub(num) {\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign();\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        }\n        var cmp = this.cmp(num);\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        }\n        var a, b;\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n          this.negative = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n      function smallMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        var len = self2.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        var a = self2.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 67108863;\n        var carry = r / 67108864 | 0;\n        out.words[0] = lo;\n        for (var k = 1; k < len; k++) {\n          var ncarry = carry >>> 26;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self2.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 67108864 | 0;\n            rword = r & 67108863;\n          }\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      var comb10MulTo = function comb10MulTo2(self2, num, out) {\n        var a = self2.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 8191;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 8191;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 8191;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 8191;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 8191;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 8191;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 8191;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 8191;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 8191;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 8191;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 8191;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 8191;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 8191;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 8191;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 8191;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 8191;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 8191;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 8191;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 8191;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 8191;\n        var bh9 = b9 >>> 13;\n        out.negative = self2.negative ^ num.negative;\n        out.length = 19;\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 67108863;\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 67108863;\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 67108863;\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 67108863;\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 67108863;\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 67108863;\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 67108863;\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 67108863;\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 67108863;\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 67108863;\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 67108863;\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 67108863;\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 67108863;\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 67108863;\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 67108863;\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 67108863;\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 67108863;\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 67108863;\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 67108863;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n        return out;\n      };\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n      function bigMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        out.length = self2.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for (var k = 0; k < out.length - 1; k++) {\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self2.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 67108863;\n            ncarry = ncarry + (r / 67108864 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 67108863;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 67108863;\n          }\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      function jumboMulTo(self2, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self2, num, out);\n      }\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n        return res;\n      };\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n        return t;\n      };\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1)\n          return x;\n        var rb = 0;\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n        return rb;\n      };\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n        return 1 << i + 1 + odd;\n      };\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1)\n          return;\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 67108863;\n          if (w < 67108864) {\n            carry = 0;\n          } else {\n            carry = w / 67108864 | 0;\n          }\n        }\n        return ws;\n      };\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 8191;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 8191;\n          carry = carry >>> 13;\n        }\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~8191) === 0);\n      };\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n        return ph;\n      };\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n      };\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      };\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      };\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n      BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        var carry = 0;\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 67108863) + (carry & 67108863);\n          carry >>= 26;\n          carry += w / 67108864 | 0;\n          carry += lo >>> 26;\n          this.words[i] = lo & 67108863;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      };\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      };\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      };\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0)\n          return new BN(1);\n        var res = this;\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0)\n            break;\n        }\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0)\n              continue;\n            res = res.mul(q);\n          }\n        }\n        return res;\n      };\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 67108863 >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n          var carry = 0;\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n          this.length += s;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishln = function ishln(bits) {\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      };\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 67108863 ^ 67108863 >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n          maskedWords.length = s;\n        }\n        if (s === 0) {\n        } else if (this.length > s) {\n          this.length -= s;\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        }\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      };\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      };\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      };\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s)\n          return false;\n        var w = this.words[s];\n        return !!(w & q);\n      };\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n          return this;\n        }\n        if (r !== 0) {\n          s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n          var mask = 67108863 ^ 67108863 >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n        return this.strip();\n      };\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      };\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.isubn(-num);\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) < num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        }\n        return this._iaddn(num);\n      };\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {\n          this.words[i] -= 67108864;\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      };\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.iaddn(-num);\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 67108864;\n            this.words[i + 1] -= 1;\n          }\n        }\n        return this.strip();\n      };\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 67108863;\n          carry = (w >> 26) - (right / 67108864 | 0);\n          this.words[i + shift] = w & 67108863;\n        }\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 67108863;\n        }\n        if (carry === 0)\n          return this.strip();\n        assert(carry === -1);\n        carry = 0;\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 67108863;\n        }\n        this.negative = 1;\n        return this.strip();\n      };\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        }\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n          a = diff;\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);\n          qj = Math.min(qj / bhi | 0, 67108863);\n          a._ishlnsubmul(b, qj, j);\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n            a._ishlnsubmul(b, 1, j);\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n        if (q) {\n          q.strip();\n        }\n        a.strip();\n        if (mode !== \"div\" && shift !== 0) {\n          a.iushrn(shift);\n        }\n        return {\n          div: q || null,\n          mod: a\n        };\n      };\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n          return {\n            div,\n            mod\n          };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          return {\n            div,\n            mod: res.mod\n          };\n        }\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n          return {\n            div: res.div,\n            mod\n          };\n        }\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        }\n        if (num.length === 1) {\n          if (mode === \"div\") {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n          if (mode === \"mod\") {\n            return {\n              div: null,\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n        return this._wordDiv(num, mode);\n      };\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n      };\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n      };\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n      };\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        if (dm.mod.isZero())\n          return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        if (cmp < 0 || r2 === 1 && cmp === 0)\n          return dm.div;\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n      BN.prototype.modn = function modn(num) {\n        assert(num <= 67108863);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return acc;\n      };\n      BN.prototype.idivn = function idivn(num) {\n        assert(num <= 67108863);\n        var carry = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 67108864;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n        return this.strip();\n      };\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        }\n        var A = new BN(1);\n        var B = new BN(0);\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            x.iushrn(i);\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            y.iushrn(j);\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      };\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            a.iushrn(i);\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n              x1.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            b.iushrn(j);\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n              x2.iushrn(1);\n            }\n          }\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n        return res;\n      };\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero())\n          return num.abs();\n        if (num.isZero())\n          return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n          var r = a.cmp(b);\n          if (r < 0) {\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n          a.isub(b);\n        } while (true);\n        return b.iushln(shift);\n      };\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      };\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      };\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s) {\n          this._expand(s + 1);\n          this.words[s] |= q;\n          return this;\n        }\n        var carry = q;\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 67108863;\n          this.words[i] = w;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative)\n          return -1;\n        if (this.negative === 0 && negative)\n          return 1;\n        this.strip();\n        var res;\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n          assert(num <= 67108863, \"Number is too big\");\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0)\n          return -1;\n        if (this.negative === 0 && num.negative !== 0)\n          return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.ucmp = function ucmp(num) {\n        if (this.length > num.length)\n          return 1;\n        if (this.length < num.length)\n          return -1;\n        var res = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b)\n            continue;\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n          break;\n        }\n        return res;\n      };\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      };\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n      };\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n      };\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n      };\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n      };\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n      };\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n      };\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n      };\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n      };\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n      };\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n      };\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n      };\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n      };\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n      };\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n      };\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n      };\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function MPrime(name, p) {\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n      MPrime.prototype.ireduce = function ireduce(num) {\n        var r = num;\n        var rlen;\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== void 0) {\n            r.strip();\n          } else {\n            r._strip();\n          }\n        }\n        return r;\n      };\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n      function K256() {\n        MPrime.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      inherits(K256, MPrime);\n      K256.prototype.split = function split(input, output) {\n        var mask = 4194303;\n        var outLen = Math.min(input.length, 9);\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        }\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n      K256.prototype.imulK = function imulK(num) {\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        var lo = 0;\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 977;\n          num.words[i] = lo & 67108863;\n          lo = w * 64 + (lo / 67108864 | 0);\n        }\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n        return num;\n      };\n      function P224() {\n        MPrime.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      inherits(P224, MPrime);\n      function P192() {\n        MPrime.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      inherits(P192, MPrime);\n      function P25519() {\n        MPrime.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      inherits(P25519, MPrime);\n      P25519.prototype.imulK = function imulK(num) {\n        var carry = 0;\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 19 + carry;\n          var lo = hi & 67108863;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n        return num;\n      };\n      BN._prime = function prime(name) {\n        if (primes[name])\n          return primes[name];\n        var prime2;\n        if (name === \"k256\") {\n          prime2 = new K256();\n        } else if (name === \"p224\") {\n          prime2 = new P224();\n        } else if (name === \"p192\") {\n          prime2 = new P192();\n        } else if (name === \"p25519\") {\n          prime2 = new P25519();\n        } else {\n          throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime2;\n        return prime2;\n      };\n      function Red(m) {\n        if (typeof m === \"string\") {\n          var prime = BN._prime(m);\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), \"modulus must be greater than 1\");\n          this.m = m;\n          this.prime = null;\n        }\n      }\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n      };\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(\n          a.red && a.red === b.red,\n          \"red works only with red numbers\"\n        );\n      };\n      Red.prototype.imod = function imod(a) {\n        if (this.prime)\n          return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n      };\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n      };\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res;\n      };\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res;\n      };\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n      };\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n      };\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n      };\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero())\n          return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        }\n        var q = this.m.subn(1);\n        var s = 0;\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n        return r;\n      };\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero())\n          return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0)\n          return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n          start = 26;\n        }\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0))\n              continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n          start = 26;\n        }\n        return res;\n      };\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      };\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n      inherits(Mont, Red);\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero())\n          return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.invm = function invm(a) {\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(typeof module === \"undefined\" || module, exports);\n  }\n});\n\n// node_modules/create-ecdh/browser.js\nvar require_browser10 = __commonJS({\n  \"node_modules/create-ecdh/browser.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var elliptic = require_elliptic();\n    var BN = require_bn6();\n    module.exports = function createECDH(curve) {\n      return new ECDH(curve);\n    };\n    var aliases = {\n      secp256k1: {\n        name: \"secp256k1\",\n        byteLength: 32\n      },\n      secp224r1: {\n        name: \"p224\",\n        byteLength: 28\n      },\n      prime256v1: {\n        name: \"p256\",\n        byteLength: 32\n      },\n      prime192v1: {\n        name: \"p192\",\n        byteLength: 24\n      },\n      ed25519: {\n        name: \"ed25519\",\n        byteLength: 32\n      },\n      secp384r1: {\n        name: \"p384\",\n        byteLength: 48\n      },\n      secp521r1: {\n        name: \"p521\",\n        byteLength: 66\n      }\n    };\n    aliases.p224 = aliases.secp224r1;\n    aliases.p256 = aliases.secp256r1 = aliases.prime256v1;\n    aliases.p192 = aliases.secp192r1 = aliases.prime192v1;\n    aliases.p384 = aliases.secp384r1;\n    aliases.p521 = aliases.secp521r1;\n    function ECDH(curve) {\n      this.curveType = aliases[curve];\n      if (!this.curveType) {\n        this.curveType = {\n          name: curve\n        };\n      }\n      this.curve = new elliptic.ec(this.curveType.name);\n      this.keys = void 0;\n    }\n    ECDH.prototype.generateKeys = function(enc, format) {\n      this.keys = this.curve.genKeyPair();\n      return this.getPublicKey(enc, format);\n    };\n    ECDH.prototype.computeSecret = function(other, inenc, enc) {\n      inenc = inenc || \"utf8\";\n      if (!Buffer.isBuffer(other)) {\n        other = new Buffer(other, inenc);\n      }\n      var otherPub = this.curve.keyFromPublic(other).getPublic();\n      var out = otherPub.mul(this.keys.getPrivate()).getX();\n      return formatReturnValue(out, enc, this.curveType.byteLength);\n    };\n    ECDH.prototype.getPublicKey = function(enc, format) {\n      var key = this.keys.getPublic(format === \"compressed\", true);\n      if (format === \"hybrid\") {\n        if (key[key.length - 1] % 2) {\n          key[0] = 7;\n        } else {\n          key[0] = 6;\n        }\n      }\n      return formatReturnValue(key, enc);\n    };\n    ECDH.prototype.getPrivateKey = function(enc) {\n      return formatReturnValue(this.keys.getPrivate(), enc);\n    };\n    ECDH.prototype.setPublicKey = function(pub, enc) {\n      enc = enc || \"utf8\";\n      if (!Buffer.isBuffer(pub)) {\n        pub = new Buffer(pub, enc);\n      }\n      this.keys._importPublic(pub);\n      return this;\n    };\n    ECDH.prototype.setPrivateKey = function(priv, enc) {\n      enc = enc || \"utf8\";\n      if (!Buffer.isBuffer(priv)) {\n        priv = new Buffer(priv, enc);\n      }\n      var _priv = new BN(priv);\n      _priv = _priv.toString(16);\n      this.keys = this.curve.genKeyPair();\n      this.keys._importPrivate(_priv);\n      return this;\n    };\n    function formatReturnValue(bn, enc, len) {\n      if (!Array.isArray(bn)) {\n        bn = bn.toArray();\n      }\n      var buf = new Buffer(bn);\n      if (len && buf.length < len) {\n        var zeros = new Buffer(len - buf.length);\n        zeros.fill(0);\n        buf = Buffer.concat([zeros, buf]);\n      }\n      if (!enc) {\n        return buf;\n      } else {\n        return buf.toString(enc);\n      }\n    }\n  }\n});\n\n// node_modules/public-encrypt/mgf.js\nvar require_mgf = __commonJS({\n  \"node_modules/public-encrypt/mgf.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var createHash = require_browser3();\n    var Buffer2 = require_safe_buffer().Buffer;\n    module.exports = function(seed, len) {\n      var t = Buffer2.alloc(0);\n      var i = 0;\n      var c;\n      while (t.length < len) {\n        c = i2ops(i++);\n        t = Buffer2.concat([t, createHash(\"sha1\").update(seed).update(c).digest()]);\n      }\n      return t.slice(0, len);\n    };\n    function i2ops(c) {\n      var out = Buffer2.allocUnsafe(4);\n      out.writeUInt32BE(c, 0);\n      return out;\n    }\n  }\n});\n\n// node_modules/public-encrypt/xor.js\nvar require_xor = __commonJS({\n  \"node_modules/public-encrypt/xor.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    module.exports = function xor(a, b) {\n      var len = a.length;\n      var i = -1;\n      while (++i < len) {\n        a[i] ^= b[i];\n      }\n      return a;\n    };\n  }\n});\n\n// node_modules/public-encrypt/node_modules/bn.js/lib/bn.js\nvar require_bn7 = __commonJS({\n  \"node_modules/public-encrypt/node_modules/bn.js/lib/bn.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    (function(module2, exports2) {\n      \"use strict\";\n      function assert(val, msg) {\n        if (!val)\n          throw new Error(msg || \"Assertion failed\");\n      }\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {\n        };\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      }\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        this.red = null;\n        if (number !== null) {\n          if (base === \"le\" || base === \"be\") {\n            endian = base;\n            base = 10;\n          }\n          this._init(number || 0, base || 10, endian || \"be\");\n        }\n      }\n      if (typeof module2 === \"object\") {\n        module2.exports = BN;\n      } else {\n        exports2.BN = BN;\n      }\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer2;\n      try {\n        if (typeof window !== \"undefined\" && typeof window.Buffer !== \"undefined\") {\n          Buffer2 = window.Buffer;\n        } else {\n          Buffer2 = require_buffer_polyfill().Buffer;\n        }\n      } catch (e) {\n      }\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0)\n          return left;\n        return right;\n      };\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0)\n          return left;\n        return right;\n      };\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n          return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n          return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n          base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n          start++;\n          this.negative = 1;\n        }\n        if (start < number.length) {\n          if (base === 16) {\n            this._parseHex(number, start, endian);\n          } else {\n            this._parseBase(number, base, start);\n            if (endian === \"le\") {\n              this._initArray(this.toArray(), base, endian);\n            }\n          }\n        }\n      };\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n        if (number < 67108864) {\n          this.words = [number & 67108863];\n          this.length = 1;\n        } else if (number < 4503599627370496) {\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863\n          ];\n          this.length = 2;\n        } else {\n          assert(number < 9007199254740992);\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863,\n            1\n          ];\n          this.length = 3;\n        }\n        if (endian !== \"le\")\n          return;\n        this._initArray(this.toArray(), base, endian);\n      };\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === \"le\") {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n        return this.strip();\n      };\n      function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        if (c >= 65 && c <= 70) {\n          return c - 55;\n        } else if (c >= 97 && c <= 102) {\n          return c - 87;\n        } else {\n          return c - 48 & 15;\n        }\n      }\n      function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n          r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n      }\n      BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n          for (i = number.length - 1; i >= start; i -= 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        } else {\n          var parseLength = number.length - start;\n          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        }\n        this.strip();\n      };\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul;\n          if (c >= 49) {\n            r += c - 49 + 10;\n          } else if (c >= 17) {\n            r += c - 17 + 10;\n          } else {\n            r += c;\n          }\n        }\n        return r;\n      }\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        this.words = [0];\n        this.length = 1;\n        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {\n          limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n          this.imuln(pow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        this.strip();\n      };\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n        return this;\n      };\n      BN.prototype.strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n        return this._normSign();\n      };\n      BN.prototype._normSign = function _normSign() {\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n        return this;\n      };\n      BN.prototype.inspect = function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      };\n      var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ];\n      var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ];\n      var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n          out = \"\";\n          var off = 0;\n          var carry = 0;\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 16777215).toString(16);\n            carry = w >>> 24 - off & 16777215;\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n            off += 2;\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n          }\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          var groupSize = groupSizes[base];\n          var groupBase = groupBases[base];\n          out = \"\";\n          var c = this.clone();\n          c.negative = 0;\n          while (!c.isZero()) {\n            var r = c.modn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n          if (this.isZero()) {\n            out = \"0\" + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n      };\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n          ret += this.words[1] * 67108864;\n        } else if (this.length === 3 && this.words[2] === 1) {\n          ret += 4503599627370496 + this.words[1] * 67108864;\n        } else if (this.length > 2) {\n          assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n      };\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n      };\n      BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer2 !== \"undefined\");\n        return this.toArrayLike(Buffer2, endian, length);\n      };\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        this.strip();\n        var littleEndian = endian === \"le\";\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n        if (!littleEndian) {\n          for (i = 0; i < reqLength - byteLength; i++) {\n            res[i] = 0;\n          }\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[reqLength - i - 1] = b;\n          }\n        } else {\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(255);\n            q.iushrn(8);\n            res[i] = b;\n          }\n          for (; i < reqLength; i++) {\n            res[i] = 0;\n          }\n        }\n        return res;\n      };\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n          if (t >= 4096) {\n            r += 13;\n            t >>>= 13;\n          }\n          if (t >= 64) {\n            r += 7;\n            t >>>= 7;\n          }\n          if (t >= 8) {\n            r += 4;\n            t >>>= 4;\n          }\n          if (t >= 2) {\n            r += 2;\n            t >>>= 2;\n          }\n          return r + t;\n        };\n      }\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        if (w === 0)\n          return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 8191) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n        if ((t & 127) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n        if ((t & 15) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n        if ((t & 3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n        if ((t & 1) === 0) {\n          r++;\n        }\n        return r;\n      };\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n      };\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n        return w;\n      }\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero())\n          return 0;\n        var r = 0;\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n          r += b;\n          if (b !== 26)\n            break;\n        }\n        return r;\n      };\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n      };\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n      };\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      };\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n        return this;\n      };\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n        return this.strip();\n      };\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      };\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length)\n          return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length)\n          return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      };\n      BN.prototype.iuand = function iuand(num) {\n        var b;\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this.strip();\n      };\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      };\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length)\n          return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length)\n          return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      };\n      BN.prototype.iuxor = function iuxor(num) {\n        var a;\n        var b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = a.length;\n        return this.strip();\n      };\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      };\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length)\n          return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length)\n          return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      };\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        }\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 67108863;\n        }\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;\n        }\n        return this.strip();\n      };\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      };\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this.strip();\n      };\n      BN.prototype.iadd = function iadd(num) {\n        var r;\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign();\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        }\n        var a, b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++;\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        return this;\n      };\n      BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n        if (this.length > num.length)\n          return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      };\n      BN.prototype.isub = function isub(num) {\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign();\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        }\n        var cmp = this.cmp(num);\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        }\n        var a, b;\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n          this.negative = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n      function smallMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        var len = self2.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        var a = self2.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 67108863;\n        var carry = r / 67108864 | 0;\n        out.words[0] = lo;\n        for (var k = 1; k < len; k++) {\n          var ncarry = carry >>> 26;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self2.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 67108864 | 0;\n            rword = r & 67108863;\n          }\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      var comb10MulTo = function comb10MulTo2(self2, num, out) {\n        var a = self2.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 8191;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 8191;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 8191;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 8191;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 8191;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 8191;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 8191;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 8191;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 8191;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 8191;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 8191;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 8191;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 8191;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 8191;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 8191;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 8191;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 8191;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 8191;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 8191;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 8191;\n        var bh9 = b9 >>> 13;\n        out.negative = self2.negative ^ num.negative;\n        out.length = 19;\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 67108863;\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 67108863;\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 67108863;\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 67108863;\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 67108863;\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 67108863;\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 67108863;\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 67108863;\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 67108863;\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 67108863;\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 67108863;\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 67108863;\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 67108863;\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 67108863;\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 67108863;\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 67108863;\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 67108863;\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 67108863;\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 67108863;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n        return out;\n      };\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n      function bigMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        out.length = self2.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for (var k = 0; k < out.length - 1; k++) {\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self2.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 67108863;\n            ncarry = ncarry + (r / 67108864 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 67108863;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 67108863;\n          }\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n        return out.strip();\n      }\n      function jumboMulTo(self2, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self2, num, out);\n      }\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n        return res;\n      };\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n        return t;\n      };\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1)\n          return x;\n        var rb = 0;\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n        return rb;\n      };\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n        return 1 << i + 1 + odd;\n      };\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1)\n          return;\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 67108863;\n          if (w < 67108864) {\n            carry = 0;\n          } else {\n            carry = w / 67108864 | 0;\n          }\n        }\n        return ws;\n      };\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 8191;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 8191;\n          carry = carry >>> 13;\n        }\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~8191) === 0);\n      };\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n        return ph;\n      };\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n      };\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      };\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      };\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n      BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        var carry = 0;\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 67108863) + (carry & 67108863);\n          carry >>= 26;\n          carry += w / 67108864 | 0;\n          carry += lo >>> 26;\n          this.words[i] = lo & 67108863;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      };\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      };\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      };\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0)\n          return new BN(1);\n        var res = this;\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0)\n            break;\n        }\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0)\n              continue;\n            res = res.mul(q);\n          }\n        }\n        return res;\n      };\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 67108863 >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n          var carry = 0;\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n          this.length += s;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishln = function ishln(bits) {\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      };\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 67108863 ^ 67108863 >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n          maskedWords.length = s;\n        }\n        if (s === 0) {\n        } else if (this.length > s) {\n          this.length -= s;\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        }\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        return this.strip();\n      };\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      };\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      };\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      };\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s)\n          return false;\n        var w = this.words[s];\n        return !!(w & q);\n      };\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n          return this;\n        }\n        if (r !== 0) {\n          s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n          var mask = 67108863 ^ 67108863 >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n        return this.strip();\n      };\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      };\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.isubn(-num);\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) < num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        }\n        return this._iaddn(num);\n      };\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {\n          this.words[i] -= 67108864;\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      };\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.iaddn(-num);\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 67108864;\n            this.words[i + 1] -= 1;\n          }\n        }\n        return this.strip();\n      };\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 67108863;\n          carry = (w >> 26) - (right / 67108864 | 0);\n          this.words[i + shift] = w & 67108863;\n        }\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 67108863;\n        }\n        if (carry === 0)\n          return this.strip();\n        assert(carry === -1);\n        carry = 0;\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 67108863;\n        }\n        this.negative = 1;\n        return this.strip();\n      };\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        }\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n          a = diff;\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);\n          qj = Math.min(qj / bhi | 0, 67108863);\n          a._ishlnsubmul(b, qj, j);\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n            a._ishlnsubmul(b, 1, j);\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n        if (q) {\n          q.strip();\n        }\n        a.strip();\n        if (mode !== \"div\" && shift !== 0) {\n          a.iushrn(shift);\n        }\n        return {\n          div: q || null,\n          mod: a\n        };\n      };\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n          return {\n            div,\n            mod\n          };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          return {\n            div,\n            mod: res.mod\n          };\n        }\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n          return {\n            div: res.div,\n            mod\n          };\n        }\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        }\n        if (num.length === 1) {\n          if (mode === \"div\") {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n          if (mode === \"mod\") {\n            return {\n              div: null,\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n        return this._wordDiv(num, mode);\n      };\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n      };\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n      };\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n      };\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        if (dm.mod.isZero())\n          return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        if (cmp < 0 || r2 === 1 && cmp === 0)\n          return dm.div;\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n      BN.prototype.modn = function modn(num) {\n        assert(num <= 67108863);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return acc;\n      };\n      BN.prototype.idivn = function idivn(num) {\n        assert(num <= 67108863);\n        var carry = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 67108864;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n        return this.strip();\n      };\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        }\n        var A = new BN(1);\n        var B = new BN(0);\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            x.iushrn(i);\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            y.iushrn(j);\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      };\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            a.iushrn(i);\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n              x1.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            b.iushrn(j);\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n              x2.iushrn(1);\n            }\n          }\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n        return res;\n      };\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero())\n          return num.abs();\n        if (num.isZero())\n          return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n          var r = a.cmp(b);\n          if (r < 0) {\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n          a.isub(b);\n        } while (true);\n        return b.iushln(shift);\n      };\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      };\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      };\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s) {\n          this._expand(s + 1);\n          this.words[s] |= q;\n          return this;\n        }\n        var carry = q;\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 67108863;\n          this.words[i] = w;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative)\n          return -1;\n        if (this.negative === 0 && negative)\n          return 1;\n        this.strip();\n        var res;\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n          assert(num <= 67108863, \"Number is too big\");\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0)\n          return -1;\n        if (this.negative === 0 && num.negative !== 0)\n          return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN.prototype.ucmp = function ucmp(num) {\n        if (this.length > num.length)\n          return 1;\n        if (this.length < num.length)\n          return -1;\n        var res = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b)\n            continue;\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n          break;\n        }\n        return res;\n      };\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      };\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n      };\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n      };\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n      };\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n      };\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n      };\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n      };\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n      };\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n      };\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n      };\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n      };\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n      };\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n      };\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n      };\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n      };\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n      };\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function MPrime(name, p) {\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n      MPrime.prototype.ireduce = function ireduce(num) {\n        var r = num;\n        var rlen;\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== void 0) {\n            r.strip();\n          } else {\n            r._strip();\n          }\n        }\n        return r;\n      };\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n      function K256() {\n        MPrime.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      inherits(K256, MPrime);\n      K256.prototype.split = function split(input, output) {\n        var mask = 4194303;\n        var outLen = Math.min(input.length, 9);\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        }\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n      K256.prototype.imulK = function imulK(num) {\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        var lo = 0;\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 977;\n          num.words[i] = lo & 67108863;\n          lo = w * 64 + (lo / 67108864 | 0);\n        }\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n        return num;\n      };\n      function P224() {\n        MPrime.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      inherits(P224, MPrime);\n      function P192() {\n        MPrime.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      inherits(P192, MPrime);\n      function P25519() {\n        MPrime.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      inherits(P25519, MPrime);\n      P25519.prototype.imulK = function imulK(num) {\n        var carry = 0;\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 19 + carry;\n          var lo = hi & 67108863;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n        return num;\n      };\n      BN._prime = function prime(name) {\n        if (primes[name])\n          return primes[name];\n        var prime2;\n        if (name === \"k256\") {\n          prime2 = new K256();\n        } else if (name === \"p224\") {\n          prime2 = new P224();\n        } else if (name === \"p192\") {\n          prime2 = new P192();\n        } else if (name === \"p25519\") {\n          prime2 = new P25519();\n        } else {\n          throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime2;\n        return prime2;\n      };\n      function Red(m) {\n        if (typeof m === \"string\") {\n          var prime = BN._prime(m);\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), \"modulus must be greater than 1\");\n          this.m = m;\n          this.prime = null;\n        }\n      }\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n      };\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(\n          a.red && a.red === b.red,\n          \"red works only with red numbers\"\n        );\n      };\n      Red.prototype.imod = function imod(a) {\n        if (this.prime)\n          return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n      };\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n      };\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res;\n      };\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res;\n      };\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n      };\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n      };\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n      };\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero())\n          return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        }\n        var q = this.m.subn(1);\n        var s = 0;\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n        return r;\n      };\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero())\n          return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0)\n          return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n          start = 26;\n        }\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0))\n              continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n          start = 26;\n        }\n        return res;\n      };\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      };\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n      inherits(Mont, Red);\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero())\n          return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.invm = function invm(a) {\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(typeof module === \"undefined\" || module, exports);\n  }\n});\n\n// node_modules/public-encrypt/withPublic.js\nvar require_withPublic = __commonJS({\n  \"node_modules/public-encrypt/withPublic.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var BN = require_bn7();\n    var Buffer2 = require_safe_buffer().Buffer;\n    function withPublic(paddedMsg, key) {\n      return Buffer2.from(paddedMsg.toRed(BN.mont(key.modulus)).redPow(new BN(key.publicExponent)).fromRed().toArray());\n    }\n    module.exports = withPublic;\n  }\n});\n\n// node_modules/public-encrypt/publicEncrypt.js\nvar require_publicEncrypt = __commonJS({\n  \"node_modules/public-encrypt/publicEncrypt.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var parseKeys = require_parse_asn1();\n    var randomBytes = require_browser();\n    var createHash = require_browser3();\n    var mgf = require_mgf();\n    var xor = require_xor();\n    var BN = require_bn7();\n    var withPublic = require_withPublic();\n    var crt = require_browserify_rsa();\n    var Buffer2 = require_safe_buffer().Buffer;\n    module.exports = function publicEncrypt(publicKey, msg, reverse) {\n      var padding;\n      if (publicKey.padding) {\n        padding = publicKey.padding;\n      } else if (reverse) {\n        padding = 1;\n      } else {\n        padding = 4;\n      }\n      var key = parseKeys(publicKey);\n      var paddedMsg;\n      if (padding === 4) {\n        paddedMsg = oaep(key, msg);\n      } else if (padding === 1) {\n        paddedMsg = pkcs1(key, msg, reverse);\n      } else if (padding === 3) {\n        paddedMsg = new BN(msg);\n        if (paddedMsg.cmp(key.modulus) >= 0) {\n          throw new Error(\"data too long for modulus\");\n        }\n      } else {\n        throw new Error(\"unknown padding\");\n      }\n      if (reverse) {\n        return crt(paddedMsg, key);\n      } else {\n        return withPublic(paddedMsg, key);\n      }\n    };\n    function oaep(key, msg) {\n      var k = key.modulus.byteLength();\n      var mLen = msg.length;\n      var iHash = createHash(\"sha1\").update(Buffer2.alloc(0)).digest();\n      var hLen = iHash.length;\n      var hLen2 = 2 * hLen;\n      if (mLen > k - hLen2 - 2) {\n        throw new Error(\"message too long\");\n      }\n      var ps = Buffer2.alloc(k - mLen - hLen2 - 2);\n      var dblen = k - hLen - 1;\n      var seed = randomBytes(hLen);\n      var maskedDb = xor(Buffer2.concat([iHash, ps, Buffer2.alloc(1, 1), msg], dblen), mgf(seed, dblen));\n      var maskedSeed = xor(seed, mgf(maskedDb, hLen));\n      return new BN(Buffer2.concat([Buffer2.alloc(1), maskedSeed, maskedDb], k));\n    }\n    function pkcs1(key, msg, reverse) {\n      var mLen = msg.length;\n      var k = key.modulus.byteLength();\n      if (mLen > k - 11) {\n        throw new Error(\"message too long\");\n      }\n      var ps;\n      if (reverse) {\n        ps = Buffer2.alloc(k - mLen - 3, 255);\n      } else {\n        ps = nonZero(k - mLen - 3);\n      }\n      return new BN(Buffer2.concat([Buffer2.from([0, reverse ? 1 : 2]), ps, Buffer2.alloc(1), msg], k));\n    }\n    function nonZero(len) {\n      var out = Buffer2.allocUnsafe(len);\n      var i = 0;\n      var cache = randomBytes(len * 2);\n      var cur = 0;\n      var num;\n      while (i < len) {\n        if (cur === cache.length) {\n          cache = randomBytes(len * 2);\n          cur = 0;\n        }\n        num = cache[cur++];\n        if (num) {\n          out[i++] = num;\n        }\n      }\n      return out;\n    }\n  }\n});\n\n// node_modules/public-encrypt/privateDecrypt.js\nvar require_privateDecrypt = __commonJS({\n  \"node_modules/public-encrypt/privateDecrypt.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var parseKeys = require_parse_asn1();\n    var mgf = require_mgf();\n    var xor = require_xor();\n    var BN = require_bn7();\n    var crt = require_browserify_rsa();\n    var createHash = require_browser3();\n    var withPublic = require_withPublic();\n    var Buffer2 = require_safe_buffer().Buffer;\n    module.exports = function privateDecrypt(privateKey, enc, reverse) {\n      var padding;\n      if (privateKey.padding) {\n        padding = privateKey.padding;\n      } else if (reverse) {\n        padding = 1;\n      } else {\n        padding = 4;\n      }\n      var key = parseKeys(privateKey);\n      var k = key.modulus.byteLength();\n      if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {\n        throw new Error(\"decryption error\");\n      }\n      var msg;\n      if (reverse) {\n        msg = withPublic(new BN(enc), key);\n      } else {\n        msg = crt(enc, key);\n      }\n      var zBuffer = Buffer2.alloc(k - msg.length);\n      msg = Buffer2.concat([zBuffer, msg], k);\n      if (padding === 4) {\n        return oaep(key, msg);\n      } else if (padding === 1) {\n        return pkcs1(key, msg, reverse);\n      } else if (padding === 3) {\n        return msg;\n      } else {\n        throw new Error(\"unknown padding\");\n      }\n    };\n    function oaep(key, msg) {\n      var k = key.modulus.byteLength();\n      var iHash = createHash(\"sha1\").update(Buffer2.alloc(0)).digest();\n      var hLen = iHash.length;\n      if (msg[0] !== 0) {\n        throw new Error(\"decryption error\");\n      }\n      var maskedSeed = msg.slice(1, hLen + 1);\n      var maskedDb = msg.slice(hLen + 1);\n      var seed = xor(maskedSeed, mgf(maskedDb, hLen));\n      var db = xor(maskedDb, mgf(seed, k - hLen - 1));\n      if (compare(iHash, db.slice(0, hLen))) {\n        throw new Error(\"decryption error\");\n      }\n      var i = hLen;\n      while (db[i] === 0) {\n        i++;\n      }\n      if (db[i++] !== 1) {\n        throw new Error(\"decryption error\");\n      }\n      return db.slice(i);\n    }\n    function pkcs1(key, msg, reverse) {\n      var p1 = msg.slice(0, 2);\n      var i = 2;\n      var status = 0;\n      while (msg[i++] !== 0) {\n        if (i >= msg.length) {\n          status++;\n          break;\n        }\n      }\n      var ps = msg.slice(2, i - 1);\n      if (p1.toString(\"hex\") !== \"0002\" && !reverse || p1.toString(\"hex\") !== \"0001\" && reverse) {\n        status++;\n      }\n      if (ps.length < 8) {\n        status++;\n      }\n      if (status) {\n        throw new Error(\"decryption error\");\n      }\n      return msg.slice(i);\n    }\n    function compare(a, b) {\n      a = Buffer2.from(a);\n      b = Buffer2.from(b);\n      var dif = 0;\n      var len = a.length;\n      if (a.length !== b.length) {\n        dif++;\n        len = Math.min(a.length, b.length);\n      }\n      var i = -1;\n      while (++i < len) {\n        dif += a[i] ^ b[i];\n      }\n      return dif;\n    }\n  }\n});\n\n// node_modules/public-encrypt/browser.js\nvar require_browser11 = __commonJS({\n  \"node_modules/public-encrypt/browser.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    exports.publicEncrypt = require_publicEncrypt();\n    exports.privateDecrypt = require_privateDecrypt();\n    exports.privateEncrypt = function privateEncrypt(key, buf) {\n      return exports.publicEncrypt(key, buf, true);\n    };\n    exports.publicDecrypt = function publicDecrypt(key, buf) {\n      return exports.privateDecrypt(key, buf, true);\n    };\n  }\n});\n\n// node_modules/randomfill/browser.js\nvar require_browser12 = __commonJS({\n  \"node_modules/randomfill/browser.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    function oldBrowser() {\n      throw new Error(\"secure random number generation not supported by this browser\\nuse chrome, FireFox or Internet Explorer 11\");\n    }\n    var safeBuffer = require_safe_buffer();\n    var randombytes = require_browser();\n    var Buffer2 = safeBuffer.Buffer;\n    var kBufferMaxLength = safeBuffer.kMaxLength;\n    var crypto = global.crypto || global.msCrypto;\n    var kMaxUint32 = Math.pow(2, 32) - 1;\n    function assertOffset(offset, length) {\n      if (typeof offset !== \"number\" || offset !== offset) {\n        throw new TypeError(\"offset must be a number\");\n      }\n      if (offset > kMaxUint32 || offset < 0) {\n        throw new TypeError(\"offset must be a uint32\");\n      }\n      if (offset > kBufferMaxLength || offset > length) {\n        throw new RangeError(\"offset out of range\");\n      }\n    }\n    function assertSize(size, offset, length) {\n      if (typeof size !== \"number\" || size !== size) {\n        throw new TypeError(\"size must be a number\");\n      }\n      if (size > kMaxUint32 || size < 0) {\n        throw new TypeError(\"size must be a uint32\");\n      }\n      if (size + offset > length || size > kBufferMaxLength) {\n        throw new RangeError(\"buffer too small\");\n      }\n    }\n    if (crypto && crypto.getRandomValues || !process.browser) {\n      exports.randomFill = randomFill;\n      exports.randomFillSync = randomFillSync;\n    } else {\n      exports.randomFill = oldBrowser;\n      exports.randomFillSync = oldBrowser;\n    }\n    function randomFill(buf, offset, size, cb) {\n      if (!Buffer2.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n        throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array');\n      }\n      if (typeof offset === \"function\") {\n        cb = offset;\n        offset = 0;\n        size = buf.length;\n      } else if (typeof size === \"function\") {\n        cb = size;\n        size = buf.length - offset;\n      } else if (typeof cb !== \"function\") {\n        throw new TypeError('\"cb\" argument must be a function');\n      }\n      assertOffset(offset, buf.length);\n      assertSize(size, offset, buf.length);\n      return actualFill(buf, offset, size, cb);\n    }\n    function actualFill(buf, offset, size, cb) {\n      if (process.browser) {\n        var ourBuf = buf.buffer;\n        var uint = new Uint8Array(ourBuf, offset, size);\n        crypto.getRandomValues(uint);\n        if (cb) {\n          process.nextTick(function() {\n            cb(null, buf);\n          });\n          return;\n        }\n        return buf;\n      }\n      if (cb) {\n        randombytes(size, function(err, bytes2) {\n          if (err) {\n            return cb(err);\n          }\n          bytes2.copy(buf, offset);\n          cb(null, buf);\n        });\n        return;\n      }\n      var bytes = randombytes(size);\n      bytes.copy(buf, offset);\n      return buf;\n    }\n    function randomFillSync(buf, offset, size) {\n      if (typeof offset === \"undefined\") {\n        offset = 0;\n      }\n      if (!Buffer2.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n        throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array');\n      }\n      assertOffset(offset, buf.length);\n      if (size === void 0)\n        size = buf.length - offset;\n      assertSize(size, offset, buf.length);\n      return actualFill(buf, offset, size);\n    }\n  }\n});\n\n// node_modules/crypto-browserify/index.js\nvar require_crypto_browserify = __commonJS({\n  \"node_modules/crypto-browserify/index.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require_browser();\n    exports.createHash = exports.Hash = require_browser3();\n    exports.createHmac = exports.Hmac = require_browser4();\n    var algos = require_algos();\n    var algoKeys = Object.keys(algos);\n    var hashes = [\"sha1\", \"sha224\", \"sha256\", \"sha384\", \"sha512\", \"md5\", \"rmd160\"].concat(algoKeys);\n    exports.getHashes = function() {\n      return hashes;\n    };\n    var p = require_browser5();\n    exports.pbkdf2 = p.pbkdf2;\n    exports.pbkdf2Sync = p.pbkdf2Sync;\n    var aes = require_browser7();\n    exports.Cipher = aes.Cipher;\n    exports.createCipher = aes.createCipher;\n    exports.Cipheriv = aes.Cipheriv;\n    exports.createCipheriv = aes.createCipheriv;\n    exports.Decipher = aes.Decipher;\n    exports.createDecipher = aes.createDecipher;\n    exports.Decipheriv = aes.Decipheriv;\n    exports.createDecipheriv = aes.createDecipheriv;\n    exports.getCiphers = aes.getCiphers;\n    exports.listCiphers = aes.listCiphers;\n    var dh = require_browser8();\n    exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;\n    exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;\n    exports.getDiffieHellman = dh.getDiffieHellman;\n    exports.createDiffieHellman = dh.createDiffieHellman;\n    exports.DiffieHellman = dh.DiffieHellman;\n    var sign = require_browser9();\n    exports.createSign = sign.createSign;\n    exports.Sign = sign.Sign;\n    exports.createVerify = sign.createVerify;\n    exports.Verify = sign.Verify;\n    exports.createECDH = require_browser10();\n    var publicEncrypt = require_browser11();\n    exports.publicEncrypt = publicEncrypt.publicEncrypt;\n    exports.privateEncrypt = publicEncrypt.privateEncrypt;\n    exports.publicDecrypt = publicEncrypt.publicDecrypt;\n    exports.privateDecrypt = publicEncrypt.privateDecrypt;\n    var rf = require_browser12();\n    exports.randomFill = rf.randomFill;\n    exports.randomFillSync = rf.randomFillSync;\n    exports.createCredentials = function() {\n      throw new Error([\n        \"sorry, createCredentials is not implemented yet\",\n        \"we accept pull requests\",\n        \"https://github.com/crypto-browserify/crypto-browserify\"\n      ].join(\"\\n\"));\n    };\n    exports.constants = {\n      \"DH_CHECK_P_NOT_SAFE_PRIME\": 2,\n      \"DH_CHECK_P_NOT_PRIME\": 1,\n      \"DH_UNABLE_TO_CHECK_GENERATOR\": 4,\n      \"DH_NOT_SUITABLE_GENERATOR\": 8,\n      \"NPN_ENABLED\": 1,\n      \"ALPN_ENABLED\": 1,\n      \"RSA_PKCS1_PADDING\": 1,\n      \"RSA_SSLV23_PADDING\": 2,\n      \"RSA_NO_PADDING\": 3,\n      \"RSA_PKCS1_OAEP_PADDING\": 4,\n      \"RSA_X931_PADDING\": 5,\n      \"RSA_PKCS1_PSS_PADDING\": 6,\n      \"POINT_CONVERSION_COMPRESSED\": 2,\n      \"POINT_CONVERSION_UNCOMPRESSED\": 4,\n      \"POINT_CONVERSION_HYBRID\": 6\n    };\n  }\n});\n\nexport {\n  require_safe_buffer,\n  require_inherits_browser,\n  require_events,\n  require_shams,\n  require_get_intrinsic,\n  require_has_property_descriptors,\n  require_define_data_property,\n  require_call_bind,\n  require_callBound,\n  require_util,\n  require_string_decoder,\n  require_readable_browser,\n  require_stream_browserify,\n  require_safer,\n  require_crypto_browserify\n};\n/*! Bundled license information:\n\nsafe-buffer/index.js:\n  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n*/\n//# sourceMappingURL=chunk-OYHNC6W5.js.map\n",
      "start": 1703289449997,
      "end": 1703289450003,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
