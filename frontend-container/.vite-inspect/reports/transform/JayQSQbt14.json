{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../../language/predicates.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location\n */\nexport function UniqueDirectivesPerLocationRule(context) {\n  const uniqueDirectiveMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  const schemaDirectives = Object.create(null);\n  const typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter(node) {\n      if (!('directives' in node) || !node.directives) {\n        return;\n      }\n\n      let seenDirectives;\n\n      if (\n        node.kind === Kind.SCHEMA_DEFINITION ||\n        node.kind === Kind.SCHEMA_EXTENSION\n      ) {\n        seenDirectives = schemaDirectives;\n      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {\n        const typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (const directive of node.directives) {\n        const directiveName = directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(\n              new GraphQLError(\n                `The directive \"@${directiveName}\" can only be used once at this location.`,\n                {\n                  nodes: [seenDirectives[directiveName], directive],\n                },\n              ),\n            );\n          } else {\n            seenDirectives[directiveName] = directive;\n          }\n        }\n      }\n    },\n  };\n}\n",
      "start": 1702937443080,
      "end": 1702937443096,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    }
  ]
}
