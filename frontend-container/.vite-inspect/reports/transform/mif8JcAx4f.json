{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/coq.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = coq\ncoq.displayName = 'coq'\ncoq.aliases = []\nfunction coq(Prism) {\n  ;(function (Prism) {\n    // https://github.com/coq/coq\n    var commentSource = /\\(\\*(?:[^(*]|\\((?!\\*)|\\*(?!\\))|<self>)*\\*\\)/.source\n    for (var i = 0; i < 2; i++) {\n      commentSource = commentSource.replace(/<self>/g, function () {\n        return commentSource\n      })\n    }\n    commentSource = commentSource.replace(/<self>/g, '[]')\n    Prism.languages.coq = {\n      comment: RegExp(commentSource),\n      string: {\n        pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n        greedy: true\n      },\n      attribute: [\n        {\n          pattern: RegExp(\n            /#\\[(?:[^\\[\\](\"]|\"(?:[^\"]|\"\")*\"(?!\")|\\((?!\\*)|<comment>)*\\]/.source.replace(\n              /<comment>/g,\n              function () {\n                return commentSource\n              }\n            )\n          ),\n          greedy: true,\n          alias: 'attr-name',\n          inside: {\n            comment: RegExp(commentSource),\n            string: {\n              pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n              greedy: true\n            },\n            operator: /=/,\n            punctuation: /^#\\[|\\]$|[,()]/\n          }\n        },\n        {\n          pattern:\n            /\\b(?:Cumulative|Global|Local|Monomorphic|NonCumulative|Polymorphic|Private|Program)\\b/,\n          alias: 'attr-name'\n        }\n      ],\n      keyword:\n        /\\b(?:Abort|About|Add|Admit|Admitted|All|Arguments|As|Assumptions|Axiom|Axioms|Back|BackTo|Backtrace|BinOp|BinOpSpec|BinRel|Bind|Blacklist|Canonical|Case|Cd|Check|Class|Classes|Close|CoFixpoint|CoInductive|Coercion|Coercions|Collection|Combined|Compute|Conjecture|Conjectures|Constant|Constants|Constraint|Constructors|Context|Corollary|Create|CstOp|Custom|Cut|Debug|Declare|Defined|Definition|Delimit|Dependencies|Dependent|Derive|Diffs|Drop|Elimination|End|Entry|Equality|Eval|Example|Existential|Existentials|Existing|Export|Extern|Extraction|Fact|Fail|Field|File|Firstorder|Fixpoint|Flags|Focus|From|Funclass|Function|Functional|GC|Generalizable|Goal|Grab|Grammar|Graph|Guarded|Haskell|Heap|Hide|Hint|HintDb|Hints|Hypotheses|Hypothesis|IF|Identity|Immediate|Implicit|Implicits|Import|Include|Induction|Inductive|Infix|Info|Initial|InjTyp|Inline|Inspect|Instance|Instances|Intro|Intros|Inversion|Inversion_clear|JSON|Language|Left|Lemma|Let|Lia|Libraries|Library|Load|LoadPath|Locate|Ltac|Ltac2|ML|Match|Method|Minimality|Module|Modules|Morphism|Next|NoInline|Notation|Number|OCaml|Obligation|Obligations|Opaque|Open|Optimize|Parameter|Parameters|Parametric|Path|Paths|Prenex|Preterm|Primitive|Print|Profile|Projections|Proof|Prop|PropBinOp|PropOp|PropUOp|Property|Proposition|Pwd|Qed|Quit|Rec|Record|Recursive|Redirect|Reduction|Register|Relation|Remark|Remove|Require|Reserved|Reset|Resolve|Restart|Rewrite|Right|Ring|Rings|SProp|Saturate|Save|Scheme|Scope|Scopes|Search|SearchHead|SearchPattern|SearchRewrite|Section|Separate|Set|Setoid|Show|Signatures|Solve|Solver|Sort|Sortclass|Sorted|Spec|Step|Strategies|Strategy|String|Structure|SubClass|Subgraph|SuchThat|Tactic|Term|TestCompile|Theorem|Time|Timeout|To|Transparent|Type|Typeclasses|Types|Typing|UnOp|UnOpSpec|Undelimit|Undo|Unfocus|Unfocused|Unfold|Universe|Universes|Unshelve|Variable|Variables|Variant|Verbose|View|Visibility|Zify|_|apply|as|at|by|cofix|else|end|exists|exists2|fix|for|forall|fun|if|in|let|match|measure|move|removed|return|struct|then|using|wf|where|with)\\b/,\n      number:\n        /\\b(?:0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]+)?(?:p[+-]?\\d[\\d_]*)?|\\d[\\d_]*(?:\\.[\\d_]+)?(?:e[+-]?\\d[\\d_]*)?)\\b/i,\n      punct: {\n        pattern: /@\\{|\\{\\||\\[=|:>/,\n        alias: 'punctuation'\n      },\n      operator:\n        /\\/\\\\|\\\\\\/|\\.{2,3}|:{1,2}=|\\*\\*|[-=]>|<(?:->?|[+:=>]|<:)|>(?:=|->)|\\|[-|]?|[-!%&*+/<=>?@^~']/,\n      punctuation: /\\.\\(|`\\(|@\\{|`\\{|\\{\\||\\[=|:>|[:.,;(){}\\[\\]]/\n    }\n  })(Prism)\n}\n",
      "start": 1702937444848,
      "end": 1702937444867,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444867,
      "end": 1702937444867,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444867,
      "end": 1702937444867,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444867,
      "end": 1702937444867,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444867,
      "end": 1702937444867,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444867,
      "end": 1702937444867,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444867,
      "end": 1702937444867,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444867,
      "end": 1702937444867,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444867,
      "end": 1702937444867,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444867,
      "end": 1702937444867,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444867,
      "end": 1702937444867,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar coq_1;\nvar hasRequiredCoq;\n\nfunction requireCoq () {\n\tif (hasRequiredCoq) return coq_1;\n\thasRequiredCoq = 1;\n\t'use strict'\n\n\tcoq_1 = coq\n\tcoq.displayName = 'coq'\n\tcoq.aliases = []\n\tfunction coq(Prism) {\n\t  ;(function (Prism) {\n\t    // https://github.com/coq/coq\n\t    var commentSource = /\\(\\*(?:[^(*]|\\((?!\\*)|\\*(?!\\))|<self>)*\\*\\)/.source\n\t    for (var i = 0; i < 2; i++) {\n\t      commentSource = commentSource.replace(/<self>/g, function () {\n\t        return commentSource\n\t      })\n\t    }\n\t    commentSource = commentSource.replace(/<self>/g, '[]')\n\t    Prism.languages.coq = {\n\t      comment: RegExp(commentSource),\n\t      string: {\n\t        pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n\t        greedy: true\n\t      },\n\t      attribute: [\n\t        {\n\t          pattern: RegExp(\n\t            /#\\[(?:[^\\[\\](\"]|\"(?:[^\"]|\"\")*\"(?!\")|\\((?!\\*)|<comment>)*\\]/.source.replace(\n\t              /<comment>/g,\n\t              function () {\n\t                return commentSource\n\t              }\n\t            )\n\t          ),\n\t          greedy: true,\n\t          alias: 'attr-name',\n\t          inside: {\n\t            comment: RegExp(commentSource),\n\t            string: {\n\t              pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n\t              greedy: true\n\t            },\n\t            operator: /=/,\n\t            punctuation: /^#\\[|\\]$|[,()]/\n\t          }\n\t        },\n\t        {\n\t          pattern:\n\t            /\\b(?:Cumulative|Global|Local|Monomorphic|NonCumulative|Polymorphic|Private|Program)\\b/,\n\t          alias: 'attr-name'\n\t        }\n\t      ],\n\t      keyword:\n\t        /\\b(?:Abort|About|Add|Admit|Admitted|All|Arguments|As|Assumptions|Axiom|Axioms|Back|BackTo|Backtrace|BinOp|BinOpSpec|BinRel|Bind|Blacklist|Canonical|Case|Cd|Check|Class|Classes|Close|CoFixpoint|CoInductive|Coercion|Coercions|Collection|Combined|Compute|Conjecture|Conjectures|Constant|Constants|Constraint|Constructors|Context|Corollary|Create|CstOp|Custom|Cut|Debug|Declare|Defined|Definition|Delimit|Dependencies|Dependent|Derive|Diffs|Drop|Elimination|End|Entry|Equality|Eval|Example|Existential|Existentials|Existing|Export|Extern|Extraction|Fact|Fail|Field|File|Firstorder|Fixpoint|Flags|Focus|From|Funclass|Function|Functional|GC|Generalizable|Goal|Grab|Grammar|Graph|Guarded|Haskell|Heap|Hide|Hint|HintDb|Hints|Hypotheses|Hypothesis|IF|Identity|Immediate|Implicit|Implicits|Import|Include|Induction|Inductive|Infix|Info|Initial|InjTyp|Inline|Inspect|Instance|Instances|Intro|Intros|Inversion|Inversion_clear|JSON|Language|Left|Lemma|Let|Lia|Libraries|Library|Load|LoadPath|Locate|Ltac|Ltac2|ML|Match|Method|Minimality|Module|Modules|Morphism|Next|NoInline|Notation|Number|OCaml|Obligation|Obligations|Opaque|Open|Optimize|Parameter|Parameters|Parametric|Path|Paths|Prenex|Preterm|Primitive|Print|Profile|Projections|Proof|Prop|PropBinOp|PropOp|PropUOp|Property|Proposition|Pwd|Qed|Quit|Rec|Record|Recursive|Redirect|Reduction|Register|Relation|Remark|Remove|Require|Reserved|Reset|Resolve|Restart|Rewrite|Right|Ring|Rings|SProp|Saturate|Save|Scheme|Scope|Scopes|Search|SearchHead|SearchPattern|SearchRewrite|Section|Separate|Set|Setoid|Show|Signatures|Solve|Solver|Sort|Sortclass|Sorted|Spec|Step|Strategies|Strategy|String|Structure|SubClass|Subgraph|SuchThat|Tactic|Term|TestCompile|Theorem|Time|Timeout|To|Transparent|Type|Typeclasses|Types|Typing|UnOp|UnOpSpec|Undelimit|Undo|Unfocus|Unfocused|Unfold|Universe|Universes|Unshelve|Variable|Variables|Variant|Verbose|View|Visibility|Zify|_|apply|as|at|by|cofix|else|end|exists|exists2|fix|for|forall|fun|if|in|let|match|measure|move|removed|return|struct|then|using|wf|where|with)\\b/,\n\t      number:\n\t        /\\b(?:0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]+)?(?:p[+-]?\\d[\\d_]*)?|\\d[\\d_]*(?:\\.[\\d_]+)?(?:e[+-]?\\d[\\d_]*)?)\\b/i,\n\t      punct: {\n\t        pattern: /@\\{|\\{\\||\\[=|:>/,\n\t        alias: 'punctuation'\n\t      },\n\t      operator:\n\t        /\\/\\\\|\\\\\\/|\\.{2,3}|:{1,2}=|\\*\\*|[-=]>|<(?:->?|[+:=>]|<:)|>(?:=|->)|\\|[-|]?|[-!%&*+/<=>?@^~']/,\n\t      punctuation: /\\.\\(|`\\(|@\\{|`\\{|\\{\\||\\[=|:>|[:.,;(){}\\[\\]]/\n\t    }\n\t  })(Prism)\n\t}\n\treturn coq_1;\n}\n\nexport { requireCoq as __require };",
      "start": 1702937444867,
      "end": 1702937444867,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;CAAA,YAAY;AACZ;AACA,MAAc,GAAG,GAAG;CACpB,GAAG,CAAC,WAAW,GAAG,KAAK;CACvB,GAAG,CAAC,OAAO,GAAG,EAAE;CAChB,SAAS,GAAG,CAAC,KAAK,EAAE;CACpB,EAAE,CAAC,CAAC,UAAU,KAAK,EAAE;CACrB;CACA,IAAI,IAAI,aAAa,GAAG,6CAA6C,CAAC,MAAM;CAC5E,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;CAChC,MAAM,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE,YAAY;CACnE,QAAQ,OAAO,aAAa;CAC5B,OAAO,CAAC;CACR,KAAK;CACL,IAAI,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC;CAC1D,IAAI,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG;CAC1B,MAAM,OAAO,EAAE,MAAM,CAAC,aAAa,CAAC;CACpC,MAAM,MAAM,EAAE;CACd,QAAQ,OAAO,EAAE,qBAAqB;CACtC,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,MAAM,SAAS,EAAE;CACjB,QAAQ;CACR,UAAU,OAAO,EAAE,MAAM;CACzB,YAAY,4DAA4D,CAAC,MAAM,CAAC,OAAO;CACvF,cAAc,YAAY;CAC1B,cAAc,YAAY;CAC1B,gBAAgB,OAAO,aAAa;CACpC,eAAe;CACf,aAAa;CACb,WAAW;CACX,UAAU,MAAM,EAAE,IAAI;CACtB,UAAU,KAAK,EAAE,WAAW;CAC5B,UAAU,MAAM,EAAE;CAClB,YAAY,OAAO,EAAE,MAAM,CAAC,aAAa,CAAC;CAC1C,YAAY,MAAM,EAAE;CACpB,cAAc,OAAO,EAAE,qBAAqB;CAC5C,cAAc,MAAM,EAAE,IAAI;CAC1B,aAAa;CACb,YAAY,QAAQ,EAAE,GAAG;CACzB,YAAY,WAAW,EAAE,gBAAgB;CACzC,WAAW;CACX,SAAS;CACT,QAAQ;CACR,UAAU,OAAO;CACjB,YAAY,uFAAuF;CACnG,UAAU,KAAK,EAAE,WAAW;CAC5B,SAAS;CACT,OAAO;CACP,MAAM,OAAO;CACb,QAAQ,y/DAAy/D;CACjgE,MAAM,MAAM;CACZ,QAAQ,4GAA4G;CACpH,MAAM,KAAK,EAAE;CACb,QAAQ,OAAO,EAAE,iBAAiB;CAClC,QAAQ,KAAK,EAAE,aAAa;CAC5B,OAAO;CACP,MAAM,QAAQ;CACd,QAAQ,6FAA6F;CACrG,MAAM,WAAW,EAAE,6CAA6C;CAChE,KAAK;CACL,GAAG,EAAE,KAAK,CAAC;CACX"
      }
    },
    {
      "name": "inject",
      "start": 1702937444867,
      "end": 1702937444867,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444867,
      "end": 1702937444867,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444867,
      "end": 1702937444867,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444867,
      "end": 1702937444867,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444867,
      "end": 1702937444867,
      "order": "normal"
    }
  ]
}
