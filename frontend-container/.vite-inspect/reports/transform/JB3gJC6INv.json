{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/highlight.js/lib/languages/tap.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*\nLanguage: Test Anything Protocol\nDescription: TAP, the Test Anything Protocol, is a simple text-based interface between testing modules in a test harness.\nRequires: yaml.js\nAuthor: Sergey Bronnikov <sergeyb@bronevichok.ru>\nWebsite: https://testanything.org\n*/\n\nfunction tap(hljs) {\n  return {\n    name: 'Test Anything Protocol',\n    case_insensitive: true,\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      // version of format and total amount of testcases\n      {\n        className: 'meta',\n        variants: [\n          {\n            begin: '^TAP version (\\\\d+)$'\n          },\n          {\n            begin: '^1\\\\.\\\\.(\\\\d+)$'\n          }\n        ]\n      },\n      // YAML block\n      {\n        begin: /---$/,\n        end: '\\\\.\\\\.\\\\.$',\n        subLanguage: 'yaml',\n        relevance: 0\n      },\n      // testcase number\n      {\n        className: 'number',\n        begin: ' (\\\\d+) '\n      },\n      // testcase status and description\n      {\n        className: 'symbol',\n        variants: [\n          {\n            begin: '^ok'\n          },\n          {\n            begin: '^not ok'\n          }\n        ]\n      }\n    ]\n  };\n}\n\nmodule.exports = tap;\n",
      "start": 1702937444590,
      "end": 1702937444659,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444659,
      "end": 1702937444659,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444659,
      "end": 1702937444659,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444659,
      "end": 1702937444659,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444659,
      "end": 1702937444659,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444659,
      "end": 1702937444659,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444659,
      "end": 1702937444659,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444659,
      "end": 1702937444659,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444659,
      "end": 1702937444659,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444659,
      "end": 1702937444659,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444659,
      "end": 1702937444659,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "/*\nLanguage: Test Anything Protocol\nDescription: TAP, the Test Anything Protocol, is a simple text-based interface between testing modules in a test harness.\nRequires: yaml.js\nAuthor: Sergey Bronnikov <sergeyb@bronevichok.ru>\nWebsite: https://testanything.org\n*/\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar tap_1;\nvar hasRequiredTap;\n\nfunction requireTap () {\n\tif (hasRequiredTap) return tap_1;\n\thasRequiredTap = 1;\n\tfunction tap(hljs) {\n\t  return {\n\t    name: 'Test Anything Protocol',\n\t    case_insensitive: true,\n\t    contains: [\n\t      hljs.HASH_COMMENT_MODE,\n\t      // version of format and total amount of testcases\n\t      {\n\t        className: 'meta',\n\t        variants: [\n\t          {\n\t            begin: '^TAP version (\\\\d+)$'\n\t          },\n\t          {\n\t            begin: '^1\\\\.\\\\.(\\\\d+)$'\n\t          }\n\t        ]\n\t      },\n\t      // YAML block\n\t      {\n\t        begin: /---$/,\n\t        end: '\\\\.\\\\.\\\\.$',\n\t        subLanguage: 'yaml',\n\t        relevance: 0\n\t      },\n\t      // testcase number\n\t      {\n\t        className: 'number',\n\t        begin: ' (\\\\d+) '\n\t      },\n\t      // testcase status and description\n\t      {\n\t        className: 'symbol',\n\t        variants: [\n\t          {\n\t            begin: '^ok'\n\t          },\n\t          {\n\t            begin: '^not ok'\n\t          }\n\t        ]\n\t      }\n\t    ]\n\t  };\n\t}\n\n\ttap_1 = tap;\n\treturn tap_1;\n}\n\nexport { requireTap as __require };",
      "start": 1702937444659,
      "end": 1702937444660,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;;;;;;;;CAQA,SAAS,GAAG,CAAC,IAAI,EAAE;CACnB,EAAE,OAAO;CACT,IAAI,IAAI,EAAE,wBAAwB;CAClC,IAAI,gBAAgB,EAAE,IAAI;CAC1B,IAAI,QAAQ,EAAE;CACd,MAAM,IAAI,CAAC,iBAAiB;CAC5B;CACA,MAAM;CACN,QAAQ,SAAS,EAAE,MAAM;CACzB,QAAQ,QAAQ,EAAE;CAClB,UAAU;CACV,YAAY,KAAK,EAAE,sBAAsB;CACzC,WAAW;CACX,UAAU;CACV,YAAY,KAAK,EAAE,iBAAiB;CACpC,WAAW;CACX,SAAS;CACT,OAAO;CACP;CACA,MAAM;CACN,QAAQ,KAAK,EAAE,MAAM;CACrB,QAAQ,GAAG,EAAE,YAAY;CACzB,QAAQ,WAAW,EAAE,MAAM;CAC3B,QAAQ,SAAS,EAAE,CAAC;CACpB,OAAO;CACP;CACA,MAAM;CACN,QAAQ,SAAS,EAAE,QAAQ;CAC3B,QAAQ,KAAK,EAAE,UAAU;CACzB,OAAO;CACP;CACA,MAAM;CACN,QAAQ,SAAS,EAAE,QAAQ;CAC3B,QAAQ,QAAQ,EAAE;CAClB,UAAU;CACV,YAAY,KAAK,EAAE,KAAK;CACxB,WAAW;CACX,UAAU;CACV,YAAY,KAAK,EAAE,SAAS;CAC5B,WAAW;CACX,SAAS;CACT,OAAO;CACP,KAAK;CACL,GAAG,CAAC;CACJ,CAAC;AACD;AACA,MAAc,GAAG,GAAG"
      }
    },
    {
      "name": "inject",
      "start": 1702937444660,
      "end": 1702937444660,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444660,
      "end": 1702937444660,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444660,
      "end": 1702937444660,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444660,
      "end": 1702937444660,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444660,
      "end": 1702937444660,
      "order": "normal"
    }
  ]
}
