{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/ocaml.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = ocaml\nocaml.displayName = 'ocaml'\nocaml.aliases = []\nfunction ocaml(Prism) {\n  // https://ocaml.org/manual/lex.html\n  Prism.languages.ocaml = {\n    comment: {\n      pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n      greedy: true\n    },\n    char: {\n      pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n      greedy: true\n    },\n    string: [\n      {\n        pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n        greedy: true\n      },\n      {\n        pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n        greedy: true\n      }\n    ],\n    number: [\n      // binary and octal\n      /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i, // hexadecimal\n      /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i, // decimal\n      /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i\n    ],\n    directive: {\n      pattern: /\\B#\\w+/,\n      alias: 'property'\n    },\n    label: {\n      pattern: /\\B~\\w+/,\n      alias: 'property'\n    },\n    'type-variable': {\n      pattern: /\\B'\\w+/,\n      alias: 'function'\n    },\n    variant: {\n      pattern: /`\\w+/,\n      alias: 'symbol'\n    },\n    // For the list of keywords and operators,\n    // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n    keyword:\n      /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    'operator-like-punctuation': {\n      pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n      alias: 'punctuation'\n    },\n    // Custom operators are allowed\n    operator:\n      /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n    punctuation: /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n  }\n}\n",
      "start": 1702937444988,
      "end": 1702937445016,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445016,
      "end": 1702937445016,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445016,
      "end": 1702937445016,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445016,
      "end": 1702937445016,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445016,
      "end": 1702937445016,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445016,
      "end": 1702937445016,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445016,
      "end": 1702937445016,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445016,
      "end": 1702937445016,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445016,
      "end": 1702937445016,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445016,
      "end": 1702937445016,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445016,
      "end": 1702937445016,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar ocaml_1;\nvar hasRequiredOcaml;\n\nfunction requireOcaml () {\n\tif (hasRequiredOcaml) return ocaml_1;\n\thasRequiredOcaml = 1;\n\t'use strict'\n\n\tocaml_1 = ocaml\n\tocaml.displayName = 'ocaml'\n\tocaml.aliases = []\n\tfunction ocaml(Prism) {\n\t  // https://ocaml.org/manual/lex.html\n\t  Prism.languages.ocaml = {\n\t    comment: {\n\t      pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n\t      greedy: true\n\t    },\n\t    char: {\n\t      pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n\t      greedy: true\n\t    },\n\t    string: [\n\t      {\n\t        pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n\t        greedy: true\n\t      },\n\t      {\n\t        pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n\t        greedy: true\n\t      }\n\t    ],\n\t    number: [\n\t      // binary and octal\n\t      /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i, // hexadecimal\n\t      /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i, // decimal\n\t      /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i\n\t    ],\n\t    directive: {\n\t      pattern: /\\B#\\w+/,\n\t      alias: 'property'\n\t    },\n\t    label: {\n\t      pattern: /\\B~\\w+/,\n\t      alias: 'property'\n\t    },\n\t    'type-variable': {\n\t      pattern: /\\B'\\w+/,\n\t      alias: 'function'\n\t    },\n\t    variant: {\n\t      pattern: /`\\w+/,\n\t      alias: 'symbol'\n\t    },\n\t    // For the list of keywords and operators,\n\t    // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n\t    keyword:\n\t      /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n\t    boolean: /\\b(?:false|true)\\b/,\n\t    'operator-like-punctuation': {\n\t      pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n\t      alias: 'punctuation'\n\t    },\n\t    // Custom operators are allowed\n\t    operator:\n\t      /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n\t    punctuation: /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n\t  }\n\t}\n\treturn ocaml_1;\n}\n\nexport { requireOcaml as __require };",
      "start": 1702937445016,
      "end": 1702937445017,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;CAAA,YAAY;AACZ;AACA,QAAc,GAAG,KAAK;CACtB,KAAK,CAAC,WAAW,GAAG,OAAO;CAC3B,KAAK,CAAC,OAAO,GAAG,EAAE;CAClB,SAAS,KAAK,CAAC,KAAK,EAAE;CACtB;CACA,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,GAAG;CAC1B,IAAI,OAAO,EAAE;CACb,MAAM,OAAO,EAAE,kBAAkB;CACjC,MAAM,MAAM,EAAE,IAAI;CAClB,KAAK;CACL,IAAI,IAAI,EAAE;CACV,MAAM,OAAO,EAAE,8CAA8C;CAC7D,MAAM,MAAM,EAAE,IAAI;CAClB,KAAK;CACL,IAAI,MAAM,EAAE;CACZ,MAAM;CACN,QAAQ,OAAO,EAAE,qCAAqC;CACtD,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,MAAM;CACN,QAAQ,OAAO,EAAE,6BAA6B;CAC9C,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,KAAK;CACL,IAAI,MAAM,EAAE;CACZ;CACA,MAAM,sCAAsC;CAC5C,MAAM,mEAAmE;CACzE,MAAM,mDAAmD;CACzD,KAAK;CACL,IAAI,SAAS,EAAE;CACf,MAAM,OAAO,EAAE,QAAQ;CACvB,MAAM,KAAK,EAAE,UAAU;CACvB,KAAK;CACL,IAAI,KAAK,EAAE;CACX,MAAM,OAAO,EAAE,QAAQ;CACvB,MAAM,KAAK,EAAE,UAAU;CACvB,KAAK;CACL,IAAI,eAAe,EAAE;CACrB,MAAM,OAAO,EAAE,QAAQ;CACvB,MAAM,KAAK,EAAE,UAAU;CACvB,KAAK;CACL,IAAI,OAAO,EAAE;CACb,MAAM,OAAO,EAAE,MAAM;CACrB,MAAM,KAAK,EAAE,QAAQ;CACrB,KAAK;CACL;CACA;CACA,IAAI,OAAO;CACX,MAAM,+RAA+R;CACrS,IAAI,OAAO,EAAE,oBAAoB;CACjC,IAAI,2BAA2B,EAAE;CACjC,MAAM,OAAO,EAAE,wBAAwB;CACvC,MAAM,KAAK,EAAE,aAAa;CAC1B,KAAK;CACL;CACA,IAAI,QAAQ;CACZ,MAAM,uGAAuG;CAC7G,IAAI,WAAW,EAAE,6BAA6B;CAC9C,GAAG;CACH"
      }
    },
    {
      "name": "inject",
      "start": 1702937445017,
      "end": 1702937445017,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445017,
      "end": 1702937445017,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445017,
      "end": 1702937445017,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445017,
      "end": 1702937445017,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445017,
      "end": 1702937445017,
      "order": "normal"
    }
  ]
}
