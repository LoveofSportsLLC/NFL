{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/naniscript.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = naniscript\nnaniscript.displayName = 'naniscript'\nnaniscript.aliases = []\nfunction naniscript(Prism) {\n  ;(function (Prism) {\n    var expressionDef = /\\{[^\\r\\n\\[\\]{}]*\\}/\n    var params = {\n      'quoted-string': {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        alias: 'operator'\n      },\n      'command-param-id': {\n        pattern: /(\\s)\\w+:/,\n        lookbehind: true,\n        alias: 'property'\n      },\n      'command-param-value': [\n        {\n          pattern: expressionDef,\n          alias: 'selector'\n        },\n        {\n          pattern: /([\\t ])\\S+/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'operator'\n        },\n        {\n          pattern: /\\S(?:.*\\S)?/,\n          alias: 'operator'\n        }\n      ]\n    }\n    Prism.languages.naniscript = {\n      // ; ...\n      comment: {\n        pattern: /^([\\t ]*);.*/m,\n        lookbehind: true\n      },\n      // > ...\n      // Define is a control line starting with '>' followed by a word, a space and a text.\n      define: {\n        pattern: /^>.+/m,\n        alias: 'tag',\n        inside: {\n          value: {\n            pattern: /(^>\\w+[\\t ]+)(?!\\s)[^{}\\r\\n]+/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          key: {\n            pattern: /(^>)\\w+/,\n            lookbehind: true\n          }\n        }\n      },\n      // # ...\n      label: {\n        pattern: /^([\\t ]*)#[\\t ]*\\w+[\\t ]*$/m,\n        lookbehind: true,\n        alias: 'regex'\n      },\n      command: {\n        pattern: /^([\\t ]*)@\\w+(?=[\\t ]|$).*/m,\n        lookbehind: true,\n        alias: 'function',\n        inside: {\n          'command-name': /^@\\w+/,\n          expression: {\n            pattern: expressionDef,\n            greedy: true,\n            alias: 'selector'\n          },\n          'command-params': {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            inside: params\n          }\n        }\n      },\n      // Generic is any line that doesn't start with operators: ;>#@\n      'generic-text': {\n        pattern: /(^[ \\t]*)[^#@>;\\s].*/m,\n        lookbehind: true,\n        alias: 'punctuation',\n        inside: {\n          // \\{ ... \\} ... \\[ ... \\] ... \\\"\n          'escaped-char': /\\\\[{}\\[\\]\"]/,\n          expression: {\n            pattern: expressionDef,\n            greedy: true,\n            alias: 'selector'\n          },\n          'inline-command': {\n            pattern: /\\[[\\t ]*\\w[^\\r\\n\\[\\]]*\\]/,\n            greedy: true,\n            alias: 'function',\n            inside: {\n              'command-params': {\n                pattern: /(^\\[[\\t ]*\\w+\\b)[\\s\\S]+(?=\\]$)/,\n                lookbehind: true,\n                inside: params\n              },\n              'command-param-name': {\n                pattern: /^(\\[[\\t ]*)\\w+/,\n                lookbehind: true,\n                alias: 'name'\n              },\n              'start-stop-char': /[\\[\\]]/\n            }\n          }\n        }\n      }\n    }\n    Prism.languages.nani = Prism.languages['naniscript']\n    /** @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token */\n    /**\n     * This hook is used to validate generic-text tokens for balanced brackets.\n     * Mark token as bad-line when contains not balanced brackets: {},[]\n     */\n    Prism.hooks.add('after-tokenize', function (env) {\n      /** @type {(Token | string)[]} */\n      var tokens = env.tokens\n      tokens.forEach(function (token) {\n        if (typeof token !== 'string' && token.type === 'generic-text') {\n          var content = getTextContent(token)\n          if (!isBracketsBalanced(content)) {\n            token.type = 'bad-line'\n            token.content = content\n          }\n        }\n      })\n    })\n    /**\n     * @param {string} input\n     * @returns {boolean}\n     */\n    function isBracketsBalanced(input) {\n      var brackets = '[]{}'\n      var stack = []\n      for (var i = 0; i < input.length; i++) {\n        var bracket = input[i]\n        var bracketsIndex = brackets.indexOf(bracket)\n        if (bracketsIndex !== -1) {\n          if (bracketsIndex % 2 === 0) {\n            stack.push(bracketsIndex + 1)\n          } else if (stack.pop() !== bracketsIndex) {\n            return false\n          }\n        }\n      }\n      return stack.length === 0\n    }\n    /**\n     * @param {string | Token | (string | Token)[]} token\n     * @returns {string}\n     */\n    function getTextContent(token) {\n      if (typeof token === 'string') {\n        return token\n      } else if (Array.isArray(token)) {\n        return token.map(getTextContent).join('')\n      } else {\n        return getTextContent(token.content)\n      }\n    }\n  })(Prism)\n}\n",
      "start": 1702937444976,
      "end": 1702937445007,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445007,
      "end": 1702937445007,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445007,
      "end": 1702937445007,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445007,
      "end": 1702937445007,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445007,
      "end": 1702937445007,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445007,
      "end": 1702937445007,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445007,
      "end": 1702937445007,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445007,
      "end": 1702937445007,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445007,
      "end": 1702937445007,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445007,
      "end": 1702937445007,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445007,
      "end": 1702937445007,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar naniscript_1;\nvar hasRequiredNaniscript;\n\nfunction requireNaniscript () {\n\tif (hasRequiredNaniscript) return naniscript_1;\n\thasRequiredNaniscript = 1;\n\t'use strict'\n\n\tnaniscript_1 = naniscript\n\tnaniscript.displayName = 'naniscript'\n\tnaniscript.aliases = []\n\tfunction naniscript(Prism) {\n\t  ;(function (Prism) {\n\t    var expressionDef = /\\{[^\\r\\n\\[\\]{}]*\\}/\n\t    var params = {\n\t      'quoted-string': {\n\t        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n\t        alias: 'operator'\n\t      },\n\t      'command-param-id': {\n\t        pattern: /(\\s)\\w+:/,\n\t        lookbehind: true,\n\t        alias: 'property'\n\t      },\n\t      'command-param-value': [\n\t        {\n\t          pattern: expressionDef,\n\t          alias: 'selector'\n\t        },\n\t        {\n\t          pattern: /([\\t ])\\S+/,\n\t          lookbehind: true,\n\t          greedy: true,\n\t          alias: 'operator'\n\t        },\n\t        {\n\t          pattern: /\\S(?:.*\\S)?/,\n\t          alias: 'operator'\n\t        }\n\t      ]\n\t    }\n\t    Prism.languages.naniscript = {\n\t      // ; ...\n\t      comment: {\n\t        pattern: /^([\\t ]*);.*/m,\n\t        lookbehind: true\n\t      },\n\t      // > ...\n\t      // Define is a control line starting with '>' followed by a word, a space and a text.\n\t      define: {\n\t        pattern: /^>.+/m,\n\t        alias: 'tag',\n\t        inside: {\n\t          value: {\n\t            pattern: /(^>\\w+[\\t ]+)(?!\\s)[^{}\\r\\n]+/,\n\t            lookbehind: true,\n\t            alias: 'operator'\n\t          },\n\t          key: {\n\t            pattern: /(^>)\\w+/,\n\t            lookbehind: true\n\t          }\n\t        }\n\t      },\n\t      // # ...\n\t      label: {\n\t        pattern: /^([\\t ]*)#[\\t ]*\\w+[\\t ]*$/m,\n\t        lookbehind: true,\n\t        alias: 'regex'\n\t      },\n\t      command: {\n\t        pattern: /^([\\t ]*)@\\w+(?=[\\t ]|$).*/m,\n\t        lookbehind: true,\n\t        alias: 'function',\n\t        inside: {\n\t          'command-name': /^@\\w+/,\n\t          expression: {\n\t            pattern: expressionDef,\n\t            greedy: true,\n\t            alias: 'selector'\n\t          },\n\t          'command-params': {\n\t            pattern: /\\s*\\S[\\s\\S]*/,\n\t            inside: params\n\t          }\n\t        }\n\t      },\n\t      // Generic is any line that doesn't start with operators: ;>#@\n\t      'generic-text': {\n\t        pattern: /(^[ \\t]*)[^#@>;\\s].*/m,\n\t        lookbehind: true,\n\t        alias: 'punctuation',\n\t        inside: {\n\t          // \\{ ... \\} ... \\[ ... \\] ... \\\"\n\t          'escaped-char': /\\\\[{}\\[\\]\"]/,\n\t          expression: {\n\t            pattern: expressionDef,\n\t            greedy: true,\n\t            alias: 'selector'\n\t          },\n\t          'inline-command': {\n\t            pattern: /\\[[\\t ]*\\w[^\\r\\n\\[\\]]*\\]/,\n\t            greedy: true,\n\t            alias: 'function',\n\t            inside: {\n\t              'command-params': {\n\t                pattern: /(^\\[[\\t ]*\\w+\\b)[\\s\\S]+(?=\\]$)/,\n\t                lookbehind: true,\n\t                inside: params\n\t              },\n\t              'command-param-name': {\n\t                pattern: /^(\\[[\\t ]*)\\w+/,\n\t                lookbehind: true,\n\t                alias: 'name'\n\t              },\n\t              'start-stop-char': /[\\[\\]]/\n\t            }\n\t          }\n\t        }\n\t      }\n\t    }\n\t    Prism.languages.nani = Prism.languages['naniscript']\n\t    /** @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token */\n\t    /**\n\t     * This hook is used to validate generic-text tokens for balanced brackets.\n\t     * Mark token as bad-line when contains not balanced brackets: {},[]\n\t     */\n\t    Prism.hooks.add('after-tokenize', function (env) {\n\t      /** @type {(Token | string)[]} */\n\t      var tokens = env.tokens\n\t      tokens.forEach(function (token) {\n\t        if (typeof token !== 'string' && token.type === 'generic-text') {\n\t          var content = getTextContent(token)\n\t          if (!isBracketsBalanced(content)) {\n\t            token.type = 'bad-line'\n\t            token.content = content\n\t          }\n\t        }\n\t      })\n\t    })\n\t    /**\n\t     * @param {string} input\n\t     * @returns {boolean}\n\t     */\n\t    function isBracketsBalanced(input) {\n\t      var brackets = '[]{}'\n\t      var stack = []\n\t      for (var i = 0; i < input.length; i++) {\n\t        var bracket = input[i]\n\t        var bracketsIndex = brackets.indexOf(bracket)\n\t        if (bracketsIndex !== -1) {\n\t          if (bracketsIndex % 2 === 0) {\n\t            stack.push(bracketsIndex + 1)\n\t          } else if (stack.pop() !== bracketsIndex) {\n\t            return false\n\t          }\n\t        }\n\t      }\n\t      return stack.length === 0\n\t    }\n\t    /**\n\t     * @param {string | Token | (string | Token)[]} token\n\t     * @returns {string}\n\t     */\n\t    function getTextContent(token) {\n\t      if (typeof token === 'string') {\n\t        return token\n\t      } else if (Array.isArray(token)) {\n\t        return token.map(getTextContent).join('')\n\t      } else {\n\t        return getTextContent(token.content)\n\t      }\n\t    }\n\t  })(Prism)\n\t}\n\treturn naniscript_1;\n}\n\nexport { requireNaniscript as __require };",
      "start": 1702937445007,
      "end": 1702937445007,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937445007,
      "end": 1702937445007,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445007,
      "end": 1702937445007,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445007,
      "end": 1702937445007,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445007,
      "end": 1702937445007,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445007,
      "end": 1702937445007,
      "order": "normal"
    }
  ]
}
