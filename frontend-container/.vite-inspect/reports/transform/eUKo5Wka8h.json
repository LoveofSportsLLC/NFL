{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/@restart/hooks/esm/useResizeObserver.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { useState } from 'react';\nimport useEffect from './useIsomorphicEffect';\nconst targetMap = new WeakMap();\nlet resizeObserver;\nfunction getResizeObserver() {\n  // eslint-disable-next-line no-return-assign\n  return resizeObserver = resizeObserver || new window.ResizeObserver(entries => {\n    entries.forEach(entry => {\n      const handler = targetMap.get(entry.target);\n      if (handler) handler(entry.contentRect);\n    });\n  });\n}\n\n/**\n * Efficiently observe size changes on an element. Depends on the `ResizeObserver` api,\n * and polyfills are needed in older browsers.\n *\n * ```ts\n * const [ref, attachRef] = useCallbackRef(null);\n *\n * const rect = useResizeObserver(ref);\n *\n * return (\n *  <div ref={attachRef}>\n *    {JSON.stringify(rect)}\n *  </div>\n * )\n * ```\n *\n * @param element The DOM element to observe\n */\nexport default function useResizeObserver(element) {\n  const [rect, setRect] = useState(null);\n  useEffect(() => {\n    if (!element) return;\n    getResizeObserver().observe(element);\n    setRect(element.getBoundingClientRect());\n    targetMap.set(element, rect => {\n      setRect(rect);\n    });\n    return () => {\n      targetMap.delete(element);\n    };\n  }, [element]);\n  return rect;\n}",
      "start": 1702937443996,
      "end": 1702937444012,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    }
  ]
}
