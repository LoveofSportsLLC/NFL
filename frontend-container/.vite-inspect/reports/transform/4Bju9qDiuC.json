{
  "resolvedId": "/home/zepor/ssweb/frontend-container/src/pages/tables/ColumnFiltering.jsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useTable, useFilters, useGlobalFilter } from \"react-table\";\r\n\r\nimport { Card, Container, Table, Form } from \"react-bootstrap\";\r\n\r\nimport { tableData } from \"./data.js\";\r\n\r\n// This is a custom UI for our 'between' or number range\r\n// filter. It uses two number boxes and filters rows to\r\n// ones that have values between the two\r\nfunction NumberRangeColumnFilter({\r\n  column: { filterValue = [], preFilteredRows, setFilter, id },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    preFilteredRows.forEach((row) => {\r\n      min = Math.min(row.values[id], min);\r\n      max = Math.max(row.values[id], max);\r\n    });\r\n    return [min, max];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <div className=\"d-flex mt-2\">\r\n      <Form.Control\r\n        value={filterValue[0] || \"\"}\r\n        type=\"number\"\r\n        onChange={(e) => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [\r\n            val ? parseInt(val, 10) : undefined,\r\n            old[1],\r\n          ]);\r\n        }}\r\n        placeholder={`Min (${min})`}\r\n        style={{\r\n          width: \"110px\",\r\n        }}\r\n      />\r\n      <span className=\"mx-2 mt-1\">to</span>\r\n      <Form.Control\r\n        value={filterValue[1] || \"\"}\r\n        type=\"number\"\r\n        onChange={(e) => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [\r\n            old[0],\r\n            val ? parseInt(val, 10) : undefined,\r\n          ]);\r\n        }}\r\n        placeholder={`Max (${max})`}\r\n        style={{\r\n          width: \"110px\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the options for filtering\r\n  // using the preFilteredRows\r\n  const options = React.useMemo(() => {\r\n    const options = new Set();\r\n    preFilteredRows.forEach((row) => {\r\n      options.add(row.values[id]);\r\n    });\r\n    return [...options.values()];\r\n  }, [id, preFilteredRows]);\r\n\r\n  // Render a multi-select box\r\n  return (\r\n    <Form.Select\r\n      value={filterValue}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined);\r\n      }}\r\n    >\r\n      <option value=\"\">All</option>\r\n      {options.map((option, i) => (\r\n        <option key={i} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </Form.Select>\r\n  );\r\n}\r\n\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n  const count = preFilteredRows.length;\r\n\r\n  return (\r\n    <Form.Control\r\n      value={filterValue || \"\"}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={`Search ${count} records...`}\r\n      className=\"mt-2\"\r\n    />\r\n  );\r\n}\r\n\r\nconst ColumnFilteringTable = ({ columns, data }) => {\r\n  const filterTypes = React.useMemo(\r\n    () => ({\r\n      // Or, override the default text filter to use\r\n      // \"startWith\"\r\n      text: (rows, id, filterValue) => {\r\n        return rows.filter((row) => {\r\n          const rowValue = row.values[id];\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n                .toLowerCase()\r\n                .startsWith(String(filterValue).toLowerCase())\r\n            : true;\r\n        });\r\n      },\r\n    }),\r\n    []\r\n  );\r\n\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      // Let's set up our default Filter UI\r\n      Filter: DefaultColumnFilter,\r\n    }),\r\n    []\r\n  );\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn, // Be sure to pass the defaultColumn option\r\n        filterTypes,\r\n      },\r\n      useFilters, // useFilters!\r\n      useGlobalFilter // useGlobalFilter!\r\n    );\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Card.Title>Column Filtering</Card.Title>\r\n        <h6 className=\"card-subtitle text-muted\">\r\n          Column filtering by react-table\r\n        </h6>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Table striped bordered {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th {...column.getHeaderProps()}>\r\n                    {column.render(\"Header\")}\r\n                    {/* Render the columns filter UI */}\r\n                      {column.canFilter ? column.render(\"Filter\") : null}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst tableColumns = [\r\n  {\r\n    Header: \"Name\",\r\n    accessor: \"name\",\r\n  },\r\n  {\r\n    Header: \"Position\",\r\n    accessor: \"position\",\r\n    Filter: SelectColumnFilter,\r\n    filter: \"includes\",\r\n  },\r\n  {\r\n    Header: \"Office\",\r\n    accessor: \"office\",\r\n    Filter: SelectColumnFilter,\r\n    filter: \"includes\",\r\n  },\r\n  {\r\n    Header: \"Age\",\r\n    accessor: \"age\",\r\n    Filter: NumberRangeColumnFilter,\r\n    filter: \"between\",\r\n  },\r\n  {\r\n    Header: \"Start Date\",\r\n    accessor: \"startDate\",\r\n  },\r\n  {\r\n    Header: \"Salary\",\r\n    accessor: \"salary\",\r\n    Filter: false,\r\n  },\r\n];\r\n\r\nconst ColumnFiltering = () => (\r\n  <React.Fragment>\r\n    <Helmet title=\"Column Filtering\" />\r\n    <Container fluid className=\"p-0\">\r\n      <h1 className=\"h3 mb-3\">Column Filtering</h1>\r\n\r\n      <ColumnFilteringTable\r\n        columns={tableColumns}\r\n        data={tableData.slice(0, 15)}\r\n      />\r\n    </Container>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default ColumnFiltering;\r\n",
      "start": 1702937440805,
      "end": 1702937440868,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937440868,
      "end": 1702937440868,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937440868,
      "end": 1702937440868,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx, jsxs } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useTable, useFilters, useGlobalFilter } from \"react-table\";\nimport { Card, Container, Table, Form } from \"react-bootstrap\";\nimport { tableData } from \"./data.js\";\nfunction NumberRangeColumnFilter({\n  column: { filterValue = [], preFilteredRows, setFilter, id }\n}) {\n  const [min, max] = React.useMemo(() => {\n    let min2 = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max2 = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min2 = Math.min(row.values[id], min2);\n      max2 = Math.max(row.values[id], max2);\n    });\n    return [min2, max2];\n  }, [id, preFilteredRows]);\n  return /* @__PURE__ */ jsxs(\"div\", { className: \"d-flex mt-2\", children: [\n    /* @__PURE__ */ jsx(\n      Form.Control,\n      {\n        value: filterValue[0] || \"\",\n        type: \"number\",\n        onChange: (e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            val ? parseInt(val, 10) : void 0,\n            old[1]\n          ]);\n        },\n        placeholder: `Min (${min})`,\n        style: {\n          width: \"110px\"\n        }\n      }\n    ),\n    /* @__PURE__ */ jsx(\"span\", { className: \"mx-2 mt-1\", children: \"to\" }),\n    /* @__PURE__ */ jsx(\n      Form.Control,\n      {\n        value: filterValue[1] || \"\",\n        type: \"number\",\n        onChange: (e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            old[0],\n            val ? parseInt(val, 10) : void 0\n          ]);\n        },\n        placeholder: `Max (${max})`,\n        style: {\n          width: \"110px\"\n        }\n      }\n    )\n  ] });\n}\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id }\n}) {\n  const options = React.useMemo(() => {\n    const options2 = /* @__PURE__ */ new Set();\n    preFilteredRows.forEach((row) => {\n      options2.add(row.values[id]);\n    });\n    return [...options2.values()];\n  }, [id, preFilteredRows]);\n  return /* @__PURE__ */ jsxs(\n    Form.Select,\n    {\n      value: filterValue,\n      onChange: (e) => {\n        setFilter(e.target.value || void 0);\n      },\n      children: [\n        /* @__PURE__ */ jsx(\"option\", { value: \"\", children: \"All\" }),\n        options.map((option, i) => /* @__PURE__ */ jsx(\"option\", { value: option, children: option }, i))\n      ]\n    }\n  );\n}\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter }\n}) {\n  const count = preFilteredRows.length;\n  return /* @__PURE__ */ jsx(\n    Form.Control,\n    {\n      value: filterValue || \"\",\n      onChange: (e) => {\n        setFilter(e.target.value || void 0);\n      },\n      placeholder: `Search ${count} records...`,\n      className: \"mt-2\"\n    }\n  );\n}\nconst ColumnFilteringTable = ({ columns, data }) => {\n  const filterTypes = React.useMemo(\n    () => ({\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows2, id, filterValue) => {\n        return rows2.filter((row) => {\n          const rowValue = row.values[id];\n          return rowValue !== void 0 ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n        });\n      }\n    }),\n    []\n  );\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter\n    }),\n    []\n  );\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      // Be sure to pass the defaultColumn option\n      filterTypes\n    },\n    useFilters,\n    // useFilters!\n    useGlobalFilter\n    // useGlobalFilter!\n  );\n  return /* @__PURE__ */ jsxs(Card, { children: [\n    /* @__PURE__ */ jsxs(Card.Header, { children: [\n      /* @__PURE__ */ jsx(Card.Title, { children: \"Column Filtering\" }),\n      /* @__PURE__ */ jsx(\"h6\", { className: \"card-subtitle text-muted\", children: \"Column filtering by react-table\" })\n    ] }),\n    /* @__PURE__ */ jsx(Card.Body, { children: /* @__PURE__ */ jsxs(Table, { striped: true, bordered: true, ...getTableProps(), children: [\n      /* @__PURE__ */ jsx(\"thead\", { children: headerGroups.map((headerGroup) => /* @__PURE__ */ jsx(\"tr\", { ...headerGroup.getHeaderGroupProps(), children: headerGroup.headers.map((column) => /* @__PURE__ */ jsxs(\"th\", { ...column.getHeaderProps(), children: [\n        column.render(\"Header\"),\n        column.canFilter ? column.render(\"Filter\") : null\n      ] })) })) }),\n      /* @__PURE__ */ jsx(\"tbody\", { ...getTableBodyProps(), children: rows.map((row, i) => {\n        prepareRow(row);\n        return /* @__PURE__ */ jsx(\"tr\", { ...row.getRowProps(), children: row.cells.map((cell) => {\n          return /* @__PURE__ */ jsx(\"td\", { ...cell.getCellProps(), children: cell.render(\"Cell\") });\n        }) });\n      }) })\n    ] }) })\n  ] });\n};\nconst tableColumns = [\n  {\n    Header: \"Name\",\n    accessor: \"name\"\n  },\n  {\n    Header: \"Position\",\n    accessor: \"position\",\n    Filter: SelectColumnFilter,\n    filter: \"includes\"\n  },\n  {\n    Header: \"Office\",\n    accessor: \"office\",\n    Filter: SelectColumnFilter,\n    filter: \"includes\"\n  },\n  {\n    Header: \"Age\",\n    accessor: \"age\",\n    Filter: NumberRangeColumnFilter,\n    filter: \"between\"\n  },\n  {\n    Header: \"Start Date\",\n    accessor: \"startDate\"\n  },\n  {\n    Header: \"Salary\",\n    accessor: \"salary\",\n    Filter: false\n  }\n];\nconst ColumnFiltering = () => /* @__PURE__ */ jsxs(React.Fragment, { children: [\n  /* @__PURE__ */ jsx(Helmet, { title: \"Column Filtering\" }),\n  /* @__PURE__ */ jsxs(Container, { fluid: true, className: \"p-0\", children: [\n    /* @__PURE__ */ jsx(\"h1\", { className: \"h3 mb-3\", children: \"Column Filtering\" }),\n    /* @__PURE__ */ jsx(\n      ColumnFilteringTable,\n      {\n        columns: tableColumns,\n        data: tableData.slice(0, 15)\n      }\n    )\n  ] })\n] });\nexport default ColumnFiltering;\n",
      "start": 1702937440868,
      "end": 1702937440873,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/home/zepor/ssweb/frontend-container/src/pages/tables/ColumnFiltering.jsx"
        ],
        "sourcesContent": [
          "import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useTable, useFilters, useGlobalFilter } from \"react-table\";\r\n\r\nimport { Card, Container, Table, Form } from \"react-bootstrap\";\r\n\r\nimport { tableData } from \"./data.js\";\r\n\r\n// This is a custom UI for our 'between' or number range\r\n// filter. It uses two number boxes and filters rows to\r\n// ones that have values between the two\r\nfunction NumberRangeColumnFilter({\r\n  column: { filterValue = [], preFilteredRows, setFilter, id },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    preFilteredRows.forEach((row) => {\r\n      min = Math.min(row.values[id], min);\r\n      max = Math.max(row.values[id], max);\r\n    });\r\n    return [min, max];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <div className=\"d-flex mt-2\">\r\n      <Form.Control\r\n        value={filterValue[0] || \"\"}\r\n        type=\"number\"\r\n        onChange={(e) => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [\r\n            val ? parseInt(val, 10) : undefined,\r\n            old[1],\r\n          ]);\r\n        }}\r\n        placeholder={`Min (${min})`}\r\n        style={{\r\n          width: \"110px\",\r\n        }}\r\n      />\r\n      <span className=\"mx-2 mt-1\">to</span>\r\n      <Form.Control\r\n        value={filterValue[1] || \"\"}\r\n        type=\"number\"\r\n        onChange={(e) => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [\r\n            old[0],\r\n            val ? parseInt(val, 10) : undefined,\r\n          ]);\r\n        }}\r\n        placeholder={`Max (${max})`}\r\n        style={{\r\n          width: \"110px\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the options for filtering\r\n  // using the preFilteredRows\r\n  const options = React.useMemo(() => {\r\n    const options = new Set();\r\n    preFilteredRows.forEach((row) => {\r\n      options.add(row.values[id]);\r\n    });\r\n    return [...options.values()];\r\n  }, [id, preFilteredRows]);\r\n\r\n  // Render a multi-select box\r\n  return (\r\n    <Form.Select\r\n      value={filterValue}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined);\r\n      }}\r\n    >\r\n      <option value=\"\">All</option>\r\n      {options.map((option, i) => (\r\n        <option key={i} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </Form.Select>\r\n  );\r\n}\r\n\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n  const count = preFilteredRows.length;\r\n\r\n  return (\r\n    <Form.Control\r\n      value={filterValue || \"\"}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={`Search ${count} records...`}\r\n      className=\"mt-2\"\r\n    />\r\n  );\r\n}\r\n\r\nconst ColumnFilteringTable = ({ columns, data }) => {\r\n  const filterTypes = React.useMemo(\r\n    () => ({\r\n      // Or, override the default text filter to use\r\n      // \"startWith\"\r\n      text: (rows, id, filterValue) => {\r\n        return rows.filter((row) => {\r\n          const rowValue = row.values[id];\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n                .toLowerCase()\r\n                .startsWith(String(filterValue).toLowerCase())\r\n            : true;\r\n        });\r\n      },\r\n    }),\r\n    []\r\n  );\r\n\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      // Let's set up our default Filter UI\r\n      Filter: DefaultColumnFilter,\r\n    }),\r\n    []\r\n  );\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn, // Be sure to pass the defaultColumn option\r\n        filterTypes,\r\n      },\r\n      useFilters, // useFilters!\r\n      useGlobalFilter // useGlobalFilter!\r\n    );\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Card.Title>Column Filtering</Card.Title>\r\n        <h6 className=\"card-subtitle text-muted\">\r\n          Column filtering by react-table\r\n        </h6>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Table striped bordered {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th {...column.getHeaderProps()}>\r\n                    {column.render(\"Header\")}\r\n                    {/* Render the columns filter UI */}\r\n                      {column.canFilter ? column.render(\"Filter\") : null}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst tableColumns = [\r\n  {\r\n    Header: \"Name\",\r\n    accessor: \"name\",\r\n  },\r\n  {\r\n    Header: \"Position\",\r\n    accessor: \"position\",\r\n    Filter: SelectColumnFilter,\r\n    filter: \"includes\",\r\n  },\r\n  {\r\n    Header: \"Office\",\r\n    accessor: \"office\",\r\n    Filter: SelectColumnFilter,\r\n    filter: \"includes\",\r\n  },\r\n  {\r\n    Header: \"Age\",\r\n    accessor: \"age\",\r\n    Filter: NumberRangeColumnFilter,\r\n    filter: \"between\",\r\n  },\r\n  {\r\n    Header: \"Start Date\",\r\n    accessor: \"startDate\",\r\n  },\r\n  {\r\n    Header: \"Salary\",\r\n    accessor: \"salary\",\r\n    Filter: false,\r\n  },\r\n];\r\n\r\nconst ColumnFiltering = () => (\r\n  <React.Fragment>\r\n    <Helmet title=\"Column Filtering\" />\r\n    <Container fluid className=\"p-0\">\r\n      <h1 className=\"h3 mb-3\">Column Filtering</h1>\r\n\r\n      <ColumnFilteringTable\r\n        columns={tableColumns}\r\n        data={tableData.slice(0, 15)}\r\n      />\r\n    </Container>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default ColumnFiltering;\r\n"
        ],
        "mappings": "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",
        "names": [
          "min",
          "max",
          "options",
          "rows"
        ]
      }
    },
    {
      "name": "vite:json",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    }
  ]
}
