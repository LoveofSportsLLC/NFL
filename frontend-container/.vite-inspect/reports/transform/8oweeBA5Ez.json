{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/rust.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = rust\nrust.displayName = 'rust'\nrust.aliases = []\nfunction rust(Prism) {\n  ;(function (Prism) {\n    var multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source\n    for (var i = 0; i < 2; i++) {\n      // support 4 levels of nested comments\n      multilineComment = multilineComment.replace(/<self>/g, function () {\n        return multilineComment\n      })\n    }\n    multilineComment = multilineComment.replace(/<self>/g, function () {\n      return /[^\\s\\S]/.source\n    })\n    Prism.languages.rust = {\n      comment: [\n        {\n          pattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      string: {\n        pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n        greedy: true\n      },\n      char: {\n        pattern:\n          /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n        greedy: true\n      },\n      attribute: {\n        pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n        greedy: true,\n        alias: 'attr-name',\n        inside: {\n          string: null // see below\n        }\n      },\n      // Closure params should not be confused with bitwise OR |\n      'closure-params': {\n        pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'closure-punctuation': {\n            pattern: /^\\||\\|$/,\n            alias: 'punctuation'\n          },\n          rest: null // see below\n        }\n      },\n      'lifetime-annotation': {\n        pattern: /'\\w+/,\n        alias: 'symbol'\n      },\n      'fragment-specifier': {\n        pattern: /(\\$\\w+:)[a-z]+/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      variable: /\\$\\w+/,\n      'function-definition': {\n        pattern: /(\\bfn\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      'type-definition': {\n        pattern: /(\\b(?:enum|struct|trait|type|union)\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'module-declaration': [\n        {\n          pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n          lookbehind: true,\n          alias: 'namespace'\n        },\n        {\n          pattern:\n            /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n          lookbehind: true,\n          alias: 'namespace',\n          inside: {\n            punctuation: /::/\n          }\n        }\n      ],\n      keyword: [\n        // https://github.com/rust-lang/reference/blob/master/src/keywords.md\n        /\\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, // primitives and str\n        // https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n        /\\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\\b/\n      ],\n      // functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n      // and Rust's naming conventions recommend snake_case anyway.\n      // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n      function: /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n      macro: {\n        pattern: /\\b\\w+!/,\n        alias: 'property'\n      },\n      constant: /\\b[A-Z_][A-Z_\\d]+\\b/,\n      'class-name': /\\b[A-Z]\\w*\\b/,\n      namespace: {\n        pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      // Hex, oct, bin, dec numbers with visual separators and type suffix\n      number:\n        /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n      operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n    }\n    Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust\n    Prism.languages.rust['attribute'].inside['string'] =\n      Prism.languages.rust['string']\n  })(Prism)\n}\n",
      "start": 1702937445045,
      "end": 1702937445070,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445070,
      "end": 1702937445070,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445070,
      "end": 1702937445070,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445070,
      "end": 1702937445070,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445070,
      "end": 1702937445070,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445070,
      "end": 1702937445070,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445070,
      "end": 1702937445070,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445070,
      "end": 1702937445070,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445070,
      "end": 1702937445070,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445070,
      "end": 1702937445070,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445070,
      "end": 1702937445070,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar rust_1;\nvar hasRequiredRust;\n\nfunction requireRust () {\n\tif (hasRequiredRust) return rust_1;\n\thasRequiredRust = 1;\n\t'use strict'\n\n\trust_1 = rust\n\trust.displayName = 'rust'\n\trust.aliases = []\n\tfunction rust(Prism) {\n\t  ;(function (Prism) {\n\t    var multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source\n\t    for (var i = 0; i < 2; i++) {\n\t      // support 4 levels of nested comments\n\t      multilineComment = multilineComment.replace(/<self>/g, function () {\n\t        return multilineComment\n\t      })\n\t    }\n\t    multilineComment = multilineComment.replace(/<self>/g, function () {\n\t      return /[^\\s\\S]/.source\n\t    })\n\t    Prism.languages.rust = {\n\t      comment: [\n\t        {\n\t          pattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n\t          lookbehind: true,\n\t          greedy: true\n\t        },\n\t        {\n\t          pattern: /(^|[^\\\\:])\\/\\/.*/,\n\t          lookbehind: true,\n\t          greedy: true\n\t        }\n\t      ],\n\t      string: {\n\t        pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n\t        greedy: true\n\t      },\n\t      char: {\n\t        pattern:\n\t          /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n\t        greedy: true\n\t      },\n\t      attribute: {\n\t        pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n\t        greedy: true,\n\t        alias: 'attr-name',\n\t        inside: {\n\t          string: null // see below\n\t        }\n\t      },\n\t      // Closure params should not be confused with bitwise OR |\n\t      'closure-params': {\n\t        pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n\t        lookbehind: true,\n\t        greedy: true,\n\t        inside: {\n\t          'closure-punctuation': {\n\t            pattern: /^\\||\\|$/,\n\t            alias: 'punctuation'\n\t          },\n\t          rest: null // see below\n\t        }\n\t      },\n\t      'lifetime-annotation': {\n\t        pattern: /'\\w+/,\n\t        alias: 'symbol'\n\t      },\n\t      'fragment-specifier': {\n\t        pattern: /(\\$\\w+:)[a-z]+/,\n\t        lookbehind: true,\n\t        alias: 'punctuation'\n\t      },\n\t      variable: /\\$\\w+/,\n\t      'function-definition': {\n\t        pattern: /(\\bfn\\s+)\\w+/,\n\t        lookbehind: true,\n\t        alias: 'function'\n\t      },\n\t      'type-definition': {\n\t        pattern: /(\\b(?:enum|struct|trait|type|union)\\s+)\\w+/,\n\t        lookbehind: true,\n\t        alias: 'class-name'\n\t      },\n\t      'module-declaration': [\n\t        {\n\t          pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n\t          lookbehind: true,\n\t          alias: 'namespace'\n\t        },\n\t        {\n\t          pattern:\n\t            /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n\t          lookbehind: true,\n\t          alias: 'namespace',\n\t          inside: {\n\t            punctuation: /::/\n\t          }\n\t        }\n\t      ],\n\t      keyword: [\n\t        // https://github.com/rust-lang/reference/blob/master/src/keywords.md\n\t        /\\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, // primitives and str\n\t        // https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n\t        /\\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\\b/\n\t      ],\n\t      // functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n\t      // and Rust's naming conventions recommend snake_case anyway.\n\t      // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n\t      function: /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n\t      macro: {\n\t        pattern: /\\b\\w+!/,\n\t        alias: 'property'\n\t      },\n\t      constant: /\\b[A-Z_][A-Z_\\d]+\\b/,\n\t      'class-name': /\\b[A-Z]\\w*\\b/,\n\t      namespace: {\n\t        pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n\t        inside: {\n\t          punctuation: /::/\n\t        }\n\t      },\n\t      // Hex, oct, bin, dec numbers with visual separators and type suffix\n\t      number:\n\t        /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\\b/,\n\t      boolean: /\\b(?:false|true)\\b/,\n\t      punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n\t      operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n\t    }\n\t    Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust\n\t    Prism.languages.rust['attribute'].inside['string'] =\n\t      Prism.languages.rust['string']\n\t  })(Prism)\n\t}\n\treturn rust_1;\n}\n\nexport { requireRust as __require };",
      "start": 1702937445070,
      "end": 1702937445071,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937445071,
      "end": 1702937445071,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445071,
      "end": 1702937445071,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445071,
      "end": 1702937445071,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445071,
      "end": 1702937445071,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445071,
      "end": 1702937445071,
      "order": "normal"
    }
  ]
}
