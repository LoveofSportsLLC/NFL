{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/groovy.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = groovy\ngroovy.displayName = 'groovy'\ngroovy.aliases = []\nfunction groovy(Prism) {\n  Prism.languages.groovy = Prism.languages.extend('clike', {\n    string: [\n      {\n        // https://groovy-lang.org/syntax.html#_dollar_slashy_string\n        pattern:\n          /(\"\"\"|''')(?:[^\\\\]|\\\\[\\s\\S])*?\\1|\\$\\/(?:[^/$]|\\$(?:[/$]|(?![/$]))|\\/(?!\\$))*\\/\\$/,\n        greedy: true\n      },\n      {\n        // TODO: Slash strings (e.g. /foo/) can contain line breaks but this will cause a lot of trouble with\n        // simple division (see JS regex), so find a fix maybe?\n        pattern: /([\"'/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n      }\n    ],\n    keyword:\n      /\\b(?:abstract|as|assert|boolean|break|byte|case|catch|char|class|const|continue|def|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|in|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n    number:\n      /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?\\d+)?)[glidf]?\\b/i,\n    operator: {\n      pattern:\n        /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.\\.(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n      lookbehind: true\n    },\n    punctuation: /\\.+|[{}[\\];(),:$]/\n  })\n  Prism.languages.insertBefore('groovy', 'string', {\n    shebang: {\n      pattern: /#!.+/,\n      alias: 'comment'\n    }\n  })\n  Prism.languages.insertBefore('groovy', 'punctuation', {\n    'spock-block': /\\b(?:and|cleanup|expect|given|setup|then|when|where):/\n  })\n  Prism.languages.insertBefore('groovy', 'function', {\n    annotation: {\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: true,\n      alias: 'punctuation'\n    }\n  }) // Handle string interpolation\n  Prism.hooks.add('wrap', function (env) {\n    if (env.language === 'groovy' && env.type === 'string') {\n      var delimiter = env.content.value[0]\n      if (delimiter != \"'\") {\n        var pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/\n        if (delimiter === '$') {\n          pattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/\n        } // To prevent double HTML-encoding we have to decode env.content first\n        env.content.value = env.content.value\n          .replace(/&lt;/g, '<')\n          .replace(/&amp;/g, '&')\n        env.content = Prism.highlight(env.content.value, {\n          expression: {\n            pattern: pattern,\n            lookbehind: true,\n            inside: Prism.languages.groovy\n          }\n        })\n        env.classes.push(delimiter === '/' ? 'regex' : 'gstring')\n      }\n    }\n  })\n}\n",
      "start": 1702937444900,
      "end": 1702937444922,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444922,
      "end": 1702937444922,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444922,
      "end": 1702937444922,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444922,
      "end": 1702937444922,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444922,
      "end": 1702937444922,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444922,
      "end": 1702937444922,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444922,
      "end": 1702937444922,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444922,
      "end": 1702937444922,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444922,
      "end": 1702937444922,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444922,
      "end": 1702937444922,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444922,
      "end": 1702937444922,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar groovy_1;\nvar hasRequiredGroovy;\n\nfunction requireGroovy () {\n\tif (hasRequiredGroovy) return groovy_1;\n\thasRequiredGroovy = 1;\n\t'use strict'\n\n\tgroovy_1 = groovy\n\tgroovy.displayName = 'groovy'\n\tgroovy.aliases = []\n\tfunction groovy(Prism) {\n\t  Prism.languages.groovy = Prism.languages.extend('clike', {\n\t    string: [\n\t      {\n\t        // https://groovy-lang.org/syntax.html#_dollar_slashy_string\n\t        pattern:\n\t          /(\"\"\"|''')(?:[^\\\\]|\\\\[\\s\\S])*?\\1|\\$\\/(?:[^/$]|\\$(?:[/$]|(?![/$]))|\\/(?!\\$))*\\/\\$/,\n\t        greedy: true\n\t      },\n\t      {\n\t        // TODO: Slash strings (e.g. /foo/) can contain line breaks but this will cause a lot of trouble with\n\t        // simple division (see JS regex), so find a fix maybe?\n\t        pattern: /([\"'/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t        greedy: true\n\t      }\n\t    ],\n\t    keyword:\n\t      /\\b(?:abstract|as|assert|boolean|break|byte|case|catch|char|class|const|continue|def|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|in|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n\t    number:\n\t      /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?\\d+)?)[glidf]?\\b/i,\n\t    operator: {\n\t      pattern:\n\t        /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.\\.(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n\t      lookbehind: true\n\t    },\n\t    punctuation: /\\.+|[{}[\\];(),:$]/\n\t  })\n\t  Prism.languages.insertBefore('groovy', 'string', {\n\t    shebang: {\n\t      pattern: /#!.+/,\n\t      alias: 'comment'\n\t    }\n\t  })\n\t  Prism.languages.insertBefore('groovy', 'punctuation', {\n\t    'spock-block': /\\b(?:and|cleanup|expect|given|setup|then|when|where):/\n\t  })\n\t  Prism.languages.insertBefore('groovy', 'function', {\n\t    annotation: {\n\t      pattern: /(^|[^.])@\\w+/,\n\t      lookbehind: true,\n\t      alias: 'punctuation'\n\t    }\n\t  }) // Handle string interpolation\n\t  Prism.hooks.add('wrap', function (env) {\n\t    if (env.language === 'groovy' && env.type === 'string') {\n\t      var delimiter = env.content.value[0]\n\t      if (delimiter != \"'\") {\n\t        var pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/\n\t        if (delimiter === '$') {\n\t          pattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/\n\t        } // To prevent double HTML-encoding we have to decode env.content first\n\t        env.content.value = env.content.value\n\t          .replace(/&lt;/g, '<')\n\t          .replace(/&amp;/g, '&')\n\t        env.content = Prism.highlight(env.content.value, {\n\t          expression: {\n\t            pattern: pattern,\n\t            lookbehind: true,\n\t            inside: Prism.languages.groovy\n\t          }\n\t        })\n\t        env.classes.push(delimiter === '/' ? 'regex' : 'gstring')\n\t      }\n\t    }\n\t  })\n\t}\n\treturn groovy_1;\n}\n\nexport { requireGroovy as __require };",
      "start": 1702937444922,
      "end": 1702937444923,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;CAAA,YAAY;AACZ;AACA,SAAc,GAAG,MAAM;CACvB,MAAM,CAAC,WAAW,GAAG,QAAQ;CAC7B,MAAM,CAAC,OAAO,GAAG,EAAE;CACnB,SAAS,MAAM,CAAC,KAAK,EAAE;CACvB,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE;CAC3D,IAAI,MAAM,EAAE;CACZ,MAAM;CACN;CACA,QAAQ,OAAO;CACf,UAAU,iFAAiF;CAC3F,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,MAAM;CACN;CACA;CACA,QAAQ,OAAO,EAAE,mCAAmC;CACpD,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,KAAK;CACL,IAAI,OAAO;CACX,MAAM,4WAA4W;CAClX,IAAI,MAAM;CACV,MAAM,4FAA4F;CAClG,IAAI,QAAQ,EAAE;CACd,MAAM,OAAO;CACb,QAAQ,mJAAmJ;CAC3J,MAAM,UAAU,EAAE,IAAI;CACtB,KAAK;CACL,IAAI,WAAW,EAAE,mBAAmB;CACpC,GAAG,CAAC;CACJ,EAAE,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,QAAQ,EAAE,QAAQ,EAAE;CACnD,IAAI,OAAO,EAAE;CACb,MAAM,OAAO,EAAE,MAAM;CACrB,MAAM,KAAK,EAAE,SAAS;CACtB,KAAK;CACL,GAAG,CAAC;CACJ,EAAE,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,QAAQ,EAAE,aAAa,EAAE;CACxD,IAAI,aAAa,EAAE,uDAAuD;CAC1E,GAAG,CAAC;CACJ,EAAE,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,QAAQ,EAAE,UAAU,EAAE;CACrD,IAAI,UAAU,EAAE;CAChB,MAAM,OAAO,EAAE,cAAc;CAC7B,MAAM,UAAU,EAAE,IAAI;CACtB,MAAM,KAAK,EAAE,aAAa;CAC1B,KAAK;CACL,GAAG,CAAC;CACJ,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,UAAU,GAAG,EAAE;CACzC,IAAI,IAAI,GAAG,CAAC,QAAQ,KAAK,QAAQ,IAAI,GAAG,CAAC,IAAI,KAAK,QAAQ,EAAE;CAC5D,MAAM,IAAI,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;CAC1C,MAAM,IAAI,SAAS,IAAI,GAAG,EAAE;CAC5B,QAAQ,IAAI,OAAO,GAAG,iCAAiC;CACvD,QAAQ,IAAI,SAAS,KAAK,GAAG,EAAE;CAC/B,UAAU,OAAO,GAAG,iCAAiC;CACrD,SAAS;CACT,QAAQ,GAAG,CAAC,OAAO,CAAC,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK;CAC7C,WAAW,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC;CAChC,WAAW,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;CACjC,QAAQ,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE;CACzD,UAAU,UAAU,EAAE;CACtB,YAAY,OAAO,EAAE,OAAO;CAC5B,YAAY,UAAU,EAAE,IAAI;CAC5B,YAAY,MAAM,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;CAC1C,WAAW;CACX,SAAS,CAAC;CACV,QAAQ,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,KAAK,GAAG,GAAG,OAAO,GAAG,SAAS,CAAC;CACjE,OAAO;CACP,KAAK;CACL,GAAG,CAAC;CACJ"
      }
    },
    {
      "name": "inject",
      "start": 1702937444923,
      "end": 1702937444923,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444923,
      "end": 1702937444923,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444923,
      "end": 1702937444923,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444923,
      "end": 1702937444923,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444923,
      "end": 1702937444923,
      "order": "normal"
    }
  ]
}
