{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/javadoclike.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n",
      "start": 1702937444925,
      "end": 1702937444944,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444944,
      "end": 1702937444944,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444944,
      "end": 1702937444944,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444944,
      "end": 1702937444944,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444944,
      "end": 1702937444944,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444944,
      "end": 1702937444944,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444944,
      "end": 1702937444944,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444944,
      "end": 1702937444944,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444944,
      "end": 1702937444944,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444944,
      "end": 1702937444944,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444944,
      "end": 1702937444944,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar javadoclike_1;\nvar hasRequiredJavadoclike;\n\nfunction requireJavadoclike () {\n\tif (hasRequiredJavadoclike) return javadoclike_1;\n\thasRequiredJavadoclike = 1;\n\t'use strict'\n\n\tjavadoclike_1 = javadoclike\n\tjavadoclike.displayName = 'javadoclike'\n\tjavadoclike.aliases = []\n\tfunction javadoclike(Prism) {\n\t  ;(function (Prism) {\n\t    var javaDocLike = (Prism.languages.javadoclike = {\n\t      parameter: {\n\t        pattern:\n\t          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n\t        lookbehind: true\n\t      },\n\t      keyword: {\n\t        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n\t        // @word, {@word}\n\t        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n\t        lookbehind: true\n\t      },\n\t      punctuation: /[{}]/\n\t    })\n\t    /**\n\t     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n\t     *\n\t     * @param {string} lang the language add doc comment support to.\n\t     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n\t     */\n\t    function docCommentSupport(lang, callback) {\n\t      var tokenName = 'doc-comment'\n\t      var grammar = Prism.languages[lang]\n\t      if (!grammar) {\n\t        return\n\t      }\n\t      var token = grammar[tokenName]\n\t      if (!token) {\n\t        // add doc comment: /** */\n\t        var definition = {}\n\t        definition[tokenName] = {\n\t          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n\t          lookbehind: true,\n\t          alias: 'comment'\n\t        }\n\t        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n\t        token = grammar[tokenName]\n\t      }\n\t      if (token instanceof RegExp) {\n\t        // convert regex to object\n\t        token = grammar[tokenName] = {\n\t          pattern: token\n\t        }\n\t      }\n\t      if (Array.isArray(token)) {\n\t        for (var i = 0, l = token.length; i < l; i++) {\n\t          if (token[i] instanceof RegExp) {\n\t            token[i] = {\n\t              pattern: token[i]\n\t            }\n\t          }\n\t          callback(token[i])\n\t        }\n\t      } else {\n\t        callback(token)\n\t      }\n\t    }\n\t    /**\n\t     * Adds doc-comment support to the given languages for the given documentation language.\n\t     *\n\t     * @param {string[]|string} languages\n\t     * @param {Object} docLanguage\n\t     */\n\t    function addSupport(languages, docLanguage) {\n\t      if (typeof languages === 'string') {\n\t        languages = [languages]\n\t      }\n\t      languages.forEach(function (lang) {\n\t        docCommentSupport(lang, function (pattern) {\n\t          if (!pattern.inside) {\n\t            pattern.inside = {}\n\t          }\n\t          pattern.inside.rest = docLanguage\n\t        })\n\t      })\n\t    }\n\t    Object.defineProperty(javaDocLike, 'addSupport', {\n\t      value: addSupport\n\t    })\n\t    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n\t  })(Prism)\n\t}\n\treturn javadoclike_1;\n}\n\nexport { requireJavadoclike as __require };",
      "start": 1702937444944,
      "end": 1702937444944,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937444944,
      "end": 1702937444944,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444944,
      "end": 1702937444944,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444944,
      "end": 1702937444944,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444944,
      "end": 1702937444944,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444944,
      "end": 1702937444944,
      "order": "normal"
    }
  ]
}
