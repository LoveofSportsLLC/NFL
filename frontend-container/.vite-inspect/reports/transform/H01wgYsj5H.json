{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/haskell.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = haskell\nhaskell.displayName = 'haskell'\nhaskell.aliases = ['hs']\nfunction haskell(Prism) {\n  Prism.languages.haskell = {\n    comment: {\n      pattern:\n        /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--(?:(?=.)[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|$)|\\{-[\\s\\S]*?-\\})/m,\n      lookbehind: true\n    },\n    char: {\n      pattern:\n        /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|ACK|BEL|BS|CAN|CR|DC1|DC2|DC3|DC4|DEL|DLE|EM|ENQ|EOT|ESC|ETB|ETX|FF|FS|GS|HT|LF|NAK|NUL|RS|SI|SO|SOH|SP|STX|SUB|SYN|US|VT|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,\n      alias: 'string'\n    },\n    string: {\n      pattern: /\"(?:[^\\\\\"]|\\\\(?:\\S|\\s+\\\\))*\"/,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\n    'import-statement': {\n      // The imported or hidden names are not included in this import\n      // statement. This is because we want to highlight those exactly like\n      // we do for the names in the program.\n      pattern:\n        /(^[\\t ]*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n      lookbehind: true,\n      inside: {\n        keyword: /\\b(?:as|hiding|import|qualified)\\b/,\n        punctuation: /\\./\n      }\n    },\n    // These are builtin variables only. Constructors are highlighted later as a constant.\n    builtin:\n      /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,\n    // decimal integers and floating point numbers | octal integers | hexadecimal integers\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,\n    operator: [\n      {\n        // infix operator\n        pattern: /`(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*`/,\n        greedy: true\n      },\n      {\n        // function composition\n        pattern: /(\\s)\\.(?=\\s)/,\n        lookbehind: true\n      }, // Most of this is needed because of the meaning of a single '.'.\n      // If it stands alone freely, it is the function composition.\n      // It may also be a separator between a module name and an identifier => no\n      // operator. If it comes together with other special characters it is an\n      // operator too.\n      //\n      // This regex means: /[-!#$%*+=?&@|~.:<>^\\\\\\/]+/ without /\\./.\n      /[-!#$%*+=?&@|~:<>^\\\\\\/][-!#$%*+=?&@|~.:<>^\\\\\\/]*|\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+/\n    ],\n    // In Haskell, nearly everything is a variable, do not highlight these.\n    hvariable: {\n      pattern: /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*/,\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    constant: {\n      pattern: /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*/,\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    punctuation: /[{}[\\];(),.:]/\n  }\n  Prism.languages.hs = Prism.languages.haskell\n}\n",
      "start": 1702937444904,
      "end": 1702937444924,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444924,
      "end": 1702937444924,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444924,
      "end": 1702937444924,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444924,
      "end": 1702937444924,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444924,
      "end": 1702937444924,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444924,
      "end": 1702937444924,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444924,
      "end": 1702937444924,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444924,
      "end": 1702937444924,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444924,
      "end": 1702937444924,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444924,
      "end": 1702937444924,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444924,
      "end": 1702937444924,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar haskell_1;\nvar hasRequiredHaskell;\n\nfunction requireHaskell () {\n\tif (hasRequiredHaskell) return haskell_1;\n\thasRequiredHaskell = 1;\n\t'use strict'\n\n\thaskell_1 = haskell\n\thaskell.displayName = 'haskell'\n\thaskell.aliases = ['hs']\n\tfunction haskell(Prism) {\n\t  Prism.languages.haskell = {\n\t    comment: {\n\t      pattern:\n\t        /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--(?:(?=.)[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|$)|\\{-[\\s\\S]*?-\\})/m,\n\t      lookbehind: true\n\t    },\n\t    char: {\n\t      pattern:\n\t        /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|ACK|BEL|BS|CAN|CR|DC1|DC2|DC3|DC4|DEL|DLE|EM|ENQ|EOT|ESC|ETB|ETX|FF|FS|GS|HT|LF|NAK|NUL|RS|SI|SO|SOH|SP|STX|SUB|SYN|US|VT|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,\n\t      alias: 'string'\n\t    },\n\t    string: {\n\t      pattern: /\"(?:[^\\\\\"]|\\\\(?:\\S|\\s+\\\\))*\"/,\n\t      greedy: true\n\t    },\n\t    keyword:\n\t      /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\n\t    'import-statement': {\n\t      // The imported or hidden names are not included in this import\n\t      // statement. This is because we want to highlight those exactly like\n\t      // we do for the names in the program.\n\t      pattern:\n\t        /(^[\\t ]*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n\t      lookbehind: true,\n\t      inside: {\n\t        keyword: /\\b(?:as|hiding|import|qualified)\\b/,\n\t        punctuation: /\\./\n\t      }\n\t    },\n\t    // These are builtin variables only. Constructors are highlighted later as a constant.\n\t    builtin:\n\t      /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,\n\t    // decimal integers and floating point numbers | octal integers | hexadecimal integers\n\t    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,\n\t    operator: [\n\t      {\n\t        // infix operator\n\t        pattern: /`(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*`/,\n\t        greedy: true\n\t      },\n\t      {\n\t        // function composition\n\t        pattern: /(\\s)\\.(?=\\s)/,\n\t        lookbehind: true\n\t      }, // Most of this is needed because of the meaning of a single '.'.\n\t      // If it stands alone freely, it is the function composition.\n\t      // It may also be a separator between a module name and an identifier => no\n\t      // operator. If it comes together with other special characters it is an\n\t      // operator too.\n\t      //\n\t      // This regex means: /[-!#$%*+=?&@|~.:<>^\\\\\\/]+/ without /\\./.\n\t      /[-!#$%*+=?&@|~:<>^\\\\\\/][-!#$%*+=?&@|~.:<>^\\\\\\/]*|\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+/\n\t    ],\n\t    // In Haskell, nearly everything is a variable, do not highlight these.\n\t    hvariable: {\n\t      pattern: /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*/,\n\t      inside: {\n\t        punctuation: /\\./\n\t      }\n\t    },\n\t    constant: {\n\t      pattern: /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*/,\n\t      inside: {\n\t        punctuation: /\\./\n\t      }\n\t    },\n\t    punctuation: /[{}[\\];(),.:]/\n\t  }\n\t  Prism.languages.hs = Prism.languages.haskell\n\t}\n\treturn haskell_1;\n}\n\nexport { requireHaskell as __require };",
      "start": 1702937444924,
      "end": 1702937444925,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;CAAA,YAAY;AACZ;AACA,UAAc,GAAG,OAAO;CACxB,OAAO,CAAC,WAAW,GAAG,SAAS;CAC/B,OAAO,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC;CACxB,SAAS,OAAO,CAAC,KAAK,EAAE;CACxB,EAAE,KAAK,CAAC,SAAS,CAAC,OAAO,GAAG;CAC5B,IAAI,OAAO,EAAE;CACb,MAAM,OAAO;CACb,QAAQ,2FAA2F;CACnG,MAAM,UAAU,EAAE,IAAI;CACtB,KAAK;CACL,IAAI,IAAI,EAAE;CACV,MAAM,OAAO;CACb,QAAQ,qMAAqM;CAC7M,MAAM,KAAK,EAAE,QAAQ;CACrB,KAAK;CACL,IAAI,MAAM,EAAE;CACZ,MAAM,OAAO,EAAE,8BAA8B;CAC7C,MAAM,MAAM,EAAE,IAAI;CAClB,KAAK;CACL,IAAI,OAAO;CACX,MAAM,uHAAuH;CAC7H,IAAI,kBAAkB,EAAE;CACxB;CACA;CACA;CACA,MAAM,OAAO;CACb,QAAQ,qIAAqI;CAC7I,MAAM,UAAU,EAAE,IAAI;CACtB,MAAM,MAAM,EAAE;CACd,QAAQ,OAAO,EAAE,oCAAoC;CACrD,QAAQ,WAAW,EAAE,IAAI;CACzB,OAAO;CACP,KAAK;CACL;CACA,IAAI,OAAO;CACX,MAAM,woDAAwoD;CAC9oD;CACA,IAAI,MAAM,EAAE,2DAA2D;CACvE,IAAI,QAAQ,EAAE;CACd,MAAM;CACN;CACA,QAAQ,OAAO,EAAE,kCAAkC;CACnD,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,MAAM;CACN;CACA,QAAQ,OAAO,EAAE,cAAc;CAC/B,QAAQ,UAAU,EAAE,IAAI;CACxB,OAAO;CACP;CACA;CACA;CACA;CACA;CACA;CACA,MAAM,8EAA8E;CACpF,KAAK;CACL;CACA,IAAI,SAAS,EAAE;CACf,MAAM,OAAO,EAAE,kCAAkC;CACjD,MAAM,MAAM,EAAE;CACd,QAAQ,WAAW,EAAE,IAAI;CACzB,OAAO;CACP,KAAK;CACL,IAAI,QAAQ,EAAE;CACd,MAAM,OAAO,EAAE,iCAAiC;CAChD,MAAM,MAAM,EAAE;CACd,QAAQ,WAAW,EAAE,IAAI;CACzB,OAAO;CACP,KAAK;CACL,IAAI,WAAW,EAAE,eAAe;CAChC,GAAG;CACH,EAAE,KAAK,CAAC,SAAS,CAAC,EAAE,GAAG,KAAK,CAAC,SAAS,CAAC,OAAO;CAC9C"
      }
    },
    {
      "name": "inject",
      "start": 1702937444925,
      "end": 1702937444925,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444925,
      "end": 1702937444925,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444925,
      "end": 1702937444925,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444925,
      "end": 1702937444925,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444925,
      "end": 1702937444925,
      "order": "normal"
    }
  ]
}
