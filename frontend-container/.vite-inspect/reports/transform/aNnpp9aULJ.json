{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/tsx.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\nvar refractorJsx = require('./jsx.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = tsx\ntsx.displayName = 'tsx'\ntsx.aliases = []\nfunction tsx(Prism) {\n  Prism.register(refractorJsx)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript)\n    Prism.languages.tsx = Prism.languages.extend('jsx', typescript) // doesn't work with TS because TS is too complex\n    delete Prism.languages.tsx['parameter']\n    delete Prism.languages.tsx['literal-property'] // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n    var tag = Prism.languages.tsx.tag\n    tag.pattern = RegExp(\n      /(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')',\n      tag.pattern.flags\n    )\n    tag.lookbehind = true\n  })(Prism)\n}\n",
      "start": 1702937445091,
      "end": 1702937445118,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445118,
      "end": 1702937445118,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445118,
      "end": 1702937445118,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445118,
      "end": 1702937445118,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445118,
      "end": 1702937445118,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445118,
      "end": 1702937445118,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445118,
      "end": 1702937445118,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445118,
      "end": 1702937445118,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445118,
      "end": 1702937445118,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445118,
      "end": 1702937445118,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445118,
      "end": 1702937445118,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/jsx.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/typescript.js?commonjs-wrapped\";\n\nvar tsx_1;\nvar hasRequiredTsx;\n\nfunction requireTsx () {\n\tif (hasRequiredTsx) return tsx_1;\n\thasRequiredTsx = 1;\n\t'use strict'\n\tvar refractorJsx = require$$0()\n\tvar refractorTypescript = require$$1()\n\ttsx_1 = tsx\n\ttsx.displayName = 'tsx'\n\ttsx.aliases = []\n\tfunction tsx(Prism) {\n\t  Prism.register(refractorJsx)\n\t  Prism.register(refractorTypescript)\n\t  ;(function (Prism) {\n\t    var typescript = Prism.util.clone(Prism.languages.typescript)\n\t    Prism.languages.tsx = Prism.languages.extend('jsx', typescript) // doesn't work with TS because TS is too complex\n\t    delete Prism.languages.tsx['parameter']\n\t    delete Prism.languages.tsx['literal-property'] // This will prevent collisions between TSX tags and TS generic types.\n\t    // Idea by https://github.com/karlhorky\n\t    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\t    var tag = Prism.languages.tsx.tag\n\t    tag.pattern = RegExp(\n\t      /(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')',\n\t      tag.pattern.flags\n\t    )\n\t    tag.lookbehind = true\n\t  })(Prism)\n\t}\n\treturn tsx_1;\n}\n\nexport { requireTsx as __require };",
      "start": 1702937445118,
      "end": 1702937445127,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;;;CAAA,YAAY;CACZ,IAAI,YAAY,GAAG,YAAmB;CACtC,IAAI,mBAAmB,GAAG,YAA0B;AACpD,MAAc,GAAG,GAAG;CACpB,GAAG,CAAC,WAAW,GAAG,KAAK;CACvB,GAAG,CAAC,OAAO,GAAG,EAAE;CAChB,SAAS,GAAG,CAAC,KAAK,EAAE;CACpB,EAAE,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC;CAC9B,EAAE,KAAK,CAAC,QAAQ,CAAC,mBAAmB,CAAC;CACrC,GAAG,CAAC,UAAU,KAAK,EAAE;CACrB,IAAI,IAAI,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC;CACjE,IAAI,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,UAAU,CAAC;CACnE,IAAI,OAAO,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;CAC3C,IAAI,OAAO,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC;CAClD;CACA;CACA,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG;CACrC,IAAI,GAAG,CAAC,OAAO,GAAG,MAAM;CACxB,MAAM,oBAAoB,CAAC,MAAM,GAAG,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,GAAG,GAAG;CACpE,MAAM,GAAG,CAAC,OAAO,CAAC,KAAK;CACvB,KAAK;CACL,IAAI,GAAG,CAAC,UAAU,GAAG,IAAI;CACzB,GAAG,EAAE,KAAK,CAAC;CACX"
      }
    },
    {
      "name": "inject",
      "start": 1702937445127,
      "end": 1702937445127,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445127,
      "end": 1702937445127,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445127,
      "end": 1702937445127,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445127,
      "end": 1702937445127,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445127,
      "end": 1702937445127,
      "order": "normal"
    }
  ]
}
