{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/http.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = http\nhttp.displayName = 'http'\nhttp.aliases = []\nfunction http(Prism) {\n  ;(function (Prism) {\n    /**\n     * @param {string} name\n     * @returns {RegExp}\n     */\n    function headerValueOf(name) {\n      return RegExp('(^(?:' + name + '):[ \\t]*(?![ \\t]))[^]+', 'i')\n    }\n    Prism.languages.http = {\n      'request-line': {\n        pattern:\n          /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[\\d.]+/m,\n        inside: {\n          // HTTP Method\n          method: {\n            pattern: /^[A-Z]+\\b/,\n            alias: 'property'\n          },\n          // Request Target e.g. http://example.com, /path/to/file\n          'request-target': {\n            pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n            lookbehind: true,\n            alias: 'url',\n            inside: Prism.languages.uri\n          },\n          // HTTP Version\n          'http-version': {\n            pattern: /^(\\s)HTTP\\/[\\d.]+/,\n            lookbehind: true,\n            alias: 'property'\n          }\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/[\\d.]+ \\d+ .+/m,\n        inside: {\n          // HTTP Version\n          'http-version': {\n            pattern: /^HTTP\\/[\\d.]+/,\n            alias: 'property'\n          },\n          // Status Code\n          'status-code': {\n            pattern: /^(\\s)\\d+(?=\\s)/,\n            lookbehind: true,\n            alias: 'number'\n          },\n          // Reason Phrase\n          'reason-phrase': {\n            pattern: /^(\\s).+/,\n            lookbehind: true,\n            alias: 'string'\n          }\n        }\n      },\n      header: {\n        pattern: /^[\\w-]+:.+(?:(?:\\r\\n?|\\n)[ \\t].+)*/m,\n        inside: {\n          'header-value': [\n            {\n              pattern: headerValueOf(/Content-Security-Policy/.source),\n              lookbehind: true,\n              alias: ['csp', 'languages-csp'],\n              inside: Prism.languages.csp\n            },\n            {\n              pattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),\n              lookbehind: true,\n              alias: ['hpkp', 'languages-hpkp'],\n              inside: Prism.languages.hpkp\n            },\n            {\n              pattern: headerValueOf(/Strict-Transport-Security/.source),\n              lookbehind: true,\n              alias: ['hsts', 'languages-hsts'],\n              inside: Prism.languages.hsts\n            },\n            {\n              pattern: headerValueOf(/[^:]+/.source),\n              lookbehind: true\n            }\n          ],\n          'header-name': {\n            pattern: /^[^:]+/,\n            alias: 'keyword'\n          },\n          punctuation: /^:/\n        }\n      }\n    } // Create a mapping of Content-Type headers to language definitions\n    var langs = Prism.languages\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css,\n      'text/plain': langs.plain\n    } // Declare which types can also be suffixes\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    }\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '')\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])'\n      return '(?:' + contentType + '|' + suffixPattern + ')'\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n    var options\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {}\n        var pattern = suffixTypes[contentType]\n          ? getSuffixPattern(contentType)\n          : contentType\n        options[contentType.replace(/\\//g, '-')] = {\n          pattern: RegExp(\n            '(' +\n              /content-type:\\s*/.source +\n              pattern +\n              /(?:(?:\\r\\n?|\\n)[\\w-].*)*(?:\\r(?:\\n|(?!\\n))|\\n)/.source +\n              ')' + // This is a little interesting:\n              // The HTTP format spec required 1 empty line before the body to make everything unambiguous.\n              // However, when writing code by hand (e.g. to display on a website) people can forget about this,\n              // so we want to be liberal here. We will allow the empty line to be omitted if the first line of\n              // the body does not start with a [\\w-] character (as headers do).\n              /[^ \\t\\w-][\\s\\S]*/.source,\n            'i'\n          ),\n          lookbehind: true,\n          inside: httpLanguages[contentType]\n        }\n      }\n    }\n    if (options) {\n      Prism.languages.insertBefore('http', 'header', options)\n    }\n  })(Prism)\n}\n",
      "start": 1702937444913,
      "end": 1702937444929,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444929,
      "end": 1702937444929,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444929,
      "end": 1702937444929,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444929,
      "end": 1702937444929,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444929,
      "end": 1702937444929,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444929,
      "end": 1702937444929,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444929,
      "end": 1702937444929,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444929,
      "end": 1702937444929,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444929,
      "end": 1702937444929,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444929,
      "end": 1702937444929,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444929,
      "end": 1702937444929,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar http_1;\nvar hasRequiredHttp;\n\nfunction requireHttp () {\n\tif (hasRequiredHttp) return http_1;\n\thasRequiredHttp = 1;\n\t'use strict'\n\n\thttp_1 = http\n\thttp.displayName = 'http'\n\thttp.aliases = []\n\tfunction http(Prism) {\n\t  ;(function (Prism) {\n\t    /**\n\t     * @param {string} name\n\t     * @returns {RegExp}\n\t     */\n\t    function headerValueOf(name) {\n\t      return RegExp('(^(?:' + name + '):[ \\t]*(?![ \\t]))[^]+', 'i')\n\t    }\n\t    Prism.languages.http = {\n\t      'request-line': {\n\t        pattern:\n\t          /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[\\d.]+/m,\n\t        inside: {\n\t          // HTTP Method\n\t          method: {\n\t            pattern: /^[A-Z]+\\b/,\n\t            alias: 'property'\n\t          },\n\t          // Request Target e.g. http://example.com, /path/to/file\n\t          'request-target': {\n\t            pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n\t            lookbehind: true,\n\t            alias: 'url',\n\t            inside: Prism.languages.uri\n\t          },\n\t          // HTTP Version\n\t          'http-version': {\n\t            pattern: /^(\\s)HTTP\\/[\\d.]+/,\n\t            lookbehind: true,\n\t            alias: 'property'\n\t          }\n\t        }\n\t      },\n\t      'response-status': {\n\t        pattern: /^HTTP\\/[\\d.]+ \\d+ .+/m,\n\t        inside: {\n\t          // HTTP Version\n\t          'http-version': {\n\t            pattern: /^HTTP\\/[\\d.]+/,\n\t            alias: 'property'\n\t          },\n\t          // Status Code\n\t          'status-code': {\n\t            pattern: /^(\\s)\\d+(?=\\s)/,\n\t            lookbehind: true,\n\t            alias: 'number'\n\t          },\n\t          // Reason Phrase\n\t          'reason-phrase': {\n\t            pattern: /^(\\s).+/,\n\t            lookbehind: true,\n\t            alias: 'string'\n\t          }\n\t        }\n\t      },\n\t      header: {\n\t        pattern: /^[\\w-]+:.+(?:(?:\\r\\n?|\\n)[ \\t].+)*/m,\n\t        inside: {\n\t          'header-value': [\n\t            {\n\t              pattern: headerValueOf(/Content-Security-Policy/.source),\n\t              lookbehind: true,\n\t              alias: ['csp', 'languages-csp'],\n\t              inside: Prism.languages.csp\n\t            },\n\t            {\n\t              pattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),\n\t              lookbehind: true,\n\t              alias: ['hpkp', 'languages-hpkp'],\n\t              inside: Prism.languages.hpkp\n\t            },\n\t            {\n\t              pattern: headerValueOf(/Strict-Transport-Security/.source),\n\t              lookbehind: true,\n\t              alias: ['hsts', 'languages-hsts'],\n\t              inside: Prism.languages.hsts\n\t            },\n\t            {\n\t              pattern: headerValueOf(/[^:]+/.source),\n\t              lookbehind: true\n\t            }\n\t          ],\n\t          'header-name': {\n\t            pattern: /^[^:]+/,\n\t            alias: 'keyword'\n\t          },\n\t          punctuation: /^:/\n\t        }\n\t      }\n\t    } // Create a mapping of Content-Type headers to language definitions\n\t    var langs = Prism.languages\n\t    var httpLanguages = {\n\t      'application/javascript': langs.javascript,\n\t      'application/json': langs.json || langs.javascript,\n\t      'application/xml': langs.xml,\n\t      'text/xml': langs.xml,\n\t      'text/html': langs.html,\n\t      'text/css': langs.css,\n\t      'text/plain': langs.plain\n\t    } // Declare which types can also be suffixes\n\t    var suffixTypes = {\n\t      'application/json': true,\n\t      'application/xml': true\n\t    }\n\t    /**\n\t     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n\t     *\n\t     * @param {string} contentType\n\t     * @returns {string}\n\t     */\n\t    function getSuffixPattern(contentType) {\n\t      var suffix = contentType.replace(/^[a-z]+\\//, '')\n\t      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])'\n\t      return '(?:' + contentType + '|' + suffixPattern + ')'\n\t    } // Insert each content type parser that has its associated language\n\t    // currently loaded.\n\t    var options\n\t    for (var contentType in httpLanguages) {\n\t      if (httpLanguages[contentType]) {\n\t        options = options || {}\n\t        var pattern = suffixTypes[contentType]\n\t          ? getSuffixPattern(contentType)\n\t          : contentType\n\t        options[contentType.replace(/\\//g, '-')] = {\n\t          pattern: RegExp(\n\t            '(' +\n\t              /content-type:\\s*/.source +\n\t              pattern +\n\t              /(?:(?:\\r\\n?|\\n)[\\w-].*)*(?:\\r(?:\\n|(?!\\n))|\\n)/.source +\n\t              ')' + // This is a little interesting:\n\t              // The HTTP format spec required 1 empty line before the body to make everything unambiguous.\n\t              // However, when writing code by hand (e.g. to display on a website) people can forget about this,\n\t              // so we want to be liberal here. We will allow the empty line to be omitted if the first line of\n\t              // the body does not start with a [\\w-] character (as headers do).\n\t              /[^ \\t\\w-][\\s\\S]*/.source,\n\t            'i'\n\t          ),\n\t          lookbehind: true,\n\t          inside: httpLanguages[contentType]\n\t        }\n\t      }\n\t    }\n\t    if (options) {\n\t      Prism.languages.insertBefore('http', 'header', options)\n\t    }\n\t  })(Prism)\n\t}\n\treturn http_1;\n}\n\nexport { requireHttp as __require };",
      "start": 1702937444929,
      "end": 1702937444929,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937444929,
      "end": 1702937444929,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444929,
      "end": 1702937444929,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444929,
      "end": 1702937444929,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444929,
      "end": 1702937444929,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444929,
      "end": 1702937444929,
      "order": "normal"
    }
  ]
}
