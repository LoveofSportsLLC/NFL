{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/markup-templating.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n",
      "start": 1702937444962,
      "end": 1702937444984,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444984,
      "end": 1702937444984,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444984,
      "end": 1702937444984,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444984,
      "end": 1702937444984,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444984,
      "end": 1702937444984,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444984,
      "end": 1702937444984,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444984,
      "end": 1702937444984,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444984,
      "end": 1702937444984,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444984,
      "end": 1702937444984,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444984,
      "end": 1702937444984,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444984,
      "end": 1702937444984,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar markupTemplating_1;\nvar hasRequiredMarkupTemplating;\n\nfunction requireMarkupTemplating () {\n\tif (hasRequiredMarkupTemplating) return markupTemplating_1;\n\thasRequiredMarkupTemplating = 1;\n\t'use strict'\n\n\tmarkupTemplating_1 = markupTemplating\n\tmarkupTemplating.displayName = 'markupTemplating'\n\tmarkupTemplating.aliases = []\n\tfunction markupTemplating(Prism) {\n\t  ;(function (Prism) {\n\t    /**\n\t     * Returns the placeholder for the given language id and index.\n\t     *\n\t     * @param {string} language\n\t     * @param {string|number} index\n\t     * @returns {string}\n\t     */\n\t    function getPlaceholder(language, index) {\n\t      return '___' + language.toUpperCase() + index + '___'\n\t    }\n\t    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n\t      buildPlaceholders: {\n\t        /**\n\t         * Tokenize all inline templating expressions matching `placeholderPattern`.\n\t         *\n\t         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n\t         * `true` will be replaced.\n\t         *\n\t         * @param {object} env The environment of the `before-tokenize` hook.\n\t         * @param {string} language The language id.\n\t         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n\t         * @param {(match: string) => boolean} [replaceFilter]\n\t         */\n\t        value: function (env, language, placeholderPattern, replaceFilter) {\n\t          if (env.language !== language) {\n\t            return\n\t          }\n\t          var tokenStack = (env.tokenStack = [])\n\t          env.code = env.code.replace(placeholderPattern, function (match) {\n\t            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n\t              return match\n\t            }\n\t            var i = tokenStack.length\n\t            var placeholder // Check for existing strings\n\t            while (\n\t              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n\t              -1\n\t            ) {\n\t              ++i\n\t            } // Create a sparse array\n\t            tokenStack[i] = match\n\t            return placeholder\n\t          }) // Switch the grammar to markup\n\t          env.grammar = Prism.languages.markup\n\t        }\n\t      },\n\t      tokenizePlaceholders: {\n\t        /**\n\t         * Replace placeholders with proper tokens after tokenizing.\n\t         *\n\t         * @param {object} env The environment of the `after-tokenize` hook.\n\t         * @param {string} language The language id.\n\t         */\n\t        value: function (env, language) {\n\t          if (env.language !== language || !env.tokenStack) {\n\t            return\n\t          } // Switch the grammar back\n\t          env.grammar = Prism.languages[language]\n\t          var j = 0\n\t          var keys = Object.keys(env.tokenStack)\n\t          function walkTokens(tokens) {\n\t            for (var i = 0; i < tokens.length; i++) {\n\t              // all placeholders are replaced already\n\t              if (j >= keys.length) {\n\t                break\n\t              }\n\t              var token = tokens[i]\n\t              if (\n\t                typeof token === 'string' ||\n\t                (token.content && typeof token.content === 'string')\n\t              ) {\n\t                var k = keys[j]\n\t                var t = env.tokenStack[k]\n\t                var s = typeof token === 'string' ? token : token.content\n\t                var placeholder = getPlaceholder(language, k)\n\t                var index = s.indexOf(placeholder)\n\t                if (index > -1) {\n\t                  ++j\n\t                  var before = s.substring(0, index)\n\t                  var middle = new Prism.Token(\n\t                    language,\n\t                    Prism.tokenize(t, env.grammar),\n\t                    'language-' + language,\n\t                    t\n\t                  )\n\t                  var after = s.substring(index + placeholder.length)\n\t                  var replacement = []\n\t                  if (before) {\n\t                    replacement.push.apply(replacement, walkTokens([before]))\n\t                  }\n\t                  replacement.push(middle)\n\t                  if (after) {\n\t                    replacement.push.apply(replacement, walkTokens([after]))\n\t                  }\n\t                  if (typeof token === 'string') {\n\t                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n\t                  } else {\n\t                    token.content = replacement\n\t                  }\n\t                }\n\t              } else if (\n\t                token.content\n\t                /* && typeof token.content !== 'string' */\n\t              ) {\n\t                walkTokens(token.content)\n\t              }\n\t            }\n\t            return tokens\n\t          }\n\t          walkTokens(env.tokens)\n\t        }\n\t      }\n\t    })\n\t  })(Prism)\n\t}\n\treturn markupTemplating_1;\n}\n\nexport { requireMarkupTemplating as __require };",
      "start": 1702937444984,
      "end": 1702937444985,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937444985,
      "end": 1702937444985,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444985,
      "end": 1702937444985,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444985,
      "end": 1702937444985,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444985,
      "end": 1702937444985,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444985,
      "end": 1702937444985,
      "order": "normal"
    }
  ]
}
