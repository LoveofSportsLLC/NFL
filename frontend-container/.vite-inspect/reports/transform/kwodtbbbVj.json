{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/react-bootstrap/esm/Navbar.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\nimport SelectableContext from '@restart/ui/SelectableContext';\nimport { useUncontrolled } from 'uncontrollable';\nimport NavbarBrand from './NavbarBrand';\nimport NavbarCollapse from './NavbarCollapse';\nimport NavbarToggle from './NavbarToggle';\nimport NavbarOffcanvas from './NavbarOffcanvas';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport NavbarContext from './NavbarContext';\nimport NavbarText from './NavbarText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Navbar = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    bsPrefix: initialBsPrefix,\n    expand = true,\n    variant = 'light',\n    bg,\n    fixed,\n    sticky,\n    className,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'nav',\n    expanded,\n    onToggle,\n    onSelect,\n    collapseOnSelect = false,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    expanded: 'onToggle'\n  });\n  const bsPrefix = useBootstrapPrefix(initialBsPrefix, 'navbar');\n  const handleCollapse = useCallback((...args) => {\n    onSelect == null ? void 0 : onSelect(...args);\n    if (collapseOnSelect && expanded) {\n      onToggle == null ? void 0 : onToggle(false);\n    }\n  }, [onSelect, collapseOnSelect, expanded, onToggle]);\n\n  // will result in some false positives but that seems better\n  // than false negatives. strict `undefined` check allows explicit\n  // \"nulling\" of the role if the user really doesn't want one\n  if (controlledProps.role === undefined && Component !== 'nav') {\n    controlledProps.role = 'navigation';\n  }\n  let expandClass = `${bsPrefix}-expand`;\n  if (typeof expand === 'string') expandClass = `${expandClass}-${expand}`;\n  const navbarContext = useMemo(() => ({\n    onToggle: () => onToggle == null ? void 0 : onToggle(!expanded),\n    bsPrefix,\n    expanded: !!expanded,\n    expand\n  }), [bsPrefix, expanded, expand, onToggle]);\n  return /*#__PURE__*/_jsx(NavbarContext.Provider, {\n    value: navbarContext,\n    children: /*#__PURE__*/_jsx(SelectableContext.Provider, {\n      value: handleCollapse,\n      children: /*#__PURE__*/_jsx(Component, {\n        ref: ref,\n        ...controlledProps,\n        className: classNames(className, bsPrefix, expand && expandClass, variant && `${bsPrefix}-${variant}`, bg && `bg-${bg}`, sticky && `sticky-${sticky}`, fixed && `fixed-${fixed}`)\n      })\n    })\n  });\n});\nNavbar.displayName = 'Navbar';\nexport default Object.assign(Navbar, {\n  Brand: NavbarBrand,\n  Collapse: NavbarCollapse,\n  Offcanvas: NavbarOffcanvas,\n  Text: NavbarText,\n  Toggle: NavbarToggle\n});",
      "start": 1702937441485,
      "end": 1702937441503,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937441503,
      "end": 1702937441503,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937441503,
      "end": 1702937441503,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937441503,
      "end": 1702937441503,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937441503,
      "end": 1702937441503,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937441503,
      "end": 1702937441503,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937441503,
      "end": 1702937441503,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937441503,
      "end": 1702937441503,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937441503,
      "end": 1702937441503,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937441503,
      "end": 1702937441503,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937441503,
      "end": 1702937441503,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937441503,
      "end": 1702937441503,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937441503,
      "end": 1702937441503,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937441503,
      "end": 1702937441503,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937441503,
      "end": 1702937441503,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937441503,
      "end": 1702937441503,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937441503,
      "end": 1702937441503,
      "order": "normal"
    }
  ]
}
