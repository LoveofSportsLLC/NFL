{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/react-bootstrap/esm/DropdownMenu.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useDropdownMenu } from '@restart/ui/DropdownMenu';\nimport useIsomorphicEffect from '@restart/hooks/useIsomorphicEffect';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport warning from 'warning';\nimport DropdownContext from './DropdownContext';\nimport InputGroupContext from './InputGroupContext';\nimport NavbarContext from './NavbarContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function getDropdownMenuPlacement(alignEnd, dropDirection, isRTL) {\n  const topStart = isRTL ? 'top-end' : 'top-start';\n  const topEnd = isRTL ? 'top-start' : 'top-end';\n  const bottomStart = isRTL ? 'bottom-end' : 'bottom-start';\n  const bottomEnd = isRTL ? 'bottom-start' : 'bottom-end';\n  const leftStart = isRTL ? 'right-start' : 'left-start';\n  const leftEnd = isRTL ? 'right-end' : 'left-end';\n  const rightStart = isRTL ? 'left-start' : 'right-start';\n  const rightEnd = isRTL ? 'left-end' : 'right-end';\n  let placement = alignEnd ? bottomEnd : bottomStart;\n  if (dropDirection === 'up') placement = alignEnd ? topEnd : topStart;else if (dropDirection === 'end') placement = alignEnd ? rightEnd : rightStart;else if (dropDirection === 'start') placement = alignEnd ? leftEnd : leftStart;else if (dropDirection === 'down-centered') placement = 'bottom';else if (dropDirection === 'up-centered') placement = 'top';\n  return placement;\n}\nconst DropdownMenu = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  align,\n  rootCloseEvent,\n  flip = true,\n  show: showProps,\n  renderOnMount,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  popperConfig,\n  variant,\n  ...props\n}, ref) => {\n  let alignEnd = false;\n  const isNavbar = useContext(NavbarContext);\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown-menu');\n  const {\n    align: contextAlign,\n    drop,\n    isRTL\n  } = useContext(DropdownContext);\n  align = align || contextAlign;\n  const isInputGroup = useContext(InputGroupContext);\n  const alignClasses = [];\n  if (align) {\n    if (typeof align === 'object') {\n      const keys = Object.keys(align);\n      process.env.NODE_ENV !== \"production\" ? warning(keys.length === 1, 'There should only be 1 breakpoint when passing an object to `align`') : void 0;\n      if (keys.length) {\n        const brkPoint = keys[0];\n        const direction = align[brkPoint];\n\n        // .dropdown-menu-end is required for responsively aligning\n        // left in addition to align left classes.\n        alignEnd = direction === 'start';\n        alignClasses.push(`${prefix}-${brkPoint}-${direction}`);\n      }\n    } else if (align === 'end') {\n      alignEnd = true;\n    }\n  }\n  const placement = getDropdownMenuPlacement(alignEnd, drop, isRTL);\n  const [menuProps, {\n    hasShown,\n    popper,\n    show,\n    toggle\n  }] = useDropdownMenu({\n    flip,\n    rootCloseEvent,\n    show: showProps,\n    usePopper: !isNavbar && alignClasses.length === 0,\n    offset: [0, 2],\n    popperConfig,\n    placement\n  });\n  menuProps.ref = useMergedRefs(useWrappedRefWithWarning(ref, 'DropdownMenu'), menuProps.ref);\n  useIsomorphicEffect(() => {\n    // Popper's initial position for the menu is incorrect when\n    // renderOnMount=true. Need to call update() to correct it.\n    if (show) popper == null ? void 0 : popper.update();\n  }, [show]);\n  if (!hasShown && !renderOnMount && !isInputGroup) return null;\n\n  // For custom components provide additional, non-DOM, props;\n  if (typeof Component !== 'string') {\n    menuProps.show = show;\n    menuProps.close = () => toggle == null ? void 0 : toggle(false);\n    menuProps.align = align;\n  }\n  let style = props.style;\n  if (popper != null && popper.placement) {\n    // we don't need the default popper style,\n    // menus are display: none when not shown.\n    style = {\n      ...props.style,\n      ...menuProps.style\n    };\n    props['x-placement'] = popper.placement;\n  }\n  return /*#__PURE__*/_jsx(Component, {\n    ...props,\n    ...menuProps,\n    style: style\n    // Bootstrap css requires this data attrib to style responsive menus.\n    ,\n    ...((alignClasses.length || isNavbar) && {\n      'data-bs-popper': 'static'\n    }),\n    className: classNames(className, prefix, show && 'show', alignEnd && `${prefix}-end`, variant && `${prefix}-${variant}`, ...alignClasses)\n  });\n});\nDropdownMenu.displayName = 'DropdownMenu';\nexport default DropdownMenu;",
      "start": 1702937441462,
      "end": 1702937441483,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937441483,
      "end": 1702937441483,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937441483,
      "end": 1702937441483,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937441483,
      "end": 1702937441483,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937441483,
      "end": 1702937441483,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937441483,
      "end": 1702937441483,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "\"use client\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { useContext } from \"react\";\nimport { useDropdownMenu } from \"@restart/ui/DropdownMenu\";\nimport useIsomorphicEffect from \"@restart/hooks/useIsomorphicEffect\";\nimport useMergedRefs from \"@restart/hooks/useMergedRefs\";\nimport warning from \"warning\";\nimport DropdownContext from \"./DropdownContext\";\nimport InputGroupContext from \"./InputGroupContext\";\nimport NavbarContext from \"./NavbarContext\";\nimport { useBootstrapPrefix } from \"./ThemeProvider\";\nimport useWrappedRefWithWarning from \"./useWrappedRefWithWarning\";\nimport { alignPropType } from \"./types\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function getDropdownMenuPlacement(alignEnd, dropDirection, isRTL) {\n  const topStart = isRTL ? \"top-end\" : \"top-start\";\n  const topEnd = isRTL ? \"top-start\" : \"top-end\";\n  const bottomStart = isRTL ? \"bottom-end\" : \"bottom-start\";\n  const bottomEnd = isRTL ? \"bottom-start\" : \"bottom-end\";\n  const leftStart = isRTL ? \"right-start\" : \"left-start\";\n  const leftEnd = isRTL ? \"right-end\" : \"left-end\";\n  const rightStart = isRTL ? \"left-start\" : \"right-start\";\n  const rightEnd = isRTL ? \"left-end\" : \"right-end\";\n  let placement = alignEnd ? bottomEnd : bottomStart;\n  if (dropDirection === \"up\")\n    placement = alignEnd ? topEnd : topStart;\n  else if (dropDirection === \"end\")\n    placement = alignEnd ? rightEnd : rightStart;\n  else if (dropDirection === \"start\")\n    placement = alignEnd ? leftEnd : leftStart;\n  else if (dropDirection === \"down-centered\")\n    placement = \"bottom\";\n  else if (dropDirection === \"up-centered\")\n    placement = \"top\";\n  return placement;\n}\nconst DropdownMenu = /* @__PURE__ */ React.forwardRef(({\n  bsPrefix,\n  className,\n  align,\n  rootCloseEvent,\n  flip = true,\n  show: showProps,\n  renderOnMount,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = \"div\",\n  popperConfig,\n  variant,\n  ...props\n}, ref) => {\n  let alignEnd = false;\n  const isNavbar = useContext(NavbarContext);\n  const prefix = useBootstrapPrefix(bsPrefix, \"dropdown-menu\");\n  const {\n    align: contextAlign,\n    drop,\n    isRTL\n  } = useContext(DropdownContext);\n  align = align || contextAlign;\n  const isInputGroup = useContext(InputGroupContext);\n  const alignClasses = [];\n  if (align) {\n    if (typeof align === \"object\") {\n      const keys = Object.keys(align);\n      false ? warning(keys.length === 1, \"There should only be 1 breakpoint when passing an object to `align`\") : void 0;\n      if (keys.length) {\n        const brkPoint = keys[0];\n        const direction = align[brkPoint];\n        alignEnd = direction === \"start\";\n        alignClasses.push(`${prefix}-${brkPoint}-${direction}`);\n      }\n    } else if (align === \"end\") {\n      alignEnd = true;\n    }\n  }\n  const placement = getDropdownMenuPlacement(alignEnd, drop, isRTL);\n  const [menuProps, {\n    hasShown,\n    popper,\n    show,\n    toggle\n  }] = useDropdownMenu({\n    flip,\n    rootCloseEvent,\n    show: showProps,\n    usePopper: !isNavbar && alignClasses.length === 0,\n    offset: [0, 2],\n    popperConfig,\n    placement\n  });\n  menuProps.ref = useMergedRefs(useWrappedRefWithWarning(ref, \"DropdownMenu\"), menuProps.ref);\n  useIsomorphicEffect(() => {\n    if (show)\n      popper == null ? void 0 : popper.update();\n  }, [show]);\n  if (!hasShown && !renderOnMount && !isInputGroup)\n    return null;\n  if (typeof Component !== \"string\") {\n    menuProps.show = show;\n    menuProps.close = () => toggle == null ? void 0 : toggle(false);\n    menuProps.align = align;\n  }\n  let style = props.style;\n  if (popper != null && popper.placement) {\n    style = {\n      ...props.style,\n      ...menuProps.style\n    };\n    props[\"x-placement\"] = popper.placement;\n  }\n  return /* @__PURE__ */ _jsx(Component, {\n    ...props,\n    ...menuProps,\n    style,\n    ...(alignClasses.length || isNavbar) && {\n      \"data-bs-popper\": \"static\"\n    },\n    className: classNames(className, prefix, show && \"show\", alignEnd && `${prefix}-end`, variant && `${prefix}-${variant}`, ...alignClasses)\n  });\n});\nDropdownMenu.displayName = \"DropdownMenu\";\nexport default DropdownMenu;\n",
      "start": 1702937441483,
      "end": 1702937441495,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1702937441495,
      "end": 1702937441495,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937441495,
      "end": 1702937441495,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937441495,
      "end": 1702937441495,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937441495,
      "end": 1702937441495,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937441495,
      "end": 1702937441496,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937441496,
      "end": 1702937441496,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937441496,
      "end": 1702937441496,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937441496,
      "end": 1702937441496,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937441496,
      "end": 1702937441496,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937441496,
      "end": 1702937441496,
      "order": "normal"
    }
  ]
}
