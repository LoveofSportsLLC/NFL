{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/nim.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = nim\nnim.displayName = 'nim'\nnim.aliases = []\nfunction nim(Prism) {\n  Prism.languages.nim = {\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    string: {\n      // Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)\n      pattern:\n        /(?:\\b(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")/,\n      greedy: true\n    },\n    char: {\n      // Character literals are handled specifically to prevent issues with numeric type suffixes\n      pattern: /'(?:\\\\(?:\\d+|x[\\da-fA-F]{0,2}|.)|[^'])'/,\n      greedy: true\n    },\n    function: {\n      pattern:\n        /(?:(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        operator: /\\*$/\n      }\n    },\n    // We don't want to highlight operators (and anything really) inside backticks\n    identifier: {\n      pattern: /`[^`\\r\\n]+`/,\n      greedy: true,\n      inside: {\n        punctuation: /`/\n      }\n    },\n    // The negative look ahead prevents wrong highlighting of the .. operator\n    number:\n      /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,\n    keyword:\n      /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,\n    operator: {\n      // Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)\n      // but allow the slice operator .. to take precedence over them\n      // One can define his own operators in Nim so all combination of operators might be an operator.\n      pattern:\n        /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|in|is|isnot|mod|not|notin|of|or|shl|shr|xor)\\b)/m,\n      lookbehind: true\n    },\n    punctuation: /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/\n  }\n}\n",
      "start": 1702937444978,
      "end": 1702937445012,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445012,
      "end": 1702937445012,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445012,
      "end": 1702937445012,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445012,
      "end": 1702937445012,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445012,
      "end": 1702937445012,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445012,
      "end": 1702937445012,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445012,
      "end": 1702937445012,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445012,
      "end": 1702937445012,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445012,
      "end": 1702937445012,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445012,
      "end": 1702937445012,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445012,
      "end": 1702937445012,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar nim_1;\nvar hasRequiredNim;\n\nfunction requireNim () {\n\tif (hasRequiredNim) return nim_1;\n\thasRequiredNim = 1;\n\t'use strict'\n\n\tnim_1 = nim\n\tnim.displayName = 'nim'\n\tnim.aliases = []\n\tfunction nim(Prism) {\n\t  Prism.languages.nim = {\n\t    comment: {\n\t      pattern: /#.*/,\n\t      greedy: true\n\t    },\n\t    string: {\n\t      // Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)\n\t      pattern:\n\t        /(?:\\b(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")/,\n\t      greedy: true\n\t    },\n\t    char: {\n\t      // Character literals are handled specifically to prevent issues with numeric type suffixes\n\t      pattern: /'(?:\\\\(?:\\d+|x[\\da-fA-F]{0,2}|.)|[^'])'/,\n\t      greedy: true\n\t    },\n\t    function: {\n\t      pattern:\n\t        /(?:(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,\n\t      greedy: true,\n\t      inside: {\n\t        operator: /\\*$/\n\t      }\n\t    },\n\t    // We don't want to highlight operators (and anything really) inside backticks\n\t    identifier: {\n\t      pattern: /`[^`\\r\\n]+`/,\n\t      greedy: true,\n\t      inside: {\n\t        punctuation: /`/\n\t      }\n\t    },\n\t    // The negative look ahead prevents wrong highlighting of the .. operator\n\t    number:\n\t      /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,\n\t    keyword:\n\t      /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,\n\t    operator: {\n\t      // Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)\n\t      // but allow the slice operator .. to take precedence over them\n\t      // One can define his own operators in Nim so all combination of operators might be an operator.\n\t      pattern:\n\t        /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|in|is|isnot|mod|not|notin|of|or|shl|shr|xor)\\b)/m,\n\t      lookbehind: true\n\t    },\n\t    punctuation: /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/\n\t  }\n\t}\n\treturn nim_1;\n}\n\nexport { requireNim as __require };",
      "start": 1702937445012,
      "end": 1702937445012,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;CAAA,YAAY;AACZ;AACA,MAAc,GAAG,GAAG;CACpB,GAAG,CAAC,WAAW,GAAG,KAAK;CACvB,GAAG,CAAC,OAAO,GAAG,EAAE;CAChB,SAAS,GAAG,CAAC,KAAK,EAAE;CACpB,EAAE,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG;CACxB,IAAI,OAAO,EAAE;CACb,MAAM,OAAO,EAAE,KAAK;CACpB,MAAM,MAAM,EAAE,IAAI;CAClB,KAAK;CACL,IAAI,MAAM,EAAE;CACZ;CACA,MAAM,OAAO;CACb,QAAQ,gGAAgG;CACxG,MAAM,MAAM,EAAE,IAAI;CAClB,KAAK;CACL,IAAI,IAAI,EAAE;CACV;CACA,MAAM,OAAO,EAAE,yCAAyC;CACxD,MAAM,MAAM,EAAE,IAAI;CAClB,KAAK;CACL,IAAI,QAAQ,EAAE;CACd,MAAM,OAAO;CACb,QAAQ,mFAAmF;CAC3F,MAAM,MAAM,EAAE,IAAI;CAClB,MAAM,MAAM,EAAE;CACd,QAAQ,QAAQ,EAAE,KAAK;CACvB,OAAO;CACP,KAAK;CACL;CACA,IAAI,UAAU,EAAE;CAChB,MAAM,OAAO,EAAE,aAAa;CAC5B,MAAM,MAAM,EAAE,IAAI;CAClB,MAAM,MAAM,EAAE;CACd,QAAQ,WAAW,EAAE,GAAG;CACxB,OAAO;CACP,KAAK;CACL;CACA,IAAI,MAAM;CACV,MAAM,gGAAgG;CACtG,IAAI,OAAO;CACX,MAAM,6VAA6V;CACnW,IAAI,QAAQ,EAAE;CACd;CACA;CACA;CACA,MAAM,OAAO;CACb,QAAQ,iJAAiJ;CACzJ,MAAM,UAAU,EAAE,IAAI;CACtB,KAAK;CACL,IAAI,WAAW,EAAE,iCAAiC;CAClD,GAAG;CACH"
      }
    },
    {
      "name": "inject",
      "start": 1702937445012,
      "end": 1702937445012,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445013,
      "end": 1702937445013,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445013,
      "end": 1702937445013,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445013,
      "end": 1702937445013,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445013,
      "end": 1702937445013,
      "order": "normal"
    }
  ]
}
