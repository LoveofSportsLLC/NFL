{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/.vite/deps/react-dom_client.js?v=733ce8d4",
  "transforms": [
    {
      "name": "vite:optimized-deps",
      "result": "\"use strict\";\n(() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n    // If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n    mod\n  ));\n\n  // node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\n  var require_base64_js = __commonJS({\n    \"node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\"(exports) {\n      \"use strict\";\n      init_dist();\n      exports.byteLength = byteLength;\n      exports.toByteArray = toByteArray;\n      exports.fromByteArray = fromByteArray;\n      var lookup = [];\n      var revLookup = [];\n      var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n      var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n      for (i = 0, len = code.length; i < len; ++i) {\n        lookup[i] = code[i];\n        revLookup[code.charCodeAt(i)] = i;\n      }\n      var i;\n      var len;\n      revLookup[\"-\".charCodeAt(0)] = 62;\n      revLookup[\"_\".charCodeAt(0)] = 63;\n      function getLens(b64) {\n        var len2 = b64.length;\n        if (len2 % 4 > 0) {\n          throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        }\n        var validLen = b64.indexOf(\"=\");\n        if (validLen === -1)\n          validLen = len2;\n        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n        return [validLen, placeHoldersLen];\n      }\n      function byteLength(b64) {\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n      function _byteLength(b64, validLen, placeHoldersLen) {\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n      function toByteArray(b64) {\n        var tmp;\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n        var curByte = 0;\n        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n        var i2;\n        for (i2 = 0; i2 < len2; i2 += 4) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n          arr[curByte++] = tmp >> 16 & 255;\n          arr[curByte++] = tmp >> 8 & 255;\n          arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 2) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n          arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 1) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n          arr[curByte++] = tmp >> 8 & 255;\n          arr[curByte++] = tmp & 255;\n        }\n        return arr;\n      }\n      function tripletToBase64(num) {\n        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n      }\n      function encodeChunk(uint8, start, end) {\n        var tmp;\n        var output = [];\n        for (var i2 = start; i2 < end; i2 += 3) {\n          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n          output.push(tripletToBase64(tmp));\n        }\n        return output.join(\"\");\n      }\n      function fromByteArray(uint8) {\n        var tmp;\n        var len2 = uint8.length;\n        var extraBytes = len2 % 3;\n        var parts = [];\n        var maxChunkLength = 16383;\n        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\n          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n        }\n        if (extraBytes === 1) {\n          tmp = uint8[len2 - 1];\n          parts.push(\n            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\"\n          );\n        } else if (extraBytes === 2) {\n          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n          parts.push(\n            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\"\n          );\n        }\n        return parts.join(\"\");\n      }\n    }\n  });\n\n  // node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\n  var require_ieee754 = __commonJS({\n    \"node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\"(exports) {\n      init_dist();\n      exports.read = function(buffer, offset, isLE, mLen, nBytes) {\n        var e, m;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var nBits = -7;\n        var i = isLE ? nBytes - 1 : 0;\n        var d = isLE ? -1 : 1;\n        var s2 = buffer[offset + i];\n        i += d;\n        e = s2 & (1 << -nBits) - 1;\n        s2 >>= -nBits;\n        nBits += eLen;\n        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {\n        }\n        m = e & (1 << -nBits) - 1;\n        e >>= -nBits;\n        nBits += mLen;\n        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {\n        }\n        if (e === 0) {\n          e = 1 - eBias;\n        } else if (e === eMax) {\n          return m ? NaN : (s2 ? -1 : 1) * Infinity;\n        } else {\n          m = m + Math.pow(2, mLen);\n          e = e - eBias;\n        }\n        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);\n      };\n      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n        var e, m, c;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n        var i = isLE ? 0 : nBytes - 1;\n        var d = isLE ? 1 : -1;\n        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n        value = Math.abs(value);\n        if (isNaN(value) || value === Infinity) {\n          m = isNaN(value) ? 1 : 0;\n          e = eMax;\n        } else {\n          e = Math.floor(Math.log(value) / Math.LN2);\n          if (value * (c = Math.pow(2, -e)) < 1) {\n            e--;\n            c *= 2;\n          }\n          if (e + eBias >= 1) {\n            value += rt / c;\n          } else {\n            value += rt * Math.pow(2, 1 - eBias);\n          }\n          if (value * c >= 2) {\n            e++;\n            c /= 2;\n          }\n          if (e + eBias >= eMax) {\n            m = 0;\n            e = eMax;\n          } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen);\n            e = e + eBias;\n          } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n            e = 0;\n          }\n        }\n        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {\n        }\n        e = e << mLen | m;\n        eLen += mLen;\n        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {\n        }\n        buffer[offset + i - d] |= s2 * 128;\n      };\n    }\n  });\n\n  // node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js\n  var require_buffer = __commonJS({\n    \"node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js\"(exports) {\n      \"use strict\";\n      init_dist();\n      var base64 = require_base64_js();\n      var ieee754 = require_ieee754();\n      var customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") : null;\n      exports.Buffer = Buffer2;\n      exports.SlowBuffer = SlowBuffer;\n      exports.INSPECT_MAX_BYTES = 50;\n      var K_MAX_LENGTH = 2147483647;\n      exports.kMaxLength = K_MAX_LENGTH;\n      var { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;\n      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();\n      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n        console.error(\n          \"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"\n        );\n      }\n      function typedArraySupport() {\n        try {\n          const arr = new GlobalUint8Array(1);\n          const proto = { foo: function() {\n            return 42;\n          } };\n          Object.setPrototypeOf(proto, GlobalUint8Array.prototype);\n          Object.setPrototypeOf(arr, proto);\n          return arr.foo() === 42;\n        } catch (e) {\n          return false;\n        }\n      }\n      Object.defineProperty(Buffer2.prototype, \"parent\", {\n        enumerable: true,\n        get: function() {\n          if (!Buffer2.isBuffer(this))\n            return void 0;\n          return this.buffer;\n        }\n      });\n      Object.defineProperty(Buffer2.prototype, \"offset\", {\n        enumerable: true,\n        get: function() {\n          if (!Buffer2.isBuffer(this))\n            return void 0;\n          return this.byteOffset;\n        }\n      });\n      function createBuffer(length) {\n        if (length > K_MAX_LENGTH) {\n          throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n        }\n        const buf = new GlobalUint8Array(length);\n        Object.setPrototypeOf(buf, Buffer2.prototype);\n        return buf;\n      }\n      function Buffer2(arg, encodingOrOffset, length) {\n        if (typeof arg === \"number\") {\n          if (typeof encodingOrOffset === \"string\") {\n            throw new TypeError(\n              'The \"string\" argument must be of type string. Received type number'\n            );\n          }\n          return allocUnsafe(arg);\n        }\n        return from(arg, encodingOrOffset, length);\n      }\n      Buffer2.poolSize = 8192;\n      function from(value, encodingOrOffset, length) {\n        if (typeof value === \"string\") {\n          return fromString(value, encodingOrOffset);\n        }\n        if (GlobalArrayBuffer.isView(value)) {\n          return fromArrayView(value);\n        }\n        if (value == null) {\n          throw new TypeError(\n            \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n          );\n        }\n        if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n        if (typeof GlobalSharedArrayBuffer !== \"undefined\" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n        if (typeof value === \"number\") {\n          throw new TypeError(\n            'The \"value\" argument must not be of type number. Received type number'\n          );\n        }\n        const valueOf = value.valueOf && value.valueOf();\n        if (valueOf != null && valueOf !== value) {\n          return Buffer2.from(valueOf, encodingOrOffset, length);\n        }\n        const b = fromObject(value);\n        if (b)\n          return b;\n        if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n          return Buffer2.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n        }\n        throw new TypeError(\n          \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n        );\n      }\n      Buffer2.from = function(value, encodingOrOffset, length) {\n        return from(value, encodingOrOffset, length);\n      };\n      Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);\n      Object.setPrototypeOf(Buffer2, GlobalUint8Array);\n      function assertSize(size) {\n        if (typeof size !== \"number\") {\n          throw new TypeError('\"size\" argument must be of type number');\n        } else if (size < 0) {\n          throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n        }\n      }\n      function alloc(size, fill, encoding) {\n        assertSize(size);\n        if (size <= 0) {\n          return createBuffer(size);\n        }\n        if (fill !== void 0) {\n          return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n        }\n        return createBuffer(size);\n      }\n      Buffer2.alloc = function(size, fill, encoding) {\n        return alloc(size, fill, encoding);\n      };\n      function allocUnsafe(size) {\n        assertSize(size);\n        return createBuffer(size < 0 ? 0 : checked(size) | 0);\n      }\n      Buffer2.allocUnsafe = function(size) {\n        return allocUnsafe(size);\n      };\n      Buffer2.allocUnsafeSlow = function(size) {\n        return allocUnsafe(size);\n      };\n      function fromString(string, encoding) {\n        if (typeof encoding !== \"string\" || encoding === \"\") {\n          encoding = \"utf8\";\n        }\n        if (!Buffer2.isEncoding(encoding)) {\n          throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        const length = byteLength(string, encoding) | 0;\n        let buf = createBuffer(length);\n        const actual = buf.write(string, encoding);\n        if (actual !== length) {\n          buf = buf.slice(0, actual);\n        }\n        return buf;\n      }\n      function fromArrayLike(array) {\n        const length = array.length < 0 ? 0 : checked(array.length) | 0;\n        const buf = createBuffer(length);\n        for (let i = 0; i < length; i += 1) {\n          buf[i] = array[i] & 255;\n        }\n        return buf;\n      }\n      function fromArrayView(arrayView) {\n        if (isInstance(arrayView, GlobalUint8Array)) {\n          const copy = new GlobalUint8Array(arrayView);\n          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n        }\n        return fromArrayLike(arrayView);\n      }\n      function fromArrayBuffer(array, byteOffset, length) {\n        if (byteOffset < 0 || array.byteLength < byteOffset) {\n          throw new RangeError('\"offset\" is outside of buffer bounds');\n        }\n        if (array.byteLength < byteOffset + (length || 0)) {\n          throw new RangeError('\"length\" is outside of buffer bounds');\n        }\n        let buf;\n        if (byteOffset === void 0 && length === void 0) {\n          buf = new GlobalUint8Array(array);\n        } else if (length === void 0) {\n          buf = new GlobalUint8Array(array, byteOffset);\n        } else {\n          buf = new GlobalUint8Array(array, byteOffset, length);\n        }\n        Object.setPrototypeOf(buf, Buffer2.prototype);\n        return buf;\n      }\n      function fromObject(obj) {\n        if (Buffer2.isBuffer(obj)) {\n          const len = checked(obj.length) | 0;\n          const buf = createBuffer(len);\n          if (buf.length === 0) {\n            return buf;\n          }\n          obj.copy(buf, 0, 0, len);\n          return buf;\n        }\n        if (obj.length !== void 0) {\n          if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n            return createBuffer(0);\n          }\n          return fromArrayLike(obj);\n        }\n        if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n          return fromArrayLike(obj.data);\n        }\n      }\n      function checked(length) {\n        if (length >= K_MAX_LENGTH) {\n          throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n        }\n        return length | 0;\n      }\n      function SlowBuffer(length) {\n        if (+length != length) {\n          length = 0;\n        }\n        return Buffer2.alloc(+length);\n      }\n      Buffer2.isBuffer = function isBuffer(b) {\n        return b != null && b._isBuffer === true && b !== Buffer2.prototype;\n      };\n      Buffer2.compare = function compare(a, b) {\n        if (isInstance(a, GlobalUint8Array))\n          a = Buffer2.from(a, a.offset, a.byteLength);\n        if (isInstance(b, GlobalUint8Array))\n          b = Buffer2.from(b, b.offset, b.byteLength);\n        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {\n          throw new TypeError(\n            'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n          );\n        }\n        if (a === b)\n          return 0;\n        let x = a.length;\n        let y = b.length;\n        for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n          if (a[i] !== b[i]) {\n            x = a[i];\n            y = b[i];\n            break;\n          }\n        }\n        if (x < y)\n          return -1;\n        if (y < x)\n          return 1;\n        return 0;\n      };\n      Buffer2.isEncoding = function isEncoding(encoding) {\n        switch (String(encoding).toLowerCase()) {\n          case \"hex\":\n          case \"utf8\":\n          case \"utf-8\":\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n          case \"base64\":\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return true;\n          default:\n            return false;\n        }\n      };\n      Buffer2.concat = function concat(list, length) {\n        if (!Array.isArray(list)) {\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        }\n        if (list.length === 0) {\n          return Buffer2.alloc(0);\n        }\n        let i;\n        if (length === void 0) {\n          length = 0;\n          for (i = 0; i < list.length; ++i) {\n            length += list[i].length;\n          }\n        }\n        const buffer = Buffer2.allocUnsafe(length);\n        let pos = 0;\n        for (i = 0; i < list.length; ++i) {\n          let buf = list[i];\n          if (isInstance(buf, GlobalUint8Array)) {\n            if (pos + buf.length > buffer.length) {\n              if (!Buffer2.isBuffer(buf))\n                buf = Buffer2.from(buf);\n              buf.copy(buffer, pos);\n            } else {\n              GlobalUint8Array.prototype.set.call(\n                buffer,\n                buf,\n                pos\n              );\n            }\n          } else if (!Buffer2.isBuffer(buf)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers');\n          } else {\n            buf.copy(buffer, pos);\n          }\n          pos += buf.length;\n        }\n        return buffer;\n      };\n      function byteLength(string, encoding) {\n        if (Buffer2.isBuffer(string)) {\n          return string.length;\n        }\n        if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {\n          return string.byteLength;\n        }\n        if (typeof string !== \"string\") {\n          throw new TypeError(\n            'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string\n          );\n        }\n        const len = string.length;\n        const mustMatch = arguments.length > 2 && arguments[2] === true;\n        if (!mustMatch && len === 0)\n          return 0;\n        let loweredCase = false;\n        for (; ; ) {\n          switch (encoding) {\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n              return len;\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8ToBytes(string).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return len * 2;\n            case \"hex\":\n              return len >>> 1;\n            case \"base64\":\n              return base64ToBytes(string).length;\n            default:\n              if (loweredCase) {\n                return mustMatch ? -1 : utf8ToBytes(string).length;\n              }\n              encoding = (\"\" + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n      Buffer2.byteLength = byteLength;\n      function slowToString(encoding, start, end) {\n        let loweredCase = false;\n        if (start === void 0 || start < 0) {\n          start = 0;\n        }\n        if (start > this.length) {\n          return \"\";\n        }\n        if (end === void 0 || end > this.length) {\n          end = this.length;\n        }\n        if (end <= 0) {\n          return \"\";\n        }\n        end >>>= 0;\n        start >>>= 0;\n        if (end <= start) {\n          return \"\";\n        }\n        if (!encoding)\n          encoding = \"utf8\";\n        while (true) {\n          switch (encoding) {\n            case \"hex\":\n              return hexSlice(this, start, end);\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8Slice(this, start, end);\n            case \"ascii\":\n              return asciiSlice(this, start, end);\n            case \"latin1\":\n            case \"binary\":\n              return latin1Slice(this, start, end);\n            case \"base64\":\n              return base64Slice(this, start, end);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return utf16leSlice(this, start, end);\n            default:\n              if (loweredCase)\n                throw new TypeError(\"Unknown encoding: \" + encoding);\n              encoding = (encoding + \"\").toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n      Buffer2.prototype._isBuffer = true;\n      function swap(b, n, m) {\n        const i = b[n];\n        b[n] = b[m];\n        b[m] = i;\n      }\n      Buffer2.prototype.swap16 = function swap16() {\n        const len = this.length;\n        if (len % 2 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n        }\n        for (let i = 0; i < len; i += 2) {\n          swap(this, i, i + 1);\n        }\n        return this;\n      };\n      Buffer2.prototype.swap32 = function swap32() {\n        const len = this.length;\n        if (len % 4 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n        }\n        for (let i = 0; i < len; i += 4) {\n          swap(this, i, i + 3);\n          swap(this, i + 1, i + 2);\n        }\n        return this;\n      };\n      Buffer2.prototype.swap64 = function swap64() {\n        const len = this.length;\n        if (len % 8 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n        }\n        for (let i = 0; i < len; i += 8) {\n          swap(this, i, i + 7);\n          swap(this, i + 1, i + 6);\n          swap(this, i + 2, i + 5);\n          swap(this, i + 3, i + 4);\n        }\n        return this;\n      };\n      Buffer2.prototype.toString = function toString() {\n        const length = this.length;\n        if (length === 0)\n          return \"\";\n        if (arguments.length === 0)\n          return utf8Slice(this, 0, length);\n        return slowToString.apply(this, arguments);\n      };\n      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;\n      Buffer2.prototype.equals = function equals(b) {\n        if (!Buffer2.isBuffer(b))\n          throw new TypeError(\"Argument must be a Buffer\");\n        if (this === b)\n          return true;\n        return Buffer2.compare(this, b) === 0;\n      };\n      Buffer2.prototype.inspect = function inspect() {\n        let str = \"\";\n        const max = exports.INSPECT_MAX_BYTES;\n        str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n        if (this.length > max)\n          str += \" ... \";\n        return \"<Buffer \" + str + \">\";\n      };\n      if (customInspectSymbol) {\n        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;\n      }\n      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n        if (isInstance(target, GlobalUint8Array)) {\n          target = Buffer2.from(target, target.offset, target.byteLength);\n        }\n        if (!Buffer2.isBuffer(target)) {\n          throw new TypeError(\n            'The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target\n          );\n        }\n        if (start === void 0) {\n          start = 0;\n        }\n        if (end === void 0) {\n          end = target ? target.length : 0;\n        }\n        if (thisStart === void 0) {\n          thisStart = 0;\n        }\n        if (thisEnd === void 0) {\n          thisEnd = this.length;\n        }\n        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n          throw new RangeError(\"out of range index\");\n        }\n        if (thisStart >= thisEnd && start >= end) {\n          return 0;\n        }\n        if (thisStart >= thisEnd) {\n          return -1;\n        }\n        if (start >= end) {\n          return 1;\n        }\n        start >>>= 0;\n        end >>>= 0;\n        thisStart >>>= 0;\n        thisEnd >>>= 0;\n        if (this === target)\n          return 0;\n        let x = thisEnd - thisStart;\n        let y = end - start;\n        const len = Math.min(x, y);\n        const thisCopy = this.slice(thisStart, thisEnd);\n        const targetCopy = target.slice(start, end);\n        for (let i = 0; i < len; ++i) {\n          if (thisCopy[i] !== targetCopy[i]) {\n            x = thisCopy[i];\n            y = targetCopy[i];\n            break;\n          }\n        }\n        if (x < y)\n          return -1;\n        if (y < x)\n          return 1;\n        return 0;\n      };\n      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n        if (buffer.length === 0)\n          return -1;\n        if (typeof byteOffset === \"string\") {\n          encoding = byteOffset;\n          byteOffset = 0;\n        } else if (byteOffset > 2147483647) {\n          byteOffset = 2147483647;\n        } else if (byteOffset < -2147483648) {\n          byteOffset = -2147483648;\n        }\n        byteOffset = +byteOffset;\n        if (numberIsNaN(byteOffset)) {\n          byteOffset = dir ? 0 : buffer.length - 1;\n        }\n        if (byteOffset < 0)\n          byteOffset = buffer.length + byteOffset;\n        if (byteOffset >= buffer.length) {\n          if (dir)\n            return -1;\n          else\n            byteOffset = buffer.length - 1;\n        } else if (byteOffset < 0) {\n          if (dir)\n            byteOffset = 0;\n          else\n            return -1;\n        }\n        if (typeof val === \"string\") {\n          val = Buffer2.from(val, encoding);\n        }\n        if (Buffer2.isBuffer(val)) {\n          if (val.length === 0) {\n            return -1;\n          }\n          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n        } else if (typeof val === \"number\") {\n          val = val & 255;\n          if (typeof GlobalUint8Array.prototype.indexOf === \"function\") {\n            if (dir) {\n              return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n            } else {\n              return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n            }\n          }\n          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n        }\n        throw new TypeError(\"val must be string, number or Buffer\");\n      }\n      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n        let indexSize = 1;\n        let arrLength = arr.length;\n        let valLength = val.length;\n        if (encoding !== void 0) {\n          encoding = String(encoding).toLowerCase();\n          if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n            if (arr.length < 2 || val.length < 2) {\n              return -1;\n            }\n            indexSize = 2;\n            arrLength /= 2;\n            valLength /= 2;\n            byteOffset /= 2;\n          }\n        }\n        function read(buf, i2) {\n          if (indexSize === 1) {\n            return buf[i2];\n          } else {\n            return buf.readUInt16BE(i2 * indexSize);\n          }\n        }\n        let i;\n        if (dir) {\n          let foundIndex = -1;\n          for (i = byteOffset; i < arrLength; i++) {\n            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n              if (foundIndex === -1)\n                foundIndex = i;\n              if (i - foundIndex + 1 === valLength)\n                return foundIndex * indexSize;\n            } else {\n              if (foundIndex !== -1)\n                i -= i - foundIndex;\n              foundIndex = -1;\n            }\n          }\n        } else {\n          if (byteOffset + valLength > arrLength)\n            byteOffset = arrLength - valLength;\n          for (i = byteOffset; i >= 0; i--) {\n            let found = true;\n            for (let j = 0; j < valLength; j++) {\n              if (read(arr, i + j) !== read(val, j)) {\n                found = false;\n                break;\n              }\n            }\n            if (found)\n              return i;\n          }\n        }\n        return -1;\n      }\n      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {\n        return this.indexOf(val, byteOffset, encoding) !== -1;\n      };\n      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n      };\n      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n      };\n      function hexWrite(buf, string, offset, length) {\n        offset = Number(offset) || 0;\n        const remaining = buf.length - offset;\n        if (!length) {\n          length = remaining;\n        } else {\n          length = Number(length);\n          if (length > remaining) {\n            length = remaining;\n          }\n        }\n        const strLen = string.length;\n        if (length > strLen / 2) {\n          length = strLen / 2;\n        }\n        let i;\n        for (i = 0; i < length; ++i) {\n          const parsed = parseInt(string.substr(i * 2, 2), 16);\n          if (numberIsNaN(parsed))\n            return i;\n          buf[offset + i] = parsed;\n        }\n        return i;\n      }\n      function utf8Write(buf, string, offset, length) {\n        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n      }\n      function asciiWrite(buf, string, offset, length) {\n        return blitBuffer(asciiToBytes(string), buf, offset, length);\n      }\n      function base64Write(buf, string, offset, length) {\n        return blitBuffer(base64ToBytes(string), buf, offset, length);\n      }\n      function ucs2Write(buf, string, offset, length) {\n        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n      }\n      Buffer2.prototype.write = function write(string, offset, length, encoding) {\n        if (offset === void 0) {\n          encoding = \"utf8\";\n          length = this.length;\n          offset = 0;\n        } else if (length === void 0 && typeof offset === \"string\") {\n          encoding = offset;\n          length = this.length;\n          offset = 0;\n        } else if (isFinite(offset)) {\n          offset = offset >>> 0;\n          if (isFinite(length)) {\n            length = length >>> 0;\n            if (encoding === void 0)\n              encoding = \"utf8\";\n          } else {\n            encoding = length;\n            length = void 0;\n          }\n        } else {\n          throw new Error(\n            \"Buffer.write(string, encoding, offset[, length]) is no longer supported\"\n          );\n        }\n        const remaining = this.length - offset;\n        if (length === void 0 || length > remaining)\n          length = remaining;\n        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n          throw new RangeError(\"Attempt to write outside buffer bounds\");\n        }\n        if (!encoding)\n          encoding = \"utf8\";\n        let loweredCase = false;\n        for (; ; ) {\n          switch (encoding) {\n            case \"hex\":\n              return hexWrite(this, string, offset, length);\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8Write(this, string, offset, length);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n              return asciiWrite(this, string, offset, length);\n            case \"base64\":\n              return base64Write(this, string, offset, length);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return ucs2Write(this, string, offset, length);\n            default:\n              if (loweredCase)\n                throw new TypeError(\"Unknown encoding: \" + encoding);\n              encoding = (\"\" + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      };\n      Buffer2.prototype.toJSON = function toJSON() {\n        return {\n          type: \"Buffer\",\n          data: Array.prototype.slice.call(this._arr || this, 0)\n        };\n      };\n      function base64Slice(buf, start, end) {\n        if (start === 0 && end === buf.length) {\n          return base64.fromByteArray(buf);\n        } else {\n          return base64.fromByteArray(buf.slice(start, end));\n        }\n      }\n      function utf8Slice(buf, start, end) {\n        end = Math.min(buf.length, end);\n        const res = [];\n        let i = start;\n        while (i < end) {\n          const firstByte = buf[i];\n          let codePoint = null;\n          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n          if (i + bytesPerSequence <= end) {\n            let secondByte, thirdByte, fourthByte, tempCodePoint;\n            switch (bytesPerSequence) {\n              case 1:\n                if (firstByte < 128) {\n                  codePoint = firstByte;\n                }\n                break;\n              case 2:\n                secondByte = buf[i + 1];\n                if ((secondByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n                  if (tempCodePoint > 127) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 3:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 4:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                fourthByte = buf[i + 3];\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n            }\n          }\n          if (codePoint === null) {\n            codePoint = 65533;\n            bytesPerSequence = 1;\n          } else if (codePoint > 65535) {\n            codePoint -= 65536;\n            res.push(codePoint >>> 10 & 1023 | 55296);\n            codePoint = 56320 | codePoint & 1023;\n          }\n          res.push(codePoint);\n          i += bytesPerSequence;\n        }\n        return decodeCodePointsArray(res);\n      }\n      var MAX_ARGUMENTS_LENGTH = 4096;\n      function decodeCodePointsArray(codePoints) {\n        const len = codePoints.length;\n        if (len <= MAX_ARGUMENTS_LENGTH) {\n          return String.fromCharCode.apply(String, codePoints);\n        }\n        let res = \"\";\n        let i = 0;\n        while (i < len) {\n          res += String.fromCharCode.apply(\n            String,\n            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n          );\n        }\n        return res;\n      }\n      function asciiSlice(buf, start, end) {\n        let ret = \"\";\n        end = Math.min(buf.length, end);\n        for (let i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i] & 127);\n        }\n        return ret;\n      }\n      function latin1Slice(buf, start, end) {\n        let ret = \"\";\n        end = Math.min(buf.length, end);\n        for (let i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i]);\n        }\n        return ret;\n      }\n      function hexSlice(buf, start, end) {\n        const len = buf.length;\n        if (!start || start < 0)\n          start = 0;\n        if (!end || end < 0 || end > len)\n          end = len;\n        let out = \"\";\n        for (let i = start; i < end; ++i) {\n          out += hexSliceLookupTable[buf[i]];\n        }\n        return out;\n      }\n      function utf16leSlice(buf, start, end) {\n        const bytes = buf.slice(start, end);\n        let res = \"\";\n        for (let i = 0; i < bytes.length - 1; i += 2) {\n          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n        }\n        return res;\n      }\n      Buffer2.prototype.slice = function slice(start, end) {\n        const len = this.length;\n        start = ~~start;\n        end = end === void 0 ? len : ~~end;\n        if (start < 0) {\n          start += len;\n          if (start < 0)\n            start = 0;\n        } else if (start > len) {\n          start = len;\n        }\n        if (end < 0) {\n          end += len;\n          if (end < 0)\n            end = 0;\n        } else if (end > len) {\n          end = len;\n        }\n        if (end < start)\n          end = start;\n        const newBuf = this.subarray(start, end);\n        Object.setPrototypeOf(newBuf, Buffer2.prototype);\n        return newBuf;\n      };\n      function checkOffset(offset, ext, length) {\n        if (offset % 1 !== 0 || offset < 0)\n          throw new RangeError(\"offset is not uint\");\n        if (offset + ext > length)\n          throw new RangeError(\"Trying to access beyond buffer length\");\n      }\n      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let val = this[offset];\n        let mul = 1;\n        let i = 0;\n        while (++i < byteLength2 && (mul *= 256)) {\n          val += this[offset + i] * mul;\n        }\n        return val;\n      };\n      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          checkOffset(offset, byteLength2, this.length);\n        }\n        let val = this[offset + --byteLength2];\n        let mul = 1;\n        while (byteLength2 > 0 && (mul *= 256)) {\n          val += this[offset + --byteLength2] * mul;\n        }\n        return val;\n      };\n      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 1, this.length);\n        return this[offset];\n      };\n      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        return this[offset] | this[offset + 1] << 8;\n      };\n      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        return this[offset] << 8 | this[offset + 1];\n      };\n      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n      };\n      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n      };\n      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n        return BigInt(lo) + (BigInt(hi) << BigInt(32));\n      });\n      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\n        return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n      });\n      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let val = this[offset];\n        let mul = 1;\n        let i = 0;\n        while (++i < byteLength2 && (mul *= 256)) {\n          val += this[offset + i] * mul;\n        }\n        mul *= 128;\n        if (val >= mul)\n          val -= Math.pow(2, 8 * byteLength2);\n        return val;\n      };\n      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let i = byteLength2;\n        let mul = 1;\n        let val = this[offset + --i];\n        while (i > 0 && (mul *= 256)) {\n          val += this[offset + --i] * mul;\n        }\n        mul *= 128;\n        if (val >= mul)\n          val -= Math.pow(2, 8 * byteLength2);\n        return val;\n      };\n      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 1, this.length);\n        if (!(this[offset] & 128))\n          return this[offset];\n        return (255 - this[offset] + 1) * -1;\n      };\n      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        const val = this[offset] | this[offset + 1] << 8;\n        return val & 32768 ? val | 4294901760 : val;\n      };\n      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        const val = this[offset + 1] | this[offset] << 8;\n        return val & 32768 ? val | 4294901760 : val;\n      };\n      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n      };\n      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n      };\n      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);\n        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n      });\n      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const val = (first << 24) + // Overflow\n        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\n      });\n      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, true, 23, 4);\n      };\n      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, false, 23, 4);\n      };\n      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, true, 52, 8);\n      };\n      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, false, 52, 8);\n      };\n      function checkInt(buf, value, offset, ext, max, min) {\n        if (!Buffer2.isBuffer(buf))\n          throw new TypeError('\"buffer\" argument must be a Buffer instance');\n        if (value > max || value < min)\n          throw new RangeError('\"value\" argument is out of bounds');\n        if (offset + ext > buf.length)\n          throw new RangeError(\"Index out of range\");\n      }\n      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\n        }\n        let mul = 1;\n        let i = 0;\n        this[offset] = value & 255;\n        while (++i < byteLength2 && (mul *= 256)) {\n          this[offset + i] = value / mul & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\n        }\n        let i = byteLength2 - 1;\n        let mul = 1;\n        this[offset + i] = value & 255;\n        while (--i >= 0 && (mul *= 256)) {\n          this[offset + i] = value / mul & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 1, 255, 0);\n        this[offset] = value & 255;\n        return offset + 1;\n      };\n      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 65535, 0);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 65535, 0);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 255;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 4294967295, 0);\n        this[offset + 3] = value >>> 24;\n        this[offset + 2] = value >>> 16;\n        this[offset + 1] = value >>> 8;\n        this[offset] = value & 255;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 4294967295, 0);\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 255;\n        return offset + 4;\n      };\n      function wrtBigUInt64LE(buf, value, offset, min, max) {\n        checkIntBI(value, min, max, buf, offset, 7);\n        let lo = Number(value & BigInt(4294967295));\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        return offset;\n      }\n      function wrtBigUInt64BE(buf, value, offset, min, max) {\n        checkIntBI(value, min, max, buf, offset, 7);\n        let lo = Number(value & BigInt(4294967295));\n        buf[offset + 7] = lo;\n        lo = lo >> 8;\n        buf[offset + 6] = lo;\n        lo = lo >> 8;\n        buf[offset + 5] = lo;\n        lo = lo >> 8;\n        buf[offset + 4] = lo;\n        let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n        buf[offset + 3] = hi;\n        hi = hi >> 8;\n        buf[offset + 2] = hi;\n        hi = hi >> 8;\n        buf[offset + 1] = hi;\n        hi = hi >> 8;\n        buf[offset] = hi;\n        return offset + 8;\n      }\n      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {\n        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n      });\n      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {\n        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n      });\n      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          const limit = Math.pow(2, 8 * byteLength2 - 1);\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n        }\n        let i = 0;\n        let mul = 1;\n        let sub = 0;\n        this[offset] = value & 255;\n        while (++i < byteLength2 && (mul *= 256)) {\n          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          const limit = Math.pow(2, 8 * byteLength2 - 1);\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n        }\n        let i = byteLength2 - 1;\n        let mul = 1;\n        let sub = 0;\n        this[offset + i] = value & 255;\n        while (--i >= 0 && (mul *= 256)) {\n          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 1, 127, -128);\n        if (value < 0)\n          value = 255 + value + 1;\n        this[offset] = value & 255;\n        return offset + 1;\n      };\n      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 32767, -32768);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 32767, -32768);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 255;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 2147483647, -2147483648);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        this[offset + 2] = value >>> 16;\n        this[offset + 3] = value >>> 24;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 2147483647, -2147483648);\n        if (value < 0)\n          value = 4294967295 + value + 1;\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 255;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {\n        return wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n      });\n      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {\n        return wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n      });\n      function checkIEEE754(buf, value, offset, ext, max, min) {\n        if (offset + ext > buf.length)\n          throw new RangeError(\"Index out of range\");\n        if (offset < 0)\n          throw new RangeError(\"Index out of range\");\n      }\n      function writeFloat(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 23, 4);\n        return offset + 4;\n      }\n      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, true, noAssert);\n      };\n      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, false, noAssert);\n      };\n      function writeDouble(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 52, 8);\n        return offset + 8;\n      }\n      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, true, noAssert);\n      };\n      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, false, noAssert);\n      };\n      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {\n        if (!Buffer2.isBuffer(target))\n          throw new TypeError(\"argument should be a Buffer\");\n        if (!start)\n          start = 0;\n        if (!end && end !== 0)\n          end = this.length;\n        if (targetStart >= target.length)\n          targetStart = target.length;\n        if (!targetStart)\n          targetStart = 0;\n        if (end > 0 && end < start)\n          end = start;\n        if (end === start)\n          return 0;\n        if (target.length === 0 || this.length === 0)\n          return 0;\n        if (targetStart < 0) {\n          throw new RangeError(\"targetStart out of bounds\");\n        }\n        if (start < 0 || start >= this.length)\n          throw new RangeError(\"Index out of range\");\n        if (end < 0)\n          throw new RangeError(\"sourceEnd out of bounds\");\n        if (end > this.length)\n          end = this.length;\n        if (target.length - targetStart < end - start) {\n          end = target.length - targetStart + start;\n        }\n        const len = end - start;\n        if (this === target && typeof GlobalUint8Array.prototype.copyWithin === \"function\") {\n          this.copyWithin(targetStart, start, end);\n        } else {\n          GlobalUint8Array.prototype.set.call(\n            target,\n            this.subarray(start, end),\n            targetStart\n          );\n        }\n        return len;\n      };\n      Buffer2.prototype.fill = function fill(val, start, end, encoding) {\n        if (typeof val === \"string\") {\n          if (typeof start === \"string\") {\n            encoding = start;\n            start = 0;\n            end = this.length;\n          } else if (typeof end === \"string\") {\n            encoding = end;\n            end = this.length;\n          }\n          if (encoding !== void 0 && typeof encoding !== \"string\") {\n            throw new TypeError(\"encoding must be a string\");\n          }\n          if (typeof encoding === \"string\" && !Buffer2.isEncoding(encoding)) {\n            throw new TypeError(\"Unknown encoding: \" + encoding);\n          }\n          if (val.length === 1) {\n            const code = val.charCodeAt(0);\n            if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n              val = code;\n            }\n          }\n        } else if (typeof val === \"number\") {\n          val = val & 255;\n        } else if (typeof val === \"boolean\") {\n          val = Number(val);\n        }\n        if (start < 0 || this.length < start || this.length < end) {\n          throw new RangeError(\"Out of range index\");\n        }\n        if (end <= start) {\n          return this;\n        }\n        start = start >>> 0;\n        end = end === void 0 ? this.length : end >>> 0;\n        if (!val)\n          val = 0;\n        let i;\n        if (typeof val === \"number\") {\n          for (i = start; i < end; ++i) {\n            this[i] = val;\n          }\n        } else {\n          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);\n          const len = bytes.length;\n          if (len === 0) {\n            throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n          }\n          for (i = 0; i < end - start; ++i) {\n            this[i + start] = bytes[i % len];\n          }\n        }\n        return this;\n      };\n      var errors = {};\n      function E(sym, getMessage, Base) {\n        errors[sym] = class NodeError extends Base {\n          constructor() {\n            super();\n            Object.defineProperty(this, \"message\", {\n              value: getMessage.apply(this, arguments),\n              writable: true,\n              configurable: true\n            });\n            this.name = `${this.name} [${sym}]`;\n            this.stack;\n            delete this.name;\n          }\n          get code() {\n            return sym;\n          }\n          set code(value) {\n            Object.defineProperty(this, \"code\", {\n              configurable: true,\n              enumerable: true,\n              value,\n              writable: true\n            });\n          }\n          toString() {\n            return `${this.name} [${sym}]: ${this.message}`;\n          }\n        };\n      }\n      E(\n        \"ERR_BUFFER_OUT_OF_BOUNDS\",\n        function(name) {\n          if (name) {\n            return `${name} is outside of buffer bounds`;\n          }\n          return \"Attempt to access memory outside buffer bounds\";\n        },\n        RangeError\n      );\n      E(\n        \"ERR_INVALID_ARG_TYPE\",\n        function(name, actual) {\n          return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`;\n        },\n        TypeError\n      );\n      E(\n        \"ERR_OUT_OF_RANGE\",\n        function(str, range, input) {\n          let msg = `The value of \"${str}\" is out of range.`;\n          let received = input;\n          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n            received = addNumericalSeparator(String(input));\n          } else if (typeof input === \"bigint\") {\n            received = String(input);\n            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n              received = addNumericalSeparator(received);\n            }\n            received += \"n\";\n          }\n          msg += ` It must be ${range}. Received ${received}`;\n          return msg;\n        },\n        RangeError\n      );\n      function addNumericalSeparator(val) {\n        let res = \"\";\n        let i = val.length;\n        const start = val[0] === \"-\" ? 1 : 0;\n        for (; i >= start + 4; i -= 3) {\n          res = `_${val.slice(i - 3, i)}${res}`;\n        }\n        return `${val.slice(0, i)}${res}`;\n      }\n      function checkBounds(buf, offset, byteLength2) {\n        validateNumber(offset, \"offset\");\n        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {\n          boundsError(offset, buf.length - (byteLength2 + 1));\n        }\n      }\n      function checkIntBI(value, min, max, buf, offset, byteLength2) {\n        if (value > max || value < min) {\n          const n = typeof min === \"bigint\" ? \"n\" : \"\";\n          let range;\n          if (byteLength2 > 3) {\n            if (min === 0 || min === BigInt(0)) {\n              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;\n            } else {\n              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;\n            }\n          } else {\n            range = `>= ${min}${n} and <= ${max}${n}`;\n          }\n          throw new errors.ERR_OUT_OF_RANGE(\"value\", range, value);\n        }\n        checkBounds(buf, offset, byteLength2);\n      }\n      function validateNumber(value, name) {\n        if (typeof value !== \"number\") {\n          throw new errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n        }\n      }\n      function boundsError(value, length, type) {\n        if (Math.floor(value) !== value) {\n          validateNumber(value, type);\n          throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \"an integer\", value);\n        }\n        if (length < 0) {\n          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n        }\n        throw new errors.ERR_OUT_OF_RANGE(\n          type || \"offset\",\n          `>= ${type ? 1 : 0} and <= ${length}`,\n          value\n        );\n      }\n      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n      function base64clean(str) {\n        str = str.split(\"=\")[0];\n        str = str.trim().replace(INVALID_BASE64_RE, \"\");\n        if (str.length < 2)\n          return \"\";\n        while (str.length % 4 !== 0) {\n          str = str + \"=\";\n        }\n        return str;\n      }\n      function utf8ToBytes(string, units) {\n        units = units || Infinity;\n        let codePoint;\n        const length = string.length;\n        let leadSurrogate = null;\n        const bytes = [];\n        for (let i = 0; i < length; ++i) {\n          codePoint = string.charCodeAt(i);\n          if (codePoint > 55295 && codePoint < 57344) {\n            if (!leadSurrogate) {\n              if (codePoint > 56319) {\n                if ((units -= 3) > -1)\n                  bytes.push(239, 191, 189);\n                continue;\n              } else if (i + 1 === length) {\n                if ((units -= 3) > -1)\n                  bytes.push(239, 191, 189);\n                continue;\n              }\n              leadSurrogate = codePoint;\n              continue;\n            }\n            if (codePoint < 56320) {\n              if ((units -= 3) > -1)\n                bytes.push(239, 191, 189);\n              leadSurrogate = codePoint;\n              continue;\n            }\n            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n          } else if (leadSurrogate) {\n            if ((units -= 3) > -1)\n              bytes.push(239, 191, 189);\n          }\n          leadSurrogate = null;\n          if (codePoint < 128) {\n            if ((units -= 1) < 0)\n              break;\n            bytes.push(codePoint);\n          } else if (codePoint < 2048) {\n            if ((units -= 2) < 0)\n              break;\n            bytes.push(\n              codePoint >> 6 | 192,\n              codePoint & 63 | 128\n            );\n          } else if (codePoint < 65536) {\n            if ((units -= 3) < 0)\n              break;\n            bytes.push(\n              codePoint >> 12 | 224,\n              codePoint >> 6 & 63 | 128,\n              codePoint & 63 | 128\n            );\n          } else if (codePoint < 1114112) {\n            if ((units -= 4) < 0)\n              break;\n            bytes.push(\n              codePoint >> 18 | 240,\n              codePoint >> 12 & 63 | 128,\n              codePoint >> 6 & 63 | 128,\n              codePoint & 63 | 128\n            );\n          } else {\n            throw new Error(\"Invalid code point\");\n          }\n        }\n        return bytes;\n      }\n      function asciiToBytes(str) {\n        const byteArray = [];\n        for (let i = 0; i < str.length; ++i) {\n          byteArray.push(str.charCodeAt(i) & 255);\n        }\n        return byteArray;\n      }\n      function utf16leToBytes(str, units) {\n        let c, hi, lo;\n        const byteArray = [];\n        for (let i = 0; i < str.length; ++i) {\n          if ((units -= 2) < 0)\n            break;\n          c = str.charCodeAt(i);\n          hi = c >> 8;\n          lo = c % 256;\n          byteArray.push(lo);\n          byteArray.push(hi);\n        }\n        return byteArray;\n      }\n      function base64ToBytes(str) {\n        return base64.toByteArray(base64clean(str));\n      }\n      function blitBuffer(src, dst, offset, length) {\n        let i;\n        for (i = 0; i < length; ++i) {\n          if (i + offset >= dst.length || i >= src.length)\n            break;\n          dst[i + offset] = src[i];\n        }\n        return i;\n      }\n      function isInstance(obj, type) {\n        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n      }\n      function numberIsNaN(obj) {\n        return obj !== obj;\n      }\n      var hexSliceLookupTable = function() {\n        const alphabet = \"0123456789abcdef\";\n        const table = new Array(256);\n        for (let i = 0; i < 16; ++i) {\n          const i16 = i * 16;\n          for (let j = 0; j < 16; ++j) {\n            table[i16 + j] = alphabet[i] + alphabet[j];\n          }\n        }\n        return table;\n      }();\n      function defineBigIntMethod(fn) {\n        return typeof BigInt === \"undefined\" ? BufferBigIntNotDefined : fn;\n      }\n      function BufferBigIntNotDefined() {\n        throw new Error(\"BigInt not supported\");\n      }\n    }\n  });\n\n  // node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\n  var require_browser = __commonJS({\n    \"node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\"(exports, module) {\n      init_dist();\n      var process = module.exports = {};\n      var cachedSetTimeout;\n      var cachedClearTimeout;\n      function defaultSetTimout() {\n        throw new Error(\"setTimeout has not been defined\");\n      }\n      function defaultClearTimeout() {\n        throw new Error(\"clearTimeout has not been defined\");\n      }\n      (function() {\n        try {\n          if (typeof setTimeout === \"function\") {\n            cachedSetTimeout = setTimeout;\n          } else {\n            cachedSetTimeout = defaultSetTimout;\n          }\n        } catch (e) {\n          cachedSetTimeout = defaultSetTimout;\n        }\n        try {\n          if (typeof clearTimeout === \"function\") {\n            cachedClearTimeout = clearTimeout;\n          } else {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        } catch (e) {\n          cachedClearTimeout = defaultClearTimeout;\n        }\n      })();\n      function runTimeout(fun) {\n        if (cachedSetTimeout === setTimeout) {\n          return setTimeout(fun, 0);\n        }\n        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n          cachedSetTimeout = setTimeout;\n          return setTimeout(fun, 0);\n        }\n        try {\n          return cachedSetTimeout(fun, 0);\n        } catch (e) {\n          try {\n            return cachedSetTimeout.call(null, fun, 0);\n          } catch (e2) {\n            return cachedSetTimeout.call(this, fun, 0);\n          }\n        }\n      }\n      function runClearTimeout(marker) {\n        if (cachedClearTimeout === clearTimeout) {\n          return clearTimeout(marker);\n        }\n        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n          cachedClearTimeout = clearTimeout;\n          return clearTimeout(marker);\n        }\n        try {\n          return cachedClearTimeout(marker);\n        } catch (e) {\n          try {\n            return cachedClearTimeout.call(null, marker);\n          } catch (e2) {\n            return cachedClearTimeout.call(this, marker);\n          }\n        }\n      }\n      var queue = [];\n      var draining = false;\n      var currentQueue;\n      var queueIndex = -1;\n      function cleanUpNextTick() {\n        if (!draining || !currentQueue) {\n          return;\n        }\n        draining = false;\n        if (currentQueue.length) {\n          queue = currentQueue.concat(queue);\n        } else {\n          queueIndex = -1;\n        }\n        if (queue.length) {\n          drainQueue();\n        }\n      }\n      function drainQueue() {\n        if (draining) {\n          return;\n        }\n        var timeout = runTimeout(cleanUpNextTick);\n        draining = true;\n        var len = queue.length;\n        while (len) {\n          currentQueue = queue;\n          queue = [];\n          while (++queueIndex < len) {\n            if (currentQueue) {\n              currentQueue[queueIndex].run();\n            }\n          }\n          queueIndex = -1;\n          len = queue.length;\n        }\n        currentQueue = null;\n        draining = false;\n        runClearTimeout(timeout);\n      }\n      process.nextTick = function(fun) {\n        var args = new Array(arguments.length - 1);\n        if (arguments.length > 1) {\n          for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n          }\n        }\n        queue.push(new Item(fun, args));\n        if (queue.length === 1 && !draining) {\n          runTimeout(drainQueue);\n        }\n      };\n      function Item(fun, array) {\n        this.fun = fun;\n        this.array = array;\n      }\n      Item.prototype.run = function() {\n        this.fun.apply(null, this.array);\n      };\n      process.title = \"browser\";\n      process.browser = true;\n      process.env = {};\n      process.argv = [];\n      process.version = \"\";\n      process.versions = {};\n      function noop() {\n      }\n      process.on = noop;\n      process.addListener = noop;\n      process.once = noop;\n      process.off = noop;\n      process.removeListener = noop;\n      process.removeAllListeners = noop;\n      process.emit = noop;\n      process.prependListener = noop;\n      process.prependOnceListener = noop;\n      process.listeners = function(name) {\n        return [];\n      };\n      process.binding = function(name) {\n        throw new Error(\"process.binding is not supported\");\n      };\n      process.cwd = function() {\n        return \"/\";\n      };\n      process.chdir = function(dir) {\n        throw new Error(\"process.chdir is not supported\");\n      };\n      process.umask = function() {\n        return 0;\n      };\n    }\n  });\n\n  // shims/dist/index.js\n  var import_buffer_polyfill, import_process, o;\n  var init_dist = __esm({\n    \"shims/dist/index.js\"() {\n      \"use strict\";\n      import_buffer_polyfill = __toESM(require_buffer(), 1);\n      import_process = __toESM(require_browser(), 1);\n      o = globalThis || void 0 || self;\n    }\n  });\n\n  // shims/banner/index.cjs\n  var require_banner = __commonJS({\n    \"shims/banner/index.cjs\"() {\n      init_dist();\n      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;\n      globalThis.global = globalThis.global || o;\n      globalThis.process = globalThis.process || import_process.default;\n    }\n  });\n  require_banner();\n})();\n/*! Bundled license information:\n\nieee754/index.js:\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n\nbuffer/index.js:\n  (*!\n   * The buffer module from node.js, for the browser.\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   *)\n*/\n\nimport {\n  require_react_dom\n} from \"./chunk-U7BGCLNW.js\";\nimport \"./chunk-2HXRYMPJ.js\";\nimport {\n  __commonJS,\n  __toESM,\n  require_dist\n} from \"./chunk-VMXIV7NB.js\";\n\n// node_modules/react-dom/client.js\nvar require_client = __commonJS({\n  \"node_modules/react-dom/client.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var m = require_react_dom();\n    if (process.env.NODE_ENV === \"production\") {\n      exports.createRoot = m.createRoot;\n      exports.hydrateRoot = m.hydrateRoot;\n    } else {\n      i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n      exports.createRoot = function(c, o) {\n        i.usingClientEntryPoint = true;\n        try {\n          return m.createRoot(c, o);\n        } finally {\n          i.usingClientEntryPoint = false;\n        }\n      };\n      exports.hydrateRoot = function(c, h, o) {\n        i.usingClientEntryPoint = true;\n        try {\n          return m.hydrateRoot(c, h, o);\n        } finally {\n          i.usingClientEntryPoint = false;\n        }\n      };\n    }\n    var i;\n  }\n});\nexport default require_client();\n//# sourceMappingURL=react-dom_client.js.map\n",
      "start": 1703289463320,
      "end": 1703289463321,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1703289463321,
      "end": 1703289463321,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703289463321,
      "end": 1703289463321,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703289463321,
      "end": 1703289463321,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703289463321,
      "end": 1703289463321,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703289463321,
      "end": 1703289463321,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703289463321,
      "end": 1703289463321,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703289463321,
      "end": 1703289463321,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703289463321,
      "end": 1703289463321,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703289463321,
      "end": 1703289463321,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703289463321,
      "end": 1703289463321,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703289463321,
      "end": 1703289463321,
      "order": "normal"
    },
    {
      "name": "vite:client-inject",
      "result": "\"use strict\";\n(() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS2 = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n    // If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n    mod\n  ));\n  var require_base64_js = __commonJS2({\n    \"node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\"(exports) {\n      \"use strict\";\n      init_dist();\n      exports.byteLength = byteLength;\n      exports.toByteArray = toByteArray;\n      exports.fromByteArray = fromByteArray;\n      var lookup = [];\n      var revLookup = [];\n      var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n      var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n      for (i = 0, len = code.length; i < len; ++i) {\n        lookup[i] = code[i];\n        revLookup[code.charCodeAt(i)] = i;\n      }\n      var i;\n      var len;\n      revLookup[\"-\".charCodeAt(0)] = 62;\n      revLookup[\"_\".charCodeAt(0)] = 63;\n      function getLens(b64) {\n        var len2 = b64.length;\n        if (len2 % 4 > 0) {\n          throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        }\n        var validLen = b64.indexOf(\"=\");\n        if (validLen === -1)\n          validLen = len2;\n        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n        return [validLen, placeHoldersLen];\n      }\n      function byteLength(b64) {\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n      function _byteLength(b64, validLen, placeHoldersLen) {\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n      function toByteArray(b64) {\n        var tmp;\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n        var curByte = 0;\n        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n        var i2;\n        for (i2 = 0; i2 < len2; i2 += 4) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n          arr[curByte++] = tmp >> 16 & 255;\n          arr[curByte++] = tmp >> 8 & 255;\n          arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 2) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n          arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 1) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n          arr[curByte++] = tmp >> 8 & 255;\n          arr[curByte++] = tmp & 255;\n        }\n        return arr;\n      }\n      function tripletToBase64(num) {\n        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n      }\n      function encodeChunk(uint8, start, end) {\n        var tmp;\n        var output = [];\n        for (var i2 = start; i2 < end; i2 += 3) {\n          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n          output.push(tripletToBase64(tmp));\n        }\n        return output.join(\"\");\n      }\n      function fromByteArray(uint8) {\n        var tmp;\n        var len2 = uint8.length;\n        var extraBytes = len2 % 3;\n        var parts = [];\n        var maxChunkLength = 16383;\n        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\n          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n        }\n        if (extraBytes === 1) {\n          tmp = uint8[len2 - 1];\n          parts.push(\n            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\"\n          );\n        } else if (extraBytes === 2) {\n          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n          parts.push(\n            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\"\n          );\n        }\n        return parts.join(\"\");\n      }\n    }\n  });\n  var require_ieee754 = __commonJS2({\n    \"node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\"(exports) {\n      init_dist();\n      exports.read = function(buffer, offset, isLE, mLen, nBytes) {\n        var e, m;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var nBits = -7;\n        var i = isLE ? nBytes - 1 : 0;\n        var d = isLE ? -1 : 1;\n        var s2 = buffer[offset + i];\n        i += d;\n        e = s2 & (1 << -nBits) - 1;\n        s2 >>= -nBits;\n        nBits += eLen;\n        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {\n        }\n        m = e & (1 << -nBits) - 1;\n        e >>= -nBits;\n        nBits += mLen;\n        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {\n        }\n        if (e === 0) {\n          e = 1 - eBias;\n        } else if (e === eMax) {\n          return m ? NaN : (s2 ? -1 : 1) * Infinity;\n        } else {\n          m = m + Math.pow(2, mLen);\n          e = e - eBias;\n        }\n        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);\n      };\n      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n        var e, m, c;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n        var i = isLE ? 0 : nBytes - 1;\n        var d = isLE ? 1 : -1;\n        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n        value = Math.abs(value);\n        if (isNaN(value) || value === Infinity) {\n          m = isNaN(value) ? 1 : 0;\n          e = eMax;\n        } else {\n          e = Math.floor(Math.log(value) / Math.LN2);\n          if (value * (c = Math.pow(2, -e)) < 1) {\n            e--;\n            c *= 2;\n          }\n          if (e + eBias >= 1) {\n            value += rt / c;\n          } else {\n            value += rt * Math.pow(2, 1 - eBias);\n          }\n          if (value * c >= 2) {\n            e++;\n            c /= 2;\n          }\n          if (e + eBias >= eMax) {\n            m = 0;\n            e = eMax;\n          } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen);\n            e = e + eBias;\n          } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n            e = 0;\n          }\n        }\n        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {\n        }\n        e = e << mLen | m;\n        eLen += mLen;\n        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {\n        }\n        buffer[offset + i - d] |= s2 * 128;\n      };\n    }\n  });\n  var require_buffer = __commonJS2({\n    \"node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js\"(exports) {\n      \"use strict\";\n      init_dist();\n      var base64 = require_base64_js();\n      var ieee754 = require_ieee754();\n      var customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") : null;\n      exports.Buffer = Buffer2;\n      exports.SlowBuffer = SlowBuffer;\n      exports.INSPECT_MAX_BYTES = 50;\n      var K_MAX_LENGTH = 2147483647;\n      exports.kMaxLength = K_MAX_LENGTH;\n      var { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;\n      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();\n      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n        console.error(\n          \"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"\n        );\n      }\n      function typedArraySupport() {\n        try {\n          const arr = new GlobalUint8Array(1);\n          const proto = { foo: function() {\n            return 42;\n          } };\n          Object.setPrototypeOf(proto, GlobalUint8Array.prototype);\n          Object.setPrototypeOf(arr, proto);\n          return arr.foo() === 42;\n        } catch (e) {\n          return false;\n        }\n      }\n      Object.defineProperty(Buffer2.prototype, \"parent\", {\n        enumerable: true,\n        get: function() {\n          if (!Buffer2.isBuffer(this))\n            return void 0;\n          return this.buffer;\n        }\n      });\n      Object.defineProperty(Buffer2.prototype, \"offset\", {\n        enumerable: true,\n        get: function() {\n          if (!Buffer2.isBuffer(this))\n            return void 0;\n          return this.byteOffset;\n        }\n      });\n      function createBuffer(length) {\n        if (length > K_MAX_LENGTH) {\n          throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n        }\n        const buf = new GlobalUint8Array(length);\n        Object.setPrototypeOf(buf, Buffer2.prototype);\n        return buf;\n      }\n      function Buffer2(arg, encodingOrOffset, length) {\n        if (typeof arg === \"number\") {\n          if (typeof encodingOrOffset === \"string\") {\n            throw new TypeError(\n              'The \"string\" argument must be of type string. Received type number'\n            );\n          }\n          return allocUnsafe(arg);\n        }\n        return from(arg, encodingOrOffset, length);\n      }\n      Buffer2.poolSize = 8192;\n      function from(value, encodingOrOffset, length) {\n        if (typeof value === \"string\") {\n          return fromString(value, encodingOrOffset);\n        }\n        if (GlobalArrayBuffer.isView(value)) {\n          return fromArrayView(value);\n        }\n        if (value == null) {\n          throw new TypeError(\n            \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n          );\n        }\n        if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n        if (typeof GlobalSharedArrayBuffer !== \"undefined\" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n        if (typeof value === \"number\") {\n          throw new TypeError(\n            'The \"value\" argument must not be of type number. Received type number'\n          );\n        }\n        const valueOf = value.valueOf && value.valueOf();\n        if (valueOf != null && valueOf !== value) {\n          return Buffer2.from(valueOf, encodingOrOffset, length);\n        }\n        const b = fromObject(value);\n        if (b)\n          return b;\n        if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n          return Buffer2.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n        }\n        throw new TypeError(\n          \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n        );\n      }\n      Buffer2.from = function(value, encodingOrOffset, length) {\n        return from(value, encodingOrOffset, length);\n      };\n      Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);\n      Object.setPrototypeOf(Buffer2, GlobalUint8Array);\n      function assertSize(size) {\n        if (typeof size !== \"number\") {\n          throw new TypeError('\"size\" argument must be of type number');\n        } else if (size < 0) {\n          throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n        }\n      }\n      function alloc(size, fill, encoding) {\n        assertSize(size);\n        if (size <= 0) {\n          return createBuffer(size);\n        }\n        if (fill !== void 0) {\n          return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n        }\n        return createBuffer(size);\n      }\n      Buffer2.alloc = function(size, fill, encoding) {\n        return alloc(size, fill, encoding);\n      };\n      function allocUnsafe(size) {\n        assertSize(size);\n        return createBuffer(size < 0 ? 0 : checked(size) | 0);\n      }\n      Buffer2.allocUnsafe = function(size) {\n        return allocUnsafe(size);\n      };\n      Buffer2.allocUnsafeSlow = function(size) {\n        return allocUnsafe(size);\n      };\n      function fromString(string, encoding) {\n        if (typeof encoding !== \"string\" || encoding === \"\") {\n          encoding = \"utf8\";\n        }\n        if (!Buffer2.isEncoding(encoding)) {\n          throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        const length = byteLength(string, encoding) | 0;\n        let buf = createBuffer(length);\n        const actual = buf.write(string, encoding);\n        if (actual !== length) {\n          buf = buf.slice(0, actual);\n        }\n        return buf;\n      }\n      function fromArrayLike(array) {\n        const length = array.length < 0 ? 0 : checked(array.length) | 0;\n        const buf = createBuffer(length);\n        for (let i = 0; i < length; i += 1) {\n          buf[i] = array[i] & 255;\n        }\n        return buf;\n      }\n      function fromArrayView(arrayView) {\n        if (isInstance(arrayView, GlobalUint8Array)) {\n          const copy = new GlobalUint8Array(arrayView);\n          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n        }\n        return fromArrayLike(arrayView);\n      }\n      function fromArrayBuffer(array, byteOffset, length) {\n        if (byteOffset < 0 || array.byteLength < byteOffset) {\n          throw new RangeError('\"offset\" is outside of buffer bounds');\n        }\n        if (array.byteLength < byteOffset + (length || 0)) {\n          throw new RangeError('\"length\" is outside of buffer bounds');\n        }\n        let buf;\n        if (byteOffset === void 0 && length === void 0) {\n          buf = new GlobalUint8Array(array);\n        } else if (length === void 0) {\n          buf = new GlobalUint8Array(array, byteOffset);\n        } else {\n          buf = new GlobalUint8Array(array, byteOffset, length);\n        }\n        Object.setPrototypeOf(buf, Buffer2.prototype);\n        return buf;\n      }\n      function fromObject(obj) {\n        if (Buffer2.isBuffer(obj)) {\n          const len = checked(obj.length) | 0;\n          const buf = createBuffer(len);\n          if (buf.length === 0) {\n            return buf;\n          }\n          obj.copy(buf, 0, 0, len);\n          return buf;\n        }\n        if (obj.length !== void 0) {\n          if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n            return createBuffer(0);\n          }\n          return fromArrayLike(obj);\n        }\n        if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n          return fromArrayLike(obj.data);\n        }\n      }\n      function checked(length) {\n        if (length >= K_MAX_LENGTH) {\n          throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n        }\n        return length | 0;\n      }\n      function SlowBuffer(length) {\n        if (+length != length) {\n          length = 0;\n        }\n        return Buffer2.alloc(+length);\n      }\n      Buffer2.isBuffer = function isBuffer(b) {\n        return b != null && b._isBuffer === true && b !== Buffer2.prototype;\n      };\n      Buffer2.compare = function compare(a, b) {\n        if (isInstance(a, GlobalUint8Array))\n          a = Buffer2.from(a, a.offset, a.byteLength);\n        if (isInstance(b, GlobalUint8Array))\n          b = Buffer2.from(b, b.offset, b.byteLength);\n        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {\n          throw new TypeError(\n            'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n          );\n        }\n        if (a === b)\n          return 0;\n        let x = a.length;\n        let y = b.length;\n        for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n          if (a[i] !== b[i]) {\n            x = a[i];\n            y = b[i];\n            break;\n          }\n        }\n        if (x < y)\n          return -1;\n        if (y < x)\n          return 1;\n        return 0;\n      };\n      Buffer2.isEncoding = function isEncoding(encoding) {\n        switch (String(encoding).toLowerCase()) {\n          case \"hex\":\n          case \"utf8\":\n          case \"utf-8\":\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n          case \"base64\":\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return true;\n          default:\n            return false;\n        }\n      };\n      Buffer2.concat = function concat(list, length) {\n        if (!Array.isArray(list)) {\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        }\n        if (list.length === 0) {\n          return Buffer2.alloc(0);\n        }\n        let i;\n        if (length === void 0) {\n          length = 0;\n          for (i = 0; i < list.length; ++i) {\n            length += list[i].length;\n          }\n        }\n        const buffer = Buffer2.allocUnsafe(length);\n        let pos = 0;\n        for (i = 0; i < list.length; ++i) {\n          let buf = list[i];\n          if (isInstance(buf, GlobalUint8Array)) {\n            if (pos + buf.length > buffer.length) {\n              if (!Buffer2.isBuffer(buf))\n                buf = Buffer2.from(buf);\n              buf.copy(buffer, pos);\n            } else {\n              GlobalUint8Array.prototype.set.call(\n                buffer,\n                buf,\n                pos\n              );\n            }\n          } else if (!Buffer2.isBuffer(buf)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers');\n          } else {\n            buf.copy(buffer, pos);\n          }\n          pos += buf.length;\n        }\n        return buffer;\n      };\n      function byteLength(string, encoding) {\n        if (Buffer2.isBuffer(string)) {\n          return string.length;\n        }\n        if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {\n          return string.byteLength;\n        }\n        if (typeof string !== \"string\") {\n          throw new TypeError(\n            'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string\n          );\n        }\n        const len = string.length;\n        const mustMatch = arguments.length > 2 && arguments[2] === true;\n        if (!mustMatch && len === 0)\n          return 0;\n        let loweredCase = false;\n        for (; ; ) {\n          switch (encoding) {\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n              return len;\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8ToBytes(string).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return len * 2;\n            case \"hex\":\n              return len >>> 1;\n            case \"base64\":\n              return base64ToBytes(string).length;\n            default:\n              if (loweredCase) {\n                return mustMatch ? -1 : utf8ToBytes(string).length;\n              }\n              encoding = (\"\" + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n      Buffer2.byteLength = byteLength;\n      function slowToString(encoding, start, end) {\n        let loweredCase = false;\n        if (start === void 0 || start < 0) {\n          start = 0;\n        }\n        if (start > this.length) {\n          return \"\";\n        }\n        if (end === void 0 || end > this.length) {\n          end = this.length;\n        }\n        if (end <= 0) {\n          return \"\";\n        }\n        end >>>= 0;\n        start >>>= 0;\n        if (end <= start) {\n          return \"\";\n        }\n        if (!encoding)\n          encoding = \"utf8\";\n        while (true) {\n          switch (encoding) {\n            case \"hex\":\n              return hexSlice(this, start, end);\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8Slice(this, start, end);\n            case \"ascii\":\n              return asciiSlice(this, start, end);\n            case \"latin1\":\n            case \"binary\":\n              return latin1Slice(this, start, end);\n            case \"base64\":\n              return base64Slice(this, start, end);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return utf16leSlice(this, start, end);\n            default:\n              if (loweredCase)\n                throw new TypeError(\"Unknown encoding: \" + encoding);\n              encoding = (encoding + \"\").toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n      Buffer2.prototype._isBuffer = true;\n      function swap(b, n, m) {\n        const i = b[n];\n        b[n] = b[m];\n        b[m] = i;\n      }\n      Buffer2.prototype.swap16 = function swap16() {\n        const len = this.length;\n        if (len % 2 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n        }\n        for (let i = 0; i < len; i += 2) {\n          swap(this, i, i + 1);\n        }\n        return this;\n      };\n      Buffer2.prototype.swap32 = function swap32() {\n        const len = this.length;\n        if (len % 4 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n        }\n        for (let i = 0; i < len; i += 4) {\n          swap(this, i, i + 3);\n          swap(this, i + 1, i + 2);\n        }\n        return this;\n      };\n      Buffer2.prototype.swap64 = function swap64() {\n        const len = this.length;\n        if (len % 8 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n        }\n        for (let i = 0; i < len; i += 8) {\n          swap(this, i, i + 7);\n          swap(this, i + 1, i + 6);\n          swap(this, i + 2, i + 5);\n          swap(this, i + 3, i + 4);\n        }\n        return this;\n      };\n      Buffer2.prototype.toString = function toString() {\n        const length = this.length;\n        if (length === 0)\n          return \"\";\n        if (arguments.length === 0)\n          return utf8Slice(this, 0, length);\n        return slowToString.apply(this, arguments);\n      };\n      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;\n      Buffer2.prototype.equals = function equals(b) {\n        if (!Buffer2.isBuffer(b))\n          throw new TypeError(\"Argument must be a Buffer\");\n        if (this === b)\n          return true;\n        return Buffer2.compare(this, b) === 0;\n      };\n      Buffer2.prototype.inspect = function inspect() {\n        let str = \"\";\n        const max = exports.INSPECT_MAX_BYTES;\n        str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n        if (this.length > max)\n          str += \" ... \";\n        return \"<Buffer \" + str + \">\";\n      };\n      if (customInspectSymbol) {\n        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;\n      }\n      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n        if (isInstance(target, GlobalUint8Array)) {\n          target = Buffer2.from(target, target.offset, target.byteLength);\n        }\n        if (!Buffer2.isBuffer(target)) {\n          throw new TypeError(\n            'The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target\n          );\n        }\n        if (start === void 0) {\n          start = 0;\n        }\n        if (end === void 0) {\n          end = target ? target.length : 0;\n        }\n        if (thisStart === void 0) {\n          thisStart = 0;\n        }\n        if (thisEnd === void 0) {\n          thisEnd = this.length;\n        }\n        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n          throw new RangeError(\"out of range index\");\n        }\n        if (thisStart >= thisEnd && start >= end) {\n          return 0;\n        }\n        if (thisStart >= thisEnd) {\n          return -1;\n        }\n        if (start >= end) {\n          return 1;\n        }\n        start >>>= 0;\n        end >>>= 0;\n        thisStart >>>= 0;\n        thisEnd >>>= 0;\n        if (this === target)\n          return 0;\n        let x = thisEnd - thisStart;\n        let y = end - start;\n        const len = Math.min(x, y);\n        const thisCopy = this.slice(thisStart, thisEnd);\n        const targetCopy = target.slice(start, end);\n        for (let i = 0; i < len; ++i) {\n          if (thisCopy[i] !== targetCopy[i]) {\n            x = thisCopy[i];\n            y = targetCopy[i];\n            break;\n          }\n        }\n        if (x < y)\n          return -1;\n        if (y < x)\n          return 1;\n        return 0;\n      };\n      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n        if (buffer.length === 0)\n          return -1;\n        if (typeof byteOffset === \"string\") {\n          encoding = byteOffset;\n          byteOffset = 0;\n        } else if (byteOffset > 2147483647) {\n          byteOffset = 2147483647;\n        } else if (byteOffset < -2147483648) {\n          byteOffset = -2147483648;\n        }\n        byteOffset = +byteOffset;\n        if (numberIsNaN(byteOffset)) {\n          byteOffset = dir ? 0 : buffer.length - 1;\n        }\n        if (byteOffset < 0)\n          byteOffset = buffer.length + byteOffset;\n        if (byteOffset >= buffer.length) {\n          if (dir)\n            return -1;\n          else\n            byteOffset = buffer.length - 1;\n        } else if (byteOffset < 0) {\n          if (dir)\n            byteOffset = 0;\n          else\n            return -1;\n        }\n        if (typeof val === \"string\") {\n          val = Buffer2.from(val, encoding);\n        }\n        if (Buffer2.isBuffer(val)) {\n          if (val.length === 0) {\n            return -1;\n          }\n          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n        } else if (typeof val === \"number\") {\n          val = val & 255;\n          if (typeof GlobalUint8Array.prototype.indexOf === \"function\") {\n            if (dir) {\n              return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n            } else {\n              return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n            }\n          }\n          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n        }\n        throw new TypeError(\"val must be string, number or Buffer\");\n      }\n      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n        let indexSize = 1;\n        let arrLength = arr.length;\n        let valLength = val.length;\n        if (encoding !== void 0) {\n          encoding = String(encoding).toLowerCase();\n          if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n            if (arr.length < 2 || val.length < 2) {\n              return -1;\n            }\n            indexSize = 2;\n            arrLength /= 2;\n            valLength /= 2;\n            byteOffset /= 2;\n          }\n        }\n        function read(buf, i2) {\n          if (indexSize === 1) {\n            return buf[i2];\n          } else {\n            return buf.readUInt16BE(i2 * indexSize);\n          }\n        }\n        let i;\n        if (dir) {\n          let foundIndex = -1;\n          for (i = byteOffset; i < arrLength; i++) {\n            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n              if (foundIndex === -1)\n                foundIndex = i;\n              if (i - foundIndex + 1 === valLength)\n                return foundIndex * indexSize;\n            } else {\n              if (foundIndex !== -1)\n                i -= i - foundIndex;\n              foundIndex = -1;\n            }\n          }\n        } else {\n          if (byteOffset + valLength > arrLength)\n            byteOffset = arrLength - valLength;\n          for (i = byteOffset; i >= 0; i--) {\n            let found = true;\n            for (let j = 0; j < valLength; j++) {\n              if (read(arr, i + j) !== read(val, j)) {\n                found = false;\n                break;\n              }\n            }\n            if (found)\n              return i;\n          }\n        }\n        return -1;\n      }\n      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {\n        return this.indexOf(val, byteOffset, encoding) !== -1;\n      };\n      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n      };\n      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n      };\n      function hexWrite(buf, string, offset, length) {\n        offset = Number(offset) || 0;\n        const remaining = buf.length - offset;\n        if (!length) {\n          length = remaining;\n        } else {\n          length = Number(length);\n          if (length > remaining) {\n            length = remaining;\n          }\n        }\n        const strLen = string.length;\n        if (length > strLen / 2) {\n          length = strLen / 2;\n        }\n        let i;\n        for (i = 0; i < length; ++i) {\n          const parsed = parseInt(string.substr(i * 2, 2), 16);\n          if (numberIsNaN(parsed))\n            return i;\n          buf[offset + i] = parsed;\n        }\n        return i;\n      }\n      function utf8Write(buf, string, offset, length) {\n        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n      }\n      function asciiWrite(buf, string, offset, length) {\n        return blitBuffer(asciiToBytes(string), buf, offset, length);\n      }\n      function base64Write(buf, string, offset, length) {\n        return blitBuffer(base64ToBytes(string), buf, offset, length);\n      }\n      function ucs2Write(buf, string, offset, length) {\n        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n      }\n      Buffer2.prototype.write = function write(string, offset, length, encoding) {\n        if (offset === void 0) {\n          encoding = \"utf8\";\n          length = this.length;\n          offset = 0;\n        } else if (length === void 0 && typeof offset === \"string\") {\n          encoding = offset;\n          length = this.length;\n          offset = 0;\n        } else if (isFinite(offset)) {\n          offset = offset >>> 0;\n          if (isFinite(length)) {\n            length = length >>> 0;\n            if (encoding === void 0)\n              encoding = \"utf8\";\n          } else {\n            encoding = length;\n            length = void 0;\n          }\n        } else {\n          throw new Error(\n            \"Buffer.write(string, encoding, offset[, length]) is no longer supported\"\n          );\n        }\n        const remaining = this.length - offset;\n        if (length === void 0 || length > remaining)\n          length = remaining;\n        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n          throw new RangeError(\"Attempt to write outside buffer bounds\");\n        }\n        if (!encoding)\n          encoding = \"utf8\";\n        let loweredCase = false;\n        for (; ; ) {\n          switch (encoding) {\n            case \"hex\":\n              return hexWrite(this, string, offset, length);\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8Write(this, string, offset, length);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n              return asciiWrite(this, string, offset, length);\n            case \"base64\":\n              return base64Write(this, string, offset, length);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return ucs2Write(this, string, offset, length);\n            default:\n              if (loweredCase)\n                throw new TypeError(\"Unknown encoding: \" + encoding);\n              encoding = (\"\" + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      };\n      Buffer2.prototype.toJSON = function toJSON() {\n        return {\n          type: \"Buffer\",\n          data: Array.prototype.slice.call(this._arr || this, 0)\n        };\n      };\n      function base64Slice(buf, start, end) {\n        if (start === 0 && end === buf.length) {\n          return base64.fromByteArray(buf);\n        } else {\n          return base64.fromByteArray(buf.slice(start, end));\n        }\n      }\n      function utf8Slice(buf, start, end) {\n        end = Math.min(buf.length, end);\n        const res = [];\n        let i = start;\n        while (i < end) {\n          const firstByte = buf[i];\n          let codePoint = null;\n          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n          if (i + bytesPerSequence <= end) {\n            let secondByte, thirdByte, fourthByte, tempCodePoint;\n            switch (bytesPerSequence) {\n              case 1:\n                if (firstByte < 128) {\n                  codePoint = firstByte;\n                }\n                break;\n              case 2:\n                secondByte = buf[i + 1];\n                if ((secondByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n                  if (tempCodePoint > 127) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 3:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 4:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                fourthByte = buf[i + 3];\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n            }\n          }\n          if (codePoint === null) {\n            codePoint = 65533;\n            bytesPerSequence = 1;\n          } else if (codePoint > 65535) {\n            codePoint -= 65536;\n            res.push(codePoint >>> 10 & 1023 | 55296);\n            codePoint = 56320 | codePoint & 1023;\n          }\n          res.push(codePoint);\n          i += bytesPerSequence;\n        }\n        return decodeCodePointsArray(res);\n      }\n      var MAX_ARGUMENTS_LENGTH = 4096;\n      function decodeCodePointsArray(codePoints) {\n        const len = codePoints.length;\n        if (len <= MAX_ARGUMENTS_LENGTH) {\n          return String.fromCharCode.apply(String, codePoints);\n        }\n        let res = \"\";\n        let i = 0;\n        while (i < len) {\n          res += String.fromCharCode.apply(\n            String,\n            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n          );\n        }\n        return res;\n      }\n      function asciiSlice(buf, start, end) {\n        let ret = \"\";\n        end = Math.min(buf.length, end);\n        for (let i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i] & 127);\n        }\n        return ret;\n      }\n      function latin1Slice(buf, start, end) {\n        let ret = \"\";\n        end = Math.min(buf.length, end);\n        for (let i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i]);\n        }\n        return ret;\n      }\n      function hexSlice(buf, start, end) {\n        const len = buf.length;\n        if (!start || start < 0)\n          start = 0;\n        if (!end || end < 0 || end > len)\n          end = len;\n        let out = \"\";\n        for (let i = start; i < end; ++i) {\n          out += hexSliceLookupTable[buf[i]];\n        }\n        return out;\n      }\n      function utf16leSlice(buf, start, end) {\n        const bytes = buf.slice(start, end);\n        let res = \"\";\n        for (let i = 0; i < bytes.length - 1; i += 2) {\n          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n        }\n        return res;\n      }\n      Buffer2.prototype.slice = function slice(start, end) {\n        const len = this.length;\n        start = ~~start;\n        end = end === void 0 ? len : ~~end;\n        if (start < 0) {\n          start += len;\n          if (start < 0)\n            start = 0;\n        } else if (start > len) {\n          start = len;\n        }\n        if (end < 0) {\n          end += len;\n          if (end < 0)\n            end = 0;\n        } else if (end > len) {\n          end = len;\n        }\n        if (end < start)\n          end = start;\n        const newBuf = this.subarray(start, end);\n        Object.setPrototypeOf(newBuf, Buffer2.prototype);\n        return newBuf;\n      };\n      function checkOffset(offset, ext, length) {\n        if (offset % 1 !== 0 || offset < 0)\n          throw new RangeError(\"offset is not uint\");\n        if (offset + ext > length)\n          throw new RangeError(\"Trying to access beyond buffer length\");\n      }\n      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let val = this[offset];\n        let mul = 1;\n        let i = 0;\n        while (++i < byteLength2 && (mul *= 256)) {\n          val += this[offset + i] * mul;\n        }\n        return val;\n      };\n      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          checkOffset(offset, byteLength2, this.length);\n        }\n        let val = this[offset + --byteLength2];\n        let mul = 1;\n        while (byteLength2 > 0 && (mul *= 256)) {\n          val += this[offset + --byteLength2] * mul;\n        }\n        return val;\n      };\n      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 1, this.length);\n        return this[offset];\n      };\n      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        return this[offset] | this[offset + 1] << 8;\n      };\n      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        return this[offset] << 8 | this[offset + 1];\n      };\n      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n      };\n      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n      };\n      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n        return BigInt(lo) + (BigInt(hi) << BigInt(32));\n      });\n      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\n        return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n      });\n      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let val = this[offset];\n        let mul = 1;\n        let i = 0;\n        while (++i < byteLength2 && (mul *= 256)) {\n          val += this[offset + i] * mul;\n        }\n        mul *= 128;\n        if (val >= mul)\n          val -= Math.pow(2, 8 * byteLength2);\n        return val;\n      };\n      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let i = byteLength2;\n        let mul = 1;\n        let val = this[offset + --i];\n        while (i > 0 && (mul *= 256)) {\n          val += this[offset + --i] * mul;\n        }\n        mul *= 128;\n        if (val >= mul)\n          val -= Math.pow(2, 8 * byteLength2);\n        return val;\n      };\n      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 1, this.length);\n        if (!(this[offset] & 128))\n          return this[offset];\n        return (255 - this[offset] + 1) * -1;\n      };\n      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        const val = this[offset] | this[offset + 1] << 8;\n        return val & 32768 ? val | 4294901760 : val;\n      };\n      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        const val = this[offset + 1] | this[offset] << 8;\n        return val & 32768 ? val | 4294901760 : val;\n      };\n      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n      };\n      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n      };\n      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);\n        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n      });\n      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const val = (first << 24) + // Overflow\n        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\n      });\n      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, true, 23, 4);\n      };\n      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, false, 23, 4);\n      };\n      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, true, 52, 8);\n      };\n      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, false, 52, 8);\n      };\n      function checkInt(buf, value, offset, ext, max, min) {\n        if (!Buffer2.isBuffer(buf))\n          throw new TypeError('\"buffer\" argument must be a Buffer instance');\n        if (value > max || value < min)\n          throw new RangeError('\"value\" argument is out of bounds');\n        if (offset + ext > buf.length)\n          throw new RangeError(\"Index out of range\");\n      }\n      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\n        }\n        let mul = 1;\n        let i = 0;\n        this[offset] = value & 255;\n        while (++i < byteLength2 && (mul *= 256)) {\n          this[offset + i] = value / mul & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\n        }\n        let i = byteLength2 - 1;\n        let mul = 1;\n        this[offset + i] = value & 255;\n        while (--i >= 0 && (mul *= 256)) {\n          this[offset + i] = value / mul & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 1, 255, 0);\n        this[offset] = value & 255;\n        return offset + 1;\n      };\n      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 65535, 0);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 65535, 0);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 255;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 4294967295, 0);\n        this[offset + 3] = value >>> 24;\n        this[offset + 2] = value >>> 16;\n        this[offset + 1] = value >>> 8;\n        this[offset] = value & 255;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 4294967295, 0);\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 255;\n        return offset + 4;\n      };\n      function wrtBigUInt64LE(buf, value, offset, min, max) {\n        checkIntBI(value, min, max, buf, offset, 7);\n        let lo = Number(value & BigInt(4294967295));\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        return offset;\n      }\n      function wrtBigUInt64BE(buf, value, offset, min, max) {\n        checkIntBI(value, min, max, buf, offset, 7);\n        let lo = Number(value & BigInt(4294967295));\n        buf[offset + 7] = lo;\n        lo = lo >> 8;\n        buf[offset + 6] = lo;\n        lo = lo >> 8;\n        buf[offset + 5] = lo;\n        lo = lo >> 8;\n        buf[offset + 4] = lo;\n        let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n        buf[offset + 3] = hi;\n        hi = hi >> 8;\n        buf[offset + 2] = hi;\n        hi = hi >> 8;\n        buf[offset + 1] = hi;\n        hi = hi >> 8;\n        buf[offset] = hi;\n        return offset + 8;\n      }\n      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {\n        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n      });\n      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {\n        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n      });\n      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          const limit = Math.pow(2, 8 * byteLength2 - 1);\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n        }\n        let i = 0;\n        let mul = 1;\n        let sub = 0;\n        this[offset] = value & 255;\n        while (++i < byteLength2 && (mul *= 256)) {\n          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          const limit = Math.pow(2, 8 * byteLength2 - 1);\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n        }\n        let i = byteLength2 - 1;\n        let mul = 1;\n        let sub = 0;\n        this[offset + i] = value & 255;\n        while (--i >= 0 && (mul *= 256)) {\n          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 1, 127, -128);\n        if (value < 0)\n          value = 255 + value + 1;\n        this[offset] = value & 255;\n        return offset + 1;\n      };\n      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 32767, -32768);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 32767, -32768);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 255;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 2147483647, -2147483648);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        this[offset + 2] = value >>> 16;\n        this[offset + 3] = value >>> 24;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 2147483647, -2147483648);\n        if (value < 0)\n          value = 4294967295 + value + 1;\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 255;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {\n        return wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n      });\n      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {\n        return wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n      });\n      function checkIEEE754(buf, value, offset, ext, max, min) {\n        if (offset + ext > buf.length)\n          throw new RangeError(\"Index out of range\");\n        if (offset < 0)\n          throw new RangeError(\"Index out of range\");\n      }\n      function writeFloat(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 23, 4);\n        return offset + 4;\n      }\n      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, true, noAssert);\n      };\n      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, false, noAssert);\n      };\n      function writeDouble(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 52, 8);\n        return offset + 8;\n      }\n      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, true, noAssert);\n      };\n      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, false, noAssert);\n      };\n      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {\n        if (!Buffer2.isBuffer(target))\n          throw new TypeError(\"argument should be a Buffer\");\n        if (!start)\n          start = 0;\n        if (!end && end !== 0)\n          end = this.length;\n        if (targetStart >= target.length)\n          targetStart = target.length;\n        if (!targetStart)\n          targetStart = 0;\n        if (end > 0 && end < start)\n          end = start;\n        if (end === start)\n          return 0;\n        if (target.length === 0 || this.length === 0)\n          return 0;\n        if (targetStart < 0) {\n          throw new RangeError(\"targetStart out of bounds\");\n        }\n        if (start < 0 || start >= this.length)\n          throw new RangeError(\"Index out of range\");\n        if (end < 0)\n          throw new RangeError(\"sourceEnd out of bounds\");\n        if (end > this.length)\n          end = this.length;\n        if (target.length - targetStart < end - start) {\n          end = target.length - targetStart + start;\n        }\n        const len = end - start;\n        if (this === target && typeof GlobalUint8Array.prototype.copyWithin === \"function\") {\n          this.copyWithin(targetStart, start, end);\n        } else {\n          GlobalUint8Array.prototype.set.call(\n            target,\n            this.subarray(start, end),\n            targetStart\n          );\n        }\n        return len;\n      };\n      Buffer2.prototype.fill = function fill(val, start, end, encoding) {\n        if (typeof val === \"string\") {\n          if (typeof start === \"string\") {\n            encoding = start;\n            start = 0;\n            end = this.length;\n          } else if (typeof end === \"string\") {\n            encoding = end;\n            end = this.length;\n          }\n          if (encoding !== void 0 && typeof encoding !== \"string\") {\n            throw new TypeError(\"encoding must be a string\");\n          }\n          if (typeof encoding === \"string\" && !Buffer2.isEncoding(encoding)) {\n            throw new TypeError(\"Unknown encoding: \" + encoding);\n          }\n          if (val.length === 1) {\n            const code = val.charCodeAt(0);\n            if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n              val = code;\n            }\n          }\n        } else if (typeof val === \"number\") {\n          val = val & 255;\n        } else if (typeof val === \"boolean\") {\n          val = Number(val);\n        }\n        if (start < 0 || this.length < start || this.length < end) {\n          throw new RangeError(\"Out of range index\");\n        }\n        if (end <= start) {\n          return this;\n        }\n        start = start >>> 0;\n        end = end === void 0 ? this.length : end >>> 0;\n        if (!val)\n          val = 0;\n        let i;\n        if (typeof val === \"number\") {\n          for (i = start; i < end; ++i) {\n            this[i] = val;\n          }\n        } else {\n          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);\n          const len = bytes.length;\n          if (len === 0) {\n            throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n          }\n          for (i = 0; i < end - start; ++i) {\n            this[i + start] = bytes[i % len];\n          }\n        }\n        return this;\n      };\n      var errors = {};\n      function E(sym, getMessage, Base) {\n        errors[sym] = class NodeError extends Base {\n          constructor() {\n            super();\n            Object.defineProperty(this, \"message\", {\n              value: getMessage.apply(this, arguments),\n              writable: true,\n              configurable: true\n            });\n            this.name = `${this.name} [${sym}]`;\n            this.stack;\n            delete this.name;\n          }\n          get code() {\n            return sym;\n          }\n          set code(value) {\n            Object.defineProperty(this, \"code\", {\n              configurable: true,\n              enumerable: true,\n              value,\n              writable: true\n            });\n          }\n          toString() {\n            return `${this.name} [${sym}]: ${this.message}`;\n          }\n        };\n      }\n      E(\n        \"ERR_BUFFER_OUT_OF_BOUNDS\",\n        function(name) {\n          if (name) {\n            return `${name} is outside of buffer bounds`;\n          }\n          return \"Attempt to access memory outside buffer bounds\";\n        },\n        RangeError\n      );\n      E(\n        \"ERR_INVALID_ARG_TYPE\",\n        function(name, actual) {\n          return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`;\n        },\n        TypeError\n      );\n      E(\n        \"ERR_OUT_OF_RANGE\",\n        function(str, range, input) {\n          let msg = `The value of \"${str}\" is out of range.`;\n          let received = input;\n          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n            received = addNumericalSeparator(String(input));\n          } else if (typeof input === \"bigint\") {\n            received = String(input);\n            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n              received = addNumericalSeparator(received);\n            }\n            received += \"n\";\n          }\n          msg += ` It must be ${range}. Received ${received}`;\n          return msg;\n        },\n        RangeError\n      );\n      function addNumericalSeparator(val) {\n        let res = \"\";\n        let i = val.length;\n        const start = val[0] === \"-\" ? 1 : 0;\n        for (; i >= start + 4; i -= 3) {\n          res = `_${val.slice(i - 3, i)}${res}`;\n        }\n        return `${val.slice(0, i)}${res}`;\n      }\n      function checkBounds(buf, offset, byteLength2) {\n        validateNumber(offset, \"offset\");\n        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {\n          boundsError(offset, buf.length - (byteLength2 + 1));\n        }\n      }\n      function checkIntBI(value, min, max, buf, offset, byteLength2) {\n        if (value > max || value < min) {\n          const n = typeof min === \"bigint\" ? \"n\" : \"\";\n          let range;\n          if (byteLength2 > 3) {\n            if (min === 0 || min === BigInt(0)) {\n              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;\n            } else {\n              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;\n            }\n          } else {\n            range = `>= ${min}${n} and <= ${max}${n}`;\n          }\n          throw new errors.ERR_OUT_OF_RANGE(\"value\", range, value);\n        }\n        checkBounds(buf, offset, byteLength2);\n      }\n      function validateNumber(value, name) {\n        if (typeof value !== \"number\") {\n          throw new errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n        }\n      }\n      function boundsError(value, length, type) {\n        if (Math.floor(value) !== value) {\n          validateNumber(value, type);\n          throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \"an integer\", value);\n        }\n        if (length < 0) {\n          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n        }\n        throw new errors.ERR_OUT_OF_RANGE(\n          type || \"offset\",\n          `>= ${type ? 1 : 0} and <= ${length}`,\n          value\n        );\n      }\n      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n      function base64clean(str) {\n        str = str.split(\"=\")[0];\n        str = str.trim().replace(INVALID_BASE64_RE, \"\");\n        if (str.length < 2)\n          return \"\";\n        while (str.length % 4 !== 0) {\n          str = str + \"=\";\n        }\n        return str;\n      }\n      function utf8ToBytes(string, units) {\n        units = units || Infinity;\n        let codePoint;\n        const length = string.length;\n        let leadSurrogate = null;\n        const bytes = [];\n        for (let i = 0; i < length; ++i) {\n          codePoint = string.charCodeAt(i);\n          if (codePoint > 55295 && codePoint < 57344) {\n            if (!leadSurrogate) {\n              if (codePoint > 56319) {\n                if ((units -= 3) > -1)\n                  bytes.push(239, 191, 189);\n                continue;\n              } else if (i + 1 === length) {\n                if ((units -= 3) > -1)\n                  bytes.push(239, 191, 189);\n                continue;\n              }\n              leadSurrogate = codePoint;\n              continue;\n            }\n            if (codePoint < 56320) {\n              if ((units -= 3) > -1)\n                bytes.push(239, 191, 189);\n              leadSurrogate = codePoint;\n              continue;\n            }\n            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n          } else if (leadSurrogate) {\n            if ((units -= 3) > -1)\n              bytes.push(239, 191, 189);\n          }\n          leadSurrogate = null;\n          if (codePoint < 128) {\n            if ((units -= 1) < 0)\n              break;\n            bytes.push(codePoint);\n          } else if (codePoint < 2048) {\n            if ((units -= 2) < 0)\n              break;\n            bytes.push(\n              codePoint >> 6 | 192,\n              codePoint & 63 | 128\n            );\n          } else if (codePoint < 65536) {\n            if ((units -= 3) < 0)\n              break;\n            bytes.push(\n              codePoint >> 12 | 224,\n              codePoint >> 6 & 63 | 128,\n              codePoint & 63 | 128\n            );\n          } else if (codePoint < 1114112) {\n            if ((units -= 4) < 0)\n              break;\n            bytes.push(\n              codePoint >> 18 | 240,\n              codePoint >> 12 & 63 | 128,\n              codePoint >> 6 & 63 | 128,\n              codePoint & 63 | 128\n            );\n          } else {\n            throw new Error(\"Invalid code point\");\n          }\n        }\n        return bytes;\n      }\n      function asciiToBytes(str) {\n        const byteArray = [];\n        for (let i = 0; i < str.length; ++i) {\n          byteArray.push(str.charCodeAt(i) & 255);\n        }\n        return byteArray;\n      }\n      function utf16leToBytes(str, units) {\n        let c, hi, lo;\n        const byteArray = [];\n        for (let i = 0; i < str.length; ++i) {\n          if ((units -= 2) < 0)\n            break;\n          c = str.charCodeAt(i);\n          hi = c >> 8;\n          lo = c % 256;\n          byteArray.push(lo);\n          byteArray.push(hi);\n        }\n        return byteArray;\n      }\n      function base64ToBytes(str) {\n        return base64.toByteArray(base64clean(str));\n      }\n      function blitBuffer(src, dst, offset, length) {\n        let i;\n        for (i = 0; i < length; ++i) {\n          if (i + offset >= dst.length || i >= src.length)\n            break;\n          dst[i + offset] = src[i];\n        }\n        return i;\n      }\n      function isInstance(obj, type) {\n        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n      }\n      function numberIsNaN(obj) {\n        return obj !== obj;\n      }\n      var hexSliceLookupTable = function() {\n        const alphabet = \"0123456789abcdef\";\n        const table = new Array(256);\n        for (let i = 0; i < 16; ++i) {\n          const i16 = i * 16;\n          for (let j = 0; j < 16; ++j) {\n            table[i16 + j] = alphabet[i] + alphabet[j];\n          }\n        }\n        return table;\n      }();\n      function defineBigIntMethod(fn) {\n        return typeof BigInt === \"undefined\" ? BufferBigIntNotDefined : fn;\n      }\n      function BufferBigIntNotDefined() {\n        throw new Error(\"BigInt not supported\");\n      }\n    }\n  });\n  var require_browser = __commonJS2({\n    \"node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\"(exports, module) {\n      init_dist();\n      var process2 = module.exports = {};\n      var cachedSetTimeout;\n      var cachedClearTimeout;\n      function defaultSetTimout() {\n        throw new Error(\"setTimeout has not been defined\");\n      }\n      function defaultClearTimeout() {\n        throw new Error(\"clearTimeout has not been defined\");\n      }\n      (function() {\n        try {\n          if (typeof setTimeout === \"function\") {\n            cachedSetTimeout = setTimeout;\n          } else {\n            cachedSetTimeout = defaultSetTimout;\n          }\n        } catch (e) {\n          cachedSetTimeout = defaultSetTimout;\n        }\n        try {\n          if (typeof clearTimeout === \"function\") {\n            cachedClearTimeout = clearTimeout;\n          } else {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        } catch (e) {\n          cachedClearTimeout = defaultClearTimeout;\n        }\n      })();\n      function runTimeout(fun) {\n        if (cachedSetTimeout === setTimeout) {\n          return setTimeout(fun, 0);\n        }\n        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n          cachedSetTimeout = setTimeout;\n          return setTimeout(fun, 0);\n        }\n        try {\n          return cachedSetTimeout(fun, 0);\n        } catch (e) {\n          try {\n            return cachedSetTimeout.call(null, fun, 0);\n          } catch (e2) {\n            return cachedSetTimeout.call(this, fun, 0);\n          }\n        }\n      }\n      function runClearTimeout(marker) {\n        if (cachedClearTimeout === clearTimeout) {\n          return clearTimeout(marker);\n        }\n        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n          cachedClearTimeout = clearTimeout;\n          return clearTimeout(marker);\n        }\n        try {\n          return cachedClearTimeout(marker);\n        } catch (e) {\n          try {\n            return cachedClearTimeout.call(null, marker);\n          } catch (e2) {\n            return cachedClearTimeout.call(this, marker);\n          }\n        }\n      }\n      var queue = [];\n      var draining = false;\n      var currentQueue;\n      var queueIndex = -1;\n      function cleanUpNextTick() {\n        if (!draining || !currentQueue) {\n          return;\n        }\n        draining = false;\n        if (currentQueue.length) {\n          queue = currentQueue.concat(queue);\n        } else {\n          queueIndex = -1;\n        }\n        if (queue.length) {\n          drainQueue();\n        }\n      }\n      function drainQueue() {\n        if (draining) {\n          return;\n        }\n        var timeout = runTimeout(cleanUpNextTick);\n        draining = true;\n        var len = queue.length;\n        while (len) {\n          currentQueue = queue;\n          queue = [];\n          while (++queueIndex < len) {\n            if (currentQueue) {\n              currentQueue[queueIndex].run();\n            }\n          }\n          queueIndex = -1;\n          len = queue.length;\n        }\n        currentQueue = null;\n        draining = false;\n        runClearTimeout(timeout);\n      }\n      process2.nextTick = function(fun) {\n        var args = new Array(arguments.length - 1);\n        if (arguments.length > 1) {\n          for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n          }\n        }\n        queue.push(new Item(fun, args));\n        if (queue.length === 1 && !draining) {\n          runTimeout(drainQueue);\n        }\n      };\n      function Item(fun, array) {\n        this.fun = fun;\n        this.array = array;\n      }\n      Item.prototype.run = function() {\n        this.fun.apply(null, this.array);\n      };\n      process2.title = \"browser\";\n      process2.browser = true;\n      process2.env = {};\n      process2.argv = [];\n      process2.version = \"\";\n      process2.versions = {};\n      function noop() {\n      }\n      process2.on = noop;\n      process2.addListener = noop;\n      process2.once = noop;\n      process2.off = noop;\n      process2.removeListener = noop;\n      process2.removeAllListeners = noop;\n      process2.emit = noop;\n      process2.prependListener = noop;\n      process2.prependOnceListener = noop;\n      process2.listeners = function(name) {\n        return [];\n      };\n      process2.binding = function(name) {\n        throw new Error(\"process.binding is not supported\");\n      };\n      process2.cwd = function() {\n        return \"/\";\n      };\n      process2.chdir = function(dir) {\n        throw new Error(\"process.chdir is not supported\");\n      };\n      process2.umask = function() {\n        return 0;\n      };\n    }\n  });\n  var import_buffer_polyfill, import_process, o;\n  var init_dist = __esm({\n    \"shims/dist/index.js\"() {\n      \"use strict\";\n      import_buffer_polyfill = __toESM2(require_buffer(), 1);\n      import_process = __toESM2(require_browser(), 1);\n      o = globalThis || void 0 || self;\n    }\n  });\n  var require_banner = __commonJS2({\n    \"shims/banner/index.cjs\"() {\n      init_dist();\n      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;\n      globalThis.global = globalThis.global || o;\n      globalThis.process = globalThis.process || import_process.default;\n    }\n  });\n  require_banner();\n})();\n/*! Bundled license information:\n\nieee754/index.js:\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n\nbuffer/index.js:\n  (*!\n   * The buffer module from node.js, for the browser.\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   *)\n*/\nimport {\n  require_react_dom\n} from \"./chunk-U7BGCLNW.js\";\nimport \"./chunk-2HXRYMPJ.js\";\nimport {\n  __commonJS,\n  __toESM,\n  require_dist\n} from \"./chunk-VMXIV7NB.js\";\nvar require_client = __commonJS({\n  \"node_modules/react-dom/client.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var m = require_react_dom();\n    if (false) {\n      exports.createRoot = m.createRoot;\n      exports.hydrateRoot = m.hydrateRoot;\n    } else {\n      i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n      exports.createRoot = function(c, o) {\n        i.usingClientEntryPoint = true;\n        try {\n          return m.createRoot(c, o);\n        } finally {\n          i.usingClientEntryPoint = false;\n        }\n      };\n      exports.hydrateRoot = function(c, h, o) {\n        i.usingClientEntryPoint = true;\n        try {\n          return m.hydrateRoot(c, h, o);\n        } finally {\n          i.usingClientEntryPoint = false;\n        }\n      };\n    }\n    var i;\n  }\n});\nexport default require_client();\n",
      "start": 1703289463321,
      "end": 1703289463342,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/home/zepor/ssweb/frontend-container/node_modules/.vite/deps/react-dom_client.js?v=733ce8d4\"],\n  \"sourcesContent\": [\"\\\"use strict\\\";\\n(() => {\\n  var __create = Object.create;\\n  var __defProp = Object.defineProperty;\\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\\n  var __getOwnPropNames = Object.getOwnPropertyNames;\\n  var __getProtoOf = Object.getPrototypeOf;\\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\\n  var __esm = (fn, res) => function __init() {\\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\\n  };\\n  var __commonJS = (cb, mod) => function __require() {\\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\\n  };\\n  var __copyProps = (to, from, except, desc) => {\\n    if (from && typeof from === \\\"object\\\" || typeof from === \\\"function\\\") {\\n      for (let key of __getOwnPropNames(from))\\n        if (!__hasOwnProp.call(to, key) && key !== except)\\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\\n    }\\n    return to;\\n  };\\n  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\\n    // If the importer is in node compatibility mode or this is not an ESM\\n    // file that has been converted to a CommonJS file using a Babel-\\n    // compatible transform (i.e. \\\"__esModule\\\" has not been set), then set\\n    // \\\"default\\\" to the CommonJS \\\"module.exports\\\" for node compatibility.\\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \\\"default\\\", { value: mod, enumerable: true }) : target,\\n    mod\\n  ));\\n\\n  // node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\\n  var require_base64_js = __commonJS({\\n    \\\"node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\\\"(exports) {\\n      \\\"use strict\\\";\\n      init_dist();\\n      exports.byteLength = byteLength;\\n      exports.toByteArray = toByteArray;\\n      exports.fromByteArray = fromByteArray;\\n      var lookup = [];\\n      var revLookup = [];\\n      var Arr = typeof Uint8Array !== \\\"undefined\\\" ? Uint8Array : Array;\\n      var code = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n      for (i = 0, len = code.length; i < len; ++i) {\\n        lookup[i] = code[i];\\n        revLookup[code.charCodeAt(i)] = i;\\n      }\\n      var i;\\n      var len;\\n      revLookup[\\\"-\\\".charCodeAt(0)] = 62;\\n      revLookup[\\\"_\\\".charCodeAt(0)] = 63;\\n      function getLens(b64) {\\n        var len2 = b64.length;\\n        if (len2 % 4 > 0) {\\n          throw new Error(\\\"Invalid string. Length must be a multiple of 4\\\");\\n        }\\n        var validLen = b64.indexOf(\\\"=\\\");\\n        if (validLen === -1)\\n          validLen = len2;\\n        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\\n        return [validLen, placeHoldersLen];\\n      }\\n      function byteLength(b64) {\\n        var lens = getLens(b64);\\n        var validLen = lens[0];\\n        var placeHoldersLen = lens[1];\\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\\n      }\\n      function _byteLength(b64, validLen, placeHoldersLen) {\\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\\n      }\\n      function toByteArray(b64) {\\n        var tmp;\\n        var lens = getLens(b64);\\n        var validLen = lens[0];\\n        var placeHoldersLen = lens[1];\\n        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\\n        var curByte = 0;\\n        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\\n        var i2;\\n        for (i2 = 0; i2 < len2; i2 += 4) {\\n          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\\n          arr[curByte++] = tmp >> 16 & 255;\\n          arr[curByte++] = tmp >> 8 & 255;\\n          arr[curByte++] = tmp & 255;\\n        }\\n        if (placeHoldersLen === 2) {\\n          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\\n          arr[curByte++] = tmp & 255;\\n        }\\n        if (placeHoldersLen === 1) {\\n          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\\n          arr[curByte++] = tmp >> 8 & 255;\\n          arr[curByte++] = tmp & 255;\\n        }\\n        return arr;\\n      }\\n      function tripletToBase64(num) {\\n        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\\n      }\\n      function encodeChunk(uint8, start, end) {\\n        var tmp;\\n        var output = [];\\n        for (var i2 = start; i2 < end; i2 += 3) {\\n          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\\n          output.push(tripletToBase64(tmp));\\n        }\\n        return output.join(\\\"\\\");\\n      }\\n      function fromByteArray(uint8) {\\n        var tmp;\\n        var len2 = uint8.length;\\n        var extraBytes = len2 % 3;\\n        var parts = [];\\n        var maxChunkLength = 16383;\\n        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\\n          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\\n        }\\n        if (extraBytes === 1) {\\n          tmp = uint8[len2 - 1];\\n          parts.push(\\n            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \\\"==\\\"\\n          );\\n        } else if (extraBytes === 2) {\\n          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\\n          parts.push(\\n            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \\\"=\\\"\\n          );\\n        }\\n        return parts.join(\\\"\\\");\\n      }\\n    }\\n  });\\n\\n  // node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\\n  var require_ieee754 = __commonJS({\\n    \\\"node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\\\"(exports) {\\n      init_dist();\\n      exports.read = function(buffer, offset, isLE, mLen, nBytes) {\\n        var e, m;\\n        var eLen = nBytes * 8 - mLen - 1;\\n        var eMax = (1 << eLen) - 1;\\n        var eBias = eMax >> 1;\\n        var nBits = -7;\\n        var i = isLE ? nBytes - 1 : 0;\\n        var d = isLE ? -1 : 1;\\n        var s2 = buffer[offset + i];\\n        i += d;\\n        e = s2 & (1 << -nBits) - 1;\\n        s2 >>= -nBits;\\n        nBits += eLen;\\n        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {\\n        }\\n        m = e & (1 << -nBits) - 1;\\n        e >>= -nBits;\\n        nBits += mLen;\\n        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {\\n        }\\n        if (e === 0) {\\n          e = 1 - eBias;\\n        } else if (e === eMax) {\\n          return m ? NaN : (s2 ? -1 : 1) * Infinity;\\n        } else {\\n          m = m + Math.pow(2, mLen);\\n          e = e - eBias;\\n        }\\n        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);\\n      };\\n      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\\n        var e, m, c;\\n        var eLen = nBytes * 8 - mLen - 1;\\n        var eMax = (1 << eLen) - 1;\\n        var eBias = eMax >> 1;\\n        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\\n        var i = isLE ? 0 : nBytes - 1;\\n        var d = isLE ? 1 : -1;\\n        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\\n        value = Math.abs(value);\\n        if (isNaN(value) || value === Infinity) {\\n          m = isNaN(value) ? 1 : 0;\\n          e = eMax;\\n        } else {\\n          e = Math.floor(Math.log(value) / Math.LN2);\\n          if (value * (c = Math.pow(2, -e)) < 1) {\\n            e--;\\n            c *= 2;\\n          }\\n          if (e + eBias >= 1) {\\n            value += rt / c;\\n          } else {\\n            value += rt * Math.pow(2, 1 - eBias);\\n          }\\n          if (value * c >= 2) {\\n            e++;\\n            c /= 2;\\n          }\\n          if (e + eBias >= eMax) {\\n            m = 0;\\n            e = eMax;\\n          } else if (e + eBias >= 1) {\\n            m = (value * c - 1) * Math.pow(2, mLen);\\n            e = e + eBias;\\n          } else {\\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\\n            e = 0;\\n          }\\n        }\\n        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {\\n        }\\n        e = e << mLen | m;\\n        eLen += mLen;\\n        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {\\n        }\\n        buffer[offset + i - d] |= s2 * 128;\\n      };\\n    }\\n  });\\n\\n  // node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js\\n  var require_buffer = __commonJS({\\n    \\\"node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js\\\"(exports) {\\n      \\\"use strict\\\";\\n      init_dist();\\n      var base64 = require_base64_js();\\n      var ieee754 = require_ieee754();\\n      var customInspectSymbol = typeof Symbol === \\\"function\\\" && typeof Symbol[\\\"for\\\"] === \\\"function\\\" ? Symbol[\\\"for\\\"](\\\"nodejs.util.inspect.custom\\\") : null;\\n      exports.Buffer = Buffer2;\\n      exports.SlowBuffer = SlowBuffer;\\n      exports.INSPECT_MAX_BYTES = 50;\\n      var K_MAX_LENGTH = 2147483647;\\n      exports.kMaxLength = K_MAX_LENGTH;\\n      var { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;\\n      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();\\n      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== \\\"undefined\\\" && typeof console.error === \\\"function\\\") {\\n        console.error(\\n          \\\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\\\"\\n        );\\n      }\\n      function typedArraySupport() {\\n        try {\\n          const arr = new GlobalUint8Array(1);\\n          const proto = { foo: function() {\\n            return 42;\\n          } };\\n          Object.setPrototypeOf(proto, GlobalUint8Array.prototype);\\n          Object.setPrototypeOf(arr, proto);\\n          return arr.foo() === 42;\\n        } catch (e) {\\n          return false;\\n        }\\n      }\\n      Object.defineProperty(Buffer2.prototype, \\\"parent\\\", {\\n        enumerable: true,\\n        get: function() {\\n          if (!Buffer2.isBuffer(this))\\n            return void 0;\\n          return this.buffer;\\n        }\\n      });\\n      Object.defineProperty(Buffer2.prototype, \\\"offset\\\", {\\n        enumerable: true,\\n        get: function() {\\n          if (!Buffer2.isBuffer(this))\\n            return void 0;\\n          return this.byteOffset;\\n        }\\n      });\\n      function createBuffer(length) {\\n        if (length > K_MAX_LENGTH) {\\n          throw new RangeError('The value \\\"' + length + '\\\" is invalid for option \\\"size\\\"');\\n        }\\n        const buf = new GlobalUint8Array(length);\\n        Object.setPrototypeOf(buf, Buffer2.prototype);\\n        return buf;\\n      }\\n      function Buffer2(arg, encodingOrOffset, length) {\\n        if (typeof arg === \\\"number\\\") {\\n          if (typeof encodingOrOffset === \\\"string\\\") {\\n            throw new TypeError(\\n              'The \\\"string\\\" argument must be of type string. Received type number'\\n            );\\n          }\\n          return allocUnsafe(arg);\\n        }\\n        return from(arg, encodingOrOffset, length);\\n      }\\n      Buffer2.poolSize = 8192;\\n      function from(value, encodingOrOffset, length) {\\n        if (typeof value === \\\"string\\\") {\\n          return fromString(value, encodingOrOffset);\\n        }\\n        if (GlobalArrayBuffer.isView(value)) {\\n          return fromArrayView(value);\\n        }\\n        if (value == null) {\\n          throw new TypeError(\\n            \\\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \\\" + typeof value\\n          );\\n        }\\n        if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {\\n          return fromArrayBuffer(value, encodingOrOffset, length);\\n        }\\n        if (typeof GlobalSharedArrayBuffer !== \\\"undefined\\\" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {\\n          return fromArrayBuffer(value, encodingOrOffset, length);\\n        }\\n        if (typeof value === \\\"number\\\") {\\n          throw new TypeError(\\n            'The \\\"value\\\" argument must not be of type number. Received type number'\\n          );\\n        }\\n        const valueOf = value.valueOf && value.valueOf();\\n        if (valueOf != null && valueOf !== value) {\\n          return Buffer2.from(valueOf, encodingOrOffset, length);\\n        }\\n        const b = fromObject(value);\\n        if (b)\\n          return b;\\n        if (typeof Symbol !== \\\"undefined\\\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \\\"function\\\") {\\n          return Buffer2.from(value[Symbol.toPrimitive](\\\"string\\\"), encodingOrOffset, length);\\n        }\\n        throw new TypeError(\\n          \\\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \\\" + typeof value\\n        );\\n      }\\n      Buffer2.from = function(value, encodingOrOffset, length) {\\n        return from(value, encodingOrOffset, length);\\n      };\\n      Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);\\n      Object.setPrototypeOf(Buffer2, GlobalUint8Array);\\n      function assertSize(size) {\\n        if (typeof size !== \\\"number\\\") {\\n          throw new TypeError('\\\"size\\\" argument must be of type number');\\n        } else if (size < 0) {\\n          throw new RangeError('The value \\\"' + size + '\\\" is invalid for option \\\"size\\\"');\\n        }\\n      }\\n      function alloc(size, fill, encoding) {\\n        assertSize(size);\\n        if (size <= 0) {\\n          return createBuffer(size);\\n        }\\n        if (fill !== void 0) {\\n          return typeof encoding === \\\"string\\\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\\n        }\\n        return createBuffer(size);\\n      }\\n      Buffer2.alloc = function(size, fill, encoding) {\\n        return alloc(size, fill, encoding);\\n      };\\n      function allocUnsafe(size) {\\n        assertSize(size);\\n        return createBuffer(size < 0 ? 0 : checked(size) | 0);\\n      }\\n      Buffer2.allocUnsafe = function(size) {\\n        return allocUnsafe(size);\\n      };\\n      Buffer2.allocUnsafeSlow = function(size) {\\n        return allocUnsafe(size);\\n      };\\n      function fromString(string, encoding) {\\n        if (typeof encoding !== \\\"string\\\" || encoding === \\\"\\\") {\\n          encoding = \\\"utf8\\\";\\n        }\\n        if (!Buffer2.isEncoding(encoding)) {\\n          throw new TypeError(\\\"Unknown encoding: \\\" + encoding);\\n        }\\n        const length = byteLength(string, encoding) | 0;\\n        let buf = createBuffer(length);\\n        const actual = buf.write(string, encoding);\\n        if (actual !== length) {\\n          buf = buf.slice(0, actual);\\n        }\\n        return buf;\\n      }\\n      function fromArrayLike(array) {\\n        const length = array.length < 0 ? 0 : checked(array.length) | 0;\\n        const buf = createBuffer(length);\\n        for (let i = 0; i < length; i += 1) {\\n          buf[i] = array[i] & 255;\\n        }\\n        return buf;\\n      }\\n      function fromArrayView(arrayView) {\\n        if (isInstance(arrayView, GlobalUint8Array)) {\\n          const copy = new GlobalUint8Array(arrayView);\\n          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\\n        }\\n        return fromArrayLike(arrayView);\\n      }\\n      function fromArrayBuffer(array, byteOffset, length) {\\n        if (byteOffset < 0 || array.byteLength < byteOffset) {\\n          throw new RangeError('\\\"offset\\\" is outside of buffer bounds');\\n        }\\n        if (array.byteLength < byteOffset + (length || 0)) {\\n          throw new RangeError('\\\"length\\\" is outside of buffer bounds');\\n        }\\n        let buf;\\n        if (byteOffset === void 0 && length === void 0) {\\n          buf = new GlobalUint8Array(array);\\n        } else if (length === void 0) {\\n          buf = new GlobalUint8Array(array, byteOffset);\\n        } else {\\n          buf = new GlobalUint8Array(array, byteOffset, length);\\n        }\\n        Object.setPrototypeOf(buf, Buffer2.prototype);\\n        return buf;\\n      }\\n      function fromObject(obj) {\\n        if (Buffer2.isBuffer(obj)) {\\n          const len = checked(obj.length) | 0;\\n          const buf = createBuffer(len);\\n          if (buf.length === 0) {\\n            return buf;\\n          }\\n          obj.copy(buf, 0, 0, len);\\n          return buf;\\n        }\\n        if (obj.length !== void 0) {\\n          if (typeof obj.length !== \\\"number\\\" || numberIsNaN(obj.length)) {\\n            return createBuffer(0);\\n          }\\n          return fromArrayLike(obj);\\n        }\\n        if (obj.type === \\\"Buffer\\\" && Array.isArray(obj.data)) {\\n          return fromArrayLike(obj.data);\\n        }\\n      }\\n      function checked(length) {\\n        if (length >= K_MAX_LENGTH) {\\n          throw new RangeError(\\\"Attempt to allocate Buffer larger than maximum size: 0x\\\" + K_MAX_LENGTH.toString(16) + \\\" bytes\\\");\\n        }\\n        return length | 0;\\n      }\\n      function SlowBuffer(length) {\\n        if (+length != length) {\\n          length = 0;\\n        }\\n        return Buffer2.alloc(+length);\\n      }\\n      Buffer2.isBuffer = function isBuffer(b) {\\n        return b != null && b._isBuffer === true && b !== Buffer2.prototype;\\n      };\\n      Buffer2.compare = function compare(a, b) {\\n        if (isInstance(a, GlobalUint8Array))\\n          a = Buffer2.from(a, a.offset, a.byteLength);\\n        if (isInstance(b, GlobalUint8Array))\\n          b = Buffer2.from(b, b.offset, b.byteLength);\\n        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {\\n          throw new TypeError(\\n            'The \\\"buf1\\\", \\\"buf2\\\" arguments must be one of type Buffer or Uint8Array'\\n          );\\n        }\\n        if (a === b)\\n          return 0;\\n        let x = a.length;\\n        let y = b.length;\\n        for (let i = 0, len = Math.min(x, y); i < len; ++i) {\\n          if (a[i] !== b[i]) {\\n            x = a[i];\\n            y = b[i];\\n            break;\\n          }\\n        }\\n        if (x < y)\\n          return -1;\\n        if (y < x)\\n          return 1;\\n        return 0;\\n      };\\n      Buffer2.isEncoding = function isEncoding(encoding) {\\n        switch (String(encoding).toLowerCase()) {\\n          case \\\"hex\\\":\\n          case \\\"utf8\\\":\\n          case \\\"utf-8\\\":\\n          case \\\"ascii\\\":\\n          case \\\"latin1\\\":\\n          case \\\"binary\\\":\\n          case \\\"base64\\\":\\n          case \\\"ucs2\\\":\\n          case \\\"ucs-2\\\":\\n          case \\\"utf16le\\\":\\n          case \\\"utf-16le\\\":\\n            return true;\\n          default:\\n            return false;\\n        }\\n      };\\n      Buffer2.concat = function concat(list, length) {\\n        if (!Array.isArray(list)) {\\n          throw new TypeError('\\\"list\\\" argument must be an Array of Buffers');\\n        }\\n        if (list.length === 0) {\\n          return Buffer2.alloc(0);\\n        }\\n        let i;\\n        if (length === void 0) {\\n          length = 0;\\n          for (i = 0; i < list.length; ++i) {\\n            length += list[i].length;\\n          }\\n        }\\n        const buffer = Buffer2.allocUnsafe(length);\\n        let pos = 0;\\n        for (i = 0; i < list.length; ++i) {\\n          let buf = list[i];\\n          if (isInstance(buf, GlobalUint8Array)) {\\n            if (pos + buf.length > buffer.length) {\\n              if (!Buffer2.isBuffer(buf))\\n                buf = Buffer2.from(buf);\\n              buf.copy(buffer, pos);\\n            } else {\\n              GlobalUint8Array.prototype.set.call(\\n                buffer,\\n                buf,\\n                pos\\n              );\\n            }\\n          } else if (!Buffer2.isBuffer(buf)) {\\n            throw new TypeError('\\\"list\\\" argument must be an Array of Buffers');\\n          } else {\\n            buf.copy(buffer, pos);\\n          }\\n          pos += buf.length;\\n        }\\n        return buffer;\\n      };\\n      function byteLength(string, encoding) {\\n        if (Buffer2.isBuffer(string)) {\\n          return string.length;\\n        }\\n        if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {\\n          return string.byteLength;\\n        }\\n        if (typeof string !== \\\"string\\\") {\\n          throw new TypeError(\\n            'The \\\"string\\\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string\\n          );\\n        }\\n        const len = string.length;\\n        const mustMatch = arguments.length > 2 && arguments[2] === true;\\n        if (!mustMatch && len === 0)\\n          return 0;\\n        let loweredCase = false;\\n        for (; ; ) {\\n          switch (encoding) {\\n            case \\\"ascii\\\":\\n            case \\\"latin1\\\":\\n            case \\\"binary\\\":\\n              return len;\\n            case \\\"utf8\\\":\\n            case \\\"utf-8\\\":\\n              return utf8ToBytes(string).length;\\n            case \\\"ucs2\\\":\\n            case \\\"ucs-2\\\":\\n            case \\\"utf16le\\\":\\n            case \\\"utf-16le\\\":\\n              return len * 2;\\n            case \\\"hex\\\":\\n              return len >>> 1;\\n            case \\\"base64\\\":\\n              return base64ToBytes(string).length;\\n            default:\\n              if (loweredCase) {\\n                return mustMatch ? -1 : utf8ToBytes(string).length;\\n              }\\n              encoding = (\\\"\\\" + encoding).toLowerCase();\\n              loweredCase = true;\\n          }\\n        }\\n      }\\n      Buffer2.byteLength = byteLength;\\n      function slowToString(encoding, start, end) {\\n        let loweredCase = false;\\n        if (start === void 0 || start < 0) {\\n          start = 0;\\n        }\\n        if (start > this.length) {\\n          return \\\"\\\";\\n        }\\n        if (end === void 0 || end > this.length) {\\n          end = this.length;\\n        }\\n        if (end <= 0) {\\n          return \\\"\\\";\\n        }\\n        end >>>= 0;\\n        start >>>= 0;\\n        if (end <= start) {\\n          return \\\"\\\";\\n        }\\n        if (!encoding)\\n          encoding = \\\"utf8\\\";\\n        while (true) {\\n          switch (encoding) {\\n            case \\\"hex\\\":\\n              return hexSlice(this, start, end);\\n            case \\\"utf8\\\":\\n            case \\\"utf-8\\\":\\n              return utf8Slice(this, start, end);\\n            case \\\"ascii\\\":\\n              return asciiSlice(this, start, end);\\n            case \\\"latin1\\\":\\n            case \\\"binary\\\":\\n              return latin1Slice(this, start, end);\\n            case \\\"base64\\\":\\n              return base64Slice(this, start, end);\\n            case \\\"ucs2\\\":\\n            case \\\"ucs-2\\\":\\n            case \\\"utf16le\\\":\\n            case \\\"utf-16le\\\":\\n              return utf16leSlice(this, start, end);\\n            default:\\n              if (loweredCase)\\n                throw new TypeError(\\\"Unknown encoding: \\\" + encoding);\\n              encoding = (encoding + \\\"\\\").toLowerCase();\\n              loweredCase = true;\\n          }\\n        }\\n      }\\n      Buffer2.prototype._isBuffer = true;\\n      function swap(b, n, m) {\\n        const i = b[n];\\n        b[n] = b[m];\\n        b[m] = i;\\n      }\\n      Buffer2.prototype.swap16 = function swap16() {\\n        const len = this.length;\\n        if (len % 2 !== 0) {\\n          throw new RangeError(\\\"Buffer size must be a multiple of 16-bits\\\");\\n        }\\n        for (let i = 0; i < len; i += 2) {\\n          swap(this, i, i + 1);\\n        }\\n        return this;\\n      };\\n      Buffer2.prototype.swap32 = function swap32() {\\n        const len = this.length;\\n        if (len % 4 !== 0) {\\n          throw new RangeError(\\\"Buffer size must be a multiple of 32-bits\\\");\\n        }\\n        for (let i = 0; i < len; i += 4) {\\n          swap(this, i, i + 3);\\n          swap(this, i + 1, i + 2);\\n        }\\n        return this;\\n      };\\n      Buffer2.prototype.swap64 = function swap64() {\\n        const len = this.length;\\n        if (len % 8 !== 0) {\\n          throw new RangeError(\\\"Buffer size must be a multiple of 64-bits\\\");\\n        }\\n        for (let i = 0; i < len; i += 8) {\\n          swap(this, i, i + 7);\\n          swap(this, i + 1, i + 6);\\n          swap(this, i + 2, i + 5);\\n          swap(this, i + 3, i + 4);\\n        }\\n        return this;\\n      };\\n      Buffer2.prototype.toString = function toString() {\\n        const length = this.length;\\n        if (length === 0)\\n          return \\\"\\\";\\n        if (arguments.length === 0)\\n          return utf8Slice(this, 0, length);\\n        return slowToString.apply(this, arguments);\\n      };\\n      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;\\n      Buffer2.prototype.equals = function equals(b) {\\n        if (!Buffer2.isBuffer(b))\\n          throw new TypeError(\\\"Argument must be a Buffer\\\");\\n        if (this === b)\\n          return true;\\n        return Buffer2.compare(this, b) === 0;\\n      };\\n      Buffer2.prototype.inspect = function inspect() {\\n        let str = \\\"\\\";\\n        const max = exports.INSPECT_MAX_BYTES;\\n        str = this.toString(\\\"hex\\\", 0, max).replace(/(.{2})/g, \\\"$1 \\\").trim();\\n        if (this.length > max)\\n          str += \\\" ... \\\";\\n        return \\\"<Buffer \\\" + str + \\\">\\\";\\n      };\\n      if (customInspectSymbol) {\\n        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;\\n      }\\n      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\\n        if (isInstance(target, GlobalUint8Array)) {\\n          target = Buffer2.from(target, target.offset, target.byteLength);\\n        }\\n        if (!Buffer2.isBuffer(target)) {\\n          throw new TypeError(\\n            'The \\\"target\\\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target\\n          );\\n        }\\n        if (start === void 0) {\\n          start = 0;\\n        }\\n        if (end === void 0) {\\n          end = target ? target.length : 0;\\n        }\\n        if (thisStart === void 0) {\\n          thisStart = 0;\\n        }\\n        if (thisEnd === void 0) {\\n          thisEnd = this.length;\\n        }\\n        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\\n          throw new RangeError(\\\"out of range index\\\");\\n        }\\n        if (thisStart >= thisEnd && start >= end) {\\n          return 0;\\n        }\\n        if (thisStart >= thisEnd) {\\n          return -1;\\n        }\\n        if (start >= end) {\\n          return 1;\\n        }\\n        start >>>= 0;\\n        end >>>= 0;\\n        thisStart >>>= 0;\\n        thisEnd >>>= 0;\\n        if (this === target)\\n          return 0;\\n        let x = thisEnd - thisStart;\\n        let y = end - start;\\n        const len = Math.min(x, y);\\n        const thisCopy = this.slice(thisStart, thisEnd);\\n        const targetCopy = target.slice(start, end);\\n        for (let i = 0; i < len; ++i) {\\n          if (thisCopy[i] !== targetCopy[i]) {\\n            x = thisCopy[i];\\n            y = targetCopy[i];\\n            break;\\n          }\\n        }\\n        if (x < y)\\n          return -1;\\n        if (y < x)\\n          return 1;\\n        return 0;\\n      };\\n      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\\n        if (buffer.length === 0)\\n          return -1;\\n        if (typeof byteOffset === \\\"string\\\") {\\n          encoding = byteOffset;\\n          byteOffset = 0;\\n        } else if (byteOffset > 2147483647) {\\n          byteOffset = 2147483647;\\n        } else if (byteOffset < -2147483648) {\\n          byteOffset = -2147483648;\\n        }\\n        byteOffset = +byteOffset;\\n        if (numberIsNaN(byteOffset)) {\\n          byteOffset = dir ? 0 : buffer.length - 1;\\n        }\\n        if (byteOffset < 0)\\n          byteOffset = buffer.length + byteOffset;\\n        if (byteOffset >= buffer.length) {\\n          if (dir)\\n            return -1;\\n          else\\n            byteOffset = buffer.length - 1;\\n        } else if (byteOffset < 0) {\\n          if (dir)\\n            byteOffset = 0;\\n          else\\n            return -1;\\n        }\\n        if (typeof val === \\\"string\\\") {\\n          val = Buffer2.from(val, encoding);\\n        }\\n        if (Buffer2.isBuffer(val)) {\\n          if (val.length === 0) {\\n            return -1;\\n          }\\n          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\\n        } else if (typeof val === \\\"number\\\") {\\n          val = val & 255;\\n          if (typeof GlobalUint8Array.prototype.indexOf === \\\"function\\\") {\\n            if (dir) {\\n              return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset);\\n            } else {\\n              return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\\n            }\\n          }\\n          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\\n        }\\n        throw new TypeError(\\\"val must be string, number or Buffer\\\");\\n      }\\n      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\\n        let indexSize = 1;\\n        let arrLength = arr.length;\\n        let valLength = val.length;\\n        if (encoding !== void 0) {\\n          encoding = String(encoding).toLowerCase();\\n          if (encoding === \\\"ucs2\\\" || encoding === \\\"ucs-2\\\" || encoding === \\\"utf16le\\\" || encoding === \\\"utf-16le\\\") {\\n            if (arr.length < 2 || val.length < 2) {\\n              return -1;\\n            }\\n            indexSize = 2;\\n            arrLength /= 2;\\n            valLength /= 2;\\n            byteOffset /= 2;\\n          }\\n        }\\n        function read(buf, i2) {\\n          if (indexSize === 1) {\\n            return buf[i2];\\n          } else {\\n            return buf.readUInt16BE(i2 * indexSize);\\n          }\\n        }\\n        let i;\\n        if (dir) {\\n          let foundIndex = -1;\\n          for (i = byteOffset; i < arrLength; i++) {\\n            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\\n              if (foundIndex === -1)\\n                foundIndex = i;\\n              if (i - foundIndex + 1 === valLength)\\n                return foundIndex * indexSize;\\n            } else {\\n              if (foundIndex !== -1)\\n                i -= i - foundIndex;\\n              foundIndex = -1;\\n            }\\n          }\\n        } else {\\n          if (byteOffset + valLength > arrLength)\\n            byteOffset = arrLength - valLength;\\n          for (i = byteOffset; i >= 0; i--) {\\n            let found = true;\\n            for (let j = 0; j < valLength; j++) {\\n              if (read(arr, i + j) !== read(val, j)) {\\n                found = false;\\n                break;\\n              }\\n            }\\n            if (found)\\n              return i;\\n          }\\n        }\\n        return -1;\\n      }\\n      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {\\n        return this.indexOf(val, byteOffset, encoding) !== -1;\\n      };\\n      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\\n      };\\n      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\\n      };\\n      function hexWrite(buf, string, offset, length) {\\n        offset = Number(offset) || 0;\\n        const remaining = buf.length - offset;\\n        if (!length) {\\n          length = remaining;\\n        } else {\\n          length = Number(length);\\n          if (length > remaining) {\\n            length = remaining;\\n          }\\n        }\\n        const strLen = string.length;\\n        if (length > strLen / 2) {\\n          length = strLen / 2;\\n        }\\n        let i;\\n        for (i = 0; i < length; ++i) {\\n          const parsed = parseInt(string.substr(i * 2, 2), 16);\\n          if (numberIsNaN(parsed))\\n            return i;\\n          buf[offset + i] = parsed;\\n        }\\n        return i;\\n      }\\n      function utf8Write(buf, string, offset, length) {\\n        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\\n      }\\n      function asciiWrite(buf, string, offset, length) {\\n        return blitBuffer(asciiToBytes(string), buf, offset, length);\\n      }\\n      function base64Write(buf, string, offset, length) {\\n        return blitBuffer(base64ToBytes(string), buf, offset, length);\\n      }\\n      function ucs2Write(buf, string, offset, length) {\\n        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\\n      }\\n      Buffer2.prototype.write = function write(string, offset, length, encoding) {\\n        if (offset === void 0) {\\n          encoding = \\\"utf8\\\";\\n          length = this.length;\\n          offset = 0;\\n        } else if (length === void 0 && typeof offset === \\\"string\\\") {\\n          encoding = offset;\\n          length = this.length;\\n          offset = 0;\\n        } else if (isFinite(offset)) {\\n          offset = offset >>> 0;\\n          if (isFinite(length)) {\\n            length = length >>> 0;\\n            if (encoding === void 0)\\n              encoding = \\\"utf8\\\";\\n          } else {\\n            encoding = length;\\n            length = void 0;\\n          }\\n        } else {\\n          throw new Error(\\n            \\\"Buffer.write(string, encoding, offset[, length]) is no longer supported\\\"\\n          );\\n        }\\n        const remaining = this.length - offset;\\n        if (length === void 0 || length > remaining)\\n          length = remaining;\\n        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\\n          throw new RangeError(\\\"Attempt to write outside buffer bounds\\\");\\n        }\\n        if (!encoding)\\n          encoding = \\\"utf8\\\";\\n        let loweredCase = false;\\n        for (; ; ) {\\n          switch (encoding) {\\n            case \\\"hex\\\":\\n              return hexWrite(this, string, offset, length);\\n            case \\\"utf8\\\":\\n            case \\\"utf-8\\\":\\n              return utf8Write(this, string, offset, length);\\n            case \\\"ascii\\\":\\n            case \\\"latin1\\\":\\n            case \\\"binary\\\":\\n              return asciiWrite(this, string, offset, length);\\n            case \\\"base64\\\":\\n              return base64Write(this, string, offset, length);\\n            case \\\"ucs2\\\":\\n            case \\\"ucs-2\\\":\\n            case \\\"utf16le\\\":\\n            case \\\"utf-16le\\\":\\n              return ucs2Write(this, string, offset, length);\\n            default:\\n              if (loweredCase)\\n                throw new TypeError(\\\"Unknown encoding: \\\" + encoding);\\n              encoding = (\\\"\\\" + encoding).toLowerCase();\\n              loweredCase = true;\\n          }\\n        }\\n      };\\n      Buffer2.prototype.toJSON = function toJSON() {\\n        return {\\n          type: \\\"Buffer\\\",\\n          data: Array.prototype.slice.call(this._arr || this, 0)\\n        };\\n      };\\n      function base64Slice(buf, start, end) {\\n        if (start === 0 && end === buf.length) {\\n          return base64.fromByteArray(buf);\\n        } else {\\n          return base64.fromByteArray(buf.slice(start, end));\\n        }\\n      }\\n      function utf8Slice(buf, start, end) {\\n        end = Math.min(buf.length, end);\\n        const res = [];\\n        let i = start;\\n        while (i < end) {\\n          const firstByte = buf[i];\\n          let codePoint = null;\\n          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\\n          if (i + bytesPerSequence <= end) {\\n            let secondByte, thirdByte, fourthByte, tempCodePoint;\\n            switch (bytesPerSequence) {\\n              case 1:\\n                if (firstByte < 128) {\\n                  codePoint = firstByte;\\n                }\\n                break;\\n              case 2:\\n                secondByte = buf[i + 1];\\n                if ((secondByte & 192) === 128) {\\n                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\\n                  if (tempCodePoint > 127) {\\n                    codePoint = tempCodePoint;\\n                  }\\n                }\\n                break;\\n              case 3:\\n                secondByte = buf[i + 1];\\n                thirdByte = buf[i + 2];\\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\\n                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\\n                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\\n                    codePoint = tempCodePoint;\\n                  }\\n                }\\n                break;\\n              case 4:\\n                secondByte = buf[i + 1];\\n                thirdByte = buf[i + 2];\\n                fourthByte = buf[i + 3];\\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\\n                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\\n                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\\n                    codePoint = tempCodePoint;\\n                  }\\n                }\\n            }\\n          }\\n          if (codePoint === null) {\\n            codePoint = 65533;\\n            bytesPerSequence = 1;\\n          } else if (codePoint > 65535) {\\n            codePoint -= 65536;\\n            res.push(codePoint >>> 10 & 1023 | 55296);\\n            codePoint = 56320 | codePoint & 1023;\\n          }\\n          res.push(codePoint);\\n          i += bytesPerSequence;\\n        }\\n        return decodeCodePointsArray(res);\\n      }\\n      var MAX_ARGUMENTS_LENGTH = 4096;\\n      function decodeCodePointsArray(codePoints) {\\n        const len = codePoints.length;\\n        if (len <= MAX_ARGUMENTS_LENGTH) {\\n          return String.fromCharCode.apply(String, codePoints);\\n        }\\n        let res = \\\"\\\";\\n        let i = 0;\\n        while (i < len) {\\n          res += String.fromCharCode.apply(\\n            String,\\n            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\\n          );\\n        }\\n        return res;\\n      }\\n      function asciiSlice(buf, start, end) {\\n        let ret = \\\"\\\";\\n        end = Math.min(buf.length, end);\\n        for (let i = start; i < end; ++i) {\\n          ret += String.fromCharCode(buf[i] & 127);\\n        }\\n        return ret;\\n      }\\n      function latin1Slice(buf, start, end) {\\n        let ret = \\\"\\\";\\n        end = Math.min(buf.length, end);\\n        for (let i = start; i < end; ++i) {\\n          ret += String.fromCharCode(buf[i]);\\n        }\\n        return ret;\\n      }\\n      function hexSlice(buf, start, end) {\\n        const len = buf.length;\\n        if (!start || start < 0)\\n          start = 0;\\n        if (!end || end < 0 || end > len)\\n          end = len;\\n        let out = \\\"\\\";\\n        for (let i = start; i < end; ++i) {\\n          out += hexSliceLookupTable[buf[i]];\\n        }\\n        return out;\\n      }\\n      function utf16leSlice(buf, start, end) {\\n        const bytes = buf.slice(start, end);\\n        let res = \\\"\\\";\\n        for (let i = 0; i < bytes.length - 1; i += 2) {\\n          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\\n        }\\n        return res;\\n      }\\n      Buffer2.prototype.slice = function slice(start, end) {\\n        const len = this.length;\\n        start = ~~start;\\n        end = end === void 0 ? len : ~~end;\\n        if (start < 0) {\\n          start += len;\\n          if (start < 0)\\n            start = 0;\\n        } else if (start > len) {\\n          start = len;\\n        }\\n        if (end < 0) {\\n          end += len;\\n          if (end < 0)\\n            end = 0;\\n        } else if (end > len) {\\n          end = len;\\n        }\\n        if (end < start)\\n          end = start;\\n        const newBuf = this.subarray(start, end);\\n        Object.setPrototypeOf(newBuf, Buffer2.prototype);\\n        return newBuf;\\n      };\\n      function checkOffset(offset, ext, length) {\\n        if (offset % 1 !== 0 || offset < 0)\\n          throw new RangeError(\\\"offset is not uint\\\");\\n        if (offset + ext > length)\\n          throw new RangeError(\\\"Trying to access beyond buffer length\\\");\\n      }\\n      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\\n        offset = offset >>> 0;\\n        byteLength2 = byteLength2 >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, byteLength2, this.length);\\n        let val = this[offset];\\n        let mul = 1;\\n        let i = 0;\\n        while (++i < byteLength2 && (mul *= 256)) {\\n          val += this[offset + i] * mul;\\n        }\\n        return val;\\n      };\\n      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\\n        offset = offset >>> 0;\\n        byteLength2 = byteLength2 >>> 0;\\n        if (!noAssert) {\\n          checkOffset(offset, byteLength2, this.length);\\n        }\\n        let val = this[offset + --byteLength2];\\n        let mul = 1;\\n        while (byteLength2 > 0 && (mul *= 256)) {\\n          val += this[offset + --byteLength2] * mul;\\n        }\\n        return val;\\n      };\\n      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, 1, this.length);\\n        return this[offset];\\n      };\\n      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, 2, this.length);\\n        return this[offset] | this[offset + 1] << 8;\\n      };\\n      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, 2, this.length);\\n        return this[offset] << 8 | this[offset + 1];\\n      };\\n      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, 4, this.length);\\n        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\\n      };\\n      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, 4, this.length);\\n        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\\n      };\\n      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\\n        offset = offset >>> 0;\\n        validateNumber(offset, \\\"offset\\\");\\n        const first = this[offset];\\n        const last = this[offset + 7];\\n        if (first === void 0 || last === void 0) {\\n          boundsError(offset, this.length - 8);\\n        }\\n        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\\n        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\\n        return BigInt(lo) + (BigInt(hi) << BigInt(32));\\n      });\\n      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\\n        offset = offset >>> 0;\\n        validateNumber(offset, \\\"offset\\\");\\n        const first = this[offset];\\n        const last = this[offset + 7];\\n        if (first === void 0 || last === void 0) {\\n          boundsError(offset, this.length - 8);\\n        }\\n        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\\n        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\\n        return (BigInt(hi) << BigInt(32)) + BigInt(lo);\\n      });\\n      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\\n        offset = offset >>> 0;\\n        byteLength2 = byteLength2 >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, byteLength2, this.length);\\n        let val = this[offset];\\n        let mul = 1;\\n        let i = 0;\\n        while (++i < byteLength2 && (mul *= 256)) {\\n          val += this[offset + i] * mul;\\n        }\\n        mul *= 128;\\n        if (val >= mul)\\n          val -= Math.pow(2, 8 * byteLength2);\\n        return val;\\n      };\\n      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\\n        offset = offset >>> 0;\\n        byteLength2 = byteLength2 >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, byteLength2, this.length);\\n        let i = byteLength2;\\n        let mul = 1;\\n        let val = this[offset + --i];\\n        while (i > 0 && (mul *= 256)) {\\n          val += this[offset + --i] * mul;\\n        }\\n        mul *= 128;\\n        if (val >= mul)\\n          val -= Math.pow(2, 8 * byteLength2);\\n        return val;\\n      };\\n      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, 1, this.length);\\n        if (!(this[offset] & 128))\\n          return this[offset];\\n        return (255 - this[offset] + 1) * -1;\\n      };\\n      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, 2, this.length);\\n        const val = this[offset] | this[offset + 1] << 8;\\n        return val & 32768 ? val | 4294901760 : val;\\n      };\\n      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, 2, this.length);\\n        const val = this[offset + 1] | this[offset] << 8;\\n        return val & 32768 ? val | 4294901760 : val;\\n      };\\n      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, 4, this.length);\\n        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\\n      };\\n      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, 4, this.length);\\n        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\\n      };\\n      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\\n        offset = offset >>> 0;\\n        validateNumber(offset, \\\"offset\\\");\\n        const first = this[offset];\\n        const last = this[offset + 7];\\n        if (first === void 0 || last === void 0) {\\n          boundsError(offset, this.length - 8);\\n        }\\n        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);\\n        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\\n      });\\n      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\\n        offset = offset >>> 0;\\n        validateNumber(offset, \\\"offset\\\");\\n        const first = this[offset];\\n        const last = this[offset + 7];\\n        if (first === void 0 || last === void 0) {\\n          boundsError(offset, this.length - 8);\\n        }\\n        const val = (first << 24) + // Overflow\\n        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\\n        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\\n      });\\n      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, 4, this.length);\\n        return ieee754.read(this, offset, true, 23, 4);\\n      };\\n      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, 4, this.length);\\n        return ieee754.read(this, offset, false, 23, 4);\\n      };\\n      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, 8, this.length);\\n        return ieee754.read(this, offset, true, 52, 8);\\n      };\\n      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkOffset(offset, 8, this.length);\\n        return ieee754.read(this, offset, false, 52, 8);\\n      };\\n      function checkInt(buf, value, offset, ext, max, min) {\\n        if (!Buffer2.isBuffer(buf))\\n          throw new TypeError('\\\"buffer\\\" argument must be a Buffer instance');\\n        if (value > max || value < min)\\n          throw new RangeError('\\\"value\\\" argument is out of bounds');\\n        if (offset + ext > buf.length)\\n          throw new RangeError(\\\"Index out of range\\\");\\n      }\\n      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\\n        value = +value;\\n        offset = offset >>> 0;\\n        byteLength2 = byteLength2 >>> 0;\\n        if (!noAssert) {\\n          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\\n        }\\n        let mul = 1;\\n        let i = 0;\\n        this[offset] = value & 255;\\n        while (++i < byteLength2 && (mul *= 256)) {\\n          this[offset + i] = value / mul & 255;\\n        }\\n        return offset + byteLength2;\\n      };\\n      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\\n        value = +value;\\n        offset = offset >>> 0;\\n        byteLength2 = byteLength2 >>> 0;\\n        if (!noAssert) {\\n          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\\n        }\\n        let i = byteLength2 - 1;\\n        let mul = 1;\\n        this[offset + i] = value & 255;\\n        while (--i >= 0 && (mul *= 256)) {\\n          this[offset + i] = value / mul & 255;\\n        }\\n        return offset + byteLength2;\\n      };\\n      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\\n        value = +value;\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkInt(this, value, offset, 1, 255, 0);\\n        this[offset] = value & 255;\\n        return offset + 1;\\n      };\\n      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\\n        value = +value;\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkInt(this, value, offset, 2, 65535, 0);\\n        this[offset] = value & 255;\\n        this[offset + 1] = value >>> 8;\\n        return offset + 2;\\n      };\\n      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\\n        value = +value;\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkInt(this, value, offset, 2, 65535, 0);\\n        this[offset] = value >>> 8;\\n        this[offset + 1] = value & 255;\\n        return offset + 2;\\n      };\\n      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\\n        value = +value;\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkInt(this, value, offset, 4, 4294967295, 0);\\n        this[offset + 3] = value >>> 24;\\n        this[offset + 2] = value >>> 16;\\n        this[offset + 1] = value >>> 8;\\n        this[offset] = value & 255;\\n        return offset + 4;\\n      };\\n      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\\n        value = +value;\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkInt(this, value, offset, 4, 4294967295, 0);\\n        this[offset] = value >>> 24;\\n        this[offset + 1] = value >>> 16;\\n        this[offset + 2] = value >>> 8;\\n        this[offset + 3] = value & 255;\\n        return offset + 4;\\n      };\\n      function wrtBigUInt64LE(buf, value, offset, min, max) {\\n        checkIntBI(value, min, max, buf, offset, 7);\\n        let lo = Number(value & BigInt(4294967295));\\n        buf[offset++] = lo;\\n        lo = lo >> 8;\\n        buf[offset++] = lo;\\n        lo = lo >> 8;\\n        buf[offset++] = lo;\\n        lo = lo >> 8;\\n        buf[offset++] = lo;\\n        let hi = Number(value >> BigInt(32) & BigInt(4294967295));\\n        buf[offset++] = hi;\\n        hi = hi >> 8;\\n        buf[offset++] = hi;\\n        hi = hi >> 8;\\n        buf[offset++] = hi;\\n        hi = hi >> 8;\\n        buf[offset++] = hi;\\n        return offset;\\n      }\\n      function wrtBigUInt64BE(buf, value, offset, min, max) {\\n        checkIntBI(value, min, max, buf, offset, 7);\\n        let lo = Number(value & BigInt(4294967295));\\n        buf[offset + 7] = lo;\\n        lo = lo >> 8;\\n        buf[offset + 6] = lo;\\n        lo = lo >> 8;\\n        buf[offset + 5] = lo;\\n        lo = lo >> 8;\\n        buf[offset + 4] = lo;\\n        let hi = Number(value >> BigInt(32) & BigInt(4294967295));\\n        buf[offset + 3] = hi;\\n        hi = hi >> 8;\\n        buf[offset + 2] = hi;\\n        hi = hi >> 8;\\n        buf[offset + 1] = hi;\\n        hi = hi >> 8;\\n        buf[offset] = hi;\\n        return offset + 8;\\n      }\\n      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {\\n        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\\\"0xffffffffffffffff\\\"));\\n      });\\n      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {\\n        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\\\"0xffffffffffffffff\\\"));\\n      });\\n      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\\n        value = +value;\\n        offset = offset >>> 0;\\n        if (!noAssert) {\\n          const limit = Math.pow(2, 8 * byteLength2 - 1);\\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\\n        }\\n        let i = 0;\\n        let mul = 1;\\n        let sub = 0;\\n        this[offset] = value & 255;\\n        while (++i < byteLength2 && (mul *= 256)) {\\n          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\\n            sub = 1;\\n          }\\n          this[offset + i] = (value / mul >> 0) - sub & 255;\\n        }\\n        return offset + byteLength2;\\n      };\\n      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\\n        value = +value;\\n        offset = offset >>> 0;\\n        if (!noAssert) {\\n          const limit = Math.pow(2, 8 * byteLength2 - 1);\\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\\n        }\\n        let i = byteLength2 - 1;\\n        let mul = 1;\\n        let sub = 0;\\n        this[offset + i] = value & 255;\\n        while (--i >= 0 && (mul *= 256)) {\\n          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\\n            sub = 1;\\n          }\\n          this[offset + i] = (value / mul >> 0) - sub & 255;\\n        }\\n        return offset + byteLength2;\\n      };\\n      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\\n        value = +value;\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkInt(this, value, offset, 1, 127, -128);\\n        if (value < 0)\\n          value = 255 + value + 1;\\n        this[offset] = value & 255;\\n        return offset + 1;\\n      };\\n      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\\n        value = +value;\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkInt(this, value, offset, 2, 32767, -32768);\\n        this[offset] = value & 255;\\n        this[offset + 1] = value >>> 8;\\n        return offset + 2;\\n      };\\n      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\\n        value = +value;\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkInt(this, value, offset, 2, 32767, -32768);\\n        this[offset] = value >>> 8;\\n        this[offset + 1] = value & 255;\\n        return offset + 2;\\n      };\\n      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\\n        value = +value;\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkInt(this, value, offset, 4, 2147483647, -2147483648);\\n        this[offset] = value & 255;\\n        this[offset + 1] = value >>> 8;\\n        this[offset + 2] = value >>> 16;\\n        this[offset + 3] = value >>> 24;\\n        return offset + 4;\\n      };\\n      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\\n        value = +value;\\n        offset = offset >>> 0;\\n        if (!noAssert)\\n          checkInt(this, value, offset, 4, 2147483647, -2147483648);\\n        if (value < 0)\\n          value = 4294967295 + value + 1;\\n        this[offset] = value >>> 24;\\n        this[offset + 1] = value >>> 16;\\n        this[offset + 2] = value >>> 8;\\n        this[offset + 3] = value & 255;\\n        return offset + 4;\\n      };\\n      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {\\n        return wrtBigUInt64LE(this, value, offset, -BigInt(\\\"0x8000000000000000\\\"), BigInt(\\\"0x7fffffffffffffff\\\"));\\n      });\\n      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {\\n        return wrtBigUInt64BE(this, value, offset, -BigInt(\\\"0x8000000000000000\\\"), BigInt(\\\"0x7fffffffffffffff\\\"));\\n      });\\n      function checkIEEE754(buf, value, offset, ext, max, min) {\\n        if (offset + ext > buf.length)\\n          throw new RangeError(\\\"Index out of range\\\");\\n        if (offset < 0)\\n          throw new RangeError(\\\"Index out of range\\\");\\n      }\\n      function writeFloat(buf, value, offset, littleEndian, noAssert) {\\n        value = +value;\\n        offset = offset >>> 0;\\n        if (!noAssert) {\\n          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);\\n        }\\n        ieee754.write(buf, value, offset, littleEndian, 23, 4);\\n        return offset + 4;\\n      }\\n      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\\n        return writeFloat(this, value, offset, true, noAssert);\\n      };\\n      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\\n        return writeFloat(this, value, offset, false, noAssert);\\n      };\\n      function writeDouble(buf, value, offset, littleEndian, noAssert) {\\n        value = +value;\\n        offset = offset >>> 0;\\n        if (!noAssert) {\\n          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);\\n        }\\n        ieee754.write(buf, value, offset, littleEndian, 52, 8);\\n        return offset + 8;\\n      }\\n      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\\n        return writeDouble(this, value, offset, true, noAssert);\\n      };\\n      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\\n        return writeDouble(this, value, offset, false, noAssert);\\n      };\\n      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {\\n        if (!Buffer2.isBuffer(target))\\n          throw new TypeError(\\\"argument should be a Buffer\\\");\\n        if (!start)\\n          start = 0;\\n        if (!end && end !== 0)\\n          end = this.length;\\n        if (targetStart >= target.length)\\n          targetStart = target.length;\\n        if (!targetStart)\\n          targetStart = 0;\\n        if (end > 0 && end < start)\\n          end = start;\\n        if (end === start)\\n          return 0;\\n        if (target.length === 0 || this.length === 0)\\n          return 0;\\n        if (targetStart < 0) {\\n          throw new RangeError(\\\"targetStart out of bounds\\\");\\n        }\\n        if (start < 0 || start >= this.length)\\n          throw new RangeError(\\\"Index out of range\\\");\\n        if (end < 0)\\n          throw new RangeError(\\\"sourceEnd out of bounds\\\");\\n        if (end > this.length)\\n          end = this.length;\\n        if (target.length - targetStart < end - start) {\\n          end = target.length - targetStart + start;\\n        }\\n        const len = end - start;\\n        if (this === target && typeof GlobalUint8Array.prototype.copyWithin === \\\"function\\\") {\\n          this.copyWithin(targetStart, start, end);\\n        } else {\\n          GlobalUint8Array.prototype.set.call(\\n            target,\\n            this.subarray(start, end),\\n            targetStart\\n          );\\n        }\\n        return len;\\n      };\\n      Buffer2.prototype.fill = function fill(val, start, end, encoding) {\\n        if (typeof val === \\\"string\\\") {\\n          if (typeof start === \\\"string\\\") {\\n            encoding = start;\\n            start = 0;\\n            end = this.length;\\n          } else if (typeof end === \\\"string\\\") {\\n            encoding = end;\\n            end = this.length;\\n          }\\n          if (encoding !== void 0 && typeof encoding !== \\\"string\\\") {\\n            throw new TypeError(\\\"encoding must be a string\\\");\\n          }\\n          if (typeof encoding === \\\"string\\\" && !Buffer2.isEncoding(encoding)) {\\n            throw new TypeError(\\\"Unknown encoding: \\\" + encoding);\\n          }\\n          if (val.length === 1) {\\n            const code = val.charCodeAt(0);\\n            if (encoding === \\\"utf8\\\" && code < 128 || encoding === \\\"latin1\\\") {\\n              val = code;\\n            }\\n          }\\n        } else if (typeof val === \\\"number\\\") {\\n          val = val & 255;\\n        } else if (typeof val === \\\"boolean\\\") {\\n          val = Number(val);\\n        }\\n        if (start < 0 || this.length < start || this.length < end) {\\n          throw new RangeError(\\\"Out of range index\\\");\\n        }\\n        if (end <= start) {\\n          return this;\\n        }\\n        start = start >>> 0;\\n        end = end === void 0 ? this.length : end >>> 0;\\n        if (!val)\\n          val = 0;\\n        let i;\\n        if (typeof val === \\\"number\\\") {\\n          for (i = start; i < end; ++i) {\\n            this[i] = val;\\n          }\\n        } else {\\n          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);\\n          const len = bytes.length;\\n          if (len === 0) {\\n            throw new TypeError('The value \\\"' + val + '\\\" is invalid for argument \\\"value\\\"');\\n          }\\n          for (i = 0; i < end - start; ++i) {\\n            this[i + start] = bytes[i % len];\\n          }\\n        }\\n        return this;\\n      };\\n      var errors = {};\\n      function E(sym, getMessage, Base) {\\n        errors[sym] = class NodeError extends Base {\\n          constructor() {\\n            super();\\n            Object.defineProperty(this, \\\"message\\\", {\\n              value: getMessage.apply(this, arguments),\\n              writable: true,\\n              configurable: true\\n            });\\n            this.name = `${this.name} [${sym}]`;\\n            this.stack;\\n            delete this.name;\\n          }\\n          get code() {\\n            return sym;\\n          }\\n          set code(value) {\\n            Object.defineProperty(this, \\\"code\\\", {\\n              configurable: true,\\n              enumerable: true,\\n              value,\\n              writable: true\\n            });\\n          }\\n          toString() {\\n            return `${this.name} [${sym}]: ${this.message}`;\\n          }\\n        };\\n      }\\n      E(\\n        \\\"ERR_BUFFER_OUT_OF_BOUNDS\\\",\\n        function(name) {\\n          if (name) {\\n            return `${name} is outside of buffer bounds`;\\n          }\\n          return \\\"Attempt to access memory outside buffer bounds\\\";\\n        },\\n        RangeError\\n      );\\n      E(\\n        \\\"ERR_INVALID_ARG_TYPE\\\",\\n        function(name, actual) {\\n          return `The \\\"${name}\\\" argument must be of type number. Received type ${typeof actual}`;\\n        },\\n        TypeError\\n      );\\n      E(\\n        \\\"ERR_OUT_OF_RANGE\\\",\\n        function(str, range, input) {\\n          let msg = `The value of \\\"${str}\\\" is out of range.`;\\n          let received = input;\\n          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\\n            received = addNumericalSeparator(String(input));\\n          } else if (typeof input === \\\"bigint\\\") {\\n            received = String(input);\\n            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\\n              received = addNumericalSeparator(received);\\n            }\\n            received += \\\"n\\\";\\n          }\\n          msg += ` It must be ${range}. Received ${received}`;\\n          return msg;\\n        },\\n        RangeError\\n      );\\n      function addNumericalSeparator(val) {\\n        let res = \\\"\\\";\\n        let i = val.length;\\n        const start = val[0] === \\\"-\\\" ? 1 : 0;\\n        for (; i >= start + 4; i -= 3) {\\n          res = `_${val.slice(i - 3, i)}${res}`;\\n        }\\n        return `${val.slice(0, i)}${res}`;\\n      }\\n      function checkBounds(buf, offset, byteLength2) {\\n        validateNumber(offset, \\\"offset\\\");\\n        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {\\n          boundsError(offset, buf.length - (byteLength2 + 1));\\n        }\\n      }\\n      function checkIntBI(value, min, max, buf, offset, byteLength2) {\\n        if (value > max || value < min) {\\n          const n = typeof min === \\\"bigint\\\" ? \\\"n\\\" : \\\"\\\";\\n          let range;\\n          if (byteLength2 > 3) {\\n            if (min === 0 || min === BigInt(0)) {\\n              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;\\n            } else {\\n              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;\\n            }\\n          } else {\\n            range = `>= ${min}${n} and <= ${max}${n}`;\\n          }\\n          throw new errors.ERR_OUT_OF_RANGE(\\\"value\\\", range, value);\\n        }\\n        checkBounds(buf, offset, byteLength2);\\n      }\\n      function validateNumber(value, name) {\\n        if (typeof value !== \\\"number\\\") {\\n          throw new errors.ERR_INVALID_ARG_TYPE(name, \\\"number\\\", value);\\n        }\\n      }\\n      function boundsError(value, length, type) {\\n        if (Math.floor(value) !== value) {\\n          validateNumber(value, type);\\n          throw new errors.ERR_OUT_OF_RANGE(type || \\\"offset\\\", \\\"an integer\\\", value);\\n        }\\n        if (length < 0) {\\n          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\\n        }\\n        throw new errors.ERR_OUT_OF_RANGE(\\n          type || \\\"offset\\\",\\n          `>= ${type ? 1 : 0} and <= ${length}`,\\n          value\\n        );\\n      }\\n      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\\n      function base64clean(str) {\\n        str = str.split(\\\"=\\\")[0];\\n        str = str.trim().replace(INVALID_BASE64_RE, \\\"\\\");\\n        if (str.length < 2)\\n          return \\\"\\\";\\n        while (str.length % 4 !== 0) {\\n          str = str + \\\"=\\\";\\n        }\\n        return str;\\n      }\\n      function utf8ToBytes(string, units) {\\n        units = units || Infinity;\\n        let codePoint;\\n        const length = string.length;\\n        let leadSurrogate = null;\\n        const bytes = [];\\n        for (let i = 0; i < length; ++i) {\\n          codePoint = string.charCodeAt(i);\\n          if (codePoint > 55295 && codePoint < 57344) {\\n            if (!leadSurrogate) {\\n              if (codePoint > 56319) {\\n                if ((units -= 3) > -1)\\n                  bytes.push(239, 191, 189);\\n                continue;\\n              } else if (i + 1 === length) {\\n                if ((units -= 3) > -1)\\n                  bytes.push(239, 191, 189);\\n                continue;\\n              }\\n              leadSurrogate = codePoint;\\n              continue;\\n            }\\n            if (codePoint < 56320) {\\n              if ((units -= 3) > -1)\\n                bytes.push(239, 191, 189);\\n              leadSurrogate = codePoint;\\n              continue;\\n            }\\n            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\\n          } else if (leadSurrogate) {\\n            if ((units -= 3) > -1)\\n              bytes.push(239, 191, 189);\\n          }\\n          leadSurrogate = null;\\n          if (codePoint < 128) {\\n            if ((units -= 1) < 0)\\n              break;\\n            bytes.push(codePoint);\\n          } else if (codePoint < 2048) {\\n            if ((units -= 2) < 0)\\n              break;\\n            bytes.push(\\n              codePoint >> 6 | 192,\\n              codePoint & 63 | 128\\n            );\\n          } else if (codePoint < 65536) {\\n            if ((units -= 3) < 0)\\n              break;\\n            bytes.push(\\n              codePoint >> 12 | 224,\\n              codePoint >> 6 & 63 | 128,\\n              codePoint & 63 | 128\\n            );\\n          } else if (codePoint < 1114112) {\\n            if ((units -= 4) < 0)\\n              break;\\n            bytes.push(\\n              codePoint >> 18 | 240,\\n              codePoint >> 12 & 63 | 128,\\n              codePoint >> 6 & 63 | 128,\\n              codePoint & 63 | 128\\n            );\\n          } else {\\n            throw new Error(\\\"Invalid code point\\\");\\n          }\\n        }\\n        return bytes;\\n      }\\n      function asciiToBytes(str) {\\n        const byteArray = [];\\n        for (let i = 0; i < str.length; ++i) {\\n          byteArray.push(str.charCodeAt(i) & 255);\\n        }\\n        return byteArray;\\n      }\\n      function utf16leToBytes(str, units) {\\n        let c, hi, lo;\\n        const byteArray = [];\\n        for (let i = 0; i < str.length; ++i) {\\n          if ((units -= 2) < 0)\\n            break;\\n          c = str.charCodeAt(i);\\n          hi = c >> 8;\\n          lo = c % 256;\\n          byteArray.push(lo);\\n          byteArray.push(hi);\\n        }\\n        return byteArray;\\n      }\\n      function base64ToBytes(str) {\\n        return base64.toByteArray(base64clean(str));\\n      }\\n      function blitBuffer(src, dst, offset, length) {\\n        let i;\\n        for (i = 0; i < length; ++i) {\\n          if (i + offset >= dst.length || i >= src.length)\\n            break;\\n          dst[i + offset] = src[i];\\n        }\\n        return i;\\n      }\\n      function isInstance(obj, type) {\\n        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\\n      }\\n      function numberIsNaN(obj) {\\n        return obj !== obj;\\n      }\\n      var hexSliceLookupTable = function() {\\n        const alphabet = \\\"0123456789abcdef\\\";\\n        const table = new Array(256);\\n        for (let i = 0; i < 16; ++i) {\\n          const i16 = i * 16;\\n          for (let j = 0; j < 16; ++j) {\\n            table[i16 + j] = alphabet[i] + alphabet[j];\\n          }\\n        }\\n        return table;\\n      }();\\n      function defineBigIntMethod(fn) {\\n        return typeof BigInt === \\\"undefined\\\" ? BufferBigIntNotDefined : fn;\\n      }\\n      function BufferBigIntNotDefined() {\\n        throw new Error(\\\"BigInt not supported\\\");\\n      }\\n    }\\n  });\\n\\n  // node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\\n  var require_browser = __commonJS({\\n    \\\"node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\\\"(exports, module) {\\n      init_dist();\\n      var process = module.exports = {};\\n      var cachedSetTimeout;\\n      var cachedClearTimeout;\\n      function defaultSetTimout() {\\n        throw new Error(\\\"setTimeout has not been defined\\\");\\n      }\\n      function defaultClearTimeout() {\\n        throw new Error(\\\"clearTimeout has not been defined\\\");\\n      }\\n      (function() {\\n        try {\\n          if (typeof setTimeout === \\\"function\\\") {\\n            cachedSetTimeout = setTimeout;\\n          } else {\\n            cachedSetTimeout = defaultSetTimout;\\n          }\\n        } catch (e) {\\n          cachedSetTimeout = defaultSetTimout;\\n        }\\n        try {\\n          if (typeof clearTimeout === \\\"function\\\") {\\n            cachedClearTimeout = clearTimeout;\\n          } else {\\n            cachedClearTimeout = defaultClearTimeout;\\n          }\\n        } catch (e) {\\n          cachedClearTimeout = defaultClearTimeout;\\n        }\\n      })();\\n      function runTimeout(fun) {\\n        if (cachedSetTimeout === setTimeout) {\\n          return setTimeout(fun, 0);\\n        }\\n        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\\n          cachedSetTimeout = setTimeout;\\n          return setTimeout(fun, 0);\\n        }\\n        try {\\n          return cachedSetTimeout(fun, 0);\\n        } catch (e) {\\n          try {\\n            return cachedSetTimeout.call(null, fun, 0);\\n          } catch (e2) {\\n            return cachedSetTimeout.call(this, fun, 0);\\n          }\\n        }\\n      }\\n      function runClearTimeout(marker) {\\n        if (cachedClearTimeout === clearTimeout) {\\n          return clearTimeout(marker);\\n        }\\n        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\\n          cachedClearTimeout = clearTimeout;\\n          return clearTimeout(marker);\\n        }\\n        try {\\n          return cachedClearTimeout(marker);\\n        } catch (e) {\\n          try {\\n            return cachedClearTimeout.call(null, marker);\\n          } catch (e2) {\\n            return cachedClearTimeout.call(this, marker);\\n          }\\n        }\\n      }\\n      var queue = [];\\n      var draining = false;\\n      var currentQueue;\\n      var queueIndex = -1;\\n      function cleanUpNextTick() {\\n        if (!draining || !currentQueue) {\\n          return;\\n        }\\n        draining = false;\\n        if (currentQueue.length) {\\n          queue = currentQueue.concat(queue);\\n        } else {\\n          queueIndex = -1;\\n        }\\n        if (queue.length) {\\n          drainQueue();\\n        }\\n      }\\n      function drainQueue() {\\n        if (draining) {\\n          return;\\n        }\\n        var timeout = runTimeout(cleanUpNextTick);\\n        draining = true;\\n        var len = queue.length;\\n        while (len) {\\n          currentQueue = queue;\\n          queue = [];\\n          while (++queueIndex < len) {\\n            if (currentQueue) {\\n              currentQueue[queueIndex].run();\\n            }\\n          }\\n          queueIndex = -1;\\n          len = queue.length;\\n        }\\n        currentQueue = null;\\n        draining = false;\\n        runClearTimeout(timeout);\\n      }\\n      process.nextTick = function(fun) {\\n        var args = new Array(arguments.length - 1);\\n        if (arguments.length > 1) {\\n          for (var i = 1; i < arguments.length; i++) {\\n            args[i - 1] = arguments[i];\\n          }\\n        }\\n        queue.push(new Item(fun, args));\\n        if (queue.length === 1 && !draining) {\\n          runTimeout(drainQueue);\\n        }\\n      };\\n      function Item(fun, array) {\\n        this.fun = fun;\\n        this.array = array;\\n      }\\n      Item.prototype.run = function() {\\n        this.fun.apply(null, this.array);\\n      };\\n      process.title = \\\"browser\\\";\\n      process.browser = true;\\n      process.env = {};\\n      process.argv = [];\\n      process.version = \\\"\\\";\\n      process.versions = {};\\n      function noop() {\\n      }\\n      process.on = noop;\\n      process.addListener = noop;\\n      process.once = noop;\\n      process.off = noop;\\n      process.removeListener = noop;\\n      process.removeAllListeners = noop;\\n      process.emit = noop;\\n      process.prependListener = noop;\\n      process.prependOnceListener = noop;\\n      process.listeners = function(name) {\\n        return [];\\n      };\\n      process.binding = function(name) {\\n        throw new Error(\\\"process.binding is not supported\\\");\\n      };\\n      process.cwd = function() {\\n        return \\\"/\\\";\\n      };\\n      process.chdir = function(dir) {\\n        throw new Error(\\\"process.chdir is not supported\\\");\\n      };\\n      process.umask = function() {\\n        return 0;\\n      };\\n    }\\n  });\\n\\n  // shims/dist/index.js\\n  var import_buffer_polyfill, import_process, o;\\n  var init_dist = __esm({\\n    \\\"shims/dist/index.js\\\"() {\\n      \\\"use strict\\\";\\n      import_buffer_polyfill = __toESM(require_buffer(), 1);\\n      import_process = __toESM(require_browser(), 1);\\n      o = globalThis || void 0 || self;\\n    }\\n  });\\n\\n  // shims/banner/index.cjs\\n  var require_banner = __commonJS({\\n    \\\"shims/banner/index.cjs\\\"() {\\n      init_dist();\\n      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;\\n      globalThis.global = globalThis.global || o;\\n      globalThis.process = globalThis.process || import_process.default;\\n    }\\n  });\\n  require_banner();\\n})();\\n/*! Bundled license information:\\n\\nieee754/index.js:\\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\\n\\nbuffer/index.js:\\n  (*!\\n   * The buffer module from node.js, for the browser.\\n   *\\n   * @author   Feross Aboukhadijeh <https://feross.org>\\n   * @license  MIT\\n   *)\\n*/\\n\\nimport {\\n  require_react_dom\\n} from \\\"./chunk-U7BGCLNW.js\\\";\\nimport \\\"./chunk-2HXRYMPJ.js\\\";\\nimport {\\n  __commonJS,\\n  __toESM,\\n  require_dist\\n} from \\\"./chunk-VMXIV7NB.js\\\";\\n\\n// node_modules/react-dom/client.js\\nvar require_client = __commonJS({\\n  \\\"node_modules/react-dom/client.js\\\"(exports) {\\n    var import_dist = __toESM(require_dist());\\n    var m = require_react_dom();\\n    if (process.env.NODE_ENV === \\\"production\\\") {\\n      exports.createRoot = m.createRoot;\\n      exports.hydrateRoot = m.hydrateRoot;\\n    } else {\\n      i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\\n      exports.createRoot = function(c, o) {\\n        i.usingClientEntryPoint = true;\\n        try {\\n          return m.createRoot(c, o);\\n        } finally {\\n          i.usingClientEntryPoint = false;\\n        }\\n      };\\n      exports.hydrateRoot = function(c, h, o) {\\n        i.usingClientEntryPoint = true;\\n        try {\\n          return m.hydrateRoot(c, h, o);\\n        } finally {\\n          i.usingClientEntryPoint = false;\\n        }\\n      };\\n    }\\n    var i;\\n  }\\n});\\nexport default require_client();\\n//# sourceMappingURL=react-dom_client.js.map\\n\"],\n  \"mappings\": \"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\",\n  \"names\": [\"__commonJS\", \"__toESM\", \"process\"]\n}\n"
    },
    {
      "name": "vite:import-analysis",
      "result": "\"use strict\";\n(() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS2 = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n    // If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n    mod\n  ));\n  var require_base64_js = __commonJS2({\n    \"node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\"(exports) {\n      \"use strict\";\n      init_dist();\n      exports.byteLength = byteLength;\n      exports.toByteArray = toByteArray;\n      exports.fromByteArray = fromByteArray;\n      var lookup = [];\n      var revLookup = [];\n      var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n      var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n      for (i = 0, len = code.length; i < len; ++i) {\n        lookup[i] = code[i];\n        revLookup[code.charCodeAt(i)] = i;\n      }\n      var i;\n      var len;\n      revLookup[\"-\".charCodeAt(0)] = 62;\n      revLookup[\"_\".charCodeAt(0)] = 63;\n      function getLens(b64) {\n        var len2 = b64.length;\n        if (len2 % 4 > 0) {\n          throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        }\n        var validLen = b64.indexOf(\"=\");\n        if (validLen === -1)\n          validLen = len2;\n        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n        return [validLen, placeHoldersLen];\n      }\n      function byteLength(b64) {\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n      function _byteLength(b64, validLen, placeHoldersLen) {\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n      function toByteArray(b64) {\n        var tmp;\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n        var curByte = 0;\n        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n        var i2;\n        for (i2 = 0; i2 < len2; i2 += 4) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n          arr[curByte++] = tmp >> 16 & 255;\n          arr[curByte++] = tmp >> 8 & 255;\n          arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 2) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n          arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 1) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n          arr[curByte++] = tmp >> 8 & 255;\n          arr[curByte++] = tmp & 255;\n        }\n        return arr;\n      }\n      function tripletToBase64(num) {\n        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n      }\n      function encodeChunk(uint8, start, end) {\n        var tmp;\n        var output = [];\n        for (var i2 = start; i2 < end; i2 += 3) {\n          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n          output.push(tripletToBase64(tmp));\n        }\n        return output.join(\"\");\n      }\n      function fromByteArray(uint8) {\n        var tmp;\n        var len2 = uint8.length;\n        var extraBytes = len2 % 3;\n        var parts = [];\n        var maxChunkLength = 16383;\n        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\n          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n        }\n        if (extraBytes === 1) {\n          tmp = uint8[len2 - 1];\n          parts.push(\n            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\"\n          );\n        } else if (extraBytes === 2) {\n          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n          parts.push(\n            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\"\n          );\n        }\n        return parts.join(\"\");\n      }\n    }\n  });\n  var require_ieee754 = __commonJS2({\n    \"node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\"(exports) {\n      init_dist();\n      exports.read = function(buffer, offset, isLE, mLen, nBytes) {\n        var e, m;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var nBits = -7;\n        var i = isLE ? nBytes - 1 : 0;\n        var d = isLE ? -1 : 1;\n        var s2 = buffer[offset + i];\n        i += d;\n        e = s2 & (1 << -nBits) - 1;\n        s2 >>= -nBits;\n        nBits += eLen;\n        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {\n        }\n        m = e & (1 << -nBits) - 1;\n        e >>= -nBits;\n        nBits += mLen;\n        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {\n        }\n        if (e === 0) {\n          e = 1 - eBias;\n        } else if (e === eMax) {\n          return m ? NaN : (s2 ? -1 : 1) * Infinity;\n        } else {\n          m = m + Math.pow(2, mLen);\n          e = e - eBias;\n        }\n        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);\n      };\n      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n        var e, m, c;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n        var i = isLE ? 0 : nBytes - 1;\n        var d = isLE ? 1 : -1;\n        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n        value = Math.abs(value);\n        if (isNaN(value) || value === Infinity) {\n          m = isNaN(value) ? 1 : 0;\n          e = eMax;\n        } else {\n          e = Math.floor(Math.log(value) / Math.LN2);\n          if (value * (c = Math.pow(2, -e)) < 1) {\n            e--;\n            c *= 2;\n          }\n          if (e + eBias >= 1) {\n            value += rt / c;\n          } else {\n            value += rt * Math.pow(2, 1 - eBias);\n          }\n          if (value * c >= 2) {\n            e++;\n            c /= 2;\n          }\n          if (e + eBias >= eMax) {\n            m = 0;\n            e = eMax;\n          } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen);\n            e = e + eBias;\n          } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n            e = 0;\n          }\n        }\n        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {\n        }\n        e = e << mLen | m;\n        eLen += mLen;\n        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {\n        }\n        buffer[offset + i - d] |= s2 * 128;\n      };\n    }\n  });\n  var require_buffer = __commonJS2({\n    \"node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js\"(exports) {\n      \"use strict\";\n      init_dist();\n      var base64 = require_base64_js();\n      var ieee754 = require_ieee754();\n      var customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") : null;\n      exports.Buffer = Buffer2;\n      exports.SlowBuffer = SlowBuffer;\n      exports.INSPECT_MAX_BYTES = 50;\n      var K_MAX_LENGTH = 2147483647;\n      exports.kMaxLength = K_MAX_LENGTH;\n      var { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;\n      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();\n      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n        console.error(\n          \"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"\n        );\n      }\n      function typedArraySupport() {\n        try {\n          const arr = new GlobalUint8Array(1);\n          const proto = { foo: function() {\n            return 42;\n          } };\n          Object.setPrototypeOf(proto, GlobalUint8Array.prototype);\n          Object.setPrototypeOf(arr, proto);\n          return arr.foo() === 42;\n        } catch (e) {\n          return false;\n        }\n      }\n      Object.defineProperty(Buffer2.prototype, \"parent\", {\n        enumerable: true,\n        get: function() {\n          if (!Buffer2.isBuffer(this))\n            return void 0;\n          return this.buffer;\n        }\n      });\n      Object.defineProperty(Buffer2.prototype, \"offset\", {\n        enumerable: true,\n        get: function() {\n          if (!Buffer2.isBuffer(this))\n            return void 0;\n          return this.byteOffset;\n        }\n      });\n      function createBuffer(length) {\n        if (length > K_MAX_LENGTH) {\n          throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n        }\n        const buf = new GlobalUint8Array(length);\n        Object.setPrototypeOf(buf, Buffer2.prototype);\n        return buf;\n      }\n      function Buffer2(arg, encodingOrOffset, length) {\n        if (typeof arg === \"number\") {\n          if (typeof encodingOrOffset === \"string\") {\n            throw new TypeError(\n              'The \"string\" argument must be of type string. Received type number'\n            );\n          }\n          return allocUnsafe(arg);\n        }\n        return from(arg, encodingOrOffset, length);\n      }\n      Buffer2.poolSize = 8192;\n      function from(value, encodingOrOffset, length) {\n        if (typeof value === \"string\") {\n          return fromString(value, encodingOrOffset);\n        }\n        if (GlobalArrayBuffer.isView(value)) {\n          return fromArrayView(value);\n        }\n        if (value == null) {\n          throw new TypeError(\n            \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n          );\n        }\n        if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n        if (typeof GlobalSharedArrayBuffer !== \"undefined\" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n        if (typeof value === \"number\") {\n          throw new TypeError(\n            'The \"value\" argument must not be of type number. Received type number'\n          );\n        }\n        const valueOf = value.valueOf && value.valueOf();\n        if (valueOf != null && valueOf !== value) {\n          return Buffer2.from(valueOf, encodingOrOffset, length);\n        }\n        const b = fromObject(value);\n        if (b)\n          return b;\n        if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n          return Buffer2.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n        }\n        throw new TypeError(\n          \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n        );\n      }\n      Buffer2.from = function(value, encodingOrOffset, length) {\n        return from(value, encodingOrOffset, length);\n      };\n      Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);\n      Object.setPrototypeOf(Buffer2, GlobalUint8Array);\n      function assertSize(size) {\n        if (typeof size !== \"number\") {\n          throw new TypeError('\"size\" argument must be of type number');\n        } else if (size < 0) {\n          throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n        }\n      }\n      function alloc(size, fill, encoding) {\n        assertSize(size);\n        if (size <= 0) {\n          return createBuffer(size);\n        }\n        if (fill !== void 0) {\n          return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n        }\n        return createBuffer(size);\n      }\n      Buffer2.alloc = function(size, fill, encoding) {\n        return alloc(size, fill, encoding);\n      };\n      function allocUnsafe(size) {\n        assertSize(size);\n        return createBuffer(size < 0 ? 0 : checked(size) | 0);\n      }\n      Buffer2.allocUnsafe = function(size) {\n        return allocUnsafe(size);\n      };\n      Buffer2.allocUnsafeSlow = function(size) {\n        return allocUnsafe(size);\n      };\n      function fromString(string, encoding) {\n        if (typeof encoding !== \"string\" || encoding === \"\") {\n          encoding = \"utf8\";\n        }\n        if (!Buffer2.isEncoding(encoding)) {\n          throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        const length = byteLength(string, encoding) | 0;\n        let buf = createBuffer(length);\n        const actual = buf.write(string, encoding);\n        if (actual !== length) {\n          buf = buf.slice(0, actual);\n        }\n        return buf;\n      }\n      function fromArrayLike(array) {\n        const length = array.length < 0 ? 0 : checked(array.length) | 0;\n        const buf = createBuffer(length);\n        for (let i = 0; i < length; i += 1) {\n          buf[i] = array[i] & 255;\n        }\n        return buf;\n      }\n      function fromArrayView(arrayView) {\n        if (isInstance(arrayView, GlobalUint8Array)) {\n          const copy = new GlobalUint8Array(arrayView);\n          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n        }\n        return fromArrayLike(arrayView);\n      }\n      function fromArrayBuffer(array, byteOffset, length) {\n        if (byteOffset < 0 || array.byteLength < byteOffset) {\n          throw new RangeError('\"offset\" is outside of buffer bounds');\n        }\n        if (array.byteLength < byteOffset + (length || 0)) {\n          throw new RangeError('\"length\" is outside of buffer bounds');\n        }\n        let buf;\n        if (byteOffset === void 0 && length === void 0) {\n          buf = new GlobalUint8Array(array);\n        } else if (length === void 0) {\n          buf = new GlobalUint8Array(array, byteOffset);\n        } else {\n          buf = new GlobalUint8Array(array, byteOffset, length);\n        }\n        Object.setPrototypeOf(buf, Buffer2.prototype);\n        return buf;\n      }\n      function fromObject(obj) {\n        if (Buffer2.isBuffer(obj)) {\n          const len = checked(obj.length) | 0;\n          const buf = createBuffer(len);\n          if (buf.length === 0) {\n            return buf;\n          }\n          obj.copy(buf, 0, 0, len);\n          return buf;\n        }\n        if (obj.length !== void 0) {\n          if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n            return createBuffer(0);\n          }\n          return fromArrayLike(obj);\n        }\n        if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n          return fromArrayLike(obj.data);\n        }\n      }\n      function checked(length) {\n        if (length >= K_MAX_LENGTH) {\n          throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n        }\n        return length | 0;\n      }\n      function SlowBuffer(length) {\n        if (+length != length) {\n          length = 0;\n        }\n        return Buffer2.alloc(+length);\n      }\n      Buffer2.isBuffer = function isBuffer(b) {\n        return b != null && b._isBuffer === true && b !== Buffer2.prototype;\n      };\n      Buffer2.compare = function compare(a, b) {\n        if (isInstance(a, GlobalUint8Array))\n          a = Buffer2.from(a, a.offset, a.byteLength);\n        if (isInstance(b, GlobalUint8Array))\n          b = Buffer2.from(b, b.offset, b.byteLength);\n        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {\n          throw new TypeError(\n            'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n          );\n        }\n        if (a === b)\n          return 0;\n        let x = a.length;\n        let y = b.length;\n        for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n          if (a[i] !== b[i]) {\n            x = a[i];\n            y = b[i];\n            break;\n          }\n        }\n        if (x < y)\n          return -1;\n        if (y < x)\n          return 1;\n        return 0;\n      };\n      Buffer2.isEncoding = function isEncoding(encoding) {\n        switch (String(encoding).toLowerCase()) {\n          case \"hex\":\n          case \"utf8\":\n          case \"utf-8\":\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n          case \"base64\":\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return true;\n          default:\n            return false;\n        }\n      };\n      Buffer2.concat = function concat(list, length) {\n        if (!Array.isArray(list)) {\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        }\n        if (list.length === 0) {\n          return Buffer2.alloc(0);\n        }\n        let i;\n        if (length === void 0) {\n          length = 0;\n          for (i = 0; i < list.length; ++i) {\n            length += list[i].length;\n          }\n        }\n        const buffer = Buffer2.allocUnsafe(length);\n        let pos = 0;\n        for (i = 0; i < list.length; ++i) {\n          let buf = list[i];\n          if (isInstance(buf, GlobalUint8Array)) {\n            if (pos + buf.length > buffer.length) {\n              if (!Buffer2.isBuffer(buf))\n                buf = Buffer2.from(buf);\n              buf.copy(buffer, pos);\n            } else {\n              GlobalUint8Array.prototype.set.call(\n                buffer,\n                buf,\n                pos\n              );\n            }\n          } else if (!Buffer2.isBuffer(buf)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers');\n          } else {\n            buf.copy(buffer, pos);\n          }\n          pos += buf.length;\n        }\n        return buffer;\n      };\n      function byteLength(string, encoding) {\n        if (Buffer2.isBuffer(string)) {\n          return string.length;\n        }\n        if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {\n          return string.byteLength;\n        }\n        if (typeof string !== \"string\") {\n          throw new TypeError(\n            'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string\n          );\n        }\n        const len = string.length;\n        const mustMatch = arguments.length > 2 && arguments[2] === true;\n        if (!mustMatch && len === 0)\n          return 0;\n        let loweredCase = false;\n        for (; ; ) {\n          switch (encoding) {\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n              return len;\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8ToBytes(string).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return len * 2;\n            case \"hex\":\n              return len >>> 1;\n            case \"base64\":\n              return base64ToBytes(string).length;\n            default:\n              if (loweredCase) {\n                return mustMatch ? -1 : utf8ToBytes(string).length;\n              }\n              encoding = (\"\" + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n      Buffer2.byteLength = byteLength;\n      function slowToString(encoding, start, end) {\n        let loweredCase = false;\n        if (start === void 0 || start < 0) {\n          start = 0;\n        }\n        if (start > this.length) {\n          return \"\";\n        }\n        if (end === void 0 || end > this.length) {\n          end = this.length;\n        }\n        if (end <= 0) {\n          return \"\";\n        }\n        end >>>= 0;\n        start >>>= 0;\n        if (end <= start) {\n          return \"\";\n        }\n        if (!encoding)\n          encoding = \"utf8\";\n        while (true) {\n          switch (encoding) {\n            case \"hex\":\n              return hexSlice(this, start, end);\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8Slice(this, start, end);\n            case \"ascii\":\n              return asciiSlice(this, start, end);\n            case \"latin1\":\n            case \"binary\":\n              return latin1Slice(this, start, end);\n            case \"base64\":\n              return base64Slice(this, start, end);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return utf16leSlice(this, start, end);\n            default:\n              if (loweredCase)\n                throw new TypeError(\"Unknown encoding: \" + encoding);\n              encoding = (encoding + \"\").toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n      Buffer2.prototype._isBuffer = true;\n      function swap(b, n, m) {\n        const i = b[n];\n        b[n] = b[m];\n        b[m] = i;\n      }\n      Buffer2.prototype.swap16 = function swap16() {\n        const len = this.length;\n        if (len % 2 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n        }\n        for (let i = 0; i < len; i += 2) {\n          swap(this, i, i + 1);\n        }\n        return this;\n      };\n      Buffer2.prototype.swap32 = function swap32() {\n        const len = this.length;\n        if (len % 4 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n        }\n        for (let i = 0; i < len; i += 4) {\n          swap(this, i, i + 3);\n          swap(this, i + 1, i + 2);\n        }\n        return this;\n      };\n      Buffer2.prototype.swap64 = function swap64() {\n        const len = this.length;\n        if (len % 8 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n        }\n        for (let i = 0; i < len; i += 8) {\n          swap(this, i, i + 7);\n          swap(this, i + 1, i + 6);\n          swap(this, i + 2, i + 5);\n          swap(this, i + 3, i + 4);\n        }\n        return this;\n      };\n      Buffer2.prototype.toString = function toString() {\n        const length = this.length;\n        if (length === 0)\n          return \"\";\n        if (arguments.length === 0)\n          return utf8Slice(this, 0, length);\n        return slowToString.apply(this, arguments);\n      };\n      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;\n      Buffer2.prototype.equals = function equals(b) {\n        if (!Buffer2.isBuffer(b))\n          throw new TypeError(\"Argument must be a Buffer\");\n        if (this === b)\n          return true;\n        return Buffer2.compare(this, b) === 0;\n      };\n      Buffer2.prototype.inspect = function inspect() {\n        let str = \"\";\n        const max = exports.INSPECT_MAX_BYTES;\n        str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n        if (this.length > max)\n          str += \" ... \";\n        return \"<Buffer \" + str + \">\";\n      };\n      if (customInspectSymbol) {\n        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;\n      }\n      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n        if (isInstance(target, GlobalUint8Array)) {\n          target = Buffer2.from(target, target.offset, target.byteLength);\n        }\n        if (!Buffer2.isBuffer(target)) {\n          throw new TypeError(\n            'The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target\n          );\n        }\n        if (start === void 0) {\n          start = 0;\n        }\n        if (end === void 0) {\n          end = target ? target.length : 0;\n        }\n        if (thisStart === void 0) {\n          thisStart = 0;\n        }\n        if (thisEnd === void 0) {\n          thisEnd = this.length;\n        }\n        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n          throw new RangeError(\"out of range index\");\n        }\n        if (thisStart >= thisEnd && start >= end) {\n          return 0;\n        }\n        if (thisStart >= thisEnd) {\n          return -1;\n        }\n        if (start >= end) {\n          return 1;\n        }\n        start >>>= 0;\n        end >>>= 0;\n        thisStart >>>= 0;\n        thisEnd >>>= 0;\n        if (this === target)\n          return 0;\n        let x = thisEnd - thisStart;\n        let y = end - start;\n        const len = Math.min(x, y);\n        const thisCopy = this.slice(thisStart, thisEnd);\n        const targetCopy = target.slice(start, end);\n        for (let i = 0; i < len; ++i) {\n          if (thisCopy[i] !== targetCopy[i]) {\n            x = thisCopy[i];\n            y = targetCopy[i];\n            break;\n          }\n        }\n        if (x < y)\n          return -1;\n        if (y < x)\n          return 1;\n        return 0;\n      };\n      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n        if (buffer.length === 0)\n          return -1;\n        if (typeof byteOffset === \"string\") {\n          encoding = byteOffset;\n          byteOffset = 0;\n        } else if (byteOffset > 2147483647) {\n          byteOffset = 2147483647;\n        } else if (byteOffset < -2147483648) {\n          byteOffset = -2147483648;\n        }\n        byteOffset = +byteOffset;\n        if (numberIsNaN(byteOffset)) {\n          byteOffset = dir ? 0 : buffer.length - 1;\n        }\n        if (byteOffset < 0)\n          byteOffset = buffer.length + byteOffset;\n        if (byteOffset >= buffer.length) {\n          if (dir)\n            return -1;\n          else\n            byteOffset = buffer.length - 1;\n        } else if (byteOffset < 0) {\n          if (dir)\n            byteOffset = 0;\n          else\n            return -1;\n        }\n        if (typeof val === \"string\") {\n          val = Buffer2.from(val, encoding);\n        }\n        if (Buffer2.isBuffer(val)) {\n          if (val.length === 0) {\n            return -1;\n          }\n          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n        } else if (typeof val === \"number\") {\n          val = val & 255;\n          if (typeof GlobalUint8Array.prototype.indexOf === \"function\") {\n            if (dir) {\n              return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n            } else {\n              return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n            }\n          }\n          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n        }\n        throw new TypeError(\"val must be string, number or Buffer\");\n      }\n      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n        let indexSize = 1;\n        let arrLength = arr.length;\n        let valLength = val.length;\n        if (encoding !== void 0) {\n          encoding = String(encoding).toLowerCase();\n          if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n            if (arr.length < 2 || val.length < 2) {\n              return -1;\n            }\n            indexSize = 2;\n            arrLength /= 2;\n            valLength /= 2;\n            byteOffset /= 2;\n          }\n        }\n        function read(buf, i2) {\n          if (indexSize === 1) {\n            return buf[i2];\n          } else {\n            return buf.readUInt16BE(i2 * indexSize);\n          }\n        }\n        let i;\n        if (dir) {\n          let foundIndex = -1;\n          for (i = byteOffset; i < arrLength; i++) {\n            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n              if (foundIndex === -1)\n                foundIndex = i;\n              if (i - foundIndex + 1 === valLength)\n                return foundIndex * indexSize;\n            } else {\n              if (foundIndex !== -1)\n                i -= i - foundIndex;\n              foundIndex = -1;\n            }\n          }\n        } else {\n          if (byteOffset + valLength > arrLength)\n            byteOffset = arrLength - valLength;\n          for (i = byteOffset; i >= 0; i--) {\n            let found = true;\n            for (let j = 0; j < valLength; j++) {\n              if (read(arr, i + j) !== read(val, j)) {\n                found = false;\n                break;\n              }\n            }\n            if (found)\n              return i;\n          }\n        }\n        return -1;\n      }\n      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {\n        return this.indexOf(val, byteOffset, encoding) !== -1;\n      };\n      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n      };\n      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n      };\n      function hexWrite(buf, string, offset, length) {\n        offset = Number(offset) || 0;\n        const remaining = buf.length - offset;\n        if (!length) {\n          length = remaining;\n        } else {\n          length = Number(length);\n          if (length > remaining) {\n            length = remaining;\n          }\n        }\n        const strLen = string.length;\n        if (length > strLen / 2) {\n          length = strLen / 2;\n        }\n        let i;\n        for (i = 0; i < length; ++i) {\n          const parsed = parseInt(string.substr(i * 2, 2), 16);\n          if (numberIsNaN(parsed))\n            return i;\n          buf[offset + i] = parsed;\n        }\n        return i;\n      }\n      function utf8Write(buf, string, offset, length) {\n        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n      }\n      function asciiWrite(buf, string, offset, length) {\n        return blitBuffer(asciiToBytes(string), buf, offset, length);\n      }\n      function base64Write(buf, string, offset, length) {\n        return blitBuffer(base64ToBytes(string), buf, offset, length);\n      }\n      function ucs2Write(buf, string, offset, length) {\n        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n      }\n      Buffer2.prototype.write = function write(string, offset, length, encoding) {\n        if (offset === void 0) {\n          encoding = \"utf8\";\n          length = this.length;\n          offset = 0;\n        } else if (length === void 0 && typeof offset === \"string\") {\n          encoding = offset;\n          length = this.length;\n          offset = 0;\n        } else if (isFinite(offset)) {\n          offset = offset >>> 0;\n          if (isFinite(length)) {\n            length = length >>> 0;\n            if (encoding === void 0)\n              encoding = \"utf8\";\n          } else {\n            encoding = length;\n            length = void 0;\n          }\n        } else {\n          throw new Error(\n            \"Buffer.write(string, encoding, offset[, length]) is no longer supported\"\n          );\n        }\n        const remaining = this.length - offset;\n        if (length === void 0 || length > remaining)\n          length = remaining;\n        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n          throw new RangeError(\"Attempt to write outside buffer bounds\");\n        }\n        if (!encoding)\n          encoding = \"utf8\";\n        let loweredCase = false;\n        for (; ; ) {\n          switch (encoding) {\n            case \"hex\":\n              return hexWrite(this, string, offset, length);\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8Write(this, string, offset, length);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n              return asciiWrite(this, string, offset, length);\n            case \"base64\":\n              return base64Write(this, string, offset, length);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return ucs2Write(this, string, offset, length);\n            default:\n              if (loweredCase)\n                throw new TypeError(\"Unknown encoding: \" + encoding);\n              encoding = (\"\" + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      };\n      Buffer2.prototype.toJSON = function toJSON() {\n        return {\n          type: \"Buffer\",\n          data: Array.prototype.slice.call(this._arr || this, 0)\n        };\n      };\n      function base64Slice(buf, start, end) {\n        if (start === 0 && end === buf.length) {\n          return base64.fromByteArray(buf);\n        } else {\n          return base64.fromByteArray(buf.slice(start, end));\n        }\n      }\n      function utf8Slice(buf, start, end) {\n        end = Math.min(buf.length, end);\n        const res = [];\n        let i = start;\n        while (i < end) {\n          const firstByte = buf[i];\n          let codePoint = null;\n          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n          if (i + bytesPerSequence <= end) {\n            let secondByte, thirdByte, fourthByte, tempCodePoint;\n            switch (bytesPerSequence) {\n              case 1:\n                if (firstByte < 128) {\n                  codePoint = firstByte;\n                }\n                break;\n              case 2:\n                secondByte = buf[i + 1];\n                if ((secondByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n                  if (tempCodePoint > 127) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 3:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 4:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                fourthByte = buf[i + 3];\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n            }\n          }\n          if (codePoint === null) {\n            codePoint = 65533;\n            bytesPerSequence = 1;\n          } else if (codePoint > 65535) {\n            codePoint -= 65536;\n            res.push(codePoint >>> 10 & 1023 | 55296);\n            codePoint = 56320 | codePoint & 1023;\n          }\n          res.push(codePoint);\n          i += bytesPerSequence;\n        }\n        return decodeCodePointsArray(res);\n      }\n      var MAX_ARGUMENTS_LENGTH = 4096;\n      function decodeCodePointsArray(codePoints) {\n        const len = codePoints.length;\n        if (len <= MAX_ARGUMENTS_LENGTH) {\n          return String.fromCharCode.apply(String, codePoints);\n        }\n        let res = \"\";\n        let i = 0;\n        while (i < len) {\n          res += String.fromCharCode.apply(\n            String,\n            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n          );\n        }\n        return res;\n      }\n      function asciiSlice(buf, start, end) {\n        let ret = \"\";\n        end = Math.min(buf.length, end);\n        for (let i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i] & 127);\n        }\n        return ret;\n      }\n      function latin1Slice(buf, start, end) {\n        let ret = \"\";\n        end = Math.min(buf.length, end);\n        for (let i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i]);\n        }\n        return ret;\n      }\n      function hexSlice(buf, start, end) {\n        const len = buf.length;\n        if (!start || start < 0)\n          start = 0;\n        if (!end || end < 0 || end > len)\n          end = len;\n        let out = \"\";\n        for (let i = start; i < end; ++i) {\n          out += hexSliceLookupTable[buf[i]];\n        }\n        return out;\n      }\n      function utf16leSlice(buf, start, end) {\n        const bytes = buf.slice(start, end);\n        let res = \"\";\n        for (let i = 0; i < bytes.length - 1; i += 2) {\n          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n        }\n        return res;\n      }\n      Buffer2.prototype.slice = function slice(start, end) {\n        const len = this.length;\n        start = ~~start;\n        end = end === void 0 ? len : ~~end;\n        if (start < 0) {\n          start += len;\n          if (start < 0)\n            start = 0;\n        } else if (start > len) {\n          start = len;\n        }\n        if (end < 0) {\n          end += len;\n          if (end < 0)\n            end = 0;\n        } else if (end > len) {\n          end = len;\n        }\n        if (end < start)\n          end = start;\n        const newBuf = this.subarray(start, end);\n        Object.setPrototypeOf(newBuf, Buffer2.prototype);\n        return newBuf;\n      };\n      function checkOffset(offset, ext, length) {\n        if (offset % 1 !== 0 || offset < 0)\n          throw new RangeError(\"offset is not uint\");\n        if (offset + ext > length)\n          throw new RangeError(\"Trying to access beyond buffer length\");\n      }\n      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let val = this[offset];\n        let mul = 1;\n        let i = 0;\n        while (++i < byteLength2 && (mul *= 256)) {\n          val += this[offset + i] * mul;\n        }\n        return val;\n      };\n      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          checkOffset(offset, byteLength2, this.length);\n        }\n        let val = this[offset + --byteLength2];\n        let mul = 1;\n        while (byteLength2 > 0 && (mul *= 256)) {\n          val += this[offset + --byteLength2] * mul;\n        }\n        return val;\n      };\n      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 1, this.length);\n        return this[offset];\n      };\n      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        return this[offset] | this[offset + 1] << 8;\n      };\n      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        return this[offset] << 8 | this[offset + 1];\n      };\n      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n      };\n      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n      };\n      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n        return BigInt(lo) + (BigInt(hi) << BigInt(32));\n      });\n      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\n        return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n      });\n      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let val = this[offset];\n        let mul = 1;\n        let i = 0;\n        while (++i < byteLength2 && (mul *= 256)) {\n          val += this[offset + i] * mul;\n        }\n        mul *= 128;\n        if (val >= mul)\n          val -= Math.pow(2, 8 * byteLength2);\n        return val;\n      };\n      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let i = byteLength2;\n        let mul = 1;\n        let val = this[offset + --i];\n        while (i > 0 && (mul *= 256)) {\n          val += this[offset + --i] * mul;\n        }\n        mul *= 128;\n        if (val >= mul)\n          val -= Math.pow(2, 8 * byteLength2);\n        return val;\n      };\n      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 1, this.length);\n        if (!(this[offset] & 128))\n          return this[offset];\n        return (255 - this[offset] + 1) * -1;\n      };\n      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        const val = this[offset] | this[offset + 1] << 8;\n        return val & 32768 ? val | 4294901760 : val;\n      };\n      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        const val = this[offset + 1] | this[offset] << 8;\n        return val & 32768 ? val | 4294901760 : val;\n      };\n      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n      };\n      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n      };\n      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);\n        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n      });\n      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const val = (first << 24) + // Overflow\n        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\n      });\n      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, true, 23, 4);\n      };\n      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, false, 23, 4);\n      };\n      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, true, 52, 8);\n      };\n      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, false, 52, 8);\n      };\n      function checkInt(buf, value, offset, ext, max, min) {\n        if (!Buffer2.isBuffer(buf))\n          throw new TypeError('\"buffer\" argument must be a Buffer instance');\n        if (value > max || value < min)\n          throw new RangeError('\"value\" argument is out of bounds');\n        if (offset + ext > buf.length)\n          throw new RangeError(\"Index out of range\");\n      }\n      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\n        }\n        let mul = 1;\n        let i = 0;\n        this[offset] = value & 255;\n        while (++i < byteLength2 && (mul *= 256)) {\n          this[offset + i] = value / mul & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\n        }\n        let i = byteLength2 - 1;\n        let mul = 1;\n        this[offset + i] = value & 255;\n        while (--i >= 0 && (mul *= 256)) {\n          this[offset + i] = value / mul & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 1, 255, 0);\n        this[offset] = value & 255;\n        return offset + 1;\n      };\n      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 65535, 0);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 65535, 0);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 255;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 4294967295, 0);\n        this[offset + 3] = value >>> 24;\n        this[offset + 2] = value >>> 16;\n        this[offset + 1] = value >>> 8;\n        this[offset] = value & 255;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 4294967295, 0);\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 255;\n        return offset + 4;\n      };\n      function wrtBigUInt64LE(buf, value, offset, min, max) {\n        checkIntBI(value, min, max, buf, offset, 7);\n        let lo = Number(value & BigInt(4294967295));\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        return offset;\n      }\n      function wrtBigUInt64BE(buf, value, offset, min, max) {\n        checkIntBI(value, min, max, buf, offset, 7);\n        let lo = Number(value & BigInt(4294967295));\n        buf[offset + 7] = lo;\n        lo = lo >> 8;\n        buf[offset + 6] = lo;\n        lo = lo >> 8;\n        buf[offset + 5] = lo;\n        lo = lo >> 8;\n        buf[offset + 4] = lo;\n        let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n        buf[offset + 3] = hi;\n        hi = hi >> 8;\n        buf[offset + 2] = hi;\n        hi = hi >> 8;\n        buf[offset + 1] = hi;\n        hi = hi >> 8;\n        buf[offset] = hi;\n        return offset + 8;\n      }\n      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {\n        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n      });\n      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {\n        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n      });\n      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          const limit = Math.pow(2, 8 * byteLength2 - 1);\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n        }\n        let i = 0;\n        let mul = 1;\n        let sub = 0;\n        this[offset] = value & 255;\n        while (++i < byteLength2 && (mul *= 256)) {\n          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          const limit = Math.pow(2, 8 * byteLength2 - 1);\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n        }\n        let i = byteLength2 - 1;\n        let mul = 1;\n        let sub = 0;\n        this[offset + i] = value & 255;\n        while (--i >= 0 && (mul *= 256)) {\n          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 1, 127, -128);\n        if (value < 0)\n          value = 255 + value + 1;\n        this[offset] = value & 255;\n        return offset + 1;\n      };\n      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 32767, -32768);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 32767, -32768);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 255;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 2147483647, -2147483648);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        this[offset + 2] = value >>> 16;\n        this[offset + 3] = value >>> 24;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 2147483647, -2147483648);\n        if (value < 0)\n          value = 4294967295 + value + 1;\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 255;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {\n        return wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n      });\n      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {\n        return wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n      });\n      function checkIEEE754(buf, value, offset, ext, max, min) {\n        if (offset + ext > buf.length)\n          throw new RangeError(\"Index out of range\");\n        if (offset < 0)\n          throw new RangeError(\"Index out of range\");\n      }\n      function writeFloat(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 23, 4);\n        return offset + 4;\n      }\n      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, true, noAssert);\n      };\n      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, false, noAssert);\n      };\n      function writeDouble(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 52, 8);\n        return offset + 8;\n      }\n      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, true, noAssert);\n      };\n      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, false, noAssert);\n      };\n      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {\n        if (!Buffer2.isBuffer(target))\n          throw new TypeError(\"argument should be a Buffer\");\n        if (!start)\n          start = 0;\n        if (!end && end !== 0)\n          end = this.length;\n        if (targetStart >= target.length)\n          targetStart = target.length;\n        if (!targetStart)\n          targetStart = 0;\n        if (end > 0 && end < start)\n          end = start;\n        if (end === start)\n          return 0;\n        if (target.length === 0 || this.length === 0)\n          return 0;\n        if (targetStart < 0) {\n          throw new RangeError(\"targetStart out of bounds\");\n        }\n        if (start < 0 || start >= this.length)\n          throw new RangeError(\"Index out of range\");\n        if (end < 0)\n          throw new RangeError(\"sourceEnd out of bounds\");\n        if (end > this.length)\n          end = this.length;\n        if (target.length - targetStart < end - start) {\n          end = target.length - targetStart + start;\n        }\n        const len = end - start;\n        if (this === target && typeof GlobalUint8Array.prototype.copyWithin === \"function\") {\n          this.copyWithin(targetStart, start, end);\n        } else {\n          GlobalUint8Array.prototype.set.call(\n            target,\n            this.subarray(start, end),\n            targetStart\n          );\n        }\n        return len;\n      };\n      Buffer2.prototype.fill = function fill(val, start, end, encoding) {\n        if (typeof val === \"string\") {\n          if (typeof start === \"string\") {\n            encoding = start;\n            start = 0;\n            end = this.length;\n          } else if (typeof end === \"string\") {\n            encoding = end;\n            end = this.length;\n          }\n          if (encoding !== void 0 && typeof encoding !== \"string\") {\n            throw new TypeError(\"encoding must be a string\");\n          }\n          if (typeof encoding === \"string\" && !Buffer2.isEncoding(encoding)) {\n            throw new TypeError(\"Unknown encoding: \" + encoding);\n          }\n          if (val.length === 1) {\n            const code = val.charCodeAt(0);\n            if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n              val = code;\n            }\n          }\n        } else if (typeof val === \"number\") {\n          val = val & 255;\n        } else if (typeof val === \"boolean\") {\n          val = Number(val);\n        }\n        if (start < 0 || this.length < start || this.length < end) {\n          throw new RangeError(\"Out of range index\");\n        }\n        if (end <= start) {\n          return this;\n        }\n        start = start >>> 0;\n        end = end === void 0 ? this.length : end >>> 0;\n        if (!val)\n          val = 0;\n        let i;\n        if (typeof val === \"number\") {\n          for (i = start; i < end; ++i) {\n            this[i] = val;\n          }\n        } else {\n          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);\n          const len = bytes.length;\n          if (len === 0) {\n            throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n          }\n          for (i = 0; i < end - start; ++i) {\n            this[i + start] = bytes[i % len];\n          }\n        }\n        return this;\n      };\n      var errors = {};\n      function E(sym, getMessage, Base) {\n        errors[sym] = class NodeError extends Base {\n          constructor() {\n            super();\n            Object.defineProperty(this, \"message\", {\n              value: getMessage.apply(this, arguments),\n              writable: true,\n              configurable: true\n            });\n            this.name = `${this.name} [${sym}]`;\n            this.stack;\n            delete this.name;\n          }\n          get code() {\n            return sym;\n          }\n          set code(value) {\n            Object.defineProperty(this, \"code\", {\n              configurable: true,\n              enumerable: true,\n              value,\n              writable: true\n            });\n          }\n          toString() {\n            return `${this.name} [${sym}]: ${this.message}`;\n          }\n        };\n      }\n      E(\n        \"ERR_BUFFER_OUT_OF_BOUNDS\",\n        function(name) {\n          if (name) {\n            return `${name} is outside of buffer bounds`;\n          }\n          return \"Attempt to access memory outside buffer bounds\";\n        },\n        RangeError\n      );\n      E(\n        \"ERR_INVALID_ARG_TYPE\",\n        function(name, actual) {\n          return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`;\n        },\n        TypeError\n      );\n      E(\n        \"ERR_OUT_OF_RANGE\",\n        function(str, range, input) {\n          let msg = `The value of \"${str}\" is out of range.`;\n          let received = input;\n          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n            received = addNumericalSeparator(String(input));\n          } else if (typeof input === \"bigint\") {\n            received = String(input);\n            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n              received = addNumericalSeparator(received);\n            }\n            received += \"n\";\n          }\n          msg += ` It must be ${range}. Received ${received}`;\n          return msg;\n        },\n        RangeError\n      );\n      function addNumericalSeparator(val) {\n        let res = \"\";\n        let i = val.length;\n        const start = val[0] === \"-\" ? 1 : 0;\n        for (; i >= start + 4; i -= 3) {\n          res = `_${val.slice(i - 3, i)}${res}`;\n        }\n        return `${val.slice(0, i)}${res}`;\n      }\n      function checkBounds(buf, offset, byteLength2) {\n        validateNumber(offset, \"offset\");\n        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {\n          boundsError(offset, buf.length - (byteLength2 + 1));\n        }\n      }\n      function checkIntBI(value, min, max, buf, offset, byteLength2) {\n        if (value > max || value < min) {\n          const n = typeof min === \"bigint\" ? \"n\" : \"\";\n          let range;\n          if (byteLength2 > 3) {\n            if (min === 0 || min === BigInt(0)) {\n              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;\n            } else {\n              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;\n            }\n          } else {\n            range = `>= ${min}${n} and <= ${max}${n}`;\n          }\n          throw new errors.ERR_OUT_OF_RANGE(\"value\", range, value);\n        }\n        checkBounds(buf, offset, byteLength2);\n      }\n      function validateNumber(value, name) {\n        if (typeof value !== \"number\") {\n          throw new errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n        }\n      }\n      function boundsError(value, length, type) {\n        if (Math.floor(value) !== value) {\n          validateNumber(value, type);\n          throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \"an integer\", value);\n        }\n        if (length < 0) {\n          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n        }\n        throw new errors.ERR_OUT_OF_RANGE(\n          type || \"offset\",\n          `>= ${type ? 1 : 0} and <= ${length}`,\n          value\n        );\n      }\n      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n      function base64clean(str) {\n        str = str.split(\"=\")[0];\n        str = str.trim().replace(INVALID_BASE64_RE, \"\");\n        if (str.length < 2)\n          return \"\";\n        while (str.length % 4 !== 0) {\n          str = str + \"=\";\n        }\n        return str;\n      }\n      function utf8ToBytes(string, units) {\n        units = units || Infinity;\n        let codePoint;\n        const length = string.length;\n        let leadSurrogate = null;\n        const bytes = [];\n        for (let i = 0; i < length; ++i) {\n          codePoint = string.charCodeAt(i);\n          if (codePoint > 55295 && codePoint < 57344) {\n            if (!leadSurrogate) {\n              if (codePoint > 56319) {\n                if ((units -= 3) > -1)\n                  bytes.push(239, 191, 189);\n                continue;\n              } else if (i + 1 === length) {\n                if ((units -= 3) > -1)\n                  bytes.push(239, 191, 189);\n                continue;\n              }\n              leadSurrogate = codePoint;\n              continue;\n            }\n            if (codePoint < 56320) {\n              if ((units -= 3) > -1)\n                bytes.push(239, 191, 189);\n              leadSurrogate = codePoint;\n              continue;\n            }\n            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n          } else if (leadSurrogate) {\n            if ((units -= 3) > -1)\n              bytes.push(239, 191, 189);\n          }\n          leadSurrogate = null;\n          if (codePoint < 128) {\n            if ((units -= 1) < 0)\n              break;\n            bytes.push(codePoint);\n          } else if (codePoint < 2048) {\n            if ((units -= 2) < 0)\n              break;\n            bytes.push(\n              codePoint >> 6 | 192,\n              codePoint & 63 | 128\n            );\n          } else if (codePoint < 65536) {\n            if ((units -= 3) < 0)\n              break;\n            bytes.push(\n              codePoint >> 12 | 224,\n              codePoint >> 6 & 63 | 128,\n              codePoint & 63 | 128\n            );\n          } else if (codePoint < 1114112) {\n            if ((units -= 4) < 0)\n              break;\n            bytes.push(\n              codePoint >> 18 | 240,\n              codePoint >> 12 & 63 | 128,\n              codePoint >> 6 & 63 | 128,\n              codePoint & 63 | 128\n            );\n          } else {\n            throw new Error(\"Invalid code point\");\n          }\n        }\n        return bytes;\n      }\n      function asciiToBytes(str) {\n        const byteArray = [];\n        for (let i = 0; i < str.length; ++i) {\n          byteArray.push(str.charCodeAt(i) & 255);\n        }\n        return byteArray;\n      }\n      function utf16leToBytes(str, units) {\n        let c, hi, lo;\n        const byteArray = [];\n        for (let i = 0; i < str.length; ++i) {\n          if ((units -= 2) < 0)\n            break;\n          c = str.charCodeAt(i);\n          hi = c >> 8;\n          lo = c % 256;\n          byteArray.push(lo);\n          byteArray.push(hi);\n        }\n        return byteArray;\n      }\n      function base64ToBytes(str) {\n        return base64.toByteArray(base64clean(str));\n      }\n      function blitBuffer(src, dst, offset, length) {\n        let i;\n        for (i = 0; i < length; ++i) {\n          if (i + offset >= dst.length || i >= src.length)\n            break;\n          dst[i + offset] = src[i];\n        }\n        return i;\n      }\n      function isInstance(obj, type) {\n        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n      }\n      function numberIsNaN(obj) {\n        return obj !== obj;\n      }\n      var hexSliceLookupTable = function() {\n        const alphabet = \"0123456789abcdef\";\n        const table = new Array(256);\n        for (let i = 0; i < 16; ++i) {\n          const i16 = i * 16;\n          for (let j = 0; j < 16; ++j) {\n            table[i16 + j] = alphabet[i] + alphabet[j];\n          }\n        }\n        return table;\n      }();\n      function defineBigIntMethod(fn) {\n        return typeof BigInt === \"undefined\" ? BufferBigIntNotDefined : fn;\n      }\n      function BufferBigIntNotDefined() {\n        throw new Error(\"BigInt not supported\");\n      }\n    }\n  });\n  var require_browser = __commonJS2({\n    \"node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\"(exports, module) {\n      init_dist();\n      var process2 = module.exports = {};\n      var cachedSetTimeout;\n      var cachedClearTimeout;\n      function defaultSetTimout() {\n        throw new Error(\"setTimeout has not been defined\");\n      }\n      function defaultClearTimeout() {\n        throw new Error(\"clearTimeout has not been defined\");\n      }\n      (function() {\n        try {\n          if (typeof setTimeout === \"function\") {\n            cachedSetTimeout = setTimeout;\n          } else {\n            cachedSetTimeout = defaultSetTimout;\n          }\n        } catch (e) {\n          cachedSetTimeout = defaultSetTimout;\n        }\n        try {\n          if (typeof clearTimeout === \"function\") {\n            cachedClearTimeout = clearTimeout;\n          } else {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        } catch (e) {\n          cachedClearTimeout = defaultClearTimeout;\n        }\n      })();\n      function runTimeout(fun) {\n        if (cachedSetTimeout === setTimeout) {\n          return setTimeout(fun, 0);\n        }\n        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n          cachedSetTimeout = setTimeout;\n          return setTimeout(fun, 0);\n        }\n        try {\n          return cachedSetTimeout(fun, 0);\n        } catch (e) {\n          try {\n            return cachedSetTimeout.call(null, fun, 0);\n          } catch (e2) {\n            return cachedSetTimeout.call(this, fun, 0);\n          }\n        }\n      }\n      function runClearTimeout(marker) {\n        if (cachedClearTimeout === clearTimeout) {\n          return clearTimeout(marker);\n        }\n        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n          cachedClearTimeout = clearTimeout;\n          return clearTimeout(marker);\n        }\n        try {\n          return cachedClearTimeout(marker);\n        } catch (e) {\n          try {\n            return cachedClearTimeout.call(null, marker);\n          } catch (e2) {\n            return cachedClearTimeout.call(this, marker);\n          }\n        }\n      }\n      var queue = [];\n      var draining = false;\n      var currentQueue;\n      var queueIndex = -1;\n      function cleanUpNextTick() {\n        if (!draining || !currentQueue) {\n          return;\n        }\n        draining = false;\n        if (currentQueue.length) {\n          queue = currentQueue.concat(queue);\n        } else {\n          queueIndex = -1;\n        }\n        if (queue.length) {\n          drainQueue();\n        }\n      }\n      function drainQueue() {\n        if (draining) {\n          return;\n        }\n        var timeout = runTimeout(cleanUpNextTick);\n        draining = true;\n        var len = queue.length;\n        while (len) {\n          currentQueue = queue;\n          queue = [];\n          while (++queueIndex < len) {\n            if (currentQueue) {\n              currentQueue[queueIndex].run();\n            }\n          }\n          queueIndex = -1;\n          len = queue.length;\n        }\n        currentQueue = null;\n        draining = false;\n        runClearTimeout(timeout);\n      }\n      process2.nextTick = function(fun) {\n        var args = new Array(arguments.length - 1);\n        if (arguments.length > 1) {\n          for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n          }\n        }\n        queue.push(new Item(fun, args));\n        if (queue.length === 1 && !draining) {\n          runTimeout(drainQueue);\n        }\n      };\n      function Item(fun, array) {\n        this.fun = fun;\n        this.array = array;\n      }\n      Item.prototype.run = function() {\n        this.fun.apply(null, this.array);\n      };\n      process2.title = \"browser\";\n      process2.browser = true;\n      process2.env = {};\n      process2.argv = [];\n      process2.version = \"\";\n      process2.versions = {};\n      function noop() {\n      }\n      process2.on = noop;\n      process2.addListener = noop;\n      process2.once = noop;\n      process2.off = noop;\n      process2.removeListener = noop;\n      process2.removeAllListeners = noop;\n      process2.emit = noop;\n      process2.prependListener = noop;\n      process2.prependOnceListener = noop;\n      process2.listeners = function(name) {\n        return [];\n      };\n      process2.binding = function(name) {\n        throw new Error(\"process.binding is not supported\");\n      };\n      process2.cwd = function() {\n        return \"/\";\n      };\n      process2.chdir = function(dir) {\n        throw new Error(\"process.chdir is not supported\");\n      };\n      process2.umask = function() {\n        return 0;\n      };\n    }\n  });\n  var import_buffer_polyfill, import_process, o;\n  var init_dist = __esm({\n    \"shims/dist/index.js\"() {\n      \"use strict\";\n      import_buffer_polyfill = __toESM2(require_buffer(), 1);\n      import_process = __toESM2(require_browser(), 1);\n      o = globalThis || void 0 || self;\n    }\n  });\n  var require_banner = __commonJS2({\n    \"shims/banner/index.cjs\"() {\n      init_dist();\n      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;\n      globalThis.global = globalThis.global || o;\n      globalThis.process = globalThis.process || import_process.default;\n    }\n  });\n  require_banner();\n})();\n/*! Bundled license information:\n\nieee754/index.js:\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n\nbuffer/index.js:\n  (*!\n   * The buffer module from node.js, for the browser.\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   *)\n*/\nimport {\n  require_react_dom\n} from \"/node_modules/.vite/deps/chunk-U7BGCLNW.js?v=733ce8d4\";\nimport \"/node_modules/.vite/deps/chunk-2HXRYMPJ.js?v=733ce8d4\";\nimport {\n  __commonJS,\n  __toESM,\n  require_dist\n} from \"/node_modules/.vite/deps/chunk-VMXIV7NB.js?v=733ce8d4\";\nvar require_client = __commonJS({\n  \"node_modules/react-dom/client.js\"(exports) {\n    var import_dist = __toESM(require_dist());\n    var m = require_react_dom();\n    if (false) {\n      exports.createRoot = m.createRoot;\n      exports.hydrateRoot = m.hydrateRoot;\n    } else {\n      i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n      exports.createRoot = function(c, o) {\n        i.usingClientEntryPoint = true;\n        try {\n          return m.createRoot(c, o);\n        } finally {\n          i.usingClientEntryPoint = false;\n        }\n      };\n      exports.hydrateRoot = function(c, h, o) {\n        i.usingClientEntryPoint = true;\n        try {\n          return m.hydrateRoot(c, h, o);\n        } finally {\n          i.usingClientEntryPoint = false;\n        }\n      };\n    }\n    var i;\n  }\n});\nexport default require_client();\n",
      "start": 1703289463342,
      "end": 1703289463342,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
