{
  "resolvedId": "/home/zepor/ssweb/frontend-container/src/pages/ui/General.jsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport {Accordion,\r\n  Badge,\r\n  Breadcrumb,\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Container,\r\n  Pagination,\r\n  Row,\r\n  Popover,\r\n  Tooltip,\r\n  ProgressBar,\r\n  Spinner,\r\n  OverlayTrigger} from \"react-bootstrap\";\r\n\r\nimport avatar1 from \"../../assets/img/avatars/avatar.jpg\";\r\n\r\nconst colors = [\r\n  {\r\n    name: \"Primary\",\r\n    value: \"primary\",\r\n  },\r\n  {\r\n    name: \"Secondary\",\r\n    value: \"secondary\",\r\n  },\r\n  {\r\n    name: \"Success\",\r\n    value: \"success\",\r\n  },\r\n  {\r\n    name: \"Danger\",\r\n    value: \"danger\",\r\n  },\r\n  {\r\n    name: \"Warning\",\r\n    value: \"warning\",\r\n  },\r\n  {\r\n    name: \"Info\",\r\n    value: \"info\",\r\n  },\r\n];\r\n\r\nconst directions = [\r\n  {\r\n    name: \"Left\",\r\n    value: \"left\",\r\n  },\r\n  {\r\n    name: \"Top\",\r\n    value: \"top\",\r\n  },\r\n  {\r\n    name: \"Bottom\",\r\n    value: \"bottom\",\r\n  },\r\n  {\r\n    name: \"Right\",\r\n    value: \"right\",\r\n  },\r\n];\r\n\r\nconst AccordionElement = () => (\r\n  <Card>\r\n    <Card.Header className=\"pb-0\">\r\n      <Card.Title>Accordion</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">Build vertically collapsing accordions in combination with the Collapse component.</h6>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Accordion defaultActiveKey=\"0\">\r\n        <Accordion.Item eventKey=\"0\" className=\"bg-white\">\r\n          <Accordion.Header>Accordion Item #1</Accordion.Header>\r\n          <Accordion.Body>\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\r\n            ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\r\n            aliquip ex ea commodo consequat. Duis aute irure dolor in\r\n            reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\r\n            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\r\n            culpa qui officia deserunt mollit anim id est laborum.\r\n          </Accordion.Body>\r\n        </Accordion.Item>\r\n        <Accordion.Item eventKey=\"1\">\r\n          <Accordion.Header>Accordion Item #2</Accordion.Header>\r\n          <Accordion.Body className=\"bg-white\">\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\r\n            ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\r\n            aliquip ex ea commodo consequat. Duis aute irure dolor in\r\n            reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\r\n            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\r\n            culpa qui officia deserunt mollit anim id est laborum.\r\n          </Accordion.Body>\r\n        </Accordion.Item>\r\n        <Accordion.Item eventKey=\"2\">\r\n          <Accordion.Header>Accordion Item #3</Accordion.Header>\r\n          <Accordion.Body className=\"bg-white\">\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\r\n            ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\r\n            aliquip ex ea commodo consequat. Duis aute irure dolor in\r\n            reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\r\n            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\r\n            culpa qui officia deserunt mollit anim id est laborum.\r\n          </Accordion.Body>\r\n        </Accordion.Item>\r\n      </Accordion>\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst Badges = () => (\r\n  <Card>\r\n    <Card.Header>\r\n      <Card.Title>Badges</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">Examples for badges.</h6>\r\n    </Card.Header>\r\n    <Card.Body>\r\n        {colors.map((color, index) => (\r\n          <Badge key={index} bg={color.value} className=\"me-1 mb-1\">\r\n            {color.name}\r\n          </Badge>\r\n        ))}\r\n      <div>\r\n        {colors.map((color, index) => (\r\n          <Badge\r\n            key={index}\r\n            bg={color.value}\r\n            className=\"rounded-pill me-1 mb-1\"\r\n          >\r\n            {color.name}\r\n          </Badge>\r\n        ))}\r\n      </div>\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst BreadCrumbs = () => (\r\n  <Card>\r\n    <Card.Header>\r\n      <Card.Title>Breadcrumbs</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">\r\n        Indicate the current pageâ€™s location within a navigational hierarchy.\r\n      </h6>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item active>Home</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Library</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>Library</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Data</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst Images = () => (\r\n  <Card>\r\n    <Card.Header>\r\n      <Card.Title>Images</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">\r\n        Lightweight styles for images.\r\n      </h6>\r\n    </Card.Header>\r\n    <Card.Body className=\"text-center\">\r\n      <img\r\n        className=\"rounded me-2 mb-2\"\r\n        src={avatar1}\r\n        alt=\"Placeholder\"\r\n        width=\"140\"\r\n        height=\"140\"\r\n      />\r\n      <img\r\n        className=\"rounded-circle rounded me-2 mb-2\"\r\n        src={avatar1}\r\n        alt=\"Placeholder\"\r\n        width=\"140\"\r\n        height=\"140\"\r\n      />\r\n      <img\r\n        className=\"img-thumbnail rounded me-2 mb-2\"\r\n        src={avatar1}\r\n        alt=\"Placeholder\"\r\n        width=\"140\"\r\n        height=\"140\"\r\n      />\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst PaginationElement = () => (\r\n  <Card>\r\n    <Card.Header>\r\n      <Card.Title>Pagination</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">\r\n        Examples for showing pagination.\r\n      </h6>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Pagination size=\"sm\">\r\n        <Pagination.First />\r\n        <Pagination.Prev />\r\n        <Pagination.Item>{1}</Pagination.Item>\r\n        <Pagination.Ellipsis />\r\n\r\n        <Pagination.Item>{10}</Pagination.Item>\r\n        <Pagination.Item>{11}</Pagination.Item>\r\n        <Pagination.Item active>{12}</Pagination.Item>\r\n        <Pagination.Item>{13}</Pagination.Item>\r\n        <Pagination.Item disabled>{14}</Pagination.Item>\r\n\r\n        <Pagination.Ellipsis />\r\n        <Pagination.Item>{20}</Pagination.Item>\r\n        <Pagination.Next />\r\n        <Pagination.Last />\r\n      </Pagination>\r\n      <Pagination>\r\n        <Pagination.First />\r\n        <Pagination.Prev />\r\n        <Pagination.Item>{1}</Pagination.Item>\r\n        <Pagination.Ellipsis />\r\n\r\n        <Pagination.Item>{10}</Pagination.Item>\r\n        <Pagination.Item>{11}</Pagination.Item>\r\n        <Pagination.Item active>{12}</Pagination.Item>\r\n        <Pagination.Item>{13}</Pagination.Item>\r\n        <Pagination.Item disabled>{14}</Pagination.Item>\r\n\r\n        <Pagination.Ellipsis />\r\n        <Pagination.Item>{20}</Pagination.Item>\r\n        <Pagination.Next />\r\n        <Pagination.Last />\r\n      </Pagination>\r\n      <Pagination size=\"lg\">\r\n        <Pagination.First />\r\n        <Pagination.Prev />\r\n        <Pagination.Item>{1}</Pagination.Item>\r\n        <Pagination.Ellipsis />\r\n\r\n        <Pagination.Item>{10}</Pagination.Item>\r\n        <Pagination.Item>{11}</Pagination.Item>\r\n        <Pagination.Item active>{12}</Pagination.Item>\r\n        <Pagination.Item>{13}</Pagination.Item>\r\n        <Pagination.Item disabled>{14}</Pagination.Item>\r\n\r\n        <Pagination.Ellipsis />\r\n        <Pagination.Item>{20}</Pagination.Item>\r\n        <Pagination.Next />\r\n        <Pagination.Last />\r\n      </Pagination>\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst Popovers = () => (\r\n  <Card>\r\n    <Card.Header>\r\n      <Card.Title>Popovers</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">\r\n        Examples for adding Bootstrap popovers.\r\n      </h6>\r\n    </Card.Header>\r\n    <Card.Body className=\"text-center\">\r\n      {directions.map((direction, index) => (\r\n        <span className=\"me-1\" key={direction.value}>\r\n          <OverlayTrigger\r\n            trigger=\"click\"\r\n            placement={direction.value}\r\n            overlay={\r\n              <Popover id={`popover-positioned-${direction.value}`}>\r\n                <Popover.Header as=\"h3\">{`Popover ${direction.name}`}</Popover.Header>\r\n                <Popover.Body>\r\n                  <strong>Holy guacamole!</strong> Check this info.\r\n                </Popover.Body>\r\n              </Popover>\r\n            }\r\n          >\r\n            <Button variant=\"secondary\">Popover on {direction.name}</Button>\r\n          </OverlayTrigger>\r\n        </span>\r\n      ))}\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst ProgressBars = () => (\r\n  <Card>\r\n    <Card.Header>\r\n      <Card.Title>Progress Bars</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">\r\n        Examples for using Bootstrap custom progress bars.\r\n      </h6>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <ProgressBar\r\n        className=\"mb-3\"\r\n        variant=\"primary\"\r\n        now={25}\r\n        label=\"Default\"\r\n      />\r\n      <ProgressBar\r\n        className=\"mb-3\"\r\n        striped\r\n        variant=\"primary\"\r\n        now={50}\r\n        label=\"Striped\"\r\n      />\r\n      <ProgressBar\r\n        className=\"mb-3\"\r\n        striped\r\n        animated\r\n        variant=\"primary\"\r\n        now={75}\r\n        label=\"Striped\"\r\n      />\r\n      <ProgressBar>\r\n        <ProgressBar variant=\"primary\" now={25} label=\"Stacked\" key={1} />\r\n        <ProgressBar variant=\"success\" now={15} label=\"15%\" key={2} />\r\n        <ProgressBar variant=\"warning\" now={30} label=\"30%\" key={3} />\r\n        <ProgressBar variant=\"danger\" now={20} label=\"20%\" key={4} />\r\n      </ProgressBar>\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst Tooltips = () => (\r\n  <Card>\r\n    <Card.Header>\r\n      <Card.Title>Tooltips</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">\r\n        Examples for adding custom Bootstrap tooltips.\r\n      </h6>\r\n    </Card.Header>\r\n    <Card.Body className=\"text-center\">\r\n      {directions.map((direction, index) => (\r\n        <span className=\"me-1\" key={direction.value}>\r\n          <OverlayTrigger\r\n            placement={direction.value}\r\n            overlay={\r\n              <Tooltip id={`tooltip-${direction.value}`}>\r\n                Tooltip on {direction.name}.\r\n              </Tooltip>\r\n            }\r\n          >\r\n            <Button variant=\"secondary\">Tooltip on {direction.name}</Button>\r\n          </OverlayTrigger>\r\n        </span>\r\n      ))}\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst Spinners = () => (\r\n  <Card>\r\n    <Card.Header>\r\n      <Card.Title>Spinners</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">\r\n        Indicate the loading state of a component with Bootstrap spinners.\r\n      </h6>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <div className=\"mb-2\">\r\n        <Spinner animation=\"border\" variant=\"dark\" className=\"me-2\" />\r\n        {colors.map((color, index) => (\r\n          <Spinner\r\n            animation=\"border\"\r\n            key={index}\r\n            variant={color.value}\r\n            className=\"me-2\"\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"mb-2\">\r\n        <Spinner animation=\"border\" variant=\"dark\" size=\"sm\" className=\"me-2\" />\r\n        {colors.map((color, index) => (\r\n          <Spinner\r\n            animation=\"border\"\r\n            key={index}\r\n            variant={color.value}\r\n            size=\"sm\"\r\n            className=\"me-2\"\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <hr />\r\n\r\n      <div className=\"mb-2\">\r\n        <Spinner animation=\"grow\" variant=\"dark\" type=\"grow\" className=\"me-2\" />\r\n        {colors.map((color, index) => (\r\n          <Spinner\r\n            animation=\"grow\"\r\n            key={index}\r\n            variant={color.value}\r\n            type=\"grow\"\r\n            className=\"me-2\"\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"mb-2\">\r\n        <Spinner\r\n          animation=\"grow\"\r\n          variant=\"dark\"\r\n          type=\"grow\"\r\n          size=\"sm\"\r\n          className=\"me-2\"\r\n        />\r\n        {colors.map((color, index) => (\r\n          <Spinner\r\n            animation=\"grow\"\r\n            key={index}\r\n            variant={color.value}\r\n            type=\"grow\"\r\n            size=\"sm\"\r\n            className=\"me-2\"\r\n          />\r\n        ))}\r\n      </div>\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst General = () => (\r\n  <React.Fragment>\r\n    <Helmet title=\"General\" />\r\n    <Container fluid className=\"p-0\">\r\n      <h1 className=\"h3 mb-3\">General</h1>\r\n\r\n      <Row>\r\n        <Col lg=\"6\">\r\n          <AccordionElement />\r\n          <BreadCrumbs />\r\n          <Images />\r\n          <Popovers />\r\n          <Tooltips />\r\n        </Col>\r\n        <Col lg=\"6\">\r\n          <Badges />\r\n          <PaginationElement />\r\n          <ProgressBars />\r\n          <Spinners />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default General;\r\n",
      "start": 1702937436953,
      "end": 1702937440806,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937440806,
      "end": 1702937440806,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937440806,
      "end": 1702937440806,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx, jsxs } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport {\n  Accordion,\n  Badge,\n  Breadcrumb,\n  Button,\n  Card,\n  Col,\n  Container,\n  Pagination,\n  Row,\n  Popover,\n  Tooltip,\n  ProgressBar,\n  Spinner,\n  OverlayTrigger\n} from \"react-bootstrap\";\nimport avatar1 from \"../../assets/img/avatars/avatar.jpg\";\nconst colors = [\n  {\n    name: \"Primary\",\n    value: \"primary\"\n  },\n  {\n    name: \"Secondary\",\n    value: \"secondary\"\n  },\n  {\n    name: \"Success\",\n    value: \"success\"\n  },\n  {\n    name: \"Danger\",\n    value: \"danger\"\n  },\n  {\n    name: \"Warning\",\n    value: \"warning\"\n  },\n  {\n    name: \"Info\",\n    value: \"info\"\n  }\n];\nconst directions = [\n  {\n    name: \"Left\",\n    value: \"left\"\n  },\n  {\n    name: \"Top\",\n    value: \"top\"\n  },\n  {\n    name: \"Bottom\",\n    value: \"bottom\"\n  },\n  {\n    name: \"Right\",\n    value: \"right\"\n  }\n];\nconst AccordionElement = () => /* @__PURE__ */ jsxs(Card, { children: [\n  /* @__PURE__ */ jsxs(Card.Header, { className: \"pb-0\", children: [\n    /* @__PURE__ */ jsx(Card.Title, { children: \"Accordion\" }),\n    /* @__PURE__ */ jsx(\"h6\", { className: \"card-subtitle text-muted\", children: \"Build vertically collapsing accordions in combination with the Collapse component.\" })\n  ] }),\n  /* @__PURE__ */ jsx(Card.Body, { children: /* @__PURE__ */ jsxs(Accordion, { defaultActiveKey: \"0\", children: [\n    /* @__PURE__ */ jsxs(Accordion.Item, { eventKey: \"0\", className: \"bg-white\", children: [\n      /* @__PURE__ */ jsx(Accordion.Header, { children: \"Accordion Item #1\" }),\n      /* @__PURE__ */ jsx(Accordion.Body, { children: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\" })\n    ] }),\n    /* @__PURE__ */ jsxs(Accordion.Item, { eventKey: \"1\", children: [\n      /* @__PURE__ */ jsx(Accordion.Header, { children: \"Accordion Item #2\" }),\n      /* @__PURE__ */ jsx(Accordion.Body, { className: \"bg-white\", children: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\" })\n    ] }),\n    /* @__PURE__ */ jsxs(Accordion.Item, { eventKey: \"2\", children: [\n      /* @__PURE__ */ jsx(Accordion.Header, { children: \"Accordion Item #3\" }),\n      /* @__PURE__ */ jsx(Accordion.Body, { className: \"bg-white\", children: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\" })\n    ] })\n  ] }) })\n] });\nconst Badges = () => /* @__PURE__ */ jsxs(Card, { children: [\n  /* @__PURE__ */ jsxs(Card.Header, { children: [\n    /* @__PURE__ */ jsx(Card.Title, { children: \"Badges\" }),\n    /* @__PURE__ */ jsx(\"h6\", { className: \"card-subtitle text-muted\", children: \"Examples for badges.\" })\n  ] }),\n  /* @__PURE__ */ jsxs(Card.Body, { children: [\n    colors.map((color, index) => /* @__PURE__ */ jsx(Badge, { bg: color.value, className: \"me-1 mb-1\", children: color.name }, index)),\n    /* @__PURE__ */ jsx(\"div\", { children: colors.map((color, index) => /* @__PURE__ */ jsx(\n      Badge,\n      {\n        bg: color.value,\n        className: \"rounded-pill me-1 mb-1\",\n        children: color.name\n      },\n      index\n    )) })\n  ] })\n] });\nconst BreadCrumbs = () => /* @__PURE__ */ jsxs(Card, { children: [\n  /* @__PURE__ */ jsxs(Card.Header, { children: [\n    /* @__PURE__ */ jsx(Card.Title, { children: \"Breadcrumbs\" }),\n    /* @__PURE__ */ jsx(\"h6\", { className: \"card-subtitle text-muted\", children: \"Indicate the current pageâ€™s location within a navigational hierarchy.\" })\n  ] }),\n  /* @__PURE__ */ jsxs(Card.Body, { children: [\n    /* @__PURE__ */ jsx(Breadcrumb, { children: /* @__PURE__ */ jsx(Breadcrumb.Item, { active: true, children: \"Home\" }) }),\n    /* @__PURE__ */ jsxs(Breadcrumb, { children: [\n      /* @__PURE__ */ jsx(Breadcrumb.Item, { children: \"Home\" }),\n      /* @__PURE__ */ jsx(Breadcrumb.Item, { active: true, children: \"Library\" })\n    ] }),\n    /* @__PURE__ */ jsxs(Breadcrumb, { children: [\n      /* @__PURE__ */ jsx(Breadcrumb.Item, { children: \"Home\" }),\n      /* @__PURE__ */ jsx(Breadcrumb.Item, { children: \"Library\" }),\n      /* @__PURE__ */ jsx(Breadcrumb.Item, { active: true, children: \"Data\" })\n    ] })\n  ] })\n] });\nconst Images = () => /* @__PURE__ */ jsxs(Card, { children: [\n  /* @__PURE__ */ jsxs(Card.Header, { children: [\n    /* @__PURE__ */ jsx(Card.Title, { children: \"Images\" }),\n    /* @__PURE__ */ jsx(\"h6\", { className: \"card-subtitle text-muted\", children: \"Lightweight styles for images.\" })\n  ] }),\n  /* @__PURE__ */ jsxs(Card.Body, { className: \"text-center\", children: [\n    /* @__PURE__ */ jsx(\n      \"img\",\n      {\n        className: \"rounded me-2 mb-2\",\n        src: avatar1,\n        alt: \"Placeholder\",\n        width: \"140\",\n        height: \"140\"\n      }\n    ),\n    /* @__PURE__ */ jsx(\n      \"img\",\n      {\n        className: \"rounded-circle rounded me-2 mb-2\",\n        src: avatar1,\n        alt: \"Placeholder\",\n        width: \"140\",\n        height: \"140\"\n      }\n    ),\n    /* @__PURE__ */ jsx(\n      \"img\",\n      {\n        className: \"img-thumbnail rounded me-2 mb-2\",\n        src: avatar1,\n        alt: \"Placeholder\",\n        width: \"140\",\n        height: \"140\"\n      }\n    )\n  ] })\n] });\nconst PaginationElement = () => /* @__PURE__ */ jsxs(Card, { children: [\n  /* @__PURE__ */ jsxs(Card.Header, { children: [\n    /* @__PURE__ */ jsx(Card.Title, { children: \"Pagination\" }),\n    /* @__PURE__ */ jsx(\"h6\", { className: \"card-subtitle text-muted\", children: \"Examples for showing pagination.\" })\n  ] }),\n  /* @__PURE__ */ jsxs(Card.Body, { children: [\n    /* @__PURE__ */ jsxs(Pagination, { size: \"sm\", children: [\n      /* @__PURE__ */ jsx(Pagination.First, {}),\n      /* @__PURE__ */ jsx(Pagination.Prev, {}),\n      /* @__PURE__ */ jsx(Pagination.Item, { children: 1 }),\n      /* @__PURE__ */ jsx(Pagination.Ellipsis, {}),\n      /* @__PURE__ */ jsx(Pagination.Item, { children: 10 }),\n      /* @__PURE__ */ jsx(Pagination.Item, { children: 11 }),\n      /* @__PURE__ */ jsx(Pagination.Item, { active: true, children: 12 }),\n      /* @__PURE__ */ jsx(Pagination.Item, { children: 13 }),\n      /* @__PURE__ */ jsx(Pagination.Item, { disabled: true, children: 14 }),\n      /* @__PURE__ */ jsx(Pagination.Ellipsis, {}),\n      /* @__PURE__ */ jsx(Pagination.Item, { children: 20 }),\n      /* @__PURE__ */ jsx(Pagination.Next, {}),\n      /* @__PURE__ */ jsx(Pagination.Last, {})\n    ] }),\n    /* @__PURE__ */ jsxs(Pagination, { children: [\n      /* @__PURE__ */ jsx(Pagination.First, {}),\n      /* @__PURE__ */ jsx(Pagination.Prev, {}),\n      /* @__PURE__ */ jsx(Pagination.Item, { children: 1 }),\n      /* @__PURE__ */ jsx(Pagination.Ellipsis, {}),\n      /* @__PURE__ */ jsx(Pagination.Item, { children: 10 }),\n      /* @__PURE__ */ jsx(Pagination.Item, { children: 11 }),\n      /* @__PURE__ */ jsx(Pagination.Item, { active: true, children: 12 }),\n      /* @__PURE__ */ jsx(Pagination.Item, { children: 13 }),\n      /* @__PURE__ */ jsx(Pagination.Item, { disabled: true, children: 14 }),\n      /* @__PURE__ */ jsx(Pagination.Ellipsis, {}),\n      /* @__PURE__ */ jsx(Pagination.Item, { children: 20 }),\n      /* @__PURE__ */ jsx(Pagination.Next, {}),\n      /* @__PURE__ */ jsx(Pagination.Last, {})\n    ] }),\n    /* @__PURE__ */ jsxs(Pagination, { size: \"lg\", children: [\n      /* @__PURE__ */ jsx(Pagination.First, {}),\n      /* @__PURE__ */ jsx(Pagination.Prev, {}),\n      /* @__PURE__ */ jsx(Pagination.Item, { children: 1 }),\n      /* @__PURE__ */ jsx(Pagination.Ellipsis, {}),\n      /* @__PURE__ */ jsx(Pagination.Item, { children: 10 }),\n      /* @__PURE__ */ jsx(Pagination.Item, { children: 11 }),\n      /* @__PURE__ */ jsx(Pagination.Item, { active: true, children: 12 }),\n      /* @__PURE__ */ jsx(Pagination.Item, { children: 13 }),\n      /* @__PURE__ */ jsx(Pagination.Item, { disabled: true, children: 14 }),\n      /* @__PURE__ */ jsx(Pagination.Ellipsis, {}),\n      /* @__PURE__ */ jsx(Pagination.Item, { children: 20 }),\n      /* @__PURE__ */ jsx(Pagination.Next, {}),\n      /* @__PURE__ */ jsx(Pagination.Last, {})\n    ] })\n  ] })\n] });\nconst Popovers = () => /* @__PURE__ */ jsxs(Card, { children: [\n  /* @__PURE__ */ jsxs(Card.Header, { children: [\n    /* @__PURE__ */ jsx(Card.Title, { children: \"Popovers\" }),\n    /* @__PURE__ */ jsx(\"h6\", { className: \"card-subtitle text-muted\", children: \"Examples for adding Bootstrap popovers.\" })\n  ] }),\n  /* @__PURE__ */ jsx(Card.Body, { className: \"text-center\", children: directions.map((direction, index) => /* @__PURE__ */ jsx(\"span\", { className: \"me-1\", children: /* @__PURE__ */ jsx(\n    OverlayTrigger,\n    {\n      trigger: \"click\",\n      placement: direction.value,\n      overlay: /* @__PURE__ */ jsxs(Popover, { id: `popover-positioned-${direction.value}`, children: [\n        /* @__PURE__ */ jsx(Popover.Header, { as: \"h3\", children: `Popover ${direction.name}` }),\n        /* @__PURE__ */ jsxs(Popover.Body, { children: [\n          /* @__PURE__ */ jsx(\"strong\", { children: \"Holy guacamole!\" }),\n          \" Check this info.\"\n        ] })\n      ] }),\n      children: /* @__PURE__ */ jsxs(Button, { variant: \"secondary\", children: [\n        \"Popover on \",\n        direction.name\n      ] })\n    }\n  ) }, direction.value)) })\n] });\nconst ProgressBars = () => /* @__PURE__ */ jsxs(Card, { children: [\n  /* @__PURE__ */ jsxs(Card.Header, { children: [\n    /* @__PURE__ */ jsx(Card.Title, { children: \"Progress Bars\" }),\n    /* @__PURE__ */ jsx(\"h6\", { className: \"card-subtitle text-muted\", children: \"Examples for using Bootstrap custom progress bars.\" })\n  ] }),\n  /* @__PURE__ */ jsxs(Card.Body, { children: [\n    /* @__PURE__ */ jsx(\n      ProgressBar,\n      {\n        className: \"mb-3\",\n        variant: \"primary\",\n        now: 25,\n        label: \"Default\"\n      }\n    ),\n    /* @__PURE__ */ jsx(\n      ProgressBar,\n      {\n        className: \"mb-3\",\n        striped: true,\n        variant: \"primary\",\n        now: 50,\n        label: \"Striped\"\n      }\n    ),\n    /* @__PURE__ */ jsx(\n      ProgressBar,\n      {\n        className: \"mb-3\",\n        striped: true,\n        animated: true,\n        variant: \"primary\",\n        now: 75,\n        label: \"Striped\"\n      }\n    ),\n    /* @__PURE__ */ jsxs(ProgressBar, { children: [\n      /* @__PURE__ */ jsx(ProgressBar, { variant: \"primary\", now: 25, label: \"Stacked\" }, 1),\n      /* @__PURE__ */ jsx(ProgressBar, { variant: \"success\", now: 15, label: \"15%\" }, 2),\n      /* @__PURE__ */ jsx(ProgressBar, { variant: \"warning\", now: 30, label: \"30%\" }, 3),\n      /* @__PURE__ */ jsx(ProgressBar, { variant: \"danger\", now: 20, label: \"20%\" }, 4)\n    ] })\n  ] })\n] });\nconst Tooltips = () => /* @__PURE__ */ jsxs(Card, { children: [\n  /* @__PURE__ */ jsxs(Card.Header, { children: [\n    /* @__PURE__ */ jsx(Card.Title, { children: \"Tooltips\" }),\n    /* @__PURE__ */ jsx(\"h6\", { className: \"card-subtitle text-muted\", children: \"Examples for adding custom Bootstrap tooltips.\" })\n  ] }),\n  /* @__PURE__ */ jsx(Card.Body, { className: \"text-center\", children: directions.map((direction, index) => /* @__PURE__ */ jsx(\"span\", { className: \"me-1\", children: /* @__PURE__ */ jsx(\n    OverlayTrigger,\n    {\n      placement: direction.value,\n      overlay: /* @__PURE__ */ jsxs(Tooltip, { id: `tooltip-${direction.value}`, children: [\n        \"Tooltip on \",\n        direction.name,\n        \".\"\n      ] }),\n      children: /* @__PURE__ */ jsxs(Button, { variant: \"secondary\", children: [\n        \"Tooltip on \",\n        direction.name\n      ] })\n    }\n  ) }, direction.value)) })\n] });\nconst Spinners = () => /* @__PURE__ */ jsxs(Card, { children: [\n  /* @__PURE__ */ jsxs(Card.Header, { children: [\n    /* @__PURE__ */ jsx(Card.Title, { children: \"Spinners\" }),\n    /* @__PURE__ */ jsx(\"h6\", { className: \"card-subtitle text-muted\", children: \"Indicate the loading state of a component with Bootstrap spinners.\" })\n  ] }),\n  /* @__PURE__ */ jsxs(Card.Body, { children: [\n    /* @__PURE__ */ jsxs(\"div\", { className: \"mb-2\", children: [\n      /* @__PURE__ */ jsx(Spinner, { animation: \"border\", variant: \"dark\", className: \"me-2\" }),\n      colors.map((color, index) => /* @__PURE__ */ jsx(\n        Spinner,\n        {\n          animation: \"border\",\n          variant: color.value,\n          className: \"me-2\"\n        },\n        index\n      ))\n    ] }),\n    /* @__PURE__ */ jsxs(\"div\", { className: \"mb-2\", children: [\n      /* @__PURE__ */ jsx(Spinner, { animation: \"border\", variant: \"dark\", size: \"sm\", className: \"me-2\" }),\n      colors.map((color, index) => /* @__PURE__ */ jsx(\n        Spinner,\n        {\n          animation: \"border\",\n          variant: color.value,\n          size: \"sm\",\n          className: \"me-2\"\n        },\n        index\n      ))\n    ] }),\n    /* @__PURE__ */ jsx(\"hr\", {}),\n    /* @__PURE__ */ jsxs(\"div\", { className: \"mb-2\", children: [\n      /* @__PURE__ */ jsx(Spinner, { animation: \"grow\", variant: \"dark\", type: \"grow\", className: \"me-2\" }),\n      colors.map((color, index) => /* @__PURE__ */ jsx(\n        Spinner,\n        {\n          animation: \"grow\",\n          variant: color.value,\n          type: \"grow\",\n          className: \"me-2\"\n        },\n        index\n      ))\n    ] }),\n    /* @__PURE__ */ jsxs(\"div\", { className: \"mb-2\", children: [\n      /* @__PURE__ */ jsx(\n        Spinner,\n        {\n          animation: \"grow\",\n          variant: \"dark\",\n          type: \"grow\",\n          size: \"sm\",\n          className: \"me-2\"\n        }\n      ),\n      colors.map((color, index) => /* @__PURE__ */ jsx(\n        Spinner,\n        {\n          animation: \"grow\",\n          variant: color.value,\n          type: \"grow\",\n          size: \"sm\",\n          className: \"me-2\"\n        },\n        index\n      ))\n    ] })\n  ] })\n] });\nconst General = () => /* @__PURE__ */ jsxs(React.Fragment, { children: [\n  /* @__PURE__ */ jsx(Helmet, { title: \"General\" }),\n  /* @__PURE__ */ jsxs(Container, { fluid: true, className: \"p-0\", children: [\n    /* @__PURE__ */ jsx(\"h1\", { className: \"h3 mb-3\", children: \"General\" }),\n    /* @__PURE__ */ jsxs(Row, { children: [\n      /* @__PURE__ */ jsxs(Col, { lg: \"6\", children: [\n        /* @__PURE__ */ jsx(AccordionElement, {}),\n        /* @__PURE__ */ jsx(BreadCrumbs, {}),\n        /* @__PURE__ */ jsx(Images, {}),\n        /* @__PURE__ */ jsx(Popovers, {}),\n        /* @__PURE__ */ jsx(Tooltips, {})\n      ] }),\n      /* @__PURE__ */ jsxs(Col, { lg: \"6\", children: [\n        /* @__PURE__ */ jsx(Badges, {}),\n        /* @__PURE__ */ jsx(PaginationElement, {}),\n        /* @__PURE__ */ jsx(ProgressBars, {}),\n        /* @__PURE__ */ jsx(Spinners, {})\n      ] })\n    ] })\n  ] })\n] });\nexport default General;\n",
      "start": 1702937440806,
      "end": 1702937440820,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/home/zepor/ssweb/frontend-container/src/pages/ui/General.jsx"
        ],
        "sourcesContent": [
          "import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport {Accordion,\r\n  Badge,\r\n  Breadcrumb,\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Container,\r\n  Pagination,\r\n  Row,\r\n  Popover,\r\n  Tooltip,\r\n  ProgressBar,\r\n  Spinner,\r\n  OverlayTrigger} from \"react-bootstrap\";\r\n\r\nimport avatar1 from \"../../assets/img/avatars/avatar.jpg\";\r\n\r\nconst colors = [\r\n  {\r\n    name: \"Primary\",\r\n    value: \"primary\",\r\n  },\r\n  {\r\n    name: \"Secondary\",\r\n    value: \"secondary\",\r\n  },\r\n  {\r\n    name: \"Success\",\r\n    value: \"success\",\r\n  },\r\n  {\r\n    name: \"Danger\",\r\n    value: \"danger\",\r\n  },\r\n  {\r\n    name: \"Warning\",\r\n    value: \"warning\",\r\n  },\r\n  {\r\n    name: \"Info\",\r\n    value: \"info\",\r\n  },\r\n];\r\n\r\nconst directions = [\r\n  {\r\n    name: \"Left\",\r\n    value: \"left\",\r\n  },\r\n  {\r\n    name: \"Top\",\r\n    value: \"top\",\r\n  },\r\n  {\r\n    name: \"Bottom\",\r\n    value: \"bottom\",\r\n  },\r\n  {\r\n    name: \"Right\",\r\n    value: \"right\",\r\n  },\r\n];\r\n\r\nconst AccordionElement = () => (\r\n  <Card>\r\n    <Card.Header className=\"pb-0\">\r\n      <Card.Title>Accordion</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">Build vertically collapsing accordions in combination with the Collapse component.</h6>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Accordion defaultActiveKey=\"0\">\r\n        <Accordion.Item eventKey=\"0\" className=\"bg-white\">\r\n          <Accordion.Header>Accordion Item #1</Accordion.Header>\r\n          <Accordion.Body>\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\r\n            ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\r\n            aliquip ex ea commodo consequat. Duis aute irure dolor in\r\n            reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\r\n            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\r\n            culpa qui officia deserunt mollit anim id est laborum.\r\n          </Accordion.Body>\r\n        </Accordion.Item>\r\n        <Accordion.Item eventKey=\"1\">\r\n          <Accordion.Header>Accordion Item #2</Accordion.Header>\r\n          <Accordion.Body className=\"bg-white\">\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\r\n            ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\r\n            aliquip ex ea commodo consequat. Duis aute irure dolor in\r\n            reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\r\n            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\r\n            culpa qui officia deserunt mollit anim id est laborum.\r\n          </Accordion.Body>\r\n        </Accordion.Item>\r\n        <Accordion.Item eventKey=\"2\">\r\n          <Accordion.Header>Accordion Item #3</Accordion.Header>\r\n          <Accordion.Body className=\"bg-white\">\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\r\n            ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\r\n            aliquip ex ea commodo consequat. Duis aute irure dolor in\r\n            reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\r\n            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\r\n            culpa qui officia deserunt mollit anim id est laborum.\r\n          </Accordion.Body>\r\n        </Accordion.Item>\r\n      </Accordion>\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst Badges = () => (\r\n  <Card>\r\n    <Card.Header>\r\n      <Card.Title>Badges</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">Examples for badges.</h6>\r\n    </Card.Header>\r\n    <Card.Body>\r\n        {colors.map((color, index) => (\r\n          <Badge key={index} bg={color.value} className=\"me-1 mb-1\">\r\n            {color.name}\r\n          </Badge>\r\n        ))}\r\n      <div>\r\n        {colors.map((color, index) => (\r\n          <Badge\r\n            key={index}\r\n            bg={color.value}\r\n            className=\"rounded-pill me-1 mb-1\"\r\n          >\r\n            {color.name}\r\n          </Badge>\r\n        ))}\r\n      </div>\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst BreadCrumbs = () => (\r\n  <Card>\r\n    <Card.Header>\r\n      <Card.Title>Breadcrumbs</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">\r\n        Indicate the current pageâ€™s location within a navigational hierarchy.\r\n      </h6>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item active>Home</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Library</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>Library</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Data</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst Images = () => (\r\n  <Card>\r\n    <Card.Header>\r\n      <Card.Title>Images</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">\r\n        Lightweight styles for images.\r\n      </h6>\r\n    </Card.Header>\r\n    <Card.Body className=\"text-center\">\r\n      <img\r\n        className=\"rounded me-2 mb-2\"\r\n        src={avatar1}\r\n        alt=\"Placeholder\"\r\n        width=\"140\"\r\n        height=\"140\"\r\n      />\r\n      <img\r\n        className=\"rounded-circle rounded me-2 mb-2\"\r\n        src={avatar1}\r\n        alt=\"Placeholder\"\r\n        width=\"140\"\r\n        height=\"140\"\r\n      />\r\n      <img\r\n        className=\"img-thumbnail rounded me-2 mb-2\"\r\n        src={avatar1}\r\n        alt=\"Placeholder\"\r\n        width=\"140\"\r\n        height=\"140\"\r\n      />\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst PaginationElement = () => (\r\n  <Card>\r\n    <Card.Header>\r\n      <Card.Title>Pagination</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">\r\n        Examples for showing pagination.\r\n      </h6>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Pagination size=\"sm\">\r\n        <Pagination.First />\r\n        <Pagination.Prev />\r\n        <Pagination.Item>{1}</Pagination.Item>\r\n        <Pagination.Ellipsis />\r\n\r\n        <Pagination.Item>{10}</Pagination.Item>\r\n        <Pagination.Item>{11}</Pagination.Item>\r\n        <Pagination.Item active>{12}</Pagination.Item>\r\n        <Pagination.Item>{13}</Pagination.Item>\r\n        <Pagination.Item disabled>{14}</Pagination.Item>\r\n\r\n        <Pagination.Ellipsis />\r\n        <Pagination.Item>{20}</Pagination.Item>\r\n        <Pagination.Next />\r\n        <Pagination.Last />\r\n      </Pagination>\r\n      <Pagination>\r\n        <Pagination.First />\r\n        <Pagination.Prev />\r\n        <Pagination.Item>{1}</Pagination.Item>\r\n        <Pagination.Ellipsis />\r\n\r\n        <Pagination.Item>{10}</Pagination.Item>\r\n        <Pagination.Item>{11}</Pagination.Item>\r\n        <Pagination.Item active>{12}</Pagination.Item>\r\n        <Pagination.Item>{13}</Pagination.Item>\r\n        <Pagination.Item disabled>{14}</Pagination.Item>\r\n\r\n        <Pagination.Ellipsis />\r\n        <Pagination.Item>{20}</Pagination.Item>\r\n        <Pagination.Next />\r\n        <Pagination.Last />\r\n      </Pagination>\r\n      <Pagination size=\"lg\">\r\n        <Pagination.First />\r\n        <Pagination.Prev />\r\n        <Pagination.Item>{1}</Pagination.Item>\r\n        <Pagination.Ellipsis />\r\n\r\n        <Pagination.Item>{10}</Pagination.Item>\r\n        <Pagination.Item>{11}</Pagination.Item>\r\n        <Pagination.Item active>{12}</Pagination.Item>\r\n        <Pagination.Item>{13}</Pagination.Item>\r\n        <Pagination.Item disabled>{14}</Pagination.Item>\r\n\r\n        <Pagination.Ellipsis />\r\n        <Pagination.Item>{20}</Pagination.Item>\r\n        <Pagination.Next />\r\n        <Pagination.Last />\r\n      </Pagination>\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst Popovers = () => (\r\n  <Card>\r\n    <Card.Header>\r\n      <Card.Title>Popovers</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">\r\n        Examples for adding Bootstrap popovers.\r\n      </h6>\r\n    </Card.Header>\r\n    <Card.Body className=\"text-center\">\r\n      {directions.map((direction, index) => (\r\n        <span className=\"me-1\" key={direction.value}>\r\n          <OverlayTrigger\r\n            trigger=\"click\"\r\n            placement={direction.value}\r\n            overlay={\r\n              <Popover id={`popover-positioned-${direction.value}`}>\r\n                <Popover.Header as=\"h3\">{`Popover ${direction.name}`}</Popover.Header>\r\n                <Popover.Body>\r\n                  <strong>Holy guacamole!</strong> Check this info.\r\n                </Popover.Body>\r\n              </Popover>\r\n            }\r\n          >\r\n            <Button variant=\"secondary\">Popover on {direction.name}</Button>\r\n          </OverlayTrigger>\r\n        </span>\r\n      ))}\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst ProgressBars = () => (\r\n  <Card>\r\n    <Card.Header>\r\n      <Card.Title>Progress Bars</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">\r\n        Examples for using Bootstrap custom progress bars.\r\n      </h6>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <ProgressBar\r\n        className=\"mb-3\"\r\n        variant=\"primary\"\r\n        now={25}\r\n        label=\"Default\"\r\n      />\r\n      <ProgressBar\r\n        className=\"mb-3\"\r\n        striped\r\n        variant=\"primary\"\r\n        now={50}\r\n        label=\"Striped\"\r\n      />\r\n      <ProgressBar\r\n        className=\"mb-3\"\r\n        striped\r\n        animated\r\n        variant=\"primary\"\r\n        now={75}\r\n        label=\"Striped\"\r\n      />\r\n      <ProgressBar>\r\n        <ProgressBar variant=\"primary\" now={25} label=\"Stacked\" key={1} />\r\n        <ProgressBar variant=\"success\" now={15} label=\"15%\" key={2} />\r\n        <ProgressBar variant=\"warning\" now={30} label=\"30%\" key={3} />\r\n        <ProgressBar variant=\"danger\" now={20} label=\"20%\" key={4} />\r\n      </ProgressBar>\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst Tooltips = () => (\r\n  <Card>\r\n    <Card.Header>\r\n      <Card.Title>Tooltips</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">\r\n        Examples for adding custom Bootstrap tooltips.\r\n      </h6>\r\n    </Card.Header>\r\n    <Card.Body className=\"text-center\">\r\n      {directions.map((direction, index) => (\r\n        <span className=\"me-1\" key={direction.value}>\r\n          <OverlayTrigger\r\n            placement={direction.value}\r\n            overlay={\r\n              <Tooltip id={`tooltip-${direction.value}`}>\r\n                Tooltip on {direction.name}.\r\n              </Tooltip>\r\n            }\r\n          >\r\n            <Button variant=\"secondary\">Tooltip on {direction.name}</Button>\r\n          </OverlayTrigger>\r\n        </span>\r\n      ))}\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst Spinners = () => (\r\n  <Card>\r\n    <Card.Header>\r\n      <Card.Title>Spinners</Card.Title>\r\n      <h6 className=\"card-subtitle text-muted\">\r\n        Indicate the loading state of a component with Bootstrap spinners.\r\n      </h6>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <div className=\"mb-2\">\r\n        <Spinner animation=\"border\" variant=\"dark\" className=\"me-2\" />\r\n        {colors.map((color, index) => (\r\n          <Spinner\r\n            animation=\"border\"\r\n            key={index}\r\n            variant={color.value}\r\n            className=\"me-2\"\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"mb-2\">\r\n        <Spinner animation=\"border\" variant=\"dark\" size=\"sm\" className=\"me-2\" />\r\n        {colors.map((color, index) => (\r\n          <Spinner\r\n            animation=\"border\"\r\n            key={index}\r\n            variant={color.value}\r\n            size=\"sm\"\r\n            className=\"me-2\"\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <hr />\r\n\r\n      <div className=\"mb-2\">\r\n        <Spinner animation=\"grow\" variant=\"dark\" type=\"grow\" className=\"me-2\" />\r\n        {colors.map((color, index) => (\r\n          <Spinner\r\n            animation=\"grow\"\r\n            key={index}\r\n            variant={color.value}\r\n            type=\"grow\"\r\n            className=\"me-2\"\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"mb-2\">\r\n        <Spinner\r\n          animation=\"grow\"\r\n          variant=\"dark\"\r\n          type=\"grow\"\r\n          size=\"sm\"\r\n          className=\"me-2\"\r\n        />\r\n        {colors.map((color, index) => (\r\n          <Spinner\r\n            animation=\"grow\"\r\n            key={index}\r\n            variant={color.value}\r\n            type=\"grow\"\r\n            size=\"sm\"\r\n            className=\"me-2\"\r\n          />\r\n        ))}\r\n      </div>\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nconst General = () => (\r\n  <React.Fragment>\r\n    <Helmet title=\"General\" />\r\n    <Container fluid className=\"p-0\">\r\n      <h1 className=\"h3 mb-3\">General</h1>\r\n\r\n      <Row>\r\n        <Col lg=\"6\">\r\n          <AccordionElement />\r\n          <BreadCrumbs />\r\n          <Images />\r\n          <Popovers />\r\n          <Tooltips />\r\n        </Col>\r\n        <Col lg=\"6\">\r\n          <Badges />\r\n          <PaginationElement />\r\n          <ProgressBars />\r\n          <Spinners />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default General;\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1702937440820,
      "end": 1702937440820,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937440820,
      "end": 1702937440820,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937440820,
      "end": 1702937440820,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937440820,
      "end": 1702937440820,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937440820,
      "end": 1702937440820,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937440820,
      "end": 1702937440820,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937440820,
      "end": 1702937440821,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937440821,
      "end": 1702937440821,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937440821,
      "end": 1702937440821,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937440821,
      "end": 1702937440821,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937440821,
      "end": 1702937440821,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937440821,
      "end": 1702937440821,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937440821,
      "end": 1702937440821,
      "order": "normal"
    }
  ]
}
