{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/dataweave.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = dataweave\ndataweave.displayName = 'dataweave'\ndataweave.aliases = []\nfunction dataweave(Prism) {\n  ;(function (Prism) {\n    Prism.languages.dataweave = {\n      url: /\\b[A-Za-z]+:\\/\\/[\\w/:.?=&-]+|\\burn:[\\w:.?=&-]+/,\n      property: {\n        pattern: /(?:\\b\\w+#)?(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|\\b\\w+)(?=\\s*[:@])/,\n        greedy: true\n      },\n      string: {\n        pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n        greedy: true\n      },\n      'mime-type':\n        /\\b(?:application|audio|image|multipart|text|video)\\/[\\w+-]+/,\n      date: {\n        pattern: /\\|[\\w:+-]+\\|/,\n        greedy: true\n      },\n      comment: [\n        {\n          pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      regex: {\n        pattern: /\\/(?:[^\\\\\\/\\r\\n]|\\\\[^\\r\\n])+\\//,\n        greedy: true\n      },\n      keyword:\n        /\\b(?:and|as|at|case|do|else|fun|if|input|is|match|not|ns|null|or|output|type|unless|update|using|var)\\b/,\n      function: /\\b[A-Z_]\\w*(?=\\s*\\()/i,\n      number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n      punctuation: /[{}[\\];(),.:@]/,\n      operator: /<<|>>|->|[<>~=]=?|!=|--?-?|\\+\\+?|!|\\?/,\n      boolean: /\\b(?:false|true)\\b/\n    }\n  })(Prism)\n}\n",
      "start": 1702937444857,
      "end": 1702937444889,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444889,
      "end": 1702937444889,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444889,
      "end": 1702937444889,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444889,
      "end": 1702937444889,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444889,
      "end": 1702937444889,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444889,
      "end": 1702937444889,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444889,
      "end": 1702937444889,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444889,
      "end": 1702937444889,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444889,
      "end": 1702937444889,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444889,
      "end": 1702937444889,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444889,
      "end": 1702937444889,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar dataweave_1;\nvar hasRequiredDataweave;\n\nfunction requireDataweave () {\n\tif (hasRequiredDataweave) return dataweave_1;\n\thasRequiredDataweave = 1;\n\t'use strict'\n\n\tdataweave_1 = dataweave\n\tdataweave.displayName = 'dataweave'\n\tdataweave.aliases = []\n\tfunction dataweave(Prism) {\n\t  ;(function (Prism) {\n\t    Prism.languages.dataweave = {\n\t      url: /\\b[A-Za-z]+:\\/\\/[\\w/:.?=&-]+|\\burn:[\\w:.?=&-]+/,\n\t      property: {\n\t        pattern: /(?:\\b\\w+#)?(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|\\b\\w+)(?=\\s*[:@])/,\n\t        greedy: true\n\t      },\n\t      string: {\n\t        pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n\t        greedy: true\n\t      },\n\t      'mime-type':\n\t        /\\b(?:application|audio|image|multipart|text|video)\\/[\\w+-]+/,\n\t      date: {\n\t        pattern: /\\|[\\w:+-]+\\|/,\n\t        greedy: true\n\t      },\n\t      comment: [\n\t        {\n\t          pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t          lookbehind: true,\n\t          greedy: true\n\t        },\n\t        {\n\t          pattern: /(^|[^\\\\:])\\/\\/.*/,\n\t          lookbehind: true,\n\t          greedy: true\n\t        }\n\t      ],\n\t      regex: {\n\t        pattern: /\\/(?:[^\\\\\\/\\r\\n]|\\\\[^\\r\\n])+\\//,\n\t        greedy: true\n\t      },\n\t      keyword:\n\t        /\\b(?:and|as|at|case|do|else|fun|if|input|is|match|not|ns|null|or|output|type|unless|update|using|var)\\b/,\n\t      function: /\\b[A-Z_]\\w*(?=\\s*\\()/i,\n\t      number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n\t      punctuation: /[{}[\\];(),.:@]/,\n\t      operator: /<<|>>|->|[<>~=]=?|!=|--?-?|\\+\\+?|!|\\?/,\n\t      boolean: /\\b(?:false|true)\\b/\n\t    }\n\t  })(Prism)\n\t}\n\treturn dataweave_1;\n}\n\nexport { requireDataweave as __require };",
      "start": 1702937444889,
      "end": 1702937444889,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;CAAA,YAAY;AACZ;AACA,YAAc,GAAG,SAAS;CAC1B,SAAS,CAAC,WAAW,GAAG,WAAW;CACnC,SAAS,CAAC,OAAO,GAAG,EAAE;CACtB,SAAS,SAAS,CAAC,KAAK,EAAE;CAC1B,EAAE,CAAC,CAAC,UAAU,KAAK,EAAE;CACrB,IAAI,KAAK,CAAC,SAAS,CAAC,SAAS,GAAG;CAChC,MAAM,GAAG,EAAE,gDAAgD;CAC3D,MAAM,QAAQ,EAAE;CAChB,QAAQ,OAAO,EAAE,uDAAuD;CACxE,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,MAAM,MAAM,EAAE;CACd,QAAQ,OAAO,EAAE,oCAAoC;CACrD,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,MAAM,WAAW;CACjB,QAAQ,6DAA6D;CACrE,MAAM,IAAI,EAAE;CACZ,QAAQ,OAAO,EAAE,cAAc;CAC/B,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,MAAM,OAAO,EAAE;CACf,QAAQ;CACR,UAAU,OAAO,EAAE,iCAAiC;CACpD,UAAU,UAAU,EAAE,IAAI;CAC1B,UAAU,MAAM,EAAE,IAAI;CACtB,SAAS;CACT,QAAQ;CACR,UAAU,OAAO,EAAE,kBAAkB;CACrC,UAAU,UAAU,EAAE,IAAI;CAC1B,UAAU,MAAM,EAAE,IAAI;CACtB,SAAS;CACT,OAAO;CACP,MAAM,KAAK,EAAE;CACb,QAAQ,OAAO,EAAE,gCAAgC;CACjD,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,MAAM,OAAO;CACb,QAAQ,yGAAyG;CACjH,MAAM,QAAQ,EAAE,uBAAuB;CACvC,MAAM,MAAM,EAAE,oCAAoC;CAClD,MAAM,WAAW,EAAE,gBAAgB;CACnC,MAAM,QAAQ,EAAE,uCAAuC;CACvD,MAAM,OAAO,EAAE,oBAAoB;CACnC,KAAK;CACL,GAAG,EAAE,KAAK,CAAC;CACX"
      }
    },
    {
      "name": "inject",
      "start": 1702937444889,
      "end": 1702937444889,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444889,
      "end": 1702937444889,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444889,
      "end": 1702937444889,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444889,
      "end": 1702937444889,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444889,
      "end": 1702937444889,
      "order": "normal"
    }
  ]
}
