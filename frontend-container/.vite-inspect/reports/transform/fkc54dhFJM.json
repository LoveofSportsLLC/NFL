{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/lodash/_isIndex.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n",
      "start": 1702937445373,
      "end": 1702937445387,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445387,
      "end": 1702937445387,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445387,
      "end": 1702937445387,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445387,
      "end": 1702937445387,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445387,
      "end": 1702937445387,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445387,
      "end": 1702937445387,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445387,
      "end": 1702937445387,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445387,
      "end": 1702937445387,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445387,
      "end": 1702937445387,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445387,
      "end": 1702937445387,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445387,
      "end": 1702937445387,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "/** Used as references for various `Number` constants. */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nvar _isIndex = isIndex;\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(_isIndex);\nexport { _isIndex as __moduleExports };",
      "start": 1702937445387,
      "end": 1702937445387,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;AACA,IAAI,gBAAgB,GAAG,gBAAgB,CAAC;AACxC;AACA;AACA,IAAI,QAAQ,GAAG,kBAAkB,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE;AAChC,EAAE,IAAI,IAAI,GAAG,OAAO,KAAK,CAAC;AAC1B,EAAE,MAAM,GAAG,MAAM,IAAI,IAAI,GAAG,gBAAgB,GAAG,MAAM,CAAC;AACtD;AACA,EAAE,OAAO,CAAC,CAAC,MAAM;AACjB,KAAK,IAAI,IAAI,QAAQ;AACrB,OAAO,IAAI,IAAI,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AACjD,SAAS,KAAK,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC;AACzD,CAAC;AACD;IACA,QAAc,GAAG,OAAO"
      }
    },
    {
      "name": "inject",
      "start": 1702937445387,
      "end": 1702937445387,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445387,
      "end": 1702937445387,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445387,
      "end": 1702937445387,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445387,
      "end": 1702937445387,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445387,
      "end": 1702937445387,
      "order": "normal"
    }
  ]
}
