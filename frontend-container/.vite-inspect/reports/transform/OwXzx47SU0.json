{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/racket.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\nvar refractorScheme = require('./scheme.js')\nmodule.exports = racket\nracket.displayName = 'racket'\nracket.aliases = ['rkt']\nfunction racket(Prism) {\n  Prism.register(refractorScheme)\n  Prism.languages.racket = Prism.languages.extend('scheme', {\n    'lambda-parameter': {\n      // the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.\n      // this will just prevent false positives of the `function` pattern\n      pattern: /([(\\[]lambda\\s+[(\\[])[^()\\[\\]'\\s]+/,\n      lookbehind: true\n    }\n  })\n  Prism.languages.insertBefore('racket', 'string', {\n    lang: {\n      pattern: /^#lang.+/m,\n      greedy: true,\n      alias: 'keyword'\n    }\n  })\n  Prism.languages.rkt = Prism.languages.racket\n}\n",
      "start": 1702937445038,
      "end": 1702937445059,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445059,
      "end": 1702937445059,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445059,
      "end": 1702937445059,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445059,
      "end": 1702937445059,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445059,
      "end": 1702937445059,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445059,
      "end": 1702937445059,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445059,
      "end": 1702937445059,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445059,
      "end": 1702937445059,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445059,
      "end": 1702937445059,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445059,
      "end": 1702937445059,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445059,
      "end": 1702937445059,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/scheme.js?commonjs-wrapped\";\n\nvar racket_1;\nvar hasRequiredRacket;\n\nfunction requireRacket () {\n\tif (hasRequiredRacket) return racket_1;\n\thasRequiredRacket = 1;\n\t'use strict'\n\tvar refractorScheme = require$$0()\n\tracket_1 = racket\n\tracket.displayName = 'racket'\n\tracket.aliases = ['rkt']\n\tfunction racket(Prism) {\n\t  Prism.register(refractorScheme)\n\t  Prism.languages.racket = Prism.languages.extend('scheme', {\n\t    'lambda-parameter': {\n\t      // the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.\n\t      // this will just prevent false positives of the `function` pattern\n\t      pattern: /([(\\[]lambda\\s+[(\\[])[^()\\[\\]'\\s]+/,\n\t      lookbehind: true\n\t    }\n\t  })\n\t  Prism.languages.insertBefore('racket', 'string', {\n\t    lang: {\n\t      pattern: /^#lang.+/m,\n\t      greedy: true,\n\t      alias: 'keyword'\n\t    }\n\t  })\n\t  Prism.languages.rkt = Prism.languages.racket\n\t}\n\treturn racket_1;\n}\n\nexport { requireRacket as __require };",
      "start": 1702937445059,
      "end": 1702937445089,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;;CAAA,YAAY;CACZ,IAAI,eAAe,GAAG,YAAsB;AAC5C,SAAc,GAAG,MAAM;CACvB,MAAM,CAAC,WAAW,GAAG,QAAQ;CAC7B,MAAM,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC;CACxB,SAAS,MAAM,CAAC,KAAK,EAAE;CACvB,EAAE,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC;CACjC,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE;CAC5D,IAAI,kBAAkB,EAAE;CACxB;CACA;CACA,MAAM,OAAO,EAAE,oCAAoC;CACnD,MAAM,UAAU,EAAE,IAAI;CACtB,KAAK;CACL,GAAG,CAAC;CACJ,EAAE,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,QAAQ,EAAE,QAAQ,EAAE;CACnD,IAAI,IAAI,EAAE;CACV,MAAM,OAAO,EAAE,WAAW;CAC1B,MAAM,MAAM,EAAE,IAAI;CAClB,MAAM,KAAK,EAAE,SAAS;CACtB,KAAK;CACL,GAAG,CAAC;CACJ,EAAE,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM;CAC9C"
      }
    },
    {
      "name": "inject",
      "start": 1702937445089,
      "end": 1702937445089,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445089,
      "end": 1702937445089,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445089,
      "end": 1702937445089,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445089,
      "end": 1702937445089,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445089,
      "end": 1702937445089,
      "order": "normal"
    }
  ]
}
