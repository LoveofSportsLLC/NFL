{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/formik/node_modules/deepmerge/dist/es.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = deepmerge(target[key], source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nexport default deepmerge_1;\n",
      "start": 1702937442745,
      "end": 1702937442914,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937442914,
      "end": 1702937442914,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937442915,
      "end": 1702937442915,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937442915,
      "end": 1702937442915,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937442915,
      "end": 1702937442915,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937442915,
      "end": 1702937442915,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937442915,
      "end": 1702937442915,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937442915,
      "end": 1702937442915,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937442915,
      "end": 1702937442915,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937442915,
      "end": 1702937442915,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937442915,
      "end": 1702937442915,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937442915,
      "end": 1702937442915,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937442915,
      "end": 1702937442915,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937442915,
      "end": 1702937442915,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937442915,
      "end": 1702937442915,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937442915,
      "end": 1702937442915,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937442915,
      "end": 1702937442915,
      "order": "normal"
    }
  ]
}
