{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/zig.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = zig\nzig.displayName = 'zig'\nzig.aliases = []\nfunction zig(Prism) {\n  ;(function (Prism) {\n    function literal(str) {\n      return function () {\n        return str\n      }\n    }\n    var keyword =\n      /\\b(?:align|allowzero|and|anyframe|anytype|asm|async|await|break|cancel|catch|comptime|const|continue|defer|else|enum|errdefer|error|export|extern|fn|for|if|inline|linksection|nakedcc|noalias|nosuspend|null|or|orelse|packed|promise|pub|resume|return|stdcallcc|struct|suspend|switch|test|threadlocal|try|undefined|union|unreachable|usingnamespace|var|volatile|while)\\b/\n    var IDENTIFIER = '\\\\b(?!' + keyword.source + ')(?!\\\\d)\\\\w+\\\\b'\n    var ALIGN = /align\\s*\\((?:[^()]|\\([^()]*\\))*\\)/.source\n    var PREFIX_TYPE_OP =\n      /(?:\\?|\\bpromise->|(?:\\[[^[\\]]*\\]|\\*(?!\\*)|\\*\\*)(?:\\s*<ALIGN>|\\s*const\\b|\\s*volatile\\b|\\s*allowzero\\b)*)/.source.replace(\n        /<ALIGN>/g,\n        literal(ALIGN)\n      )\n    var SUFFIX_EXPR =\n      /(?:\\bpromise\\b|(?:\\berror\\.)?<ID>(?:\\.<ID>)*(?!\\s+<ID>))/.source.replace(\n        /<ID>/g,\n        literal(IDENTIFIER)\n      )\n    var TYPE =\n      '(?!\\\\s)(?:!?\\\\s*(?:' + PREFIX_TYPE_OP + '\\\\s*)*' + SUFFIX_EXPR + ')+'\n    /*\n     * A simplified grammar for Zig compile time type literals:\n     *\n     * TypeExpr = ( \"!\"? PREFIX_TYPE_OP* SUFFIX_EXPR )+\n     *\n     * SUFFIX_EXPR = ( \\b \"promise\" \\b | ( \\b \"error\" \".\" )? IDENTIFIER ( \".\" IDENTIFIER )* (?! \\s+ IDENTIFIER ) )\n     *\n     * PREFIX_TYPE_OP = \"?\"\n     *                | \\b \"promise\" \"->\"\n     *                | ( \"[\" [^\\[\\]]* \"]\" | \"*\" | \"**\" ) ( ALIGN | \"const\" \\b | \"volatile\" \\b | \"allowzero\" \\b )*\n     *\n     * ALIGN = \"align\" \"(\" ( [^()] | \"(\" [^()]* \")\" )* \")\"\n     *\n     * IDENTIFIER = \\b (?! KEYWORD ) [a-zA-Z_] \\w* \\b\n     *\n     */\n    Prism.languages.zig = {\n      comment: [\n        {\n          pattern: /\\/\\/[/!].*/,\n          alias: 'doc-comment'\n        },\n        /\\/{2}.*/\n      ],\n      string: [\n        {\n          // \"string\" and c\"string\"\n          pattern: /(^|[^\\\\@])c?\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          // multiline strings and c-strings\n          pattern: /([\\r\\n])([ \\t]+c?\\\\{2}).*(?:(?:\\r\\n?|\\n)\\2.*)*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      char: {\n        // characters 'a', '\\n', '\\xFF', '\\u{10FFFF}'\n        pattern:\n          /(^|[^\\\\])'(?:[^'\\\\\\r\\n]|[\\uD800-\\uDFFF]{2}|\\\\(?:.|x[a-fA-F\\d]{2}|u\\{[a-fA-F\\d]{1,6}\\}))'/,\n        lookbehind: true,\n        greedy: true\n      },\n      builtin: /\\B@(?!\\d)\\w+(?=\\s*\\()/,\n      label: {\n        pattern:\n          /(\\b(?:break|continue)\\s*:\\s*)\\w+\\b|\\b(?!\\d)\\w+\\b(?=\\s*:\\s*(?:\\{|while\\b))/,\n        lookbehind: true\n      },\n      'class-name': [\n        // const Foo = struct {};\n        /\\b(?!\\d)\\w+(?=\\s*=\\s*(?:(?:extern|packed)\\s+)?(?:enum|struct|union)\\s*[({])/,\n        {\n          // const x: i32 = 9;\n          // var x: Bar;\n          // fn foo(x: bool, y: f32) void {}\n          pattern: RegExp(\n            /(:\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?[=;,)])|<TYPE>(?=\\s*(?:<ALIGN>\\s*)?\\{)/.source\n              .replace(/<TYPE>/g, literal(TYPE))\n              .replace(/<ALIGN>/g, literal(ALIGN))\n          ),\n          lookbehind: true,\n          inside: null // see below\n        },\n        {\n          // extern fn foo(x: f64) f64; (optional alignment)\n          pattern: RegExp(\n            /(\\)\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?;)/.source\n              .replace(/<TYPE>/g, literal(TYPE))\n              .replace(/<ALIGN>/g, literal(ALIGN))\n          ),\n          lookbehind: true,\n          inside: null // see below\n        }\n      ],\n      'builtin-type': {\n        pattern:\n          /\\b(?:anyerror|bool|c_u?(?:int|long|longlong|short)|c_longdouble|c_void|comptime_(?:float|int)|f(?:16|32|64|128)|[iu](?:8|16|32|64|128|size)|noreturn|type|void)\\b/,\n        alias: 'keyword'\n      },\n      keyword: keyword,\n      function: /\\b(?!\\d)\\w+(?=\\s*\\()/,\n      number:\n        /\\b(?:0b[01]+|0o[0-7]+|0x[a-fA-F\\d]+(?:\\.[a-fA-F\\d]*)?(?:[pP][+-]?[a-fA-F\\d]+)?|\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      operator:\n        /\\.[*?]|\\.{2,3}|[-=]>|\\*\\*|\\+\\+|\\|\\||(?:<<|>>|[-+*]%|[-+*/%^&|<>!=])=?|[?~]/,\n      punctuation: /[.:,;(){}[\\]]/\n    }\n    Prism.languages.zig['class-name'].forEach(function (obj) {\n      if (obj.inside === null) {\n        obj.inside = Prism.languages.zig\n      }\n    })\n  })(Prism)\n}\n",
      "start": 1702937445126,
      "end": 1702937445151,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445151,
      "end": 1702937445151,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445151,
      "end": 1702937445151,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445151,
      "end": 1702937445151,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445151,
      "end": 1702937445151,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445151,
      "end": 1702937445151,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445151,
      "end": 1702937445151,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445151,
      "end": 1702937445151,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445151,
      "end": 1702937445151,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445151,
      "end": 1702937445151,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445151,
      "end": 1702937445151,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar zig_1;\nvar hasRequiredZig;\n\nfunction requireZig () {\n\tif (hasRequiredZig) return zig_1;\n\thasRequiredZig = 1;\n\t'use strict'\n\n\tzig_1 = zig\n\tzig.displayName = 'zig'\n\tzig.aliases = []\n\tfunction zig(Prism) {\n\t  ;(function (Prism) {\n\t    function literal(str) {\n\t      return function () {\n\t        return str\n\t      }\n\t    }\n\t    var keyword =\n\t      /\\b(?:align|allowzero|and|anyframe|anytype|asm|async|await|break|cancel|catch|comptime|const|continue|defer|else|enum|errdefer|error|export|extern|fn|for|if|inline|linksection|nakedcc|noalias|nosuspend|null|or|orelse|packed|promise|pub|resume|return|stdcallcc|struct|suspend|switch|test|threadlocal|try|undefined|union|unreachable|usingnamespace|var|volatile|while)\\b/\n\t    var IDENTIFIER = '\\\\b(?!' + keyword.source + ')(?!\\\\d)\\\\w+\\\\b'\n\t    var ALIGN = /align\\s*\\((?:[^()]|\\([^()]*\\))*\\)/.source\n\t    var PREFIX_TYPE_OP =\n\t      /(?:\\?|\\bpromise->|(?:\\[[^[\\]]*\\]|\\*(?!\\*)|\\*\\*)(?:\\s*<ALIGN>|\\s*const\\b|\\s*volatile\\b|\\s*allowzero\\b)*)/.source.replace(\n\t        /<ALIGN>/g,\n\t        literal(ALIGN)\n\t      )\n\t    var SUFFIX_EXPR =\n\t      /(?:\\bpromise\\b|(?:\\berror\\.)?<ID>(?:\\.<ID>)*(?!\\s+<ID>))/.source.replace(\n\t        /<ID>/g,\n\t        literal(IDENTIFIER)\n\t      )\n\t    var TYPE =\n\t      '(?!\\\\s)(?:!?\\\\s*(?:' + PREFIX_TYPE_OP + '\\\\s*)*' + SUFFIX_EXPR + ')+'\n\t    /*\n\t     * A simplified grammar for Zig compile time type literals:\n\t     *\n\t     * TypeExpr = ( \"!\"? PREFIX_TYPE_OP* SUFFIX_EXPR )+\n\t     *\n\t     * SUFFIX_EXPR = ( \\b \"promise\" \\b | ( \\b \"error\" \".\" )? IDENTIFIER ( \".\" IDENTIFIER )* (?! \\s+ IDENTIFIER ) )\n\t     *\n\t     * PREFIX_TYPE_OP = \"?\"\n\t     *                | \\b \"promise\" \"->\"\n\t     *                | ( \"[\" [^\\[\\]]* \"]\" | \"*\" | \"**\" ) ( ALIGN | \"const\" \\b | \"volatile\" \\b | \"allowzero\" \\b )*\n\t     *\n\t     * ALIGN = \"align\" \"(\" ( [^()] | \"(\" [^()]* \")\" )* \")\"\n\t     *\n\t     * IDENTIFIER = \\b (?! KEYWORD ) [a-zA-Z_] \\w* \\b\n\t     *\n\t     */\n\t    Prism.languages.zig = {\n\t      comment: [\n\t        {\n\t          pattern: /\\/\\/[/!].*/,\n\t          alias: 'doc-comment'\n\t        },\n\t        /\\/{2}.*/\n\t      ],\n\t      string: [\n\t        {\n\t          // \"string\" and c\"string\"\n\t          pattern: /(^|[^\\\\@])c?\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n\t          lookbehind: true,\n\t          greedy: true\n\t        },\n\t        {\n\t          // multiline strings and c-strings\n\t          pattern: /([\\r\\n])([ \\t]+c?\\\\{2}).*(?:(?:\\r\\n?|\\n)\\2.*)*/,\n\t          lookbehind: true,\n\t          greedy: true\n\t        }\n\t      ],\n\t      char: {\n\t        // characters 'a', '\\n', '\\xFF', '\\u{10FFFF}'\n\t        pattern:\n\t          /(^|[^\\\\])'(?:[^'\\\\\\r\\n]|[\\uD800-\\uDFFF]{2}|\\\\(?:.|x[a-fA-F\\d]{2}|u\\{[a-fA-F\\d]{1,6}\\}))'/,\n\t        lookbehind: true,\n\t        greedy: true\n\t      },\n\t      builtin: /\\B@(?!\\d)\\w+(?=\\s*\\()/,\n\t      label: {\n\t        pattern:\n\t          /(\\b(?:break|continue)\\s*:\\s*)\\w+\\b|\\b(?!\\d)\\w+\\b(?=\\s*:\\s*(?:\\{|while\\b))/,\n\t        lookbehind: true\n\t      },\n\t      'class-name': [\n\t        // const Foo = struct {};\n\t        /\\b(?!\\d)\\w+(?=\\s*=\\s*(?:(?:extern|packed)\\s+)?(?:enum|struct|union)\\s*[({])/,\n\t        {\n\t          // const x: i32 = 9;\n\t          // var x: Bar;\n\t          // fn foo(x: bool, y: f32) void {}\n\t          pattern: RegExp(\n\t            /(:\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?[=;,)])|<TYPE>(?=\\s*(?:<ALIGN>\\s*)?\\{)/.source\n\t              .replace(/<TYPE>/g, literal(TYPE))\n\t              .replace(/<ALIGN>/g, literal(ALIGN))\n\t          ),\n\t          lookbehind: true,\n\t          inside: null // see below\n\t        },\n\t        {\n\t          // extern fn foo(x: f64) f64; (optional alignment)\n\t          pattern: RegExp(\n\t            /(\\)\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?;)/.source\n\t              .replace(/<TYPE>/g, literal(TYPE))\n\t              .replace(/<ALIGN>/g, literal(ALIGN))\n\t          ),\n\t          lookbehind: true,\n\t          inside: null // see below\n\t        }\n\t      ],\n\t      'builtin-type': {\n\t        pattern:\n\t          /\\b(?:anyerror|bool|c_u?(?:int|long|longlong|short)|c_longdouble|c_void|comptime_(?:float|int)|f(?:16|32|64|128)|[iu](?:8|16|32|64|128|size)|noreturn|type|void)\\b/,\n\t        alias: 'keyword'\n\t      },\n\t      keyword: keyword,\n\t      function: /\\b(?!\\d)\\w+(?=\\s*\\()/,\n\t      number:\n\t        /\\b(?:0b[01]+|0o[0-7]+|0x[a-fA-F\\d]+(?:\\.[a-fA-F\\d]*)?(?:[pP][+-]?[a-fA-F\\d]+)?|\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\b/,\n\t      boolean: /\\b(?:false|true)\\b/,\n\t      operator:\n\t        /\\.[*?]|\\.{2,3}|[-=]>|\\*\\*|\\+\\+|\\|\\||(?:<<|>>|[-+*]%|[-+*/%^&|<>!=])=?|[?~]/,\n\t      punctuation: /[.:,;(){}[\\]]/\n\t    }\n\t    Prism.languages.zig['class-name'].forEach(function (obj) {\n\t      if (obj.inside === null) {\n\t        obj.inside = Prism.languages.zig\n\t      }\n\t    })\n\t  })(Prism)\n\t}\n\treturn zig_1;\n}\n\nexport { requireZig as __require };",
      "start": 1702937445151,
      "end": 1702937445152,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937445152,
      "end": 1702937445152,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445152,
      "end": 1702937445152,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445152,
      "end": 1702937445152,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445152,
      "end": 1702937445152,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445152,
      "end": 1702937445152,
      "order": "normal"
    }
  ]
}
