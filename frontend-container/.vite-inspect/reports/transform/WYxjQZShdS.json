{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/perl.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = perl\nperl.displayName = 'perl'\nperl.aliases = []\nfunction perl(Prism) {\n  ;(function (Prism) {\n    var brackets =\n      /(?:\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}|\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)/\n        .source\n    Prism.languages.perl = {\n      comment: [\n        {\n          // POD\n          pattern: /(^\\s*)=\\w[\\s\\S]*?=cut.*/m,\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: /(^|[^\\\\$])#.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      // TODO Could be nice to handle Heredoc too.\n      string: [\n        {\n          pattern: RegExp(\n            /\\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\\s*/.source +\n              '(?:' +\n              [\n                // q/.../\n                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, // q a...a\n                // eslint-disable-next-line regexp/strict\n                /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source, // q(...)\n                // q{...}\n                // q[...]\n                // q<...>\n                brackets\n              ].join('|') +\n              ')'\n          ),\n          greedy: true\n        }, // \"...\", `...`\n        {\n          pattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n          greedy: true\n        }, // '...'\n        // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\n        {\n          pattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n          greedy: true\n        }\n      ],\n      regex: [\n        {\n          pattern: RegExp(\n            /\\b(?:m|qr)(?![a-zA-Z0-9])\\s*/.source +\n              '(?:' +\n              [\n                // m/.../\n                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, // m a...a\n                // eslint-disable-next-line regexp/strict\n                /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source, // m(...)\n                // m{...}\n                // m[...]\n                // m<...>\n                brackets\n              ].join('|') +\n              ')' +\n              /[msixpodualngc]*/.source\n          ),\n          greedy: true\n        }, // The lookbehinds prevent -s from breaking\n        {\n          pattern: RegExp(\n            /(^|[^-])\\b(?:s|tr|y)(?![a-zA-Z0-9])\\s*/.source +\n              '(?:' +\n              [\n                // s/.../.../\n                // eslint-disable-next-line regexp/strict\n                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/\n                  .source, // s a...a...a\n                // eslint-disable-next-line regexp/strict\n                /([a-zA-Z0-9])(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3/\n                  .source, // s(...)(...)\n                // s{...}{...}\n                // s[...][...]\n                // s<...><...>\n                // s(...)[...]\n                brackets + /\\s*/.source + brackets\n              ].join('|') +\n              ')' +\n              /[msixpodualngcer]*/.source\n          ),\n          lookbehind: true,\n          greedy: true\n        }, // /.../\n        // The look-ahead tries to prevent two divisions on\n        // the same line from being highlighted as regex.\n        // This does not support multi-line regex.\n        {\n          pattern:\n            /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\\b))/,\n          greedy: true\n        }\n      ],\n      // FIXME Not sure about the handling of ::, ', and #\n      variable: [\n        // ${^POSTMATCH}\n        /[&*$@%]\\{\\^[A-Z]+\\}/, // $^V\n        /[&*$@%]\\^[A-Z_]/, // ${...}\n        /[&*$@%]#?(?=\\{)/, // $foo\n        /[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+(?![\\w$]))+(?:::)*/, // $1\n        /[&*$@%]\\d+/, // $_, @_, %!\n        // The negative lookahead prevents from breaking the %= operator\n        /(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/\n      ],\n      filehandle: {\n        // <>, <FOO>, _\n        pattern: /<(?![<=])\\S*?>|\\b_\\b/,\n        alias: 'symbol'\n      },\n      'v-string': {\n        // v1.2, 1.2.3\n        pattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n        alias: 'string'\n      },\n      function: {\n        pattern: /(\\bsub[ \\t]+)\\w+/,\n        lookbehind: true\n      },\n      keyword:\n        /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n      number:\n        /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n      operator:\n        /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\\b/,\n      punctuation: /[{}[\\];(),:]/\n    }\n  })(Prism)\n}\n",
      "start": 1702937445006,
      "end": 1702937445030,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445030,
      "end": 1702937445030,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445030,
      "end": 1702937445030,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445030,
      "end": 1702937445030,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445030,
      "end": 1702937445030,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445030,
      "end": 1702937445030,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445030,
      "end": 1702937445030,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445030,
      "end": 1702937445030,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445030,
      "end": 1702937445030,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445030,
      "end": 1702937445030,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445030,
      "end": 1702937445030,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar perl_1;\nvar hasRequiredPerl;\n\nfunction requirePerl () {\n\tif (hasRequiredPerl) return perl_1;\n\thasRequiredPerl = 1;\n\t'use strict'\n\n\tperl_1 = perl\n\tperl.displayName = 'perl'\n\tperl.aliases = []\n\tfunction perl(Prism) {\n\t  ;(function (Prism) {\n\t    var brackets =\n\t      /(?:\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}|\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)/\n\t        .source\n\t    Prism.languages.perl = {\n\t      comment: [\n\t        {\n\t          // POD\n\t          pattern: /(^\\s*)=\\w[\\s\\S]*?=cut.*/m,\n\t          lookbehind: true,\n\t          greedy: true\n\t        },\n\t        {\n\t          pattern: /(^|[^\\\\$])#.*/,\n\t          lookbehind: true,\n\t          greedy: true\n\t        }\n\t      ],\n\t      // TODO Could be nice to handle Heredoc too.\n\t      string: [\n\t        {\n\t          pattern: RegExp(\n\t            /\\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\\s*/.source +\n\t              '(?:' +\n\t              [\n\t                // q/.../\n\t                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, // q a...a\n\t                // eslint-disable-next-line regexp/strict\n\t                /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source, // q(...)\n\t                // q{...}\n\t                // q[...]\n\t                // q<...>\n\t                brackets\n\t              ].join('|') +\n\t              ')'\n\t          ),\n\t          greedy: true\n\t        }, // \"...\", `...`\n\t        {\n\t          pattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n\t          greedy: true\n\t        }, // '...'\n\t        // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\n\t        {\n\t          pattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n\t          greedy: true\n\t        }\n\t      ],\n\t      regex: [\n\t        {\n\t          pattern: RegExp(\n\t            /\\b(?:m|qr)(?![a-zA-Z0-9])\\s*/.source +\n\t              '(?:' +\n\t              [\n\t                // m/.../\n\t                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, // m a...a\n\t                // eslint-disable-next-line regexp/strict\n\t                /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source, // m(...)\n\t                // m{...}\n\t                // m[...]\n\t                // m<...>\n\t                brackets\n\t              ].join('|') +\n\t              ')' +\n\t              /[msixpodualngc]*/.source\n\t          ),\n\t          greedy: true\n\t        }, // The lookbehinds prevent -s from breaking\n\t        {\n\t          pattern: RegExp(\n\t            /(^|[^-])\\b(?:s|tr|y)(?![a-zA-Z0-9])\\s*/.source +\n\t              '(?:' +\n\t              [\n\t                // s/.../.../\n\t                // eslint-disable-next-line regexp/strict\n\t                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/\n\t                  .source, // s a...a...a\n\t                // eslint-disable-next-line regexp/strict\n\t                /([a-zA-Z0-9])(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3/\n\t                  .source, // s(...)(...)\n\t                // s{...}{...}\n\t                // s[...][...]\n\t                // s<...><...>\n\t                // s(...)[...]\n\t                brackets + /\\s*/.source + brackets\n\t              ].join('|') +\n\t              ')' +\n\t              /[msixpodualngcer]*/.source\n\t          ),\n\t          lookbehind: true,\n\t          greedy: true\n\t        }, // /.../\n\t        // The look-ahead tries to prevent two divisions on\n\t        // the same line from being highlighted as regex.\n\t        // This does not support multi-line regex.\n\t        {\n\t          pattern:\n\t            /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\\b))/,\n\t          greedy: true\n\t        }\n\t      ],\n\t      // FIXME Not sure about the handling of ::, ', and #\n\t      variable: [\n\t        // ${^POSTMATCH}\n\t        /[&*$@%]\\{\\^[A-Z]+\\}/, // $^V\n\t        /[&*$@%]\\^[A-Z_]/, // ${...}\n\t        /[&*$@%]#?(?=\\{)/, // $foo\n\t        /[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+(?![\\w$]))+(?:::)*/, // $1\n\t        /[&*$@%]\\d+/, // $_, @_, %!\n\t        // The negative lookahead prevents from breaking the %= operator\n\t        /(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/\n\t      ],\n\t      filehandle: {\n\t        // <>, <FOO>, _\n\t        pattern: /<(?![<=])\\S*?>|\\b_\\b/,\n\t        alias: 'symbol'\n\t      },\n\t      'v-string': {\n\t        // v1.2, 1.2.3\n\t        pattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n\t        alias: 'string'\n\t      },\n\t      function: {\n\t        pattern: /(\\bsub[ \\t]+)\\w+/,\n\t        lookbehind: true\n\t      },\n\t      keyword:\n\t        /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n\t      number:\n\t        /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n\t      operator:\n\t        /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\\b/,\n\t      punctuation: /[{}[\\];(),:]/\n\t    }\n\t  })(Prism)\n\t}\n\treturn perl_1;\n}\n\nexport { requirePerl as __require };",
      "start": 1702937445030,
      "end": 1702937445031,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937445031,
      "end": 1702937445031,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445031,
      "end": 1702937445031,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445031,
      "end": 1702937445031,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445031,
      "end": 1702937445031,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445031,
      "end": 1702937445031,
      "order": "normal"
    }
  ]
}
