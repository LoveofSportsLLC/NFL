{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/.vite/deps/chunk-WKT44JLE.js?v=733ce8d4",
  "transforms": [
    {
      "name": "vite:optimized-deps",
      "result": "\"use strict\";\n(() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n    // If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n    mod\n  ));\n\n  // node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\n  var require_base64_js = __commonJS({\n    \"node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\"(exports) {\n      \"use strict\";\n      init_dist();\n      exports.byteLength = byteLength;\n      exports.toByteArray = toByteArray;\n      exports.fromByteArray = fromByteArray;\n      var lookup = [];\n      var revLookup = [];\n      var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n      var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n      for (i = 0, len = code.length; i < len; ++i) {\n        lookup[i] = code[i];\n        revLookup[code.charCodeAt(i)] = i;\n      }\n      var i;\n      var len;\n      revLookup[\"-\".charCodeAt(0)] = 62;\n      revLookup[\"_\".charCodeAt(0)] = 63;\n      function getLens(b64) {\n        var len2 = b64.length;\n        if (len2 % 4 > 0) {\n          throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        }\n        var validLen = b64.indexOf(\"=\");\n        if (validLen === -1)\n          validLen = len2;\n        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n        return [validLen, placeHoldersLen];\n      }\n      function byteLength(b64) {\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n      function _byteLength(b64, validLen, placeHoldersLen) {\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n      function toByteArray(b64) {\n        var tmp;\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n        var curByte = 0;\n        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n        var i2;\n        for (i2 = 0; i2 < len2; i2 += 4) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n          arr[curByte++] = tmp >> 16 & 255;\n          arr[curByte++] = tmp >> 8 & 255;\n          arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 2) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n          arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 1) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n          arr[curByte++] = tmp >> 8 & 255;\n          arr[curByte++] = tmp & 255;\n        }\n        return arr;\n      }\n      function tripletToBase64(num) {\n        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n      }\n      function encodeChunk(uint8, start, end) {\n        var tmp;\n        var output = [];\n        for (var i2 = start; i2 < end; i2 += 3) {\n          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n          output.push(tripletToBase64(tmp));\n        }\n        return output.join(\"\");\n      }\n      function fromByteArray(uint8) {\n        var tmp;\n        var len2 = uint8.length;\n        var extraBytes = len2 % 3;\n        var parts = [];\n        var maxChunkLength = 16383;\n        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\n          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n        }\n        if (extraBytes === 1) {\n          tmp = uint8[len2 - 1];\n          parts.push(\n            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\"\n          );\n        } else if (extraBytes === 2) {\n          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n          parts.push(\n            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\"\n          );\n        }\n        return parts.join(\"\");\n      }\n    }\n  });\n\n  // node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\n  var require_ieee754 = __commonJS({\n    \"node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\"(exports) {\n      init_dist();\n      exports.read = function(buffer, offset, isLE, mLen, nBytes) {\n        var e, m;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var nBits = -7;\n        var i = isLE ? nBytes - 1 : 0;\n        var d = isLE ? -1 : 1;\n        var s2 = buffer[offset + i];\n        i += d;\n        e = s2 & (1 << -nBits) - 1;\n        s2 >>= -nBits;\n        nBits += eLen;\n        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {\n        }\n        m = e & (1 << -nBits) - 1;\n        e >>= -nBits;\n        nBits += mLen;\n        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {\n        }\n        if (e === 0) {\n          e = 1 - eBias;\n        } else if (e === eMax) {\n          return m ? NaN : (s2 ? -1 : 1) * Infinity;\n        } else {\n          m = m + Math.pow(2, mLen);\n          e = e - eBias;\n        }\n        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);\n      };\n      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n        var e, m, c;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n        var i = isLE ? 0 : nBytes - 1;\n        var d = isLE ? 1 : -1;\n        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n        value = Math.abs(value);\n        if (isNaN(value) || value === Infinity) {\n          m = isNaN(value) ? 1 : 0;\n          e = eMax;\n        } else {\n          e = Math.floor(Math.log(value) / Math.LN2);\n          if (value * (c = Math.pow(2, -e)) < 1) {\n            e--;\n            c *= 2;\n          }\n          if (e + eBias >= 1) {\n            value += rt / c;\n          } else {\n            value += rt * Math.pow(2, 1 - eBias);\n          }\n          if (value * c >= 2) {\n            e++;\n            c /= 2;\n          }\n          if (e + eBias >= eMax) {\n            m = 0;\n            e = eMax;\n          } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen);\n            e = e + eBias;\n          } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n            e = 0;\n          }\n        }\n        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {\n        }\n        e = e << mLen | m;\n        eLen += mLen;\n        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {\n        }\n        buffer[offset + i - d] |= s2 * 128;\n      };\n    }\n  });\n\n  // node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js\n  var require_buffer = __commonJS({\n    \"node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js\"(exports) {\n      \"use strict\";\n      init_dist();\n      var base64 = require_base64_js();\n      var ieee754 = require_ieee754();\n      var customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") : null;\n      exports.Buffer = Buffer2;\n      exports.SlowBuffer = SlowBuffer;\n      exports.INSPECT_MAX_BYTES = 50;\n      var K_MAX_LENGTH = 2147483647;\n      exports.kMaxLength = K_MAX_LENGTH;\n      var { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;\n      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();\n      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n        console.error(\n          \"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"\n        );\n      }\n      function typedArraySupport() {\n        try {\n          const arr = new GlobalUint8Array(1);\n          const proto = { foo: function() {\n            return 42;\n          } };\n          Object.setPrototypeOf(proto, GlobalUint8Array.prototype);\n          Object.setPrototypeOf(arr, proto);\n          return arr.foo() === 42;\n        } catch (e) {\n          return false;\n        }\n      }\n      Object.defineProperty(Buffer2.prototype, \"parent\", {\n        enumerable: true,\n        get: function() {\n          if (!Buffer2.isBuffer(this))\n            return void 0;\n          return this.buffer;\n        }\n      });\n      Object.defineProperty(Buffer2.prototype, \"offset\", {\n        enumerable: true,\n        get: function() {\n          if (!Buffer2.isBuffer(this))\n            return void 0;\n          return this.byteOffset;\n        }\n      });\n      function createBuffer(length) {\n        if (length > K_MAX_LENGTH) {\n          throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n        }\n        const buf = new GlobalUint8Array(length);\n        Object.setPrototypeOf(buf, Buffer2.prototype);\n        return buf;\n      }\n      function Buffer2(arg, encodingOrOffset, length) {\n        if (typeof arg === \"number\") {\n          if (typeof encodingOrOffset === \"string\") {\n            throw new TypeError(\n              'The \"string\" argument must be of type string. Received type number'\n            );\n          }\n          return allocUnsafe(arg);\n        }\n        return from(arg, encodingOrOffset, length);\n      }\n      Buffer2.poolSize = 8192;\n      function from(value, encodingOrOffset, length) {\n        if (typeof value === \"string\") {\n          return fromString(value, encodingOrOffset);\n        }\n        if (GlobalArrayBuffer.isView(value)) {\n          return fromArrayView(value);\n        }\n        if (value == null) {\n          throw new TypeError(\n            \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n          );\n        }\n        if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n        if (typeof GlobalSharedArrayBuffer !== \"undefined\" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n        if (typeof value === \"number\") {\n          throw new TypeError(\n            'The \"value\" argument must not be of type number. Received type number'\n          );\n        }\n        const valueOf = value.valueOf && value.valueOf();\n        if (valueOf != null && valueOf !== value) {\n          return Buffer2.from(valueOf, encodingOrOffset, length);\n        }\n        const b = fromObject(value);\n        if (b)\n          return b;\n        if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n          return Buffer2.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n        }\n        throw new TypeError(\n          \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n        );\n      }\n      Buffer2.from = function(value, encodingOrOffset, length) {\n        return from(value, encodingOrOffset, length);\n      };\n      Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);\n      Object.setPrototypeOf(Buffer2, GlobalUint8Array);\n      function assertSize(size) {\n        if (typeof size !== \"number\") {\n          throw new TypeError('\"size\" argument must be of type number');\n        } else if (size < 0) {\n          throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n        }\n      }\n      function alloc(size, fill, encoding) {\n        assertSize(size);\n        if (size <= 0) {\n          return createBuffer(size);\n        }\n        if (fill !== void 0) {\n          return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n        }\n        return createBuffer(size);\n      }\n      Buffer2.alloc = function(size, fill, encoding) {\n        return alloc(size, fill, encoding);\n      };\n      function allocUnsafe(size) {\n        assertSize(size);\n        return createBuffer(size < 0 ? 0 : checked(size) | 0);\n      }\n      Buffer2.allocUnsafe = function(size) {\n        return allocUnsafe(size);\n      };\n      Buffer2.allocUnsafeSlow = function(size) {\n        return allocUnsafe(size);\n      };\n      function fromString(string, encoding) {\n        if (typeof encoding !== \"string\" || encoding === \"\") {\n          encoding = \"utf8\";\n        }\n        if (!Buffer2.isEncoding(encoding)) {\n          throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        const length = byteLength(string, encoding) | 0;\n        let buf = createBuffer(length);\n        const actual = buf.write(string, encoding);\n        if (actual !== length) {\n          buf = buf.slice(0, actual);\n        }\n        return buf;\n      }\n      function fromArrayLike(array) {\n        const length = array.length < 0 ? 0 : checked(array.length) | 0;\n        const buf = createBuffer(length);\n        for (let i = 0; i < length; i += 1) {\n          buf[i] = array[i] & 255;\n        }\n        return buf;\n      }\n      function fromArrayView(arrayView) {\n        if (isInstance(arrayView, GlobalUint8Array)) {\n          const copy = new GlobalUint8Array(arrayView);\n          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n        }\n        return fromArrayLike(arrayView);\n      }\n      function fromArrayBuffer(array, byteOffset, length) {\n        if (byteOffset < 0 || array.byteLength < byteOffset) {\n          throw new RangeError('\"offset\" is outside of buffer bounds');\n        }\n        if (array.byteLength < byteOffset + (length || 0)) {\n          throw new RangeError('\"length\" is outside of buffer bounds');\n        }\n        let buf;\n        if (byteOffset === void 0 && length === void 0) {\n          buf = new GlobalUint8Array(array);\n        } else if (length === void 0) {\n          buf = new GlobalUint8Array(array, byteOffset);\n        } else {\n          buf = new GlobalUint8Array(array, byteOffset, length);\n        }\n        Object.setPrototypeOf(buf, Buffer2.prototype);\n        return buf;\n      }\n      function fromObject(obj) {\n        if (Buffer2.isBuffer(obj)) {\n          const len = checked(obj.length) | 0;\n          const buf = createBuffer(len);\n          if (buf.length === 0) {\n            return buf;\n          }\n          obj.copy(buf, 0, 0, len);\n          return buf;\n        }\n        if (obj.length !== void 0) {\n          if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n            return createBuffer(0);\n          }\n          return fromArrayLike(obj);\n        }\n        if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n          return fromArrayLike(obj.data);\n        }\n      }\n      function checked(length) {\n        if (length >= K_MAX_LENGTH) {\n          throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n        }\n        return length | 0;\n      }\n      function SlowBuffer(length) {\n        if (+length != length) {\n          length = 0;\n        }\n        return Buffer2.alloc(+length);\n      }\n      Buffer2.isBuffer = function isBuffer(b) {\n        return b != null && b._isBuffer === true && b !== Buffer2.prototype;\n      };\n      Buffer2.compare = function compare(a, b) {\n        if (isInstance(a, GlobalUint8Array))\n          a = Buffer2.from(a, a.offset, a.byteLength);\n        if (isInstance(b, GlobalUint8Array))\n          b = Buffer2.from(b, b.offset, b.byteLength);\n        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {\n          throw new TypeError(\n            'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n          );\n        }\n        if (a === b)\n          return 0;\n        let x = a.length;\n        let y = b.length;\n        for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n          if (a[i] !== b[i]) {\n            x = a[i];\n            y = b[i];\n            break;\n          }\n        }\n        if (x < y)\n          return -1;\n        if (y < x)\n          return 1;\n        return 0;\n      };\n      Buffer2.isEncoding = function isEncoding(encoding) {\n        switch (String(encoding).toLowerCase()) {\n          case \"hex\":\n          case \"utf8\":\n          case \"utf-8\":\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n          case \"base64\":\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return true;\n          default:\n            return false;\n        }\n      };\n      Buffer2.concat = function concat(list, length) {\n        if (!Array.isArray(list)) {\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        }\n        if (list.length === 0) {\n          return Buffer2.alloc(0);\n        }\n        let i;\n        if (length === void 0) {\n          length = 0;\n          for (i = 0; i < list.length; ++i) {\n            length += list[i].length;\n          }\n        }\n        const buffer = Buffer2.allocUnsafe(length);\n        let pos = 0;\n        for (i = 0; i < list.length; ++i) {\n          let buf = list[i];\n          if (isInstance(buf, GlobalUint8Array)) {\n            if (pos + buf.length > buffer.length) {\n              if (!Buffer2.isBuffer(buf))\n                buf = Buffer2.from(buf);\n              buf.copy(buffer, pos);\n            } else {\n              GlobalUint8Array.prototype.set.call(\n                buffer,\n                buf,\n                pos\n              );\n            }\n          } else if (!Buffer2.isBuffer(buf)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers');\n          } else {\n            buf.copy(buffer, pos);\n          }\n          pos += buf.length;\n        }\n        return buffer;\n      };\n      function byteLength(string, encoding) {\n        if (Buffer2.isBuffer(string)) {\n          return string.length;\n        }\n        if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {\n          return string.byteLength;\n        }\n        if (typeof string !== \"string\") {\n          throw new TypeError(\n            'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string\n          );\n        }\n        const len = string.length;\n        const mustMatch = arguments.length > 2 && arguments[2] === true;\n        if (!mustMatch && len === 0)\n          return 0;\n        let loweredCase = false;\n        for (; ; ) {\n          switch (encoding) {\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n              return len;\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8ToBytes(string).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return len * 2;\n            case \"hex\":\n              return len >>> 1;\n            case \"base64\":\n              return base64ToBytes(string).length;\n            default:\n              if (loweredCase) {\n                return mustMatch ? -1 : utf8ToBytes(string).length;\n              }\n              encoding = (\"\" + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n      Buffer2.byteLength = byteLength;\n      function slowToString(encoding, start, end) {\n        let loweredCase = false;\n        if (start === void 0 || start < 0) {\n          start = 0;\n        }\n        if (start > this.length) {\n          return \"\";\n        }\n        if (end === void 0 || end > this.length) {\n          end = this.length;\n        }\n        if (end <= 0) {\n          return \"\";\n        }\n        end >>>= 0;\n        start >>>= 0;\n        if (end <= start) {\n          return \"\";\n        }\n        if (!encoding)\n          encoding = \"utf8\";\n        while (true) {\n          switch (encoding) {\n            case \"hex\":\n              return hexSlice(this, start, end);\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8Slice(this, start, end);\n            case \"ascii\":\n              return asciiSlice(this, start, end);\n            case \"latin1\":\n            case \"binary\":\n              return latin1Slice(this, start, end);\n            case \"base64\":\n              return base64Slice(this, start, end);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return utf16leSlice(this, start, end);\n            default:\n              if (loweredCase)\n                throw new TypeError(\"Unknown encoding: \" + encoding);\n              encoding = (encoding + \"\").toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n      Buffer2.prototype._isBuffer = true;\n      function swap(b, n, m) {\n        const i = b[n];\n        b[n] = b[m];\n        b[m] = i;\n      }\n      Buffer2.prototype.swap16 = function swap16() {\n        const len = this.length;\n        if (len % 2 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n        }\n        for (let i = 0; i < len; i += 2) {\n          swap(this, i, i + 1);\n        }\n        return this;\n      };\n      Buffer2.prototype.swap32 = function swap32() {\n        const len = this.length;\n        if (len % 4 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n        }\n        for (let i = 0; i < len; i += 4) {\n          swap(this, i, i + 3);\n          swap(this, i + 1, i + 2);\n        }\n        return this;\n      };\n      Buffer2.prototype.swap64 = function swap64() {\n        const len = this.length;\n        if (len % 8 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n        }\n        for (let i = 0; i < len; i += 8) {\n          swap(this, i, i + 7);\n          swap(this, i + 1, i + 6);\n          swap(this, i + 2, i + 5);\n          swap(this, i + 3, i + 4);\n        }\n        return this;\n      };\n      Buffer2.prototype.toString = function toString() {\n        const length = this.length;\n        if (length === 0)\n          return \"\";\n        if (arguments.length === 0)\n          return utf8Slice(this, 0, length);\n        return slowToString.apply(this, arguments);\n      };\n      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;\n      Buffer2.prototype.equals = function equals(b) {\n        if (!Buffer2.isBuffer(b))\n          throw new TypeError(\"Argument must be a Buffer\");\n        if (this === b)\n          return true;\n        return Buffer2.compare(this, b) === 0;\n      };\n      Buffer2.prototype.inspect = function inspect() {\n        let str = \"\";\n        const max = exports.INSPECT_MAX_BYTES;\n        str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n        if (this.length > max)\n          str += \" ... \";\n        return \"<Buffer \" + str + \">\";\n      };\n      if (customInspectSymbol) {\n        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;\n      }\n      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n        if (isInstance(target, GlobalUint8Array)) {\n          target = Buffer2.from(target, target.offset, target.byteLength);\n        }\n        if (!Buffer2.isBuffer(target)) {\n          throw new TypeError(\n            'The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target\n          );\n        }\n        if (start === void 0) {\n          start = 0;\n        }\n        if (end === void 0) {\n          end = target ? target.length : 0;\n        }\n        if (thisStart === void 0) {\n          thisStart = 0;\n        }\n        if (thisEnd === void 0) {\n          thisEnd = this.length;\n        }\n        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n          throw new RangeError(\"out of range index\");\n        }\n        if (thisStart >= thisEnd && start >= end) {\n          return 0;\n        }\n        if (thisStart >= thisEnd) {\n          return -1;\n        }\n        if (start >= end) {\n          return 1;\n        }\n        start >>>= 0;\n        end >>>= 0;\n        thisStart >>>= 0;\n        thisEnd >>>= 0;\n        if (this === target)\n          return 0;\n        let x = thisEnd - thisStart;\n        let y = end - start;\n        const len = Math.min(x, y);\n        const thisCopy = this.slice(thisStart, thisEnd);\n        const targetCopy = target.slice(start, end);\n        for (let i = 0; i < len; ++i) {\n          if (thisCopy[i] !== targetCopy[i]) {\n            x = thisCopy[i];\n            y = targetCopy[i];\n            break;\n          }\n        }\n        if (x < y)\n          return -1;\n        if (y < x)\n          return 1;\n        return 0;\n      };\n      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n        if (buffer.length === 0)\n          return -1;\n        if (typeof byteOffset === \"string\") {\n          encoding = byteOffset;\n          byteOffset = 0;\n        } else if (byteOffset > 2147483647) {\n          byteOffset = 2147483647;\n        } else if (byteOffset < -2147483648) {\n          byteOffset = -2147483648;\n        }\n        byteOffset = +byteOffset;\n        if (numberIsNaN(byteOffset)) {\n          byteOffset = dir ? 0 : buffer.length - 1;\n        }\n        if (byteOffset < 0)\n          byteOffset = buffer.length + byteOffset;\n        if (byteOffset >= buffer.length) {\n          if (dir)\n            return -1;\n          else\n            byteOffset = buffer.length - 1;\n        } else if (byteOffset < 0) {\n          if (dir)\n            byteOffset = 0;\n          else\n            return -1;\n        }\n        if (typeof val === \"string\") {\n          val = Buffer2.from(val, encoding);\n        }\n        if (Buffer2.isBuffer(val)) {\n          if (val.length === 0) {\n            return -1;\n          }\n          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n        } else if (typeof val === \"number\") {\n          val = val & 255;\n          if (typeof GlobalUint8Array.prototype.indexOf === \"function\") {\n            if (dir) {\n              return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n            } else {\n              return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n            }\n          }\n          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n        }\n        throw new TypeError(\"val must be string, number or Buffer\");\n      }\n      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n        let indexSize = 1;\n        let arrLength = arr.length;\n        let valLength = val.length;\n        if (encoding !== void 0) {\n          encoding = String(encoding).toLowerCase();\n          if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n            if (arr.length < 2 || val.length < 2) {\n              return -1;\n            }\n            indexSize = 2;\n            arrLength /= 2;\n            valLength /= 2;\n            byteOffset /= 2;\n          }\n        }\n        function read(buf, i2) {\n          if (indexSize === 1) {\n            return buf[i2];\n          } else {\n            return buf.readUInt16BE(i2 * indexSize);\n          }\n        }\n        let i;\n        if (dir) {\n          let foundIndex = -1;\n          for (i = byteOffset; i < arrLength; i++) {\n            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n              if (foundIndex === -1)\n                foundIndex = i;\n              if (i - foundIndex + 1 === valLength)\n                return foundIndex * indexSize;\n            } else {\n              if (foundIndex !== -1)\n                i -= i - foundIndex;\n              foundIndex = -1;\n            }\n          }\n        } else {\n          if (byteOffset + valLength > arrLength)\n            byteOffset = arrLength - valLength;\n          for (i = byteOffset; i >= 0; i--) {\n            let found = true;\n            for (let j = 0; j < valLength; j++) {\n              if (read(arr, i + j) !== read(val, j)) {\n                found = false;\n                break;\n              }\n            }\n            if (found)\n              return i;\n          }\n        }\n        return -1;\n      }\n      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {\n        return this.indexOf(val, byteOffset, encoding) !== -1;\n      };\n      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n      };\n      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n      };\n      function hexWrite(buf, string, offset, length) {\n        offset = Number(offset) || 0;\n        const remaining = buf.length - offset;\n        if (!length) {\n          length = remaining;\n        } else {\n          length = Number(length);\n          if (length > remaining) {\n            length = remaining;\n          }\n        }\n        const strLen = string.length;\n        if (length > strLen / 2) {\n          length = strLen / 2;\n        }\n        let i;\n        for (i = 0; i < length; ++i) {\n          const parsed = parseInt(string.substr(i * 2, 2), 16);\n          if (numberIsNaN(parsed))\n            return i;\n          buf[offset + i] = parsed;\n        }\n        return i;\n      }\n      function utf8Write(buf, string, offset, length) {\n        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n      }\n      function asciiWrite(buf, string, offset, length) {\n        return blitBuffer(asciiToBytes(string), buf, offset, length);\n      }\n      function base64Write(buf, string, offset, length) {\n        return blitBuffer(base64ToBytes(string), buf, offset, length);\n      }\n      function ucs2Write(buf, string, offset, length) {\n        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n      }\n      Buffer2.prototype.write = function write(string, offset, length, encoding) {\n        if (offset === void 0) {\n          encoding = \"utf8\";\n          length = this.length;\n          offset = 0;\n        } else if (length === void 0 && typeof offset === \"string\") {\n          encoding = offset;\n          length = this.length;\n          offset = 0;\n        } else if (isFinite(offset)) {\n          offset = offset >>> 0;\n          if (isFinite(length)) {\n            length = length >>> 0;\n            if (encoding === void 0)\n              encoding = \"utf8\";\n          } else {\n            encoding = length;\n            length = void 0;\n          }\n        } else {\n          throw new Error(\n            \"Buffer.write(string, encoding, offset[, length]) is no longer supported\"\n          );\n        }\n        const remaining = this.length - offset;\n        if (length === void 0 || length > remaining)\n          length = remaining;\n        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n          throw new RangeError(\"Attempt to write outside buffer bounds\");\n        }\n        if (!encoding)\n          encoding = \"utf8\";\n        let loweredCase = false;\n        for (; ; ) {\n          switch (encoding) {\n            case \"hex\":\n              return hexWrite(this, string, offset, length);\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8Write(this, string, offset, length);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n              return asciiWrite(this, string, offset, length);\n            case \"base64\":\n              return base64Write(this, string, offset, length);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return ucs2Write(this, string, offset, length);\n            default:\n              if (loweredCase)\n                throw new TypeError(\"Unknown encoding: \" + encoding);\n              encoding = (\"\" + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      };\n      Buffer2.prototype.toJSON = function toJSON() {\n        return {\n          type: \"Buffer\",\n          data: Array.prototype.slice.call(this._arr || this, 0)\n        };\n      };\n      function base64Slice(buf, start, end) {\n        if (start === 0 && end === buf.length) {\n          return base64.fromByteArray(buf);\n        } else {\n          return base64.fromByteArray(buf.slice(start, end));\n        }\n      }\n      function utf8Slice(buf, start, end) {\n        end = Math.min(buf.length, end);\n        const res = [];\n        let i = start;\n        while (i < end) {\n          const firstByte = buf[i];\n          let codePoint = null;\n          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n          if (i + bytesPerSequence <= end) {\n            let secondByte, thirdByte, fourthByte, tempCodePoint;\n            switch (bytesPerSequence) {\n              case 1:\n                if (firstByte < 128) {\n                  codePoint = firstByte;\n                }\n                break;\n              case 2:\n                secondByte = buf[i + 1];\n                if ((secondByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n                  if (tempCodePoint > 127) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 3:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 4:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                fourthByte = buf[i + 3];\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n            }\n          }\n          if (codePoint === null) {\n            codePoint = 65533;\n            bytesPerSequence = 1;\n          } else if (codePoint > 65535) {\n            codePoint -= 65536;\n            res.push(codePoint >>> 10 & 1023 | 55296);\n            codePoint = 56320 | codePoint & 1023;\n          }\n          res.push(codePoint);\n          i += bytesPerSequence;\n        }\n        return decodeCodePointsArray(res);\n      }\n      var MAX_ARGUMENTS_LENGTH = 4096;\n      function decodeCodePointsArray(codePoints) {\n        const len = codePoints.length;\n        if (len <= MAX_ARGUMENTS_LENGTH) {\n          return String.fromCharCode.apply(String, codePoints);\n        }\n        let res = \"\";\n        let i = 0;\n        while (i < len) {\n          res += String.fromCharCode.apply(\n            String,\n            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n          );\n        }\n        return res;\n      }\n      function asciiSlice(buf, start, end) {\n        let ret = \"\";\n        end = Math.min(buf.length, end);\n        for (let i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i] & 127);\n        }\n        return ret;\n      }\n      function latin1Slice(buf, start, end) {\n        let ret = \"\";\n        end = Math.min(buf.length, end);\n        for (let i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i]);\n        }\n        return ret;\n      }\n      function hexSlice(buf, start, end) {\n        const len = buf.length;\n        if (!start || start < 0)\n          start = 0;\n        if (!end || end < 0 || end > len)\n          end = len;\n        let out = \"\";\n        for (let i = start; i < end; ++i) {\n          out += hexSliceLookupTable[buf[i]];\n        }\n        return out;\n      }\n      function utf16leSlice(buf, start, end) {\n        const bytes = buf.slice(start, end);\n        let res = \"\";\n        for (let i = 0; i < bytes.length - 1; i += 2) {\n          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n        }\n        return res;\n      }\n      Buffer2.prototype.slice = function slice(start, end) {\n        const len = this.length;\n        start = ~~start;\n        end = end === void 0 ? len : ~~end;\n        if (start < 0) {\n          start += len;\n          if (start < 0)\n            start = 0;\n        } else if (start > len) {\n          start = len;\n        }\n        if (end < 0) {\n          end += len;\n          if (end < 0)\n            end = 0;\n        } else if (end > len) {\n          end = len;\n        }\n        if (end < start)\n          end = start;\n        const newBuf = this.subarray(start, end);\n        Object.setPrototypeOf(newBuf, Buffer2.prototype);\n        return newBuf;\n      };\n      function checkOffset(offset, ext, length) {\n        if (offset % 1 !== 0 || offset < 0)\n          throw new RangeError(\"offset is not uint\");\n        if (offset + ext > length)\n          throw new RangeError(\"Trying to access beyond buffer length\");\n      }\n      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let val = this[offset];\n        let mul = 1;\n        let i = 0;\n        while (++i < byteLength2 && (mul *= 256)) {\n          val += this[offset + i] * mul;\n        }\n        return val;\n      };\n      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          checkOffset(offset, byteLength2, this.length);\n        }\n        let val = this[offset + --byteLength2];\n        let mul = 1;\n        while (byteLength2 > 0 && (mul *= 256)) {\n          val += this[offset + --byteLength2] * mul;\n        }\n        return val;\n      };\n      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 1, this.length);\n        return this[offset];\n      };\n      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        return this[offset] | this[offset + 1] << 8;\n      };\n      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        return this[offset] << 8 | this[offset + 1];\n      };\n      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n      };\n      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n      };\n      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n        return BigInt(lo) + (BigInt(hi) << BigInt(32));\n      });\n      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\n        return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n      });\n      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let val = this[offset];\n        let mul = 1;\n        let i = 0;\n        while (++i < byteLength2 && (mul *= 256)) {\n          val += this[offset + i] * mul;\n        }\n        mul *= 128;\n        if (val >= mul)\n          val -= Math.pow(2, 8 * byteLength2);\n        return val;\n      };\n      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let i = byteLength2;\n        let mul = 1;\n        let val = this[offset + --i];\n        while (i > 0 && (mul *= 256)) {\n          val += this[offset + --i] * mul;\n        }\n        mul *= 128;\n        if (val >= mul)\n          val -= Math.pow(2, 8 * byteLength2);\n        return val;\n      };\n      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 1, this.length);\n        if (!(this[offset] & 128))\n          return this[offset];\n        return (255 - this[offset] + 1) * -1;\n      };\n      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        const val = this[offset] | this[offset + 1] << 8;\n        return val & 32768 ? val | 4294901760 : val;\n      };\n      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        const val = this[offset + 1] | this[offset] << 8;\n        return val & 32768 ? val | 4294901760 : val;\n      };\n      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n      };\n      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n      };\n      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);\n        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n      });\n      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const val = (first << 24) + // Overflow\n        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\n      });\n      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, true, 23, 4);\n      };\n      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, false, 23, 4);\n      };\n      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, true, 52, 8);\n      };\n      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, false, 52, 8);\n      };\n      function checkInt(buf, value, offset, ext, max, min) {\n        if (!Buffer2.isBuffer(buf))\n          throw new TypeError('\"buffer\" argument must be a Buffer instance');\n        if (value > max || value < min)\n          throw new RangeError('\"value\" argument is out of bounds');\n        if (offset + ext > buf.length)\n          throw new RangeError(\"Index out of range\");\n      }\n      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\n        }\n        let mul = 1;\n        let i = 0;\n        this[offset] = value & 255;\n        while (++i < byteLength2 && (mul *= 256)) {\n          this[offset + i] = value / mul & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\n        }\n        let i = byteLength2 - 1;\n        let mul = 1;\n        this[offset + i] = value & 255;\n        while (--i >= 0 && (mul *= 256)) {\n          this[offset + i] = value / mul & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 1, 255, 0);\n        this[offset] = value & 255;\n        return offset + 1;\n      };\n      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 65535, 0);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 65535, 0);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 255;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 4294967295, 0);\n        this[offset + 3] = value >>> 24;\n        this[offset + 2] = value >>> 16;\n        this[offset + 1] = value >>> 8;\n        this[offset] = value & 255;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 4294967295, 0);\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 255;\n        return offset + 4;\n      };\n      function wrtBigUInt64LE(buf, value, offset, min, max) {\n        checkIntBI(value, min, max, buf, offset, 7);\n        let lo = Number(value & BigInt(4294967295));\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        return offset;\n      }\n      function wrtBigUInt64BE(buf, value, offset, min, max) {\n        checkIntBI(value, min, max, buf, offset, 7);\n        let lo = Number(value & BigInt(4294967295));\n        buf[offset + 7] = lo;\n        lo = lo >> 8;\n        buf[offset + 6] = lo;\n        lo = lo >> 8;\n        buf[offset + 5] = lo;\n        lo = lo >> 8;\n        buf[offset + 4] = lo;\n        let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n        buf[offset + 3] = hi;\n        hi = hi >> 8;\n        buf[offset + 2] = hi;\n        hi = hi >> 8;\n        buf[offset + 1] = hi;\n        hi = hi >> 8;\n        buf[offset] = hi;\n        return offset + 8;\n      }\n      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {\n        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n      });\n      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {\n        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n      });\n      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          const limit = Math.pow(2, 8 * byteLength2 - 1);\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n        }\n        let i = 0;\n        let mul = 1;\n        let sub = 0;\n        this[offset] = value & 255;\n        while (++i < byteLength2 && (mul *= 256)) {\n          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          const limit = Math.pow(2, 8 * byteLength2 - 1);\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n        }\n        let i = byteLength2 - 1;\n        let mul = 1;\n        let sub = 0;\n        this[offset + i] = value & 255;\n        while (--i >= 0 && (mul *= 256)) {\n          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 1, 127, -128);\n        if (value < 0)\n          value = 255 + value + 1;\n        this[offset] = value & 255;\n        return offset + 1;\n      };\n      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 32767, -32768);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 32767, -32768);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 255;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 2147483647, -2147483648);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        this[offset + 2] = value >>> 16;\n        this[offset + 3] = value >>> 24;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 2147483647, -2147483648);\n        if (value < 0)\n          value = 4294967295 + value + 1;\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 255;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {\n        return wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n      });\n      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {\n        return wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n      });\n      function checkIEEE754(buf, value, offset, ext, max, min) {\n        if (offset + ext > buf.length)\n          throw new RangeError(\"Index out of range\");\n        if (offset < 0)\n          throw new RangeError(\"Index out of range\");\n      }\n      function writeFloat(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 23, 4);\n        return offset + 4;\n      }\n      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, true, noAssert);\n      };\n      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, false, noAssert);\n      };\n      function writeDouble(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 52, 8);\n        return offset + 8;\n      }\n      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, true, noAssert);\n      };\n      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, false, noAssert);\n      };\n      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {\n        if (!Buffer2.isBuffer(target))\n          throw new TypeError(\"argument should be a Buffer\");\n        if (!start)\n          start = 0;\n        if (!end && end !== 0)\n          end = this.length;\n        if (targetStart >= target.length)\n          targetStart = target.length;\n        if (!targetStart)\n          targetStart = 0;\n        if (end > 0 && end < start)\n          end = start;\n        if (end === start)\n          return 0;\n        if (target.length === 0 || this.length === 0)\n          return 0;\n        if (targetStart < 0) {\n          throw new RangeError(\"targetStart out of bounds\");\n        }\n        if (start < 0 || start >= this.length)\n          throw new RangeError(\"Index out of range\");\n        if (end < 0)\n          throw new RangeError(\"sourceEnd out of bounds\");\n        if (end > this.length)\n          end = this.length;\n        if (target.length - targetStart < end - start) {\n          end = target.length - targetStart + start;\n        }\n        const len = end - start;\n        if (this === target && typeof GlobalUint8Array.prototype.copyWithin === \"function\") {\n          this.copyWithin(targetStart, start, end);\n        } else {\n          GlobalUint8Array.prototype.set.call(\n            target,\n            this.subarray(start, end),\n            targetStart\n          );\n        }\n        return len;\n      };\n      Buffer2.prototype.fill = function fill(val, start, end, encoding) {\n        if (typeof val === \"string\") {\n          if (typeof start === \"string\") {\n            encoding = start;\n            start = 0;\n            end = this.length;\n          } else if (typeof end === \"string\") {\n            encoding = end;\n            end = this.length;\n          }\n          if (encoding !== void 0 && typeof encoding !== \"string\") {\n            throw new TypeError(\"encoding must be a string\");\n          }\n          if (typeof encoding === \"string\" && !Buffer2.isEncoding(encoding)) {\n            throw new TypeError(\"Unknown encoding: \" + encoding);\n          }\n          if (val.length === 1) {\n            const code = val.charCodeAt(0);\n            if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n              val = code;\n            }\n          }\n        } else if (typeof val === \"number\") {\n          val = val & 255;\n        } else if (typeof val === \"boolean\") {\n          val = Number(val);\n        }\n        if (start < 0 || this.length < start || this.length < end) {\n          throw new RangeError(\"Out of range index\");\n        }\n        if (end <= start) {\n          return this;\n        }\n        start = start >>> 0;\n        end = end === void 0 ? this.length : end >>> 0;\n        if (!val)\n          val = 0;\n        let i;\n        if (typeof val === \"number\") {\n          for (i = start; i < end; ++i) {\n            this[i] = val;\n          }\n        } else {\n          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);\n          const len = bytes.length;\n          if (len === 0) {\n            throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n          }\n          for (i = 0; i < end - start; ++i) {\n            this[i + start] = bytes[i % len];\n          }\n        }\n        return this;\n      };\n      var errors = {};\n      function E(sym, getMessage, Base) {\n        errors[sym] = class NodeError extends Base {\n          constructor() {\n            super();\n            Object.defineProperty(this, \"message\", {\n              value: getMessage.apply(this, arguments),\n              writable: true,\n              configurable: true\n            });\n            this.name = `${this.name} [${sym}]`;\n            this.stack;\n            delete this.name;\n          }\n          get code() {\n            return sym;\n          }\n          set code(value) {\n            Object.defineProperty(this, \"code\", {\n              configurable: true,\n              enumerable: true,\n              value,\n              writable: true\n            });\n          }\n          toString() {\n            return `${this.name} [${sym}]: ${this.message}`;\n          }\n        };\n      }\n      E(\n        \"ERR_BUFFER_OUT_OF_BOUNDS\",\n        function(name) {\n          if (name) {\n            return `${name} is outside of buffer bounds`;\n          }\n          return \"Attempt to access memory outside buffer bounds\";\n        },\n        RangeError\n      );\n      E(\n        \"ERR_INVALID_ARG_TYPE\",\n        function(name, actual) {\n          return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`;\n        },\n        TypeError\n      );\n      E(\n        \"ERR_OUT_OF_RANGE\",\n        function(str, range, input) {\n          let msg = `The value of \"${str}\" is out of range.`;\n          let received = input;\n          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n            received = addNumericalSeparator(String(input));\n          } else if (typeof input === \"bigint\") {\n            received = String(input);\n            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n              received = addNumericalSeparator(received);\n            }\n            received += \"n\";\n          }\n          msg += ` It must be ${range}. Received ${received}`;\n          return msg;\n        },\n        RangeError\n      );\n      function addNumericalSeparator(val) {\n        let res = \"\";\n        let i = val.length;\n        const start = val[0] === \"-\" ? 1 : 0;\n        for (; i >= start + 4; i -= 3) {\n          res = `_${val.slice(i - 3, i)}${res}`;\n        }\n        return `${val.slice(0, i)}${res}`;\n      }\n      function checkBounds(buf, offset, byteLength2) {\n        validateNumber(offset, \"offset\");\n        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {\n          boundsError(offset, buf.length - (byteLength2 + 1));\n        }\n      }\n      function checkIntBI(value, min, max, buf, offset, byteLength2) {\n        if (value > max || value < min) {\n          const n = typeof min === \"bigint\" ? \"n\" : \"\";\n          let range;\n          if (byteLength2 > 3) {\n            if (min === 0 || min === BigInt(0)) {\n              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;\n            } else {\n              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;\n            }\n          } else {\n            range = `>= ${min}${n} and <= ${max}${n}`;\n          }\n          throw new errors.ERR_OUT_OF_RANGE(\"value\", range, value);\n        }\n        checkBounds(buf, offset, byteLength2);\n      }\n      function validateNumber(value, name) {\n        if (typeof value !== \"number\") {\n          throw new errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n        }\n      }\n      function boundsError(value, length, type) {\n        if (Math.floor(value) !== value) {\n          validateNumber(value, type);\n          throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \"an integer\", value);\n        }\n        if (length < 0) {\n          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n        }\n        throw new errors.ERR_OUT_OF_RANGE(\n          type || \"offset\",\n          `>= ${type ? 1 : 0} and <= ${length}`,\n          value\n        );\n      }\n      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n      function base64clean(str) {\n        str = str.split(\"=\")[0];\n        str = str.trim().replace(INVALID_BASE64_RE, \"\");\n        if (str.length < 2)\n          return \"\";\n        while (str.length % 4 !== 0) {\n          str = str + \"=\";\n        }\n        return str;\n      }\n      function utf8ToBytes(string, units) {\n        units = units || Infinity;\n        let codePoint;\n        const length = string.length;\n        let leadSurrogate = null;\n        const bytes = [];\n        for (let i = 0; i < length; ++i) {\n          codePoint = string.charCodeAt(i);\n          if (codePoint > 55295 && codePoint < 57344) {\n            if (!leadSurrogate) {\n              if (codePoint > 56319) {\n                if ((units -= 3) > -1)\n                  bytes.push(239, 191, 189);\n                continue;\n              } else if (i + 1 === length) {\n                if ((units -= 3) > -1)\n                  bytes.push(239, 191, 189);\n                continue;\n              }\n              leadSurrogate = codePoint;\n              continue;\n            }\n            if (codePoint < 56320) {\n              if ((units -= 3) > -1)\n                bytes.push(239, 191, 189);\n              leadSurrogate = codePoint;\n              continue;\n            }\n            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n          } else if (leadSurrogate) {\n            if ((units -= 3) > -1)\n              bytes.push(239, 191, 189);\n          }\n          leadSurrogate = null;\n          if (codePoint < 128) {\n            if ((units -= 1) < 0)\n              break;\n            bytes.push(codePoint);\n          } else if (codePoint < 2048) {\n            if ((units -= 2) < 0)\n              break;\n            bytes.push(\n              codePoint >> 6 | 192,\n              codePoint & 63 | 128\n            );\n          } else if (codePoint < 65536) {\n            if ((units -= 3) < 0)\n              break;\n            bytes.push(\n              codePoint >> 12 | 224,\n              codePoint >> 6 & 63 | 128,\n              codePoint & 63 | 128\n            );\n          } else if (codePoint < 1114112) {\n            if ((units -= 4) < 0)\n              break;\n            bytes.push(\n              codePoint >> 18 | 240,\n              codePoint >> 12 & 63 | 128,\n              codePoint >> 6 & 63 | 128,\n              codePoint & 63 | 128\n            );\n          } else {\n            throw new Error(\"Invalid code point\");\n          }\n        }\n        return bytes;\n      }\n      function asciiToBytes(str) {\n        const byteArray = [];\n        for (let i = 0; i < str.length; ++i) {\n          byteArray.push(str.charCodeAt(i) & 255);\n        }\n        return byteArray;\n      }\n      function utf16leToBytes(str, units) {\n        let c, hi, lo;\n        const byteArray = [];\n        for (let i = 0; i < str.length; ++i) {\n          if ((units -= 2) < 0)\n            break;\n          c = str.charCodeAt(i);\n          hi = c >> 8;\n          lo = c % 256;\n          byteArray.push(lo);\n          byteArray.push(hi);\n        }\n        return byteArray;\n      }\n      function base64ToBytes(str) {\n        return base64.toByteArray(base64clean(str));\n      }\n      function blitBuffer(src, dst, offset, length) {\n        let i;\n        for (i = 0; i < length; ++i) {\n          if (i + offset >= dst.length || i >= src.length)\n            break;\n          dst[i + offset] = src[i];\n        }\n        return i;\n      }\n      function isInstance(obj, type) {\n        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n      }\n      function numberIsNaN(obj) {\n        return obj !== obj;\n      }\n      var hexSliceLookupTable = function() {\n        const alphabet = \"0123456789abcdef\";\n        const table = new Array(256);\n        for (let i = 0; i < 16; ++i) {\n          const i16 = i * 16;\n          for (let j = 0; j < 16; ++j) {\n            table[i16 + j] = alphabet[i] + alphabet[j];\n          }\n        }\n        return table;\n      }();\n      function defineBigIntMethod(fn) {\n        return typeof BigInt === \"undefined\" ? BufferBigIntNotDefined : fn;\n      }\n      function BufferBigIntNotDefined() {\n        throw new Error(\"BigInt not supported\");\n      }\n    }\n  });\n\n  // node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\n  var require_browser = __commonJS({\n    \"node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\"(exports, module) {\n      init_dist();\n      var process = module.exports = {};\n      var cachedSetTimeout;\n      var cachedClearTimeout;\n      function defaultSetTimout() {\n        throw new Error(\"setTimeout has not been defined\");\n      }\n      function defaultClearTimeout() {\n        throw new Error(\"clearTimeout has not been defined\");\n      }\n      (function() {\n        try {\n          if (typeof setTimeout === \"function\") {\n            cachedSetTimeout = setTimeout;\n          } else {\n            cachedSetTimeout = defaultSetTimout;\n          }\n        } catch (e) {\n          cachedSetTimeout = defaultSetTimout;\n        }\n        try {\n          if (typeof clearTimeout === \"function\") {\n            cachedClearTimeout = clearTimeout;\n          } else {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        } catch (e) {\n          cachedClearTimeout = defaultClearTimeout;\n        }\n      })();\n      function runTimeout(fun) {\n        if (cachedSetTimeout === setTimeout) {\n          return setTimeout(fun, 0);\n        }\n        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n          cachedSetTimeout = setTimeout;\n          return setTimeout(fun, 0);\n        }\n        try {\n          return cachedSetTimeout(fun, 0);\n        } catch (e) {\n          try {\n            return cachedSetTimeout.call(null, fun, 0);\n          } catch (e2) {\n            return cachedSetTimeout.call(this, fun, 0);\n          }\n        }\n      }\n      function runClearTimeout(marker) {\n        if (cachedClearTimeout === clearTimeout) {\n          return clearTimeout(marker);\n        }\n        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n          cachedClearTimeout = clearTimeout;\n          return clearTimeout(marker);\n        }\n        try {\n          return cachedClearTimeout(marker);\n        } catch (e) {\n          try {\n            return cachedClearTimeout.call(null, marker);\n          } catch (e2) {\n            return cachedClearTimeout.call(this, marker);\n          }\n        }\n      }\n      var queue = [];\n      var draining = false;\n      var currentQueue;\n      var queueIndex = -1;\n      function cleanUpNextTick() {\n        if (!draining || !currentQueue) {\n          return;\n        }\n        draining = false;\n        if (currentQueue.length) {\n          queue = currentQueue.concat(queue);\n        } else {\n          queueIndex = -1;\n        }\n        if (queue.length) {\n          drainQueue();\n        }\n      }\n      function drainQueue() {\n        if (draining) {\n          return;\n        }\n        var timeout = runTimeout(cleanUpNextTick);\n        draining = true;\n        var len = queue.length;\n        while (len) {\n          currentQueue = queue;\n          queue = [];\n          while (++queueIndex < len) {\n            if (currentQueue) {\n              currentQueue[queueIndex].run();\n            }\n          }\n          queueIndex = -1;\n          len = queue.length;\n        }\n        currentQueue = null;\n        draining = false;\n        runClearTimeout(timeout);\n      }\n      process.nextTick = function(fun) {\n        var args = new Array(arguments.length - 1);\n        if (arguments.length > 1) {\n          for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n          }\n        }\n        queue.push(new Item(fun, args));\n        if (queue.length === 1 && !draining) {\n          runTimeout(drainQueue);\n        }\n      };\n      function Item(fun, array) {\n        this.fun = fun;\n        this.array = array;\n      }\n      Item.prototype.run = function() {\n        this.fun.apply(null, this.array);\n      };\n      process.title = \"browser\";\n      process.browser = true;\n      process.env = {};\n      process.argv = [];\n      process.version = \"\";\n      process.versions = {};\n      function noop() {\n      }\n      process.on = noop;\n      process.addListener = noop;\n      process.once = noop;\n      process.off = noop;\n      process.removeListener = noop;\n      process.removeAllListeners = noop;\n      process.emit = noop;\n      process.prependListener = noop;\n      process.prependOnceListener = noop;\n      process.listeners = function(name) {\n        return [];\n      };\n      process.binding = function(name) {\n        throw new Error(\"process.binding is not supported\");\n      };\n      process.cwd = function() {\n        return \"/\";\n      };\n      process.chdir = function(dir) {\n        throw new Error(\"process.chdir is not supported\");\n      };\n      process.umask = function() {\n        return 0;\n      };\n    }\n  });\n\n  // shims/dist/index.js\n  var import_buffer_polyfill, import_process, o;\n  var init_dist = __esm({\n    \"shims/dist/index.js\"() {\n      \"use strict\";\n      import_buffer_polyfill = __toESM(require_buffer(), 1);\n      import_process = __toESM(require_browser(), 1);\n      o = globalThis || void 0 || self;\n    }\n  });\n\n  // shims/banner/index.cjs\n  var require_banner = __commonJS({\n    \"shims/banner/index.cjs\"() {\n      init_dist();\n      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;\n      globalThis.global = globalThis.global || o;\n      globalThis.process = globalThis.process || import_process.default;\n    }\n  });\n  require_banner();\n})();\n/*! Bundled license information:\n\nieee754/index.js:\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n\nbuffer/index.js:\n  (*!\n   * The buffer module from node.js, for the browser.\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   *)\n*/\n\nimport {\n  require_markup\n} from \"./chunk-PINGGLI2.js\";\nimport {\n  require_javascript\n} from \"./chunk-XQX5AV7V.js\";\nimport {\n  require_css\n} from \"./chunk-R6DSTLQR.js\";\nimport {\n  require_clike\n} from \"./chunk-7LJ3LUKO.js\";\nimport {\n  require_immutable\n} from \"./chunk-MWYXR23D.js\";\nimport {\n  __commonJS,\n  __toESM,\n  require_dist\n} from \"./chunk-VMXIV7NB.js\";\n\n// node_modules/property-information/lib/util/schema.js\nvar require_schema = __commonJS({\n  \"node_modules/property-information/lib/util/schema.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = Schema;\n    var proto = Schema.prototype;\n    proto.space = null;\n    proto.normal = {};\n    proto.property = {};\n    function Schema(property, normal, space) {\n      this.property = property;\n      this.normal = normal;\n      if (space) {\n        this.space = space;\n      }\n    }\n  }\n});\n\n// node_modules/property-information/lib/util/merge.js\nvar require_merge = __commonJS({\n  \"node_modules/property-information/lib/util/merge.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var xtend = require_immutable();\n    var Schema = require_schema();\n    module.exports = merge;\n    function merge(definitions) {\n      var length = definitions.length;\n      var property = [];\n      var normal = [];\n      var index = -1;\n      var info;\n      var space;\n      while (++index < length) {\n        info = definitions[index];\n        property.push(info.property);\n        normal.push(info.normal);\n        space = info.space;\n      }\n      return new Schema(\n        xtend.apply(null, property),\n        xtend.apply(null, normal),\n        space\n      );\n    }\n  }\n});\n\n// node_modules/property-information/normalize.js\nvar require_normalize = __commonJS({\n  \"node_modules/property-information/normalize.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = normalize;\n    function normalize(value) {\n      return value.toLowerCase();\n    }\n  }\n});\n\n// node_modules/property-information/lib/util/info.js\nvar require_info = __commonJS({\n  \"node_modules/property-information/lib/util/info.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = Info;\n    var proto = Info.prototype;\n    proto.space = null;\n    proto.attribute = null;\n    proto.property = null;\n    proto.boolean = false;\n    proto.booleanish = false;\n    proto.overloadedBoolean = false;\n    proto.number = false;\n    proto.commaSeparated = false;\n    proto.spaceSeparated = false;\n    proto.commaOrSpaceSeparated = false;\n    proto.mustUseProperty = false;\n    proto.defined = false;\n    function Info(property, attribute) {\n      this.property = property;\n      this.attribute = attribute;\n    }\n  }\n});\n\n// node_modules/property-information/lib/util/types.js\nvar require_types = __commonJS({\n  \"node_modules/property-information/lib/util/types.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var powers = 0;\n    exports.boolean = increment();\n    exports.booleanish = increment();\n    exports.overloadedBoolean = increment();\n    exports.number = increment();\n    exports.spaceSeparated = increment();\n    exports.commaSeparated = increment();\n    exports.commaOrSpaceSeparated = increment();\n    function increment() {\n      return Math.pow(2, ++powers);\n    }\n  }\n});\n\n// node_modules/property-information/lib/util/defined-info.js\nvar require_defined_info = __commonJS({\n  \"node_modules/property-information/lib/util/defined-info.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var Info = require_info();\n    var types = require_types();\n    module.exports = DefinedInfo;\n    DefinedInfo.prototype = new Info();\n    DefinedInfo.prototype.defined = true;\n    var checks = [\n      \"boolean\",\n      \"booleanish\",\n      \"overloadedBoolean\",\n      \"number\",\n      \"commaSeparated\",\n      \"spaceSeparated\",\n      \"commaOrSpaceSeparated\"\n    ];\n    var checksLength = checks.length;\n    function DefinedInfo(property, attribute, mask, space) {\n      var index = -1;\n      var check;\n      mark(this, \"space\", space);\n      Info.call(this, property, attribute);\n      while (++index < checksLength) {\n        check = checks[index];\n        mark(this, check, (mask & types[check]) === types[check]);\n      }\n    }\n    function mark(values, key, value) {\n      if (value) {\n        values[key] = value;\n      }\n    }\n  }\n});\n\n// node_modules/property-information/lib/util/create.js\nvar require_create = __commonJS({\n  \"node_modules/property-information/lib/util/create.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var normalize = require_normalize();\n    var Schema = require_schema();\n    var DefinedInfo = require_defined_info();\n    module.exports = create;\n    function create(definition) {\n      var space = definition.space;\n      var mustUseProperty = definition.mustUseProperty || [];\n      var attributes = definition.attributes || {};\n      var props = definition.properties;\n      var transform = definition.transform;\n      var property = {};\n      var normal = {};\n      var prop;\n      var info;\n      for (prop in props) {\n        info = new DefinedInfo(\n          prop,\n          transform(attributes, prop),\n          props[prop],\n          space\n        );\n        if (mustUseProperty.indexOf(prop) !== -1) {\n          info.mustUseProperty = true;\n        }\n        property[prop] = info;\n        normal[normalize(prop)] = prop;\n        normal[normalize(info.attribute)] = prop;\n      }\n      return new Schema(property, normal, space);\n    }\n  }\n});\n\n// node_modules/property-information/lib/xlink.js\nvar require_xlink = __commonJS({\n  \"node_modules/property-information/lib/xlink.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var create = require_create();\n    module.exports = create({\n      space: \"xlink\",\n      transform: xlinkTransform,\n      properties: {\n        xLinkActuate: null,\n        xLinkArcRole: null,\n        xLinkHref: null,\n        xLinkRole: null,\n        xLinkShow: null,\n        xLinkTitle: null,\n        xLinkType: null\n      }\n    });\n    function xlinkTransform(_, prop) {\n      return \"xlink:\" + prop.slice(5).toLowerCase();\n    }\n  }\n});\n\n// node_modules/property-information/lib/xml.js\nvar require_xml = __commonJS({\n  \"node_modules/property-information/lib/xml.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var create = require_create();\n    module.exports = create({\n      space: \"xml\",\n      transform: xmlTransform,\n      properties: {\n        xmlLang: null,\n        xmlBase: null,\n        xmlSpace: null\n      }\n    });\n    function xmlTransform(_, prop) {\n      return \"xml:\" + prop.slice(3).toLowerCase();\n    }\n  }\n});\n\n// node_modules/property-information/lib/util/case-sensitive-transform.js\nvar require_case_sensitive_transform = __commonJS({\n  \"node_modules/property-information/lib/util/case-sensitive-transform.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = caseSensitiveTransform;\n    function caseSensitiveTransform(attributes, attribute) {\n      return attribute in attributes ? attributes[attribute] : attribute;\n    }\n  }\n});\n\n// node_modules/property-information/lib/util/case-insensitive-transform.js\nvar require_case_insensitive_transform = __commonJS({\n  \"node_modules/property-information/lib/util/case-insensitive-transform.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var caseSensitiveTransform = require_case_sensitive_transform();\n    module.exports = caseInsensitiveTransform;\n    function caseInsensitiveTransform(attributes, property) {\n      return caseSensitiveTransform(attributes, property.toLowerCase());\n    }\n  }\n});\n\n// node_modules/property-information/lib/xmlns.js\nvar require_xmlns = __commonJS({\n  \"node_modules/property-information/lib/xmlns.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var create = require_create();\n    var caseInsensitiveTransform = require_case_insensitive_transform();\n    module.exports = create({\n      space: \"xmlns\",\n      attributes: {\n        xmlnsxlink: \"xmlns:xlink\"\n      },\n      transform: caseInsensitiveTransform,\n      properties: {\n        xmlns: null,\n        xmlnsXLink: null\n      }\n    });\n  }\n});\n\n// node_modules/property-information/lib/aria.js\nvar require_aria = __commonJS({\n  \"node_modules/property-information/lib/aria.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var types = require_types();\n    var create = require_create();\n    var booleanish = types.booleanish;\n    var number = types.number;\n    var spaceSeparated = types.spaceSeparated;\n    module.exports = create({\n      transform: ariaTransform,\n      properties: {\n        ariaActiveDescendant: null,\n        ariaAtomic: booleanish,\n        ariaAutoComplete: null,\n        ariaBusy: booleanish,\n        ariaChecked: booleanish,\n        ariaColCount: number,\n        ariaColIndex: number,\n        ariaColSpan: number,\n        ariaControls: spaceSeparated,\n        ariaCurrent: null,\n        ariaDescribedBy: spaceSeparated,\n        ariaDetails: null,\n        ariaDisabled: booleanish,\n        ariaDropEffect: spaceSeparated,\n        ariaErrorMessage: null,\n        ariaExpanded: booleanish,\n        ariaFlowTo: spaceSeparated,\n        ariaGrabbed: booleanish,\n        ariaHasPopup: null,\n        ariaHidden: booleanish,\n        ariaInvalid: null,\n        ariaKeyShortcuts: null,\n        ariaLabel: null,\n        ariaLabelledBy: spaceSeparated,\n        ariaLevel: number,\n        ariaLive: null,\n        ariaModal: booleanish,\n        ariaMultiLine: booleanish,\n        ariaMultiSelectable: booleanish,\n        ariaOrientation: null,\n        ariaOwns: spaceSeparated,\n        ariaPlaceholder: null,\n        ariaPosInSet: number,\n        ariaPressed: booleanish,\n        ariaReadOnly: booleanish,\n        ariaRelevant: null,\n        ariaRequired: booleanish,\n        ariaRoleDescription: spaceSeparated,\n        ariaRowCount: number,\n        ariaRowIndex: number,\n        ariaRowSpan: number,\n        ariaSelected: booleanish,\n        ariaSetSize: number,\n        ariaSort: null,\n        ariaValueMax: number,\n        ariaValueMin: number,\n        ariaValueNow: number,\n        ariaValueText: null,\n        role: null\n      }\n    });\n    function ariaTransform(_, prop) {\n      return prop === \"role\" ? prop : \"aria-\" + prop.slice(4).toLowerCase();\n    }\n  }\n});\n\n// node_modules/property-information/lib/html.js\nvar require_html = __commonJS({\n  \"node_modules/property-information/lib/html.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var types = require_types();\n    var create = require_create();\n    var caseInsensitiveTransform = require_case_insensitive_transform();\n    var boolean = types.boolean;\n    var overloadedBoolean = types.overloadedBoolean;\n    var booleanish = types.booleanish;\n    var number = types.number;\n    var spaceSeparated = types.spaceSeparated;\n    var commaSeparated = types.commaSeparated;\n    module.exports = create({\n      space: \"html\",\n      attributes: {\n        acceptcharset: \"accept-charset\",\n        classname: \"class\",\n        htmlfor: \"for\",\n        httpequiv: \"http-equiv\"\n      },\n      transform: caseInsensitiveTransform,\n      mustUseProperty: [\"checked\", \"multiple\", \"muted\", \"selected\"],\n      properties: {\n        // Standard Properties.\n        abbr: null,\n        accept: commaSeparated,\n        acceptCharset: spaceSeparated,\n        accessKey: spaceSeparated,\n        action: null,\n        allow: null,\n        allowFullScreen: boolean,\n        allowPaymentRequest: boolean,\n        allowUserMedia: boolean,\n        alt: null,\n        as: null,\n        async: boolean,\n        autoCapitalize: null,\n        autoComplete: spaceSeparated,\n        autoFocus: boolean,\n        autoPlay: boolean,\n        capture: boolean,\n        charSet: null,\n        checked: boolean,\n        cite: null,\n        className: spaceSeparated,\n        cols: number,\n        colSpan: null,\n        content: null,\n        contentEditable: booleanish,\n        controls: boolean,\n        controlsList: spaceSeparated,\n        coords: number | commaSeparated,\n        crossOrigin: null,\n        data: null,\n        dateTime: null,\n        decoding: null,\n        default: boolean,\n        defer: boolean,\n        dir: null,\n        dirName: null,\n        disabled: boolean,\n        download: overloadedBoolean,\n        draggable: booleanish,\n        encType: null,\n        enterKeyHint: null,\n        form: null,\n        formAction: null,\n        formEncType: null,\n        formMethod: null,\n        formNoValidate: boolean,\n        formTarget: null,\n        headers: spaceSeparated,\n        height: number,\n        hidden: boolean,\n        high: number,\n        href: null,\n        hrefLang: null,\n        htmlFor: spaceSeparated,\n        httpEquiv: spaceSeparated,\n        id: null,\n        imageSizes: null,\n        imageSrcSet: commaSeparated,\n        inputMode: null,\n        integrity: null,\n        is: null,\n        isMap: boolean,\n        itemId: null,\n        itemProp: spaceSeparated,\n        itemRef: spaceSeparated,\n        itemScope: boolean,\n        itemType: spaceSeparated,\n        kind: null,\n        label: null,\n        lang: null,\n        language: null,\n        list: null,\n        loading: null,\n        loop: boolean,\n        low: number,\n        manifest: null,\n        max: null,\n        maxLength: number,\n        media: null,\n        method: null,\n        min: null,\n        minLength: number,\n        multiple: boolean,\n        muted: boolean,\n        name: null,\n        nonce: null,\n        noModule: boolean,\n        noValidate: boolean,\n        onAbort: null,\n        onAfterPrint: null,\n        onAuxClick: null,\n        onBeforePrint: null,\n        onBeforeUnload: null,\n        onBlur: null,\n        onCancel: null,\n        onCanPlay: null,\n        onCanPlayThrough: null,\n        onChange: null,\n        onClick: null,\n        onClose: null,\n        onContextMenu: null,\n        onCopy: null,\n        onCueChange: null,\n        onCut: null,\n        onDblClick: null,\n        onDrag: null,\n        onDragEnd: null,\n        onDragEnter: null,\n        onDragExit: null,\n        onDragLeave: null,\n        onDragOver: null,\n        onDragStart: null,\n        onDrop: null,\n        onDurationChange: null,\n        onEmptied: null,\n        onEnded: null,\n        onError: null,\n        onFocus: null,\n        onFormData: null,\n        onHashChange: null,\n        onInput: null,\n        onInvalid: null,\n        onKeyDown: null,\n        onKeyPress: null,\n        onKeyUp: null,\n        onLanguageChange: null,\n        onLoad: null,\n        onLoadedData: null,\n        onLoadedMetadata: null,\n        onLoadEnd: null,\n        onLoadStart: null,\n        onMessage: null,\n        onMessageError: null,\n        onMouseDown: null,\n        onMouseEnter: null,\n        onMouseLeave: null,\n        onMouseMove: null,\n        onMouseOut: null,\n        onMouseOver: null,\n        onMouseUp: null,\n        onOffline: null,\n        onOnline: null,\n        onPageHide: null,\n        onPageShow: null,\n        onPaste: null,\n        onPause: null,\n        onPlay: null,\n        onPlaying: null,\n        onPopState: null,\n        onProgress: null,\n        onRateChange: null,\n        onRejectionHandled: null,\n        onReset: null,\n        onResize: null,\n        onScroll: null,\n        onSecurityPolicyViolation: null,\n        onSeeked: null,\n        onSeeking: null,\n        onSelect: null,\n        onSlotChange: null,\n        onStalled: null,\n        onStorage: null,\n        onSubmit: null,\n        onSuspend: null,\n        onTimeUpdate: null,\n        onToggle: null,\n        onUnhandledRejection: null,\n        onUnload: null,\n        onVolumeChange: null,\n        onWaiting: null,\n        onWheel: null,\n        open: boolean,\n        optimum: number,\n        pattern: null,\n        ping: spaceSeparated,\n        placeholder: null,\n        playsInline: boolean,\n        poster: null,\n        preload: null,\n        readOnly: boolean,\n        referrerPolicy: null,\n        rel: spaceSeparated,\n        required: boolean,\n        reversed: boolean,\n        rows: number,\n        rowSpan: number,\n        sandbox: spaceSeparated,\n        scope: null,\n        scoped: boolean,\n        seamless: boolean,\n        selected: boolean,\n        shape: null,\n        size: number,\n        sizes: null,\n        slot: null,\n        span: number,\n        spellCheck: booleanish,\n        src: null,\n        srcDoc: null,\n        srcLang: null,\n        srcSet: commaSeparated,\n        start: number,\n        step: null,\n        style: null,\n        tabIndex: number,\n        target: null,\n        title: null,\n        translate: null,\n        type: null,\n        typeMustMatch: boolean,\n        useMap: null,\n        value: booleanish,\n        width: number,\n        wrap: null,\n        // Legacy.\n        // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n        align: null,\n        // Several. Use CSS `text-align` instead,\n        aLink: null,\n        // `<body>`. Use CSS `a:active {color}` instead\n        archive: spaceSeparated,\n        // `<object>`. List of URIs to archives\n        axis: null,\n        // `<td>` and `<th>`. Use `scope` on `<th>`\n        background: null,\n        // `<body>`. Use CSS `background-image` instead\n        bgColor: null,\n        // `<body>` and table elements. Use CSS `background-color` instead\n        border: number,\n        // `<table>`. Use CSS `border-width` instead,\n        borderColor: null,\n        // `<table>`. Use CSS `border-color` instead,\n        bottomMargin: number,\n        // `<body>`\n        cellPadding: null,\n        // `<table>`\n        cellSpacing: null,\n        // `<table>`\n        char: null,\n        // Several table elements. When `align=char`, sets the character to align on\n        charOff: null,\n        // Several table elements. When `char`, offsets the alignment\n        classId: null,\n        // `<object>`\n        clear: null,\n        // `<br>`. Use CSS `clear` instead\n        code: null,\n        // `<object>`\n        codeBase: null,\n        // `<object>`\n        codeType: null,\n        // `<object>`\n        color: null,\n        // `<font>` and `<hr>`. Use CSS instead\n        compact: boolean,\n        // Lists. Use CSS to reduce space between items instead\n        declare: boolean,\n        // `<object>`\n        event: null,\n        // `<script>`\n        face: null,\n        // `<font>`. Use CSS instead\n        frame: null,\n        // `<table>`\n        frameBorder: null,\n        // `<iframe>`. Use CSS `border` instead\n        hSpace: number,\n        // `<img>` and `<object>`\n        leftMargin: number,\n        // `<body>`\n        link: null,\n        // `<body>`. Use CSS `a:link {color: *}` instead\n        longDesc: null,\n        // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n        lowSrc: null,\n        // `<img>`. Use a `<picture>`\n        marginHeight: number,\n        // `<body>`\n        marginWidth: number,\n        // `<body>`\n        noResize: boolean,\n        // `<frame>`\n        noHref: boolean,\n        // `<area>`. Use no href instead of an explicit `nohref`\n        noShade: boolean,\n        // `<hr>`. Use background-color and height instead of borders\n        noWrap: boolean,\n        // `<td>` and `<th>`\n        object: null,\n        // `<applet>`\n        profile: null,\n        // `<head>`\n        prompt: null,\n        // `<isindex>`\n        rev: null,\n        // `<link>`\n        rightMargin: number,\n        // `<body>`\n        rules: null,\n        // `<table>`\n        scheme: null,\n        // `<meta>`\n        scrolling: booleanish,\n        // `<frame>`. Use overflow in the child context\n        standby: null,\n        // `<object>`\n        summary: null,\n        // `<table>`\n        text: null,\n        // `<body>`. Use CSS `color` instead\n        topMargin: number,\n        // `<body>`\n        valueType: null,\n        // `<param>`\n        version: null,\n        // `<html>`. Use a doctype.\n        vAlign: null,\n        // Several. Use CSS `vertical-align` instead\n        vLink: null,\n        // `<body>`. Use CSS `a:visited {color}` instead\n        vSpace: number,\n        // `<img>` and `<object>`\n        // Non-standard Properties.\n        allowTransparency: null,\n        autoCorrect: null,\n        autoSave: null,\n        disablePictureInPicture: boolean,\n        disableRemotePlayback: boolean,\n        prefix: null,\n        property: null,\n        results: number,\n        security: null,\n        unselectable: null\n      }\n    });\n  }\n});\n\n// node_modules/property-information/html.js\nvar require_html2 = __commonJS({\n  \"node_modules/property-information/html.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var merge = require_merge();\n    var xlink = require_xlink();\n    var xml = require_xml();\n    var xmlns = require_xmlns();\n    var aria = require_aria();\n    var html = require_html();\n    module.exports = merge([xml, xlink, xmlns, aria, html]);\n  }\n});\n\n// node_modules/property-information/find.js\nvar require_find = __commonJS({\n  \"node_modules/property-information/find.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var normalize = require_normalize();\n    var DefinedInfo = require_defined_info();\n    var Info = require_info();\n    var data = \"data\";\n    module.exports = find;\n    var valid = /^data[-\\w.:]+$/i;\n    var dash = /-[a-z]/g;\n    var cap = /[A-Z]/g;\n    function find(schema, value) {\n      var normal = normalize(value);\n      var prop = value;\n      var Type = Info;\n      if (normal in schema.normal) {\n        return schema.property[schema.normal[normal]];\n      }\n      if (normal.length > 4 && normal.slice(0, 4) === data && valid.test(value)) {\n        if (value.charAt(4) === \"-\") {\n          prop = datasetToProperty(value);\n        } else {\n          value = datasetToAttribute(value);\n        }\n        Type = DefinedInfo;\n      }\n      return new Type(prop, value);\n    }\n    function datasetToProperty(attribute) {\n      var value = attribute.slice(5).replace(dash, camelcase);\n      return data + value.charAt(0).toUpperCase() + value.slice(1);\n    }\n    function datasetToAttribute(property) {\n      var value = property.slice(4);\n      if (dash.test(value)) {\n        return property;\n      }\n      value = value.replace(cap, kebab);\n      if (value.charAt(0) !== \"-\") {\n        value = \"-\" + value;\n      }\n      return data + value;\n    }\n    function kebab($0) {\n      return \"-\" + $0.toLowerCase();\n    }\n    function camelcase($0) {\n      return $0.charAt(1).toUpperCase();\n    }\n  }\n});\n\n// node_modules/hast-util-parse-selector/index.js\nvar require_hast_util_parse_selector = __commonJS({\n  \"node_modules/hast-util-parse-selector/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = parse;\n    var search = /[#.]/g;\n    function parse(selector, defaultTagName) {\n      var value = selector || \"\";\n      var name = defaultTagName || \"div\";\n      var props = {};\n      var start = 0;\n      var subvalue;\n      var previous;\n      var match;\n      while (start < value.length) {\n        search.lastIndex = start;\n        match = search.exec(value);\n        subvalue = value.slice(start, match ? match.index : value.length);\n        if (subvalue) {\n          if (!previous) {\n            name = subvalue;\n          } else if (previous === \"#\") {\n            props.id = subvalue;\n          } else if (props.className) {\n            props.className.push(subvalue);\n          } else {\n            props.className = [subvalue];\n          }\n          start += subvalue.length;\n        }\n        if (match) {\n          previous = match[0];\n          start++;\n        }\n      }\n      return { type: \"element\", tagName: name, properties: props, children: [] };\n    }\n  }\n});\n\n// node_modules/space-separated-tokens/index.js\nvar require_space_separated_tokens = __commonJS({\n  \"node_modules/space-separated-tokens/index.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    exports.parse = parse;\n    exports.stringify = stringify;\n    var empty = \"\";\n    var space = \" \";\n    var whiteSpace = /[ \\t\\n\\r\\f]+/g;\n    function parse(value) {\n      var input = String(value || empty).trim();\n      return input === empty ? [] : input.split(whiteSpace);\n    }\n    function stringify(values) {\n      return values.join(space).trim();\n    }\n  }\n});\n\n// node_modules/comma-separated-tokens/index.js\nvar require_comma_separated_tokens = __commonJS({\n  \"node_modules/comma-separated-tokens/index.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    exports.parse = parse;\n    exports.stringify = stringify;\n    var comma = \",\";\n    var space = \" \";\n    var empty = \"\";\n    function parse(value) {\n      var values = [];\n      var input = String(value || empty);\n      var index = input.indexOf(comma);\n      var lastIndex = 0;\n      var end = false;\n      var val;\n      while (!end) {\n        if (index === -1) {\n          index = input.length;\n          end = true;\n        }\n        val = input.slice(lastIndex, index).trim();\n        if (val || !end) {\n          values.push(val);\n        }\n        lastIndex = index + 1;\n        index = input.indexOf(comma, lastIndex);\n      }\n      return values;\n    }\n    function stringify(values, options) {\n      var settings = options || {};\n      var left = settings.padLeft === false ? empty : space;\n      var right = settings.padRight ? space : empty;\n      if (values[values.length - 1] === empty) {\n        values = values.concat(empty);\n      }\n      return values.join(right + comma + left).trim();\n    }\n  }\n});\n\n// node_modules/hastscript/factory.js\nvar require_factory = __commonJS({\n  \"node_modules/hastscript/factory.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var find = require_find();\n    var normalize = require_normalize();\n    var parseSelector = require_hast_util_parse_selector();\n    var spaces = require_space_separated_tokens().parse;\n    var commas = require_comma_separated_tokens().parse;\n    module.exports = factory;\n    var own = {}.hasOwnProperty;\n    function factory(schema, defaultTagName, caseSensitive) {\n      var adjust = caseSensitive ? createAdjustMap(caseSensitive) : null;\n      return h;\n      function h(selector, properties) {\n        var node = parseSelector(selector, defaultTagName);\n        var children = Array.prototype.slice.call(arguments, 2);\n        var name = node.tagName.toLowerCase();\n        var property;\n        node.tagName = adjust && own.call(adjust, name) ? adjust[name] : name;\n        if (properties && isChildren(properties, node)) {\n          children.unshift(properties);\n          properties = null;\n        }\n        if (properties) {\n          for (property in properties) {\n            addProperty(node.properties, property, properties[property]);\n          }\n        }\n        addChild(node.children, children);\n        if (node.tagName === \"template\") {\n          node.content = { type: \"root\", children: node.children };\n          node.children = [];\n        }\n        return node;\n      }\n      function addProperty(properties, key, value) {\n        var info;\n        var property;\n        var result;\n        if (value === null || value === void 0 || value !== value) {\n          return;\n        }\n        info = find(schema, key);\n        property = info.property;\n        result = value;\n        if (typeof result === \"string\") {\n          if (info.spaceSeparated) {\n            result = spaces(result);\n          } else if (info.commaSeparated) {\n            result = commas(result);\n          } else if (info.commaOrSpaceSeparated) {\n            result = spaces(commas(result).join(\" \"));\n          }\n        }\n        if (property === \"style\" && typeof value !== \"string\") {\n          result = style(result);\n        }\n        if (property === \"className\" && properties.className) {\n          result = properties.className.concat(result);\n        }\n        properties[property] = parsePrimitives(info, property, result);\n      }\n    }\n    function isChildren(value, node) {\n      return typeof value === \"string\" || \"length\" in value || isNode(node.tagName, value);\n    }\n    function isNode(tagName, value) {\n      var type = value.type;\n      if (tagName === \"input\" || !type || typeof type !== \"string\") {\n        return false;\n      }\n      if (typeof value.children === \"object\" && \"length\" in value.children) {\n        return true;\n      }\n      type = type.toLowerCase();\n      if (tagName === \"button\") {\n        return type !== \"menu\" && type !== \"submit\" && type !== \"reset\" && type !== \"button\";\n      }\n      return \"value\" in value;\n    }\n    function addChild(nodes, value) {\n      var index;\n      var length;\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        nodes.push({ type: \"text\", value: String(value) });\n        return;\n      }\n      if (typeof value === \"object\" && \"length\" in value) {\n        index = -1;\n        length = value.length;\n        while (++index < length) {\n          addChild(nodes, value[index]);\n        }\n        return;\n      }\n      if (typeof value !== \"object\" || !(\"type\" in value)) {\n        throw new Error(\"Expected node, nodes, or string, got `\" + value + \"`\");\n      }\n      nodes.push(value);\n    }\n    function parsePrimitives(info, name, value) {\n      var index;\n      var length;\n      var result;\n      if (typeof value !== \"object\" || !(\"length\" in value)) {\n        return parsePrimitive(info, name, value);\n      }\n      length = value.length;\n      index = -1;\n      result = [];\n      while (++index < length) {\n        result[index] = parsePrimitive(info, name, value[index]);\n      }\n      return result;\n    }\n    function parsePrimitive(info, name, value) {\n      var result = value;\n      if (info.number || info.positiveNumber) {\n        if (!isNaN(result) && result !== \"\") {\n          result = Number(result);\n        }\n      } else if (info.boolean || info.overloadedBoolean) {\n        if (typeof result === \"string\" && (result === \"\" || normalize(value) === normalize(name))) {\n          result = true;\n        }\n      }\n      return result;\n    }\n    function style(value) {\n      var result = [];\n      var key;\n      for (key in value) {\n        result.push([key, value[key]].join(\": \"));\n      }\n      return result.join(\"; \");\n    }\n    function createAdjustMap(values) {\n      var length = values.length;\n      var index = -1;\n      var result = {};\n      var value;\n      while (++index < length) {\n        value = values[index];\n        result[value.toLowerCase()] = value;\n      }\n      return result;\n    }\n  }\n});\n\n// node_modules/hastscript/html.js\nvar require_html3 = __commonJS({\n  \"node_modules/hastscript/html.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var schema = require_html2();\n    var factory = require_factory();\n    var html = factory(schema, \"div\");\n    html.displayName = \"html\";\n    module.exports = html;\n  }\n});\n\n// node_modules/hastscript/index.js\nvar require_hastscript = __commonJS({\n  \"node_modules/hastscript/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = require_html3();\n  }\n});\n\n// node_modules/character-entities-legacy/index.json\nvar require_character_entities_legacy = __commonJS({\n  \"node_modules/character-entities-legacy/index.json\"(exports, module) {\n    module.exports = {\n      AElig: \"Æ\",\n      AMP: \"&\",\n      Aacute: \"Á\",\n      Acirc: \"Â\",\n      Agrave: \"À\",\n      Aring: \"Å\",\n      Atilde: \"Ã\",\n      Auml: \"Ä\",\n      COPY: \"©\",\n      Ccedil: \"Ç\",\n      ETH: \"Ð\",\n      Eacute: \"É\",\n      Ecirc: \"Ê\",\n      Egrave: \"È\",\n      Euml: \"Ë\",\n      GT: \">\",\n      Iacute: \"Í\",\n      Icirc: \"Î\",\n      Igrave: \"Ì\",\n      Iuml: \"Ï\",\n      LT: \"<\",\n      Ntilde: \"Ñ\",\n      Oacute: \"Ó\",\n      Ocirc: \"Ô\",\n      Ograve: \"Ò\",\n      Oslash: \"Ø\",\n      Otilde: \"Õ\",\n      Ouml: \"Ö\",\n      QUOT: '\"',\n      REG: \"®\",\n      THORN: \"Þ\",\n      Uacute: \"Ú\",\n      Ucirc: \"Û\",\n      Ugrave: \"Ù\",\n      Uuml: \"Ü\",\n      Yacute: \"Ý\",\n      aacute: \"á\",\n      acirc: \"â\",\n      acute: \"´\",\n      aelig: \"æ\",\n      agrave: \"à\",\n      amp: \"&\",\n      aring: \"å\",\n      atilde: \"ã\",\n      auml: \"ä\",\n      brvbar: \"¦\",\n      ccedil: \"ç\",\n      cedil: \"¸\",\n      cent: \"¢\",\n      copy: \"©\",\n      curren: \"¤\",\n      deg: \"°\",\n      divide: \"÷\",\n      eacute: \"é\",\n      ecirc: \"ê\",\n      egrave: \"è\",\n      eth: \"ð\",\n      euml: \"ë\",\n      frac12: \"½\",\n      frac14: \"¼\",\n      frac34: \"¾\",\n      gt: \">\",\n      iacute: \"í\",\n      icirc: \"î\",\n      iexcl: \"¡\",\n      igrave: \"ì\",\n      iquest: \"¿\",\n      iuml: \"ï\",\n      laquo: \"«\",\n      lt: \"<\",\n      macr: \"¯\",\n      micro: \"µ\",\n      middot: \"·\",\n      nbsp: \" \",\n      not: \"¬\",\n      ntilde: \"ñ\",\n      oacute: \"ó\",\n      ocirc: \"ô\",\n      ograve: \"ò\",\n      ordf: \"ª\",\n      ordm: \"º\",\n      oslash: \"ø\",\n      otilde: \"õ\",\n      ouml: \"ö\",\n      para: \"¶\",\n      plusmn: \"±\",\n      pound: \"£\",\n      quot: '\"',\n      raquo: \"»\",\n      reg: \"®\",\n      sect: \"§\",\n      shy: \"­\",\n      sup1: \"¹\",\n      sup2: \"²\",\n      sup3: \"³\",\n      szlig: \"ß\",\n      thorn: \"þ\",\n      times: \"×\",\n      uacute: \"ú\",\n      ucirc: \"û\",\n      ugrave: \"ù\",\n      uml: \"¨\",\n      uuml: \"ü\",\n      yacute: \"ý\",\n      yen: \"¥\",\n      yuml: \"ÿ\"\n    };\n  }\n});\n\n// node_modules/character-reference-invalid/index.json\nvar require_character_reference_invalid = __commonJS({\n  \"node_modules/character-reference-invalid/index.json\"(exports, module) {\n    module.exports = {\n      \"0\": \"�\",\n      \"128\": \"€\",\n      \"130\": \"‚\",\n      \"131\": \"ƒ\",\n      \"132\": \"„\",\n      \"133\": \"…\",\n      \"134\": \"†\",\n      \"135\": \"‡\",\n      \"136\": \"ˆ\",\n      \"137\": \"‰\",\n      \"138\": \"Š\",\n      \"139\": \"‹\",\n      \"140\": \"Œ\",\n      \"142\": \"Ž\",\n      \"145\": \"‘\",\n      \"146\": \"’\",\n      \"147\": \"“\",\n      \"148\": \"”\",\n      \"149\": \"•\",\n      \"150\": \"–\",\n      \"151\": \"—\",\n      \"152\": \"˜\",\n      \"153\": \"™\",\n      \"154\": \"š\",\n      \"155\": \"›\",\n      \"156\": \"œ\",\n      \"158\": \"ž\",\n      \"159\": \"Ÿ\"\n    };\n  }\n});\n\n// node_modules/is-decimal/index.js\nvar require_is_decimal = __commonJS({\n  \"node_modules/is-decimal/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = decimal;\n    function decimal(character) {\n      var code = typeof character === \"string\" ? character.charCodeAt(0) : character;\n      return code >= 48 && code <= 57;\n    }\n  }\n});\n\n// node_modules/is-hexadecimal/index.js\nvar require_is_hexadecimal = __commonJS({\n  \"node_modules/is-hexadecimal/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = hexadecimal;\n    function hexadecimal(character) {\n      var code = typeof character === \"string\" ? character.charCodeAt(0) : character;\n      return code >= 97 && code <= 102 || code >= 65 && code <= 70 || code >= 48 && code <= 57;\n    }\n  }\n});\n\n// node_modules/is-alphabetical/index.js\nvar require_is_alphabetical = __commonJS({\n  \"node_modules/is-alphabetical/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = alphabetical;\n    function alphabetical(character) {\n      var code = typeof character === \"string\" ? character.charCodeAt(0) : character;\n      return code >= 97 && code <= 122 || code >= 65 && code <= 90;\n    }\n  }\n});\n\n// node_modules/is-alphanumerical/index.js\nvar require_is_alphanumerical = __commonJS({\n  \"node_modules/is-alphanumerical/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var alphabetical = require_is_alphabetical();\n    var decimal = require_is_decimal();\n    module.exports = alphanumerical;\n    function alphanumerical(character) {\n      return alphabetical(character) || decimal(character);\n    }\n  }\n});\n\n// node_modules/parse-entities/decode-entity.browser.js\nvar require_decode_entity_browser = __commonJS({\n  \"node_modules/parse-entities/decode-entity.browser.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var el;\n    var semicolon = 59;\n    module.exports = decodeEntity;\n    function decodeEntity(characters) {\n      var entity = \"&\" + characters + \";\";\n      var char;\n      el = el || document.createElement(\"i\");\n      el.innerHTML = entity;\n      char = el.textContent;\n      if (char.charCodeAt(char.length - 1) === semicolon && characters !== \"semi\") {\n        return false;\n      }\n      return char === entity ? false : char;\n    }\n  }\n});\n\n// node_modules/parse-entities/index.js\nvar require_parse_entities = __commonJS({\n  \"node_modules/parse-entities/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var legacy = require_character_entities_legacy();\n    var invalid = require_character_reference_invalid();\n    var decimal = require_is_decimal();\n    var hexadecimal = require_is_hexadecimal();\n    var alphanumerical = require_is_alphanumerical();\n    var decodeEntity = require_decode_entity_browser();\n    module.exports = parseEntities;\n    var own = {}.hasOwnProperty;\n    var fromCharCode = String.fromCharCode;\n    var noop = Function.prototype;\n    var defaults = {\n      warning: null,\n      reference: null,\n      text: null,\n      warningContext: null,\n      referenceContext: null,\n      textContext: null,\n      position: {},\n      additional: null,\n      attribute: false,\n      nonTerminated: true\n    };\n    var tab = 9;\n    var lineFeed = 10;\n    var formFeed = 12;\n    var space = 32;\n    var ampersand = 38;\n    var semicolon = 59;\n    var lessThan = 60;\n    var equalsTo = 61;\n    var numberSign = 35;\n    var uppercaseX = 88;\n    var lowercaseX = 120;\n    var replacementCharacter = 65533;\n    var name = \"named\";\n    var hexa = \"hexadecimal\";\n    var deci = \"decimal\";\n    var bases = {};\n    bases[hexa] = 16;\n    bases[deci] = 10;\n    var tests = {};\n    tests[name] = alphanumerical;\n    tests[deci] = decimal;\n    tests[hexa] = hexadecimal;\n    var namedNotTerminated = 1;\n    var numericNotTerminated = 2;\n    var namedEmpty = 3;\n    var numericEmpty = 4;\n    var namedUnknown = 5;\n    var numericDisallowed = 6;\n    var numericProhibited = 7;\n    var messages = {};\n    messages[namedNotTerminated] = \"Named character references must be terminated by a semicolon\";\n    messages[numericNotTerminated] = \"Numeric character references must be terminated by a semicolon\";\n    messages[namedEmpty] = \"Named character references cannot be empty\";\n    messages[numericEmpty] = \"Numeric character references cannot be empty\";\n    messages[namedUnknown] = \"Named character references must be known\";\n    messages[numericDisallowed] = \"Numeric character references cannot be disallowed\";\n    messages[numericProhibited] = \"Numeric character references cannot be outside the permissible Unicode range\";\n    function parseEntities(value, options) {\n      var settings = {};\n      var option;\n      var key;\n      if (!options) {\n        options = {};\n      }\n      for (key in defaults) {\n        option = options[key];\n        settings[key] = option === null || option === void 0 ? defaults[key] : option;\n      }\n      if (settings.position.indent || settings.position.start) {\n        settings.indent = settings.position.indent || [];\n        settings.position = settings.position.start;\n      }\n      return parse(value, settings);\n    }\n    function parse(value, settings) {\n      var additional = settings.additional;\n      var nonTerminated = settings.nonTerminated;\n      var handleText = settings.text;\n      var handleReference = settings.reference;\n      var handleWarning = settings.warning;\n      var textContext = settings.textContext;\n      var referenceContext = settings.referenceContext;\n      var warningContext = settings.warningContext;\n      var pos = settings.position;\n      var indent = settings.indent || [];\n      var length = value.length;\n      var index = 0;\n      var lines = -1;\n      var column = pos.column || 1;\n      var line = pos.line || 1;\n      var queue = \"\";\n      var result = [];\n      var entityCharacters;\n      var namedEntity;\n      var terminated;\n      var characters;\n      var character;\n      var reference;\n      var following;\n      var warning;\n      var reason;\n      var output;\n      var entity;\n      var begin;\n      var start;\n      var type;\n      var test;\n      var prev;\n      var next;\n      var diff;\n      var end;\n      if (typeof additional === \"string\") {\n        additional = additional.charCodeAt(0);\n      }\n      prev = now();\n      warning = handleWarning ? parseError : noop;\n      index--;\n      length++;\n      while (++index < length) {\n        if (character === lineFeed) {\n          column = indent[lines] || 1;\n        }\n        character = value.charCodeAt(index);\n        if (character === ampersand) {\n          following = value.charCodeAt(index + 1);\n          if (following === tab || following === lineFeed || following === formFeed || following === space || following === ampersand || following === lessThan || following !== following || additional && following === additional) {\n            queue += fromCharCode(character);\n            column++;\n            continue;\n          }\n          start = index + 1;\n          begin = start;\n          end = start;\n          if (following === numberSign) {\n            end = ++begin;\n            following = value.charCodeAt(end);\n            if (following === uppercaseX || following === lowercaseX) {\n              type = hexa;\n              end = ++begin;\n            } else {\n              type = deci;\n            }\n          } else {\n            type = name;\n          }\n          entityCharacters = \"\";\n          entity = \"\";\n          characters = \"\";\n          test = tests[type];\n          end--;\n          while (++end < length) {\n            following = value.charCodeAt(end);\n            if (!test(following)) {\n              break;\n            }\n            characters += fromCharCode(following);\n            if (type === name && own.call(legacy, characters)) {\n              entityCharacters = characters;\n              entity = legacy[characters];\n            }\n          }\n          terminated = value.charCodeAt(end) === semicolon;\n          if (terminated) {\n            end++;\n            namedEntity = type === name ? decodeEntity(characters) : false;\n            if (namedEntity) {\n              entityCharacters = characters;\n              entity = namedEntity;\n            }\n          }\n          diff = 1 + end - start;\n          if (!terminated && !nonTerminated) {\n          } else if (!characters) {\n            if (type !== name) {\n              warning(numericEmpty, diff);\n            }\n          } else if (type === name) {\n            if (terminated && !entity) {\n              warning(namedUnknown, 1);\n            } else {\n              if (entityCharacters !== characters) {\n                end = begin + entityCharacters.length;\n                diff = 1 + end - begin;\n                terminated = false;\n              }\n              if (!terminated) {\n                reason = entityCharacters ? namedNotTerminated : namedEmpty;\n                if (settings.attribute) {\n                  following = value.charCodeAt(end);\n                  if (following === equalsTo) {\n                    warning(reason, diff);\n                    entity = null;\n                  } else if (alphanumerical(following)) {\n                    entity = null;\n                  } else {\n                    warning(reason, diff);\n                  }\n                } else {\n                  warning(reason, diff);\n                }\n              }\n            }\n            reference = entity;\n          } else {\n            if (!terminated) {\n              warning(numericNotTerminated, diff);\n            }\n            reference = parseInt(characters, bases[type]);\n            if (prohibited(reference)) {\n              warning(numericProhibited, diff);\n              reference = fromCharCode(replacementCharacter);\n            } else if (reference in invalid) {\n              warning(numericDisallowed, diff);\n              reference = invalid[reference];\n            } else {\n              output = \"\";\n              if (disallowed(reference)) {\n                warning(numericDisallowed, diff);\n              }\n              if (reference > 65535) {\n                reference -= 65536;\n                output += fromCharCode(reference >>> (10 & 1023) | 55296);\n                reference = 56320 | reference & 1023;\n              }\n              reference = output + fromCharCode(reference);\n            }\n          }\n          if (reference) {\n            flush();\n            prev = now();\n            index = end - 1;\n            column += end - start + 1;\n            result.push(reference);\n            next = now();\n            next.offset++;\n            if (handleReference) {\n              handleReference.call(\n                referenceContext,\n                reference,\n                { start: prev, end: next },\n                value.slice(start - 1, end)\n              );\n            }\n            prev = next;\n          } else {\n            characters = value.slice(start - 1, end);\n            queue += characters;\n            column += characters.length;\n            index = end - 1;\n          }\n        } else {\n          if (character === 10) {\n            line++;\n            lines++;\n            column = 0;\n          }\n          if (character === character) {\n            queue += fromCharCode(character);\n            column++;\n          } else {\n            flush();\n          }\n        }\n      }\n      return result.join(\"\");\n      function now() {\n        return {\n          line,\n          column,\n          offset: index + (pos.offset || 0)\n        };\n      }\n      function parseError(code, offset) {\n        var position = now();\n        position.column += offset;\n        position.offset += offset;\n        handleWarning.call(warningContext, messages[code], position, code);\n      }\n      function flush() {\n        if (queue) {\n          result.push(queue);\n          if (handleText) {\n            handleText.call(textContext, queue, { start: prev, end: now() });\n          }\n          queue = \"\";\n        }\n      }\n    }\n    function prohibited(code) {\n      return code >= 55296 && code <= 57343 || code > 1114111;\n    }\n    function disallowed(code) {\n      return code >= 1 && code <= 8 || code === 11 || code >= 13 && code <= 31 || code >= 127 && code <= 159 || code >= 64976 && code <= 65007 || (code & 65535) === 65535 || (code & 65535) === 65534;\n    }\n  }\n});\n\n// node_modules/refractor/node_modules/prismjs/components/prism-core.js\nvar require_prism_core = __commonJS({\n  \"node_modules/refractor/node_modules/prismjs/components/prism-core.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var _self = typeof window !== \"undefined\" ? window : typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope ? self : {};\n    var Prism = function(_self2) {\n      var lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n      var uniqueId = 0;\n      var plainTextGrammar = {};\n      var _ = {\n        /**\n         * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n         * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n         * additional languages or plugins yourself.\n         *\n         * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n         *\n         * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n         * empty Prism object into the global scope before loading the Prism script like this:\n         *\n         * ```js\n         * window.Prism = window.Prism || {};\n         * Prism.manual = true;\n         * // add a new <script> to load Prism's script\n         * ```\n         *\n         * @default false\n         * @type {boolean}\n         * @memberof Prism\n         * @public\n         */\n        manual: _self2.Prism && _self2.Prism.manual,\n        /**\n         * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\n         * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\n         * own worker, you don't want it to do this.\n         *\n         * By setting this value to `true`, Prism will not add its own listeners to the worker.\n         *\n         * You obviously have to change this value before Prism executes. To do this, you can add an\n         * empty Prism object into the global scope before loading the Prism script like this:\n         *\n         * ```js\n         * window.Prism = window.Prism || {};\n         * Prism.disableWorkerMessageHandler = true;\n         * // Load Prism's script\n         * ```\n         *\n         * @default false\n         * @type {boolean}\n         * @memberof Prism\n         * @public\n         */\n        disableWorkerMessageHandler: _self2.Prism && _self2.Prism.disableWorkerMessageHandler,\n        /**\n         * A namespace for utility methods.\n         *\n         * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n         * change or disappear at any time.\n         *\n         * @namespace\n         * @memberof Prism\n         */\n        util: {\n          encode: function encode(tokens) {\n            if (tokens instanceof Token) {\n              return new Token(tokens.type, encode(tokens.content), tokens.alias);\n            } else if (Array.isArray(tokens)) {\n              return tokens.map(encode);\n            } else {\n              return tokens.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n            }\n          },\n          /**\n           * Returns the name of the type of the given value.\n           *\n           * @param {any} o\n           * @returns {string}\n           * @example\n           * type(null)      === 'Null'\n           * type(undefined) === 'Undefined'\n           * type(123)       === 'Number'\n           * type('foo')     === 'String'\n           * type(true)      === 'Boolean'\n           * type([1, 2])    === 'Array'\n           * type({})        === 'Object'\n           * type(String)    === 'Function'\n           * type(/abc+/)    === 'RegExp'\n           */\n          type: function(o) {\n            return Object.prototype.toString.call(o).slice(8, -1);\n          },\n          /**\n           * Returns a unique number for the given object. Later calls will still return the same number.\n           *\n           * @param {Object} obj\n           * @returns {number}\n           */\n          objId: function(obj) {\n            if (!obj[\"__id\"]) {\n              Object.defineProperty(obj, \"__id\", { value: ++uniqueId });\n            }\n            return obj[\"__id\"];\n          },\n          /**\n           * Creates a deep clone of the given object.\n           *\n           * The main intended use of this function is to clone language definitions.\n           *\n           * @param {T} o\n           * @param {Record<number, any>} [visited]\n           * @returns {T}\n           * @template T\n           */\n          clone: function deepClone(o, visited) {\n            visited = visited || {};\n            var clone;\n            var id;\n            switch (_.util.type(o)) {\n              case \"Object\":\n                id = _.util.objId(o);\n                if (visited[id]) {\n                  return visited[id];\n                }\n                clone = /** @type {Record<string, any>} */\n                {};\n                visited[id] = clone;\n                for (var key in o) {\n                  if (o.hasOwnProperty(key)) {\n                    clone[key] = deepClone(o[key], visited);\n                  }\n                }\n                return (\n                  /** @type {any} */\n                  clone\n                );\n              case \"Array\":\n                id = _.util.objId(o);\n                if (visited[id]) {\n                  return visited[id];\n                }\n                clone = [];\n                visited[id] = clone;\n                /** @type {Array} */\n                /** @type {any} */\n                o.forEach(function(v, i) {\n                  clone[i] = deepClone(v, visited);\n                });\n                return (\n                  /** @type {any} */\n                  clone\n                );\n              default:\n                return o;\n            }\n          },\n          /**\n           * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n           *\n           * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n           *\n           * @param {Element} element\n           * @returns {string}\n           */\n          getLanguage: function(element) {\n            while (element) {\n              var m = lang.exec(element.className);\n              if (m) {\n                return m[1].toLowerCase();\n              }\n              element = element.parentElement;\n            }\n            return \"none\";\n          },\n          /**\n           * Sets the Prism `language-xxxx` class of the given element.\n           *\n           * @param {Element} element\n           * @param {string} language\n           * @returns {void}\n           */\n          setLanguage: function(element, language) {\n            element.className = element.className.replace(RegExp(lang, \"gi\"), \"\");\n            element.classList.add(\"language-\" + language);\n          },\n          /**\n           * Returns the script element that is currently executing.\n           *\n           * This does __not__ work for line script element.\n           *\n           * @returns {HTMLScriptElement | null}\n           */\n          currentScript: function() {\n            if (typeof document === \"undefined\") {\n              return null;\n            }\n            if (\"currentScript\" in document && 1 < 2) {\n              return (\n                /** @type {any} */\n                document.currentScript\n              );\n            }\n            try {\n              throw new Error();\n            } catch (err) {\n              var src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n              if (src) {\n                var scripts = document.getElementsByTagName(\"script\");\n                for (var i in scripts) {\n                  if (scripts[i].src == src) {\n                    return scripts[i];\n                  }\n                }\n              }\n              return null;\n            }\n          },\n          /**\n           * Returns whether a given class is active for `element`.\n           *\n           * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n           * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n           * given class is just the given class with a `no-` prefix.\n           *\n           * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n           * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n           * ancestors have the given class or the negated version of it, then the default activation will be returned.\n           *\n           * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n           * version of it, the class is considered active.\n           *\n           * @param {Element} element\n           * @param {string} className\n           * @param {boolean} [defaultActivation=false]\n           * @returns {boolean}\n           */\n          isActive: function(element, className, defaultActivation) {\n            var no = \"no-\" + className;\n            while (element) {\n              var classList = element.classList;\n              if (classList.contains(className)) {\n                return true;\n              }\n              if (classList.contains(no)) {\n                return false;\n              }\n              element = element.parentElement;\n            }\n            return !!defaultActivation;\n          }\n        },\n        /**\n         * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n         *\n         * @namespace\n         * @memberof Prism\n         * @public\n         */\n        languages: {\n          /**\n           * The grammar for plain, unformatted text.\n           */\n          plain: plainTextGrammar,\n          plaintext: plainTextGrammar,\n          text: plainTextGrammar,\n          txt: plainTextGrammar,\n          /**\n           * Creates a deep copy of the language with the given id and appends the given tokens.\n           *\n           * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n           * will be overwritten at its original position.\n           *\n           * ## Best practices\n           *\n           * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n           * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n           * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n           *\n           * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n           * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n           *\n           * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n           * @param {Grammar} redef The new tokens to append.\n           * @returns {Grammar} The new language created.\n           * @public\n           * @example\n           * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n           *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n           *     // at its original position\n           *     'comment': { ... },\n           *     // CSS doesn't have a 'color' token, so this token will be appended\n           *     'color': /\\b(?:red|green|blue)\\b/\n           * });\n           */\n          extend: function(id, redef) {\n            var lang2 = _.util.clone(_.languages[id]);\n            for (var key in redef) {\n              lang2[key] = redef[key];\n            }\n            return lang2;\n          },\n          /**\n           * Inserts tokens _before_ another token in a language definition or any other grammar.\n           *\n           * ## Usage\n           *\n           * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n           * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n           * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n           * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n           * this:\n           *\n           * ```js\n           * Prism.languages.markup.style = {\n           *     // token\n           * };\n           * ```\n           *\n           * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n           * before existing tokens. For the CSS example above, you would use it like this:\n           *\n           * ```js\n           * Prism.languages.insertBefore('markup', 'cdata', {\n           *     'style': {\n           *         // token\n           *     }\n           * });\n           * ```\n           *\n           * ## Special cases\n           *\n           * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n           * will be ignored.\n           *\n           * This behavior can be used to insert tokens after `before`:\n           *\n           * ```js\n           * Prism.languages.insertBefore('markup', 'comment', {\n           *     'comment': Prism.languages.markup.comment,\n           *     // tokens after 'comment'\n           * });\n           * ```\n           *\n           * ## Limitations\n           *\n           * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n           * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n           * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n           * deleting properties which is necessary to insert at arbitrary positions.\n           *\n           * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n           * Instead, it will create a new object and replace all references to the target object with the new one. This\n           * can be done without temporarily deleting properties, so the iteration order is well-defined.\n           *\n           * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n           * you hold the target object in a variable, then the value of the variable will not change.\n           *\n           * ```js\n           * var oldMarkup = Prism.languages.markup;\n           * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n           *\n           * assert(oldMarkup !== Prism.languages.markup);\n           * assert(newMarkup === Prism.languages.markup);\n           * ```\n           *\n           * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n           * object to be modified.\n           * @param {string} before The key to insert before.\n           * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n           * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n           * object to be modified.\n           *\n           * Defaults to `Prism.languages`.\n           * @returns {Grammar} The new grammar object.\n           * @public\n           */\n          insertBefore: function(inside, before, insert, root) {\n            root = root || /** @type {any} */\n            _.languages;\n            var grammar = root[inside];\n            var ret = {};\n            for (var token in grammar) {\n              if (grammar.hasOwnProperty(token)) {\n                if (token == before) {\n                  for (var newToken in insert) {\n                    if (insert.hasOwnProperty(newToken)) {\n                      ret[newToken] = insert[newToken];\n                    }\n                  }\n                }\n                if (!insert.hasOwnProperty(token)) {\n                  ret[token] = grammar[token];\n                }\n              }\n            }\n            var old = root[inside];\n            root[inside] = ret;\n            _.languages.DFS(_.languages, function(key, value) {\n              if (value === old && key != inside) {\n                this[key] = ret;\n              }\n            });\n            return ret;\n          },\n          // Traverse a language definition with Depth First Search\n          DFS: function DFS(o, callback, type, visited) {\n            visited = visited || {};\n            var objId = _.util.objId;\n            for (var i in o) {\n              if (o.hasOwnProperty(i)) {\n                callback.call(o, i, o[i], type || i);\n                var property = o[i];\n                var propertyType = _.util.type(property);\n                if (propertyType === \"Object\" && !visited[objId(property)]) {\n                  visited[objId(property)] = true;\n                  DFS(property, callback, null, visited);\n                } else if (propertyType === \"Array\" && !visited[objId(property)]) {\n                  visited[objId(property)] = true;\n                  DFS(property, callback, i, visited);\n                }\n              }\n            }\n          }\n        },\n        plugins: {},\n        /**\n         * This is the most high-level function in Prism’s API.\n         * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n         * each one of them.\n         *\n         * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n         *\n         * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n         * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n         * @memberof Prism\n         * @public\n         */\n        highlightAll: function(async, callback) {\n          _.highlightAllUnder(document, async, callback);\n        },\n        /**\n         * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n         * {@link Prism.highlightElement} on each one of them.\n         *\n         * The following hooks will be run:\n         * 1. `before-highlightall`\n         * 2. `before-all-elements-highlight`\n         * 3. All hooks of {@link Prism.highlightElement} for each element.\n         *\n         * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n         * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n         * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n         * @memberof Prism\n         * @public\n         */\n        highlightAllUnder: function(container, async, callback) {\n          var env = {\n            callback,\n            container,\n            selector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n          };\n          _.hooks.run(\"before-highlightall\", env);\n          env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n          _.hooks.run(\"before-all-elements-highlight\", env);\n          for (var i = 0, element; element = env.elements[i++]; ) {\n            _.highlightElement(element, async === true, env.callback);\n          }\n        },\n        /**\n         * Highlights the code inside a single element.\n         *\n         * The following hooks will be run:\n         * 1. `before-sanity-check`\n         * 2. `before-highlight`\n         * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n         * 4. `before-insert`\n         * 5. `after-highlight`\n         * 6. `complete`\n         *\n         * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n         * the element's language.\n         *\n         * @param {Element} element The element containing the code.\n         * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n         * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n         * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n         * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n         *\n         * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n         * asynchronous highlighting to work. You can build your own bundle on the\n         * [Download page](https://prismjs.com/download.html).\n         * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n         * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n         * @memberof Prism\n         * @public\n         */\n        highlightElement: function(element, async, callback) {\n          var language = _.util.getLanguage(element);\n          var grammar = _.languages[language];\n          _.util.setLanguage(element, language);\n          var parent = element.parentElement;\n          if (parent && parent.nodeName.toLowerCase() === \"pre\") {\n            _.util.setLanguage(parent, language);\n          }\n          var code = element.textContent;\n          var env = {\n            element,\n            language,\n            grammar,\n            code\n          };\n          function insertHighlightedCode(highlightedCode) {\n            env.highlightedCode = highlightedCode;\n            _.hooks.run(\"before-insert\", env);\n            env.element.innerHTML = env.highlightedCode;\n            _.hooks.run(\"after-highlight\", env);\n            _.hooks.run(\"complete\", env);\n            callback && callback.call(env.element);\n          }\n          _.hooks.run(\"before-sanity-check\", env);\n          parent = env.element.parentElement;\n          if (parent && parent.nodeName.toLowerCase() === \"pre\" && !parent.hasAttribute(\"tabindex\")) {\n            parent.setAttribute(\"tabindex\", \"0\");\n          }\n          if (!env.code) {\n            _.hooks.run(\"complete\", env);\n            callback && callback.call(env.element);\n            return;\n          }\n          _.hooks.run(\"before-highlight\", env);\n          if (!env.grammar) {\n            insertHighlightedCode(_.util.encode(env.code));\n            return;\n          }\n          if (async && _self2.Worker) {\n            var worker = new Worker(_.filename);\n            worker.onmessage = function(evt) {\n              insertHighlightedCode(evt.data);\n            };\n            worker.postMessage(JSON.stringify({\n              language: env.language,\n              code: env.code,\n              immediateClose: true\n            }));\n          } else {\n            insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n          }\n        },\n        /**\n         * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n         * and the language definitions to use, and returns a string with the HTML produced.\n         *\n         * The following hooks will be run:\n         * 1. `before-tokenize`\n         * 2. `after-tokenize`\n         * 3. `wrap`: On each {@link Token}.\n         *\n         * @param {string} text A string with the code to be highlighted.\n         * @param {Grammar} grammar An object containing the tokens to use.\n         *\n         * Usually a language definition like `Prism.languages.markup`.\n         * @param {string} language The name of the language definition passed to `grammar`.\n         * @returns {string} The highlighted HTML.\n         * @memberof Prism\n         * @public\n         * @example\n         * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n         */\n        highlight: function(text, grammar, language) {\n          var env = {\n            code: text,\n            grammar,\n            language\n          };\n          _.hooks.run(\"before-tokenize\", env);\n          if (!env.grammar) {\n            throw new Error('The language \"' + env.language + '\" has no grammar.');\n          }\n          env.tokens = _.tokenize(env.code, env.grammar);\n          _.hooks.run(\"after-tokenize\", env);\n          return Token.stringify(_.util.encode(env.tokens), env.language);\n        },\n        /**\n         * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n         * and the language definitions to use, and returns an array with the tokenized code.\n         *\n         * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n         *\n         * This method could be useful in other contexts as well, as a very crude parser.\n         *\n         * @param {string} text A string with the code to be highlighted.\n         * @param {Grammar} grammar An object containing the tokens to use.\n         *\n         * Usually a language definition like `Prism.languages.markup`.\n         * @returns {TokenStream} An array of strings and tokens, a token stream.\n         * @memberof Prism\n         * @public\n         * @example\n         * let code = `var foo = 0;`;\n         * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n         * tokens.forEach(token => {\n         *     if (token instanceof Prism.Token && token.type === 'number') {\n         *         console.log(`Found numeric literal: ${token.content}`);\n         *     }\n         * });\n         */\n        tokenize: function(text, grammar) {\n          var rest = grammar.rest;\n          if (rest) {\n            for (var token in rest) {\n              grammar[token] = rest[token];\n            }\n            delete grammar.rest;\n          }\n          var tokenList = new LinkedList();\n          addAfter(tokenList, tokenList.head, text);\n          matchGrammar(text, tokenList, grammar, tokenList.head, 0);\n          return toArray(tokenList);\n        },\n        /**\n         * @namespace\n         * @memberof Prism\n         * @public\n         */\n        hooks: {\n          all: {},\n          /**\n           * Adds the given callback to the list of callbacks for the given hook.\n           *\n           * The callback will be invoked when the hook it is registered for is run.\n           * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n           *\n           * One callback function can be registered to multiple hooks and the same hook multiple times.\n           *\n           * @param {string} name The name of the hook.\n           * @param {HookCallback} callback The callback function which is given environment variables.\n           * @public\n           */\n          add: function(name, callback) {\n            var hooks = _.hooks.all;\n            hooks[name] = hooks[name] || [];\n            hooks[name].push(callback);\n          },\n          /**\n           * Runs a hook invoking all registered callbacks with the given environment variables.\n           *\n           * Callbacks will be invoked synchronously and in the order in which they were registered.\n           *\n           * @param {string} name The name of the hook.\n           * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n           * @public\n           */\n          run: function(name, env) {\n            var callbacks = _.hooks.all[name];\n            if (!callbacks || !callbacks.length) {\n              return;\n            }\n            for (var i = 0, callback; callback = callbacks[i++]; ) {\n              callback(env);\n            }\n          }\n        },\n        Token\n      };\n      _self2.Prism = _;\n      function Token(type, content, alias, matchedStr) {\n        this.type = type;\n        this.content = content;\n        this.alias = alias;\n        this.length = (matchedStr || \"\").length | 0;\n      }\n      Token.stringify = function stringify(o, language) {\n        if (typeof o == \"string\") {\n          return o;\n        }\n        if (Array.isArray(o)) {\n          var s = \"\";\n          o.forEach(function(e) {\n            s += stringify(e, language);\n          });\n          return s;\n        }\n        var env = {\n          type: o.type,\n          content: stringify(o.content, language),\n          tag: \"span\",\n          classes: [\"token\", o.type],\n          attributes: {},\n          language\n        };\n        var aliases = o.alias;\n        if (aliases) {\n          if (Array.isArray(aliases)) {\n            Array.prototype.push.apply(env.classes, aliases);\n          } else {\n            env.classes.push(aliases);\n          }\n        }\n        _.hooks.run(\"wrap\", env);\n        var attributes = \"\";\n        for (var name in env.attributes) {\n          attributes += \" \" + name + '=\"' + (env.attributes[name] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n        }\n        return \"<\" + env.tag + ' class=\"' + env.classes.join(\" \") + '\"' + attributes + \">\" + env.content + \"</\" + env.tag + \">\";\n      };\n      function matchPattern(pattern, pos, text, lookbehind) {\n        pattern.lastIndex = pos;\n        var match = pattern.exec(text);\n        if (match && lookbehind && match[1]) {\n          var lookbehindLength = match[1].length;\n          match.index += lookbehindLength;\n          match[0] = match[0].slice(lookbehindLength);\n        }\n        return match;\n      }\n      function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n        for (var token in grammar) {\n          if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n            continue;\n          }\n          var patterns = grammar[token];\n          patterns = Array.isArray(patterns) ? patterns : [patterns];\n          for (var j = 0; j < patterns.length; ++j) {\n            if (rematch && rematch.cause == token + \",\" + j) {\n              return;\n            }\n            var patternObj = patterns[j];\n            var inside = patternObj.inside;\n            var lookbehind = !!patternObj.lookbehind;\n            var greedy = !!patternObj.greedy;\n            var alias = patternObj.alias;\n            if (greedy && !patternObj.pattern.global) {\n              var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n              patternObj.pattern = RegExp(patternObj.pattern.source, flags + \"g\");\n            }\n            var pattern = patternObj.pattern || patternObj;\n            for (var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {\n              if (rematch && pos >= rematch.reach) {\n                break;\n              }\n              var str = currentNode.value;\n              if (tokenList.length > text.length) {\n                return;\n              }\n              if (str instanceof Token) {\n                continue;\n              }\n              var removeCount = 1;\n              var match;\n              if (greedy) {\n                match = matchPattern(pattern, pos, text, lookbehind);\n                if (!match || match.index >= text.length) {\n                  break;\n                }\n                var from = match.index;\n                var to = match.index + match[0].length;\n                var p = pos;\n                p += currentNode.value.length;\n                while (from >= p) {\n                  currentNode = currentNode.next;\n                  p += currentNode.value.length;\n                }\n                p -= currentNode.value.length;\n                pos = p;\n                if (currentNode.value instanceof Token) {\n                  continue;\n                }\n                for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === \"string\"); k = k.next) {\n                  removeCount++;\n                  p += k.value.length;\n                }\n                removeCount--;\n                str = text.slice(pos, p);\n                match.index -= pos;\n              } else {\n                match = matchPattern(pattern, 0, str, lookbehind);\n                if (!match) {\n                  continue;\n                }\n              }\n              var from = match.index;\n              var matchStr = match[0];\n              var before = str.slice(0, from);\n              var after = str.slice(from + matchStr.length);\n              var reach = pos + str.length;\n              if (rematch && reach > rematch.reach) {\n                rematch.reach = reach;\n              }\n              var removeFrom = currentNode.prev;\n              if (before) {\n                removeFrom = addAfter(tokenList, removeFrom, before);\n                pos += before.length;\n              }\n              removeRange(tokenList, removeFrom, removeCount);\n              var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n              currentNode = addAfter(tokenList, removeFrom, wrapped);\n              if (after) {\n                addAfter(tokenList, currentNode, after);\n              }\n              if (removeCount > 1) {\n                var nestedRematch = {\n                  cause: token + \",\" + j,\n                  reach\n                };\n                matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n                if (rematch && nestedRematch.reach > rematch.reach) {\n                  rematch.reach = nestedRematch.reach;\n                }\n              }\n            }\n          }\n        }\n      }\n      function LinkedList() {\n        var head = { value: null, prev: null, next: null };\n        var tail = { value: null, prev: head, next: null };\n        head.next = tail;\n        this.head = head;\n        this.tail = tail;\n        this.length = 0;\n      }\n      function addAfter(list, node, value) {\n        var next = node.next;\n        var newNode = { value, prev: node, next };\n        node.next = newNode;\n        next.prev = newNode;\n        list.length++;\n        return newNode;\n      }\n      function removeRange(list, node, count) {\n        var next = node.next;\n        for (var i = 0; i < count && next !== list.tail; i++) {\n          next = next.next;\n        }\n        node.next = next;\n        next.prev = node;\n        list.length -= i;\n      }\n      function toArray(list) {\n        var array = [];\n        var node = list.head.next;\n        while (node !== list.tail) {\n          array.push(node.value);\n          node = node.next;\n        }\n        return array;\n      }\n      if (!_self2.document) {\n        if (!_self2.addEventListener) {\n          return _;\n        }\n        if (!_.disableWorkerMessageHandler) {\n          _self2.addEventListener(\"message\", function(evt) {\n            var message = JSON.parse(evt.data);\n            var lang2 = message.language;\n            var code = message.code;\n            var immediateClose = message.immediateClose;\n            _self2.postMessage(_.highlight(code, _.languages[lang2], lang2));\n            if (immediateClose) {\n              _self2.close();\n            }\n          }, false);\n        }\n        return _;\n      }\n      var script = _.util.currentScript();\n      if (script) {\n        _.filename = script.src;\n        if (script.hasAttribute(\"data-manual\")) {\n          _.manual = true;\n        }\n      }\n      function highlightAutomaticallyCallback() {\n        if (!_.manual) {\n          _.highlightAll();\n        }\n      }\n      if (!_.manual) {\n        var readyState = document.readyState;\n        if (readyState === \"loading\" || readyState === \"interactive\" && script && script.defer) {\n          document.addEventListener(\"DOMContentLoaded\", highlightAutomaticallyCallback);\n        } else {\n          if (window.requestAnimationFrame) {\n            window.requestAnimationFrame(highlightAutomaticallyCallback);\n          } else {\n            window.setTimeout(highlightAutomaticallyCallback, 16);\n          }\n        }\n      }\n      return _;\n    }(_self);\n    if (typeof module !== \"undefined\" && module.exports) {\n      module.exports = Prism;\n    }\n    if (typeof global !== \"undefined\") {\n      global.Prism = Prism;\n    }\n  }\n});\n\n// node_modules/refractor/core.js\nvar require_core = __commonJS({\n  \"node_modules/refractor/core.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var ctx = typeof globalThis === \"object\" ? globalThis : typeof self === \"object\" ? self : typeof window === \"object\" ? window : typeof global === \"object\" ? global : {};\n    var restore = capture();\n    ctx.Prism = { manual: true, disableWorkerMessageHandler: true };\n    var h = require_hastscript();\n    var decode = require_parse_entities();\n    var Prism = require_prism_core();\n    var markup = require_markup();\n    var css = require_css();\n    var clike = require_clike();\n    var js = require_javascript();\n    restore();\n    var own = {}.hasOwnProperty;\n    function Refractor() {\n    }\n    Refractor.prototype = Prism;\n    var refract = new Refractor();\n    module.exports = refract;\n    refract.highlight = highlight;\n    refract.register = register;\n    refract.alias = alias;\n    refract.registered = registered;\n    refract.listLanguages = listLanguages;\n    register(markup);\n    register(css);\n    register(clike);\n    register(js);\n    refract.util.encode = encode;\n    refract.Token.stringify = stringify;\n    function register(grammar) {\n      if (typeof grammar !== \"function\" || !grammar.displayName) {\n        throw new Error(\"Expected `function` for `grammar`, got `\" + grammar + \"`\");\n      }\n      if (refract.languages[grammar.displayName] === void 0) {\n        grammar(refract);\n      }\n    }\n    function alias(name, alias2) {\n      var languages = refract.languages;\n      var map = name;\n      var key;\n      var list;\n      var length;\n      var index;\n      if (alias2) {\n        map = {};\n        map[name] = alias2;\n      }\n      for (key in map) {\n        list = map[key];\n        list = typeof list === \"string\" ? [list] : list;\n        length = list.length;\n        index = -1;\n        while (++index < length) {\n          languages[list[index]] = languages[key];\n        }\n      }\n    }\n    function highlight(value, name) {\n      var sup = Prism.highlight;\n      var grammar;\n      if (typeof value !== \"string\") {\n        throw new Error(\"Expected `string` for `value`, got `\" + value + \"`\");\n      }\n      if (refract.util.type(name) === \"Object\") {\n        grammar = name;\n        name = null;\n      } else {\n        if (typeof name !== \"string\") {\n          throw new Error(\"Expected `string` for `name`, got `\" + name + \"`\");\n        }\n        if (own.call(refract.languages, name)) {\n          grammar = refract.languages[name];\n        } else {\n          throw new Error(\"Unknown language: `\" + name + \"` is not registered\");\n        }\n      }\n      return sup.call(this, value, grammar, name);\n    }\n    function registered(language) {\n      if (typeof language !== \"string\") {\n        throw new Error(\"Expected `string` for `language`, got `\" + language + \"`\");\n      }\n      return own.call(refract.languages, language);\n    }\n    function listLanguages() {\n      var languages = refract.languages;\n      var list = [];\n      var language;\n      for (language in languages) {\n        if (own.call(languages, language) && typeof languages[language] === \"object\") {\n          list.push(language);\n        }\n      }\n      return list;\n    }\n    function stringify(value, language, parent) {\n      var env;\n      if (typeof value === \"string\") {\n        return { type: \"text\", value };\n      }\n      if (refract.util.type(value) === \"Array\") {\n        return stringifyAll(value, language);\n      }\n      env = {\n        type: value.type,\n        content: refract.Token.stringify(value.content, language, parent),\n        tag: \"span\",\n        classes: [\"token\", value.type],\n        attributes: {},\n        language,\n        parent\n      };\n      if (value.alias) {\n        env.classes = env.classes.concat(value.alias);\n      }\n      refract.hooks.run(\"wrap\", env);\n      return h(\n        env.tag + \".\" + env.classes.join(\".\"),\n        attributes(env.attributes),\n        env.content\n      );\n    }\n    function stringifyAll(values, language) {\n      var result = [];\n      var length = values.length;\n      var index = -1;\n      var value;\n      while (++index < length) {\n        value = values[index];\n        if (value !== \"\" && value !== null && value !== void 0) {\n          result.push(value);\n        }\n      }\n      index = -1;\n      length = result.length;\n      while (++index < length) {\n        value = result[index];\n        result[index] = refract.Token.stringify(value, language, result);\n      }\n      return result;\n    }\n    function encode(tokens) {\n      return tokens;\n    }\n    function attributes(attrs) {\n      var key;\n      for (key in attrs) {\n        attrs[key] = decode(attrs[key]);\n      }\n      return attrs;\n    }\n    function capture() {\n      var defined = \"Prism\" in ctx;\n      var current = defined ? ctx.Prism : void 0;\n      return restore2;\n      function restore2() {\n        if (defined) {\n          ctx.Prism = current;\n        } else {\n          delete ctx.Prism;\n        }\n        defined = void 0;\n        current = void 0;\n      }\n    }\n  }\n});\n\nexport {\n  require_core\n};\n/*! Bundled license information:\n\nprismjs/components/prism-core.js:\n  (**\n   * Prism: Lightweight, robust, elegant syntax highlighting\n   *\n   * @license MIT <https://opensource.org/licenses/MIT>\n   * @author Lea Verou <https://lea.verou.me>\n   * @namespace\n   * @public\n   *)\n*/\n//# sourceMappingURL=chunk-WKT44JLE.js.map\n",
      "start": 1703289478630,
      "end": 1703289478893,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1703289478893,
      "end": 1703289478893,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703289478893,
      "end": 1703289478893,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703289478893,
      "end": 1703289478893,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703289478893,
      "end": 1703289478893,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703289478893,
      "end": 1703289478893,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703289478893,
      "end": 1703289478893,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703289478893,
      "end": 1703289478893,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703289478893,
      "end": 1703289478893,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703289478893,
      "end": 1703289478893,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703289478893,
      "end": 1703289478893,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703289478893,
      "end": 1703289478893,
      "order": "normal"
    },
    {
      "name": "vite:client-inject",
      "start": 1703289478893,
      "end": 1703289478893,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "\"use strict\";\n(() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n    // If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n    mod\n  ));\n\n  // node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\n  var require_base64_js = __commonJS({\n    \"node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\"(exports) {\n      \"use strict\";\n      init_dist();\n      exports.byteLength = byteLength;\n      exports.toByteArray = toByteArray;\n      exports.fromByteArray = fromByteArray;\n      var lookup = [];\n      var revLookup = [];\n      var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n      var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n      for (i = 0, len = code.length; i < len; ++i) {\n        lookup[i] = code[i];\n        revLookup[code.charCodeAt(i)] = i;\n      }\n      var i;\n      var len;\n      revLookup[\"-\".charCodeAt(0)] = 62;\n      revLookup[\"_\".charCodeAt(0)] = 63;\n      function getLens(b64) {\n        var len2 = b64.length;\n        if (len2 % 4 > 0) {\n          throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        }\n        var validLen = b64.indexOf(\"=\");\n        if (validLen === -1)\n          validLen = len2;\n        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n        return [validLen, placeHoldersLen];\n      }\n      function byteLength(b64) {\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n      function _byteLength(b64, validLen, placeHoldersLen) {\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n      function toByteArray(b64) {\n        var tmp;\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n        var curByte = 0;\n        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n        var i2;\n        for (i2 = 0; i2 < len2; i2 += 4) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n          arr[curByte++] = tmp >> 16 & 255;\n          arr[curByte++] = tmp >> 8 & 255;\n          arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 2) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n          arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 1) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n          arr[curByte++] = tmp >> 8 & 255;\n          arr[curByte++] = tmp & 255;\n        }\n        return arr;\n      }\n      function tripletToBase64(num) {\n        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n      }\n      function encodeChunk(uint8, start, end) {\n        var tmp;\n        var output = [];\n        for (var i2 = start; i2 < end; i2 += 3) {\n          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n          output.push(tripletToBase64(tmp));\n        }\n        return output.join(\"\");\n      }\n      function fromByteArray(uint8) {\n        var tmp;\n        var len2 = uint8.length;\n        var extraBytes = len2 % 3;\n        var parts = [];\n        var maxChunkLength = 16383;\n        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\n          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n        }\n        if (extraBytes === 1) {\n          tmp = uint8[len2 - 1];\n          parts.push(\n            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\"\n          );\n        } else if (extraBytes === 2) {\n          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n          parts.push(\n            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\"\n          );\n        }\n        return parts.join(\"\");\n      }\n    }\n  });\n\n  // node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\n  var require_ieee754 = __commonJS({\n    \"node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\"(exports) {\n      init_dist();\n      exports.read = function(buffer, offset, isLE, mLen, nBytes) {\n        var e, m;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var nBits = -7;\n        var i = isLE ? nBytes - 1 : 0;\n        var d = isLE ? -1 : 1;\n        var s2 = buffer[offset + i];\n        i += d;\n        e = s2 & (1 << -nBits) - 1;\n        s2 >>= -nBits;\n        nBits += eLen;\n        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {\n        }\n        m = e & (1 << -nBits) - 1;\n        e >>= -nBits;\n        nBits += mLen;\n        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {\n        }\n        if (e === 0) {\n          e = 1 - eBias;\n        } else if (e === eMax) {\n          return m ? NaN : (s2 ? -1 : 1) * Infinity;\n        } else {\n          m = m + Math.pow(2, mLen);\n          e = e - eBias;\n        }\n        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);\n      };\n      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n        var e, m, c;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n        var i = isLE ? 0 : nBytes - 1;\n        var d = isLE ? 1 : -1;\n        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n        value = Math.abs(value);\n        if (isNaN(value) || value === Infinity) {\n          m = isNaN(value) ? 1 : 0;\n          e = eMax;\n        } else {\n          e = Math.floor(Math.log(value) / Math.LN2);\n          if (value * (c = Math.pow(2, -e)) < 1) {\n            e--;\n            c *= 2;\n          }\n          if (e + eBias >= 1) {\n            value += rt / c;\n          } else {\n            value += rt * Math.pow(2, 1 - eBias);\n          }\n          if (value * c >= 2) {\n            e++;\n            c /= 2;\n          }\n          if (e + eBias >= eMax) {\n            m = 0;\n            e = eMax;\n          } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen);\n            e = e + eBias;\n          } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n            e = 0;\n          }\n        }\n        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {\n        }\n        e = e << mLen | m;\n        eLen += mLen;\n        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {\n        }\n        buffer[offset + i - d] |= s2 * 128;\n      };\n    }\n  });\n\n  // node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js\n  var require_buffer = __commonJS({\n    \"node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js\"(exports) {\n      \"use strict\";\n      init_dist();\n      var base64 = require_base64_js();\n      var ieee754 = require_ieee754();\n      var customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") : null;\n      exports.Buffer = Buffer2;\n      exports.SlowBuffer = SlowBuffer;\n      exports.INSPECT_MAX_BYTES = 50;\n      var K_MAX_LENGTH = 2147483647;\n      exports.kMaxLength = K_MAX_LENGTH;\n      var { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;\n      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();\n      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n        console.error(\n          \"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"\n        );\n      }\n      function typedArraySupport() {\n        try {\n          const arr = new GlobalUint8Array(1);\n          const proto = { foo: function() {\n            return 42;\n          } };\n          Object.setPrototypeOf(proto, GlobalUint8Array.prototype);\n          Object.setPrototypeOf(arr, proto);\n          return arr.foo() === 42;\n        } catch (e) {\n          return false;\n        }\n      }\n      Object.defineProperty(Buffer2.prototype, \"parent\", {\n        enumerable: true,\n        get: function() {\n          if (!Buffer2.isBuffer(this))\n            return void 0;\n          return this.buffer;\n        }\n      });\n      Object.defineProperty(Buffer2.prototype, \"offset\", {\n        enumerable: true,\n        get: function() {\n          if (!Buffer2.isBuffer(this))\n            return void 0;\n          return this.byteOffset;\n        }\n      });\n      function createBuffer(length) {\n        if (length > K_MAX_LENGTH) {\n          throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n        }\n        const buf = new GlobalUint8Array(length);\n        Object.setPrototypeOf(buf, Buffer2.prototype);\n        return buf;\n      }\n      function Buffer2(arg, encodingOrOffset, length) {\n        if (typeof arg === \"number\") {\n          if (typeof encodingOrOffset === \"string\") {\n            throw new TypeError(\n              'The \"string\" argument must be of type string. Received type number'\n            );\n          }\n          return allocUnsafe(arg);\n        }\n        return from(arg, encodingOrOffset, length);\n      }\n      Buffer2.poolSize = 8192;\n      function from(value, encodingOrOffset, length) {\n        if (typeof value === \"string\") {\n          return fromString(value, encodingOrOffset);\n        }\n        if (GlobalArrayBuffer.isView(value)) {\n          return fromArrayView(value);\n        }\n        if (value == null) {\n          throw new TypeError(\n            \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n          );\n        }\n        if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n        if (typeof GlobalSharedArrayBuffer !== \"undefined\" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n        if (typeof value === \"number\") {\n          throw new TypeError(\n            'The \"value\" argument must not be of type number. Received type number'\n          );\n        }\n        const valueOf = value.valueOf && value.valueOf();\n        if (valueOf != null && valueOf !== value) {\n          return Buffer2.from(valueOf, encodingOrOffset, length);\n        }\n        const b = fromObject(value);\n        if (b)\n          return b;\n        if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n          return Buffer2.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n        }\n        throw new TypeError(\n          \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n        );\n      }\n      Buffer2.from = function(value, encodingOrOffset, length) {\n        return from(value, encodingOrOffset, length);\n      };\n      Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);\n      Object.setPrototypeOf(Buffer2, GlobalUint8Array);\n      function assertSize(size) {\n        if (typeof size !== \"number\") {\n          throw new TypeError('\"size\" argument must be of type number');\n        } else if (size < 0) {\n          throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n        }\n      }\n      function alloc(size, fill, encoding) {\n        assertSize(size);\n        if (size <= 0) {\n          return createBuffer(size);\n        }\n        if (fill !== void 0) {\n          return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n        }\n        return createBuffer(size);\n      }\n      Buffer2.alloc = function(size, fill, encoding) {\n        return alloc(size, fill, encoding);\n      };\n      function allocUnsafe(size) {\n        assertSize(size);\n        return createBuffer(size < 0 ? 0 : checked(size) | 0);\n      }\n      Buffer2.allocUnsafe = function(size) {\n        return allocUnsafe(size);\n      };\n      Buffer2.allocUnsafeSlow = function(size) {\n        return allocUnsafe(size);\n      };\n      function fromString(string, encoding) {\n        if (typeof encoding !== \"string\" || encoding === \"\") {\n          encoding = \"utf8\";\n        }\n        if (!Buffer2.isEncoding(encoding)) {\n          throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        const length = byteLength(string, encoding) | 0;\n        let buf = createBuffer(length);\n        const actual = buf.write(string, encoding);\n        if (actual !== length) {\n          buf = buf.slice(0, actual);\n        }\n        return buf;\n      }\n      function fromArrayLike(array) {\n        const length = array.length < 0 ? 0 : checked(array.length) | 0;\n        const buf = createBuffer(length);\n        for (let i = 0; i < length; i += 1) {\n          buf[i] = array[i] & 255;\n        }\n        return buf;\n      }\n      function fromArrayView(arrayView) {\n        if (isInstance(arrayView, GlobalUint8Array)) {\n          const copy = new GlobalUint8Array(arrayView);\n          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n        }\n        return fromArrayLike(arrayView);\n      }\n      function fromArrayBuffer(array, byteOffset, length) {\n        if (byteOffset < 0 || array.byteLength < byteOffset) {\n          throw new RangeError('\"offset\" is outside of buffer bounds');\n        }\n        if (array.byteLength < byteOffset + (length || 0)) {\n          throw new RangeError('\"length\" is outside of buffer bounds');\n        }\n        let buf;\n        if (byteOffset === void 0 && length === void 0) {\n          buf = new GlobalUint8Array(array);\n        } else if (length === void 0) {\n          buf = new GlobalUint8Array(array, byteOffset);\n        } else {\n          buf = new GlobalUint8Array(array, byteOffset, length);\n        }\n        Object.setPrototypeOf(buf, Buffer2.prototype);\n        return buf;\n      }\n      function fromObject(obj) {\n        if (Buffer2.isBuffer(obj)) {\n          const len = checked(obj.length) | 0;\n          const buf = createBuffer(len);\n          if (buf.length === 0) {\n            return buf;\n          }\n          obj.copy(buf, 0, 0, len);\n          return buf;\n        }\n        if (obj.length !== void 0) {\n          if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n            return createBuffer(0);\n          }\n          return fromArrayLike(obj);\n        }\n        if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n          return fromArrayLike(obj.data);\n        }\n      }\n      function checked(length) {\n        if (length >= K_MAX_LENGTH) {\n          throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n        }\n        return length | 0;\n      }\n      function SlowBuffer(length) {\n        if (+length != length) {\n          length = 0;\n        }\n        return Buffer2.alloc(+length);\n      }\n      Buffer2.isBuffer = function isBuffer(b) {\n        return b != null && b._isBuffer === true && b !== Buffer2.prototype;\n      };\n      Buffer2.compare = function compare(a, b) {\n        if (isInstance(a, GlobalUint8Array))\n          a = Buffer2.from(a, a.offset, a.byteLength);\n        if (isInstance(b, GlobalUint8Array))\n          b = Buffer2.from(b, b.offset, b.byteLength);\n        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {\n          throw new TypeError(\n            'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n          );\n        }\n        if (a === b)\n          return 0;\n        let x = a.length;\n        let y = b.length;\n        for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n          if (a[i] !== b[i]) {\n            x = a[i];\n            y = b[i];\n            break;\n          }\n        }\n        if (x < y)\n          return -1;\n        if (y < x)\n          return 1;\n        return 0;\n      };\n      Buffer2.isEncoding = function isEncoding(encoding) {\n        switch (String(encoding).toLowerCase()) {\n          case \"hex\":\n          case \"utf8\":\n          case \"utf-8\":\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n          case \"base64\":\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return true;\n          default:\n            return false;\n        }\n      };\n      Buffer2.concat = function concat(list, length) {\n        if (!Array.isArray(list)) {\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        }\n        if (list.length === 0) {\n          return Buffer2.alloc(0);\n        }\n        let i;\n        if (length === void 0) {\n          length = 0;\n          for (i = 0; i < list.length; ++i) {\n            length += list[i].length;\n          }\n        }\n        const buffer = Buffer2.allocUnsafe(length);\n        let pos = 0;\n        for (i = 0; i < list.length; ++i) {\n          let buf = list[i];\n          if (isInstance(buf, GlobalUint8Array)) {\n            if (pos + buf.length > buffer.length) {\n              if (!Buffer2.isBuffer(buf))\n                buf = Buffer2.from(buf);\n              buf.copy(buffer, pos);\n            } else {\n              GlobalUint8Array.prototype.set.call(\n                buffer,\n                buf,\n                pos\n              );\n            }\n          } else if (!Buffer2.isBuffer(buf)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers');\n          } else {\n            buf.copy(buffer, pos);\n          }\n          pos += buf.length;\n        }\n        return buffer;\n      };\n      function byteLength(string, encoding) {\n        if (Buffer2.isBuffer(string)) {\n          return string.length;\n        }\n        if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {\n          return string.byteLength;\n        }\n        if (typeof string !== \"string\") {\n          throw new TypeError(\n            'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string\n          );\n        }\n        const len = string.length;\n        const mustMatch = arguments.length > 2 && arguments[2] === true;\n        if (!mustMatch && len === 0)\n          return 0;\n        let loweredCase = false;\n        for (; ; ) {\n          switch (encoding) {\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n              return len;\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8ToBytes(string).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return len * 2;\n            case \"hex\":\n              return len >>> 1;\n            case \"base64\":\n              return base64ToBytes(string).length;\n            default:\n              if (loweredCase) {\n                return mustMatch ? -1 : utf8ToBytes(string).length;\n              }\n              encoding = (\"\" + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n      Buffer2.byteLength = byteLength;\n      function slowToString(encoding, start, end) {\n        let loweredCase = false;\n        if (start === void 0 || start < 0) {\n          start = 0;\n        }\n        if (start > this.length) {\n          return \"\";\n        }\n        if (end === void 0 || end > this.length) {\n          end = this.length;\n        }\n        if (end <= 0) {\n          return \"\";\n        }\n        end >>>= 0;\n        start >>>= 0;\n        if (end <= start) {\n          return \"\";\n        }\n        if (!encoding)\n          encoding = \"utf8\";\n        while (true) {\n          switch (encoding) {\n            case \"hex\":\n              return hexSlice(this, start, end);\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8Slice(this, start, end);\n            case \"ascii\":\n              return asciiSlice(this, start, end);\n            case \"latin1\":\n            case \"binary\":\n              return latin1Slice(this, start, end);\n            case \"base64\":\n              return base64Slice(this, start, end);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return utf16leSlice(this, start, end);\n            default:\n              if (loweredCase)\n                throw new TypeError(\"Unknown encoding: \" + encoding);\n              encoding = (encoding + \"\").toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n      Buffer2.prototype._isBuffer = true;\n      function swap(b, n, m) {\n        const i = b[n];\n        b[n] = b[m];\n        b[m] = i;\n      }\n      Buffer2.prototype.swap16 = function swap16() {\n        const len = this.length;\n        if (len % 2 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n        }\n        for (let i = 0; i < len; i += 2) {\n          swap(this, i, i + 1);\n        }\n        return this;\n      };\n      Buffer2.prototype.swap32 = function swap32() {\n        const len = this.length;\n        if (len % 4 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n        }\n        for (let i = 0; i < len; i += 4) {\n          swap(this, i, i + 3);\n          swap(this, i + 1, i + 2);\n        }\n        return this;\n      };\n      Buffer2.prototype.swap64 = function swap64() {\n        const len = this.length;\n        if (len % 8 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n        }\n        for (let i = 0; i < len; i += 8) {\n          swap(this, i, i + 7);\n          swap(this, i + 1, i + 6);\n          swap(this, i + 2, i + 5);\n          swap(this, i + 3, i + 4);\n        }\n        return this;\n      };\n      Buffer2.prototype.toString = function toString() {\n        const length = this.length;\n        if (length === 0)\n          return \"\";\n        if (arguments.length === 0)\n          return utf8Slice(this, 0, length);\n        return slowToString.apply(this, arguments);\n      };\n      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;\n      Buffer2.prototype.equals = function equals(b) {\n        if (!Buffer2.isBuffer(b))\n          throw new TypeError(\"Argument must be a Buffer\");\n        if (this === b)\n          return true;\n        return Buffer2.compare(this, b) === 0;\n      };\n      Buffer2.prototype.inspect = function inspect() {\n        let str = \"\";\n        const max = exports.INSPECT_MAX_BYTES;\n        str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n        if (this.length > max)\n          str += \" ... \";\n        return \"<Buffer \" + str + \">\";\n      };\n      if (customInspectSymbol) {\n        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;\n      }\n      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n        if (isInstance(target, GlobalUint8Array)) {\n          target = Buffer2.from(target, target.offset, target.byteLength);\n        }\n        if (!Buffer2.isBuffer(target)) {\n          throw new TypeError(\n            'The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target\n          );\n        }\n        if (start === void 0) {\n          start = 0;\n        }\n        if (end === void 0) {\n          end = target ? target.length : 0;\n        }\n        if (thisStart === void 0) {\n          thisStart = 0;\n        }\n        if (thisEnd === void 0) {\n          thisEnd = this.length;\n        }\n        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n          throw new RangeError(\"out of range index\");\n        }\n        if (thisStart >= thisEnd && start >= end) {\n          return 0;\n        }\n        if (thisStart >= thisEnd) {\n          return -1;\n        }\n        if (start >= end) {\n          return 1;\n        }\n        start >>>= 0;\n        end >>>= 0;\n        thisStart >>>= 0;\n        thisEnd >>>= 0;\n        if (this === target)\n          return 0;\n        let x = thisEnd - thisStart;\n        let y = end - start;\n        const len = Math.min(x, y);\n        const thisCopy = this.slice(thisStart, thisEnd);\n        const targetCopy = target.slice(start, end);\n        for (let i = 0; i < len; ++i) {\n          if (thisCopy[i] !== targetCopy[i]) {\n            x = thisCopy[i];\n            y = targetCopy[i];\n            break;\n          }\n        }\n        if (x < y)\n          return -1;\n        if (y < x)\n          return 1;\n        return 0;\n      };\n      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n        if (buffer.length === 0)\n          return -1;\n        if (typeof byteOffset === \"string\") {\n          encoding = byteOffset;\n          byteOffset = 0;\n        } else if (byteOffset > 2147483647) {\n          byteOffset = 2147483647;\n        } else if (byteOffset < -2147483648) {\n          byteOffset = -2147483648;\n        }\n        byteOffset = +byteOffset;\n        if (numberIsNaN(byteOffset)) {\n          byteOffset = dir ? 0 : buffer.length - 1;\n        }\n        if (byteOffset < 0)\n          byteOffset = buffer.length + byteOffset;\n        if (byteOffset >= buffer.length) {\n          if (dir)\n            return -1;\n          else\n            byteOffset = buffer.length - 1;\n        } else if (byteOffset < 0) {\n          if (dir)\n            byteOffset = 0;\n          else\n            return -1;\n        }\n        if (typeof val === \"string\") {\n          val = Buffer2.from(val, encoding);\n        }\n        if (Buffer2.isBuffer(val)) {\n          if (val.length === 0) {\n            return -1;\n          }\n          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n        } else if (typeof val === \"number\") {\n          val = val & 255;\n          if (typeof GlobalUint8Array.prototype.indexOf === \"function\") {\n            if (dir) {\n              return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n            } else {\n              return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n            }\n          }\n          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n        }\n        throw new TypeError(\"val must be string, number or Buffer\");\n      }\n      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n        let indexSize = 1;\n        let arrLength = arr.length;\n        let valLength = val.length;\n        if (encoding !== void 0) {\n          encoding = String(encoding).toLowerCase();\n          if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n            if (arr.length < 2 || val.length < 2) {\n              return -1;\n            }\n            indexSize = 2;\n            arrLength /= 2;\n            valLength /= 2;\n            byteOffset /= 2;\n          }\n        }\n        function read(buf, i2) {\n          if (indexSize === 1) {\n            return buf[i2];\n          } else {\n            return buf.readUInt16BE(i2 * indexSize);\n          }\n        }\n        let i;\n        if (dir) {\n          let foundIndex = -1;\n          for (i = byteOffset; i < arrLength; i++) {\n            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n              if (foundIndex === -1)\n                foundIndex = i;\n              if (i - foundIndex + 1 === valLength)\n                return foundIndex * indexSize;\n            } else {\n              if (foundIndex !== -1)\n                i -= i - foundIndex;\n              foundIndex = -1;\n            }\n          }\n        } else {\n          if (byteOffset + valLength > arrLength)\n            byteOffset = arrLength - valLength;\n          for (i = byteOffset; i >= 0; i--) {\n            let found = true;\n            for (let j = 0; j < valLength; j++) {\n              if (read(arr, i + j) !== read(val, j)) {\n                found = false;\n                break;\n              }\n            }\n            if (found)\n              return i;\n          }\n        }\n        return -1;\n      }\n      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {\n        return this.indexOf(val, byteOffset, encoding) !== -1;\n      };\n      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n      };\n      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n      };\n      function hexWrite(buf, string, offset, length) {\n        offset = Number(offset) || 0;\n        const remaining = buf.length - offset;\n        if (!length) {\n          length = remaining;\n        } else {\n          length = Number(length);\n          if (length > remaining) {\n            length = remaining;\n          }\n        }\n        const strLen = string.length;\n        if (length > strLen / 2) {\n          length = strLen / 2;\n        }\n        let i;\n        for (i = 0; i < length; ++i) {\n          const parsed = parseInt(string.substr(i * 2, 2), 16);\n          if (numberIsNaN(parsed))\n            return i;\n          buf[offset + i] = parsed;\n        }\n        return i;\n      }\n      function utf8Write(buf, string, offset, length) {\n        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n      }\n      function asciiWrite(buf, string, offset, length) {\n        return blitBuffer(asciiToBytes(string), buf, offset, length);\n      }\n      function base64Write(buf, string, offset, length) {\n        return blitBuffer(base64ToBytes(string), buf, offset, length);\n      }\n      function ucs2Write(buf, string, offset, length) {\n        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n      }\n      Buffer2.prototype.write = function write(string, offset, length, encoding) {\n        if (offset === void 0) {\n          encoding = \"utf8\";\n          length = this.length;\n          offset = 0;\n        } else if (length === void 0 && typeof offset === \"string\") {\n          encoding = offset;\n          length = this.length;\n          offset = 0;\n        } else if (isFinite(offset)) {\n          offset = offset >>> 0;\n          if (isFinite(length)) {\n            length = length >>> 0;\n            if (encoding === void 0)\n              encoding = \"utf8\";\n          } else {\n            encoding = length;\n            length = void 0;\n          }\n        } else {\n          throw new Error(\n            \"Buffer.write(string, encoding, offset[, length]) is no longer supported\"\n          );\n        }\n        const remaining = this.length - offset;\n        if (length === void 0 || length > remaining)\n          length = remaining;\n        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n          throw new RangeError(\"Attempt to write outside buffer bounds\");\n        }\n        if (!encoding)\n          encoding = \"utf8\";\n        let loweredCase = false;\n        for (; ; ) {\n          switch (encoding) {\n            case \"hex\":\n              return hexWrite(this, string, offset, length);\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8Write(this, string, offset, length);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n              return asciiWrite(this, string, offset, length);\n            case \"base64\":\n              return base64Write(this, string, offset, length);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return ucs2Write(this, string, offset, length);\n            default:\n              if (loweredCase)\n                throw new TypeError(\"Unknown encoding: \" + encoding);\n              encoding = (\"\" + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      };\n      Buffer2.prototype.toJSON = function toJSON() {\n        return {\n          type: \"Buffer\",\n          data: Array.prototype.slice.call(this._arr || this, 0)\n        };\n      };\n      function base64Slice(buf, start, end) {\n        if (start === 0 && end === buf.length) {\n          return base64.fromByteArray(buf);\n        } else {\n          return base64.fromByteArray(buf.slice(start, end));\n        }\n      }\n      function utf8Slice(buf, start, end) {\n        end = Math.min(buf.length, end);\n        const res = [];\n        let i = start;\n        while (i < end) {\n          const firstByte = buf[i];\n          let codePoint = null;\n          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n          if (i + bytesPerSequence <= end) {\n            let secondByte, thirdByte, fourthByte, tempCodePoint;\n            switch (bytesPerSequence) {\n              case 1:\n                if (firstByte < 128) {\n                  codePoint = firstByte;\n                }\n                break;\n              case 2:\n                secondByte = buf[i + 1];\n                if ((secondByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n                  if (tempCodePoint > 127) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 3:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 4:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                fourthByte = buf[i + 3];\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n            }\n          }\n          if (codePoint === null) {\n            codePoint = 65533;\n            bytesPerSequence = 1;\n          } else if (codePoint > 65535) {\n            codePoint -= 65536;\n            res.push(codePoint >>> 10 & 1023 | 55296);\n            codePoint = 56320 | codePoint & 1023;\n          }\n          res.push(codePoint);\n          i += bytesPerSequence;\n        }\n        return decodeCodePointsArray(res);\n      }\n      var MAX_ARGUMENTS_LENGTH = 4096;\n      function decodeCodePointsArray(codePoints) {\n        const len = codePoints.length;\n        if (len <= MAX_ARGUMENTS_LENGTH) {\n          return String.fromCharCode.apply(String, codePoints);\n        }\n        let res = \"\";\n        let i = 0;\n        while (i < len) {\n          res += String.fromCharCode.apply(\n            String,\n            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n          );\n        }\n        return res;\n      }\n      function asciiSlice(buf, start, end) {\n        let ret = \"\";\n        end = Math.min(buf.length, end);\n        for (let i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i] & 127);\n        }\n        return ret;\n      }\n      function latin1Slice(buf, start, end) {\n        let ret = \"\";\n        end = Math.min(buf.length, end);\n        for (let i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i]);\n        }\n        return ret;\n      }\n      function hexSlice(buf, start, end) {\n        const len = buf.length;\n        if (!start || start < 0)\n          start = 0;\n        if (!end || end < 0 || end > len)\n          end = len;\n        let out = \"\";\n        for (let i = start; i < end; ++i) {\n          out += hexSliceLookupTable[buf[i]];\n        }\n        return out;\n      }\n      function utf16leSlice(buf, start, end) {\n        const bytes = buf.slice(start, end);\n        let res = \"\";\n        for (let i = 0; i < bytes.length - 1; i += 2) {\n          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n        }\n        return res;\n      }\n      Buffer2.prototype.slice = function slice(start, end) {\n        const len = this.length;\n        start = ~~start;\n        end = end === void 0 ? len : ~~end;\n        if (start < 0) {\n          start += len;\n          if (start < 0)\n            start = 0;\n        } else if (start > len) {\n          start = len;\n        }\n        if (end < 0) {\n          end += len;\n          if (end < 0)\n            end = 0;\n        } else if (end > len) {\n          end = len;\n        }\n        if (end < start)\n          end = start;\n        const newBuf = this.subarray(start, end);\n        Object.setPrototypeOf(newBuf, Buffer2.prototype);\n        return newBuf;\n      };\n      function checkOffset(offset, ext, length) {\n        if (offset % 1 !== 0 || offset < 0)\n          throw new RangeError(\"offset is not uint\");\n        if (offset + ext > length)\n          throw new RangeError(\"Trying to access beyond buffer length\");\n      }\n      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let val = this[offset];\n        let mul = 1;\n        let i = 0;\n        while (++i < byteLength2 && (mul *= 256)) {\n          val += this[offset + i] * mul;\n        }\n        return val;\n      };\n      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          checkOffset(offset, byteLength2, this.length);\n        }\n        let val = this[offset + --byteLength2];\n        let mul = 1;\n        while (byteLength2 > 0 && (mul *= 256)) {\n          val += this[offset + --byteLength2] * mul;\n        }\n        return val;\n      };\n      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 1, this.length);\n        return this[offset];\n      };\n      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        return this[offset] | this[offset + 1] << 8;\n      };\n      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        return this[offset] << 8 | this[offset + 1];\n      };\n      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n      };\n      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n      };\n      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n        return BigInt(lo) + (BigInt(hi) << BigInt(32));\n      });\n      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\n        return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n      });\n      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let val = this[offset];\n        let mul = 1;\n        let i = 0;\n        while (++i < byteLength2 && (mul *= 256)) {\n          val += this[offset + i] * mul;\n        }\n        mul *= 128;\n        if (val >= mul)\n          val -= Math.pow(2, 8 * byteLength2);\n        return val;\n      };\n      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert)\n          checkOffset(offset, byteLength2, this.length);\n        let i = byteLength2;\n        let mul = 1;\n        let val = this[offset + --i];\n        while (i > 0 && (mul *= 256)) {\n          val += this[offset + --i] * mul;\n        }\n        mul *= 128;\n        if (val >= mul)\n          val -= Math.pow(2, 8 * byteLength2);\n        return val;\n      };\n      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 1, this.length);\n        if (!(this[offset] & 128))\n          return this[offset];\n        return (255 - this[offset] + 1) * -1;\n      };\n      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        const val = this[offset] | this[offset + 1] << 8;\n        return val & 32768 ? val | 4294901760 : val;\n      };\n      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 2, this.length);\n        const val = this[offset + 1] | this[offset] << 8;\n        return val & 32768 ? val | 4294901760 : val;\n      };\n      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n      };\n      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n      };\n      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);\n        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n      });\n      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n        offset = offset >>> 0;\n        validateNumber(offset, \"offset\");\n        const first = this[offset];\n        const last = this[offset + 7];\n        if (first === void 0 || last === void 0) {\n          boundsError(offset, this.length - 8);\n        }\n        const val = (first << 24) + // Overflow\n        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\n      });\n      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, true, 23, 4);\n      };\n      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, false, 23, 4);\n      };\n      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, true, 52, 8);\n      };\n      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, false, 52, 8);\n      };\n      function checkInt(buf, value, offset, ext, max, min) {\n        if (!Buffer2.isBuffer(buf))\n          throw new TypeError('\"buffer\" argument must be a Buffer instance');\n        if (value > max || value < min)\n          throw new RangeError('\"value\" argument is out of bounds');\n        if (offset + ext > buf.length)\n          throw new RangeError(\"Index out of range\");\n      }\n      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\n        }\n        let mul = 1;\n        let i = 0;\n        this[offset] = value & 255;\n        while (++i < byteLength2 && (mul *= 256)) {\n          this[offset + i] = value / mul & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\n        }\n        let i = byteLength2 - 1;\n        let mul = 1;\n        this[offset + i] = value & 255;\n        while (--i >= 0 && (mul *= 256)) {\n          this[offset + i] = value / mul & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 1, 255, 0);\n        this[offset] = value & 255;\n        return offset + 1;\n      };\n      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 65535, 0);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 65535, 0);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 255;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 4294967295, 0);\n        this[offset + 3] = value >>> 24;\n        this[offset + 2] = value >>> 16;\n        this[offset + 1] = value >>> 8;\n        this[offset] = value & 255;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 4294967295, 0);\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 255;\n        return offset + 4;\n      };\n      function wrtBigUInt64LE(buf, value, offset, min, max) {\n        checkIntBI(value, min, max, buf, offset, 7);\n        let lo = Number(value & BigInt(4294967295));\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        lo = lo >> 8;\n        buf[offset++] = lo;\n        let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        hi = hi >> 8;\n        buf[offset++] = hi;\n        return offset;\n      }\n      function wrtBigUInt64BE(buf, value, offset, min, max) {\n        checkIntBI(value, min, max, buf, offset, 7);\n        let lo = Number(value & BigInt(4294967295));\n        buf[offset + 7] = lo;\n        lo = lo >> 8;\n        buf[offset + 6] = lo;\n        lo = lo >> 8;\n        buf[offset + 5] = lo;\n        lo = lo >> 8;\n        buf[offset + 4] = lo;\n        let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n        buf[offset + 3] = hi;\n        hi = hi >> 8;\n        buf[offset + 2] = hi;\n        hi = hi >> 8;\n        buf[offset + 1] = hi;\n        hi = hi >> 8;\n        buf[offset] = hi;\n        return offset + 8;\n      }\n      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {\n        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n      });\n      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {\n        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n      });\n      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          const limit = Math.pow(2, 8 * byteLength2 - 1);\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n        }\n        let i = 0;\n        let mul = 1;\n        let sub = 0;\n        this[offset] = value & 255;\n        while (++i < byteLength2 && (mul *= 256)) {\n          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          const limit = Math.pow(2, 8 * byteLength2 - 1);\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n        }\n        let i = byteLength2 - 1;\n        let mul = 1;\n        let sub = 0;\n        this[offset + i] = value & 255;\n        while (--i >= 0 && (mul *= 256)) {\n          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 1, 127, -128);\n        if (value < 0)\n          value = 255 + value + 1;\n        this[offset] = value & 255;\n        return offset + 1;\n      };\n      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 32767, -32768);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 2, 32767, -32768);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 255;\n        return offset + 2;\n      };\n      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 2147483647, -2147483648);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        this[offset + 2] = value >>> 16;\n        this[offset + 3] = value >>> 24;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert)\n          checkInt(this, value, offset, 4, 2147483647, -2147483648);\n        if (value < 0)\n          value = 4294967295 + value + 1;\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 255;\n        return offset + 4;\n      };\n      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {\n        return wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n      });\n      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {\n        return wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n      });\n      function checkIEEE754(buf, value, offset, ext, max, min) {\n        if (offset + ext > buf.length)\n          throw new RangeError(\"Index out of range\");\n        if (offset < 0)\n          throw new RangeError(\"Index out of range\");\n      }\n      function writeFloat(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 23, 4);\n        return offset + 4;\n      }\n      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, true, noAssert);\n      };\n      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, false, noAssert);\n      };\n      function writeDouble(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 52, 8);\n        return offset + 8;\n      }\n      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, true, noAssert);\n      };\n      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, false, noAssert);\n      };\n      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {\n        if (!Buffer2.isBuffer(target))\n          throw new TypeError(\"argument should be a Buffer\");\n        if (!start)\n          start = 0;\n        if (!end && end !== 0)\n          end = this.length;\n        if (targetStart >= target.length)\n          targetStart = target.length;\n        if (!targetStart)\n          targetStart = 0;\n        if (end > 0 && end < start)\n          end = start;\n        if (end === start)\n          return 0;\n        if (target.length === 0 || this.length === 0)\n          return 0;\n        if (targetStart < 0) {\n          throw new RangeError(\"targetStart out of bounds\");\n        }\n        if (start < 0 || start >= this.length)\n          throw new RangeError(\"Index out of range\");\n        if (end < 0)\n          throw new RangeError(\"sourceEnd out of bounds\");\n        if (end > this.length)\n          end = this.length;\n        if (target.length - targetStart < end - start) {\n          end = target.length - targetStart + start;\n        }\n        const len = end - start;\n        if (this === target && typeof GlobalUint8Array.prototype.copyWithin === \"function\") {\n          this.copyWithin(targetStart, start, end);\n        } else {\n          GlobalUint8Array.prototype.set.call(\n            target,\n            this.subarray(start, end),\n            targetStart\n          );\n        }\n        return len;\n      };\n      Buffer2.prototype.fill = function fill(val, start, end, encoding) {\n        if (typeof val === \"string\") {\n          if (typeof start === \"string\") {\n            encoding = start;\n            start = 0;\n            end = this.length;\n          } else if (typeof end === \"string\") {\n            encoding = end;\n            end = this.length;\n          }\n          if (encoding !== void 0 && typeof encoding !== \"string\") {\n            throw new TypeError(\"encoding must be a string\");\n          }\n          if (typeof encoding === \"string\" && !Buffer2.isEncoding(encoding)) {\n            throw new TypeError(\"Unknown encoding: \" + encoding);\n          }\n          if (val.length === 1) {\n            const code = val.charCodeAt(0);\n            if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n              val = code;\n            }\n          }\n        } else if (typeof val === \"number\") {\n          val = val & 255;\n        } else if (typeof val === \"boolean\") {\n          val = Number(val);\n        }\n        if (start < 0 || this.length < start || this.length < end) {\n          throw new RangeError(\"Out of range index\");\n        }\n        if (end <= start) {\n          return this;\n        }\n        start = start >>> 0;\n        end = end === void 0 ? this.length : end >>> 0;\n        if (!val)\n          val = 0;\n        let i;\n        if (typeof val === \"number\") {\n          for (i = start; i < end; ++i) {\n            this[i] = val;\n          }\n        } else {\n          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);\n          const len = bytes.length;\n          if (len === 0) {\n            throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n          }\n          for (i = 0; i < end - start; ++i) {\n            this[i + start] = bytes[i % len];\n          }\n        }\n        return this;\n      };\n      var errors = {};\n      function E(sym, getMessage, Base) {\n        errors[sym] = class NodeError extends Base {\n          constructor() {\n            super();\n            Object.defineProperty(this, \"message\", {\n              value: getMessage.apply(this, arguments),\n              writable: true,\n              configurable: true\n            });\n            this.name = `${this.name} [${sym}]`;\n            this.stack;\n            delete this.name;\n          }\n          get code() {\n            return sym;\n          }\n          set code(value) {\n            Object.defineProperty(this, \"code\", {\n              configurable: true,\n              enumerable: true,\n              value,\n              writable: true\n            });\n          }\n          toString() {\n            return `${this.name} [${sym}]: ${this.message}`;\n          }\n        };\n      }\n      E(\n        \"ERR_BUFFER_OUT_OF_BOUNDS\",\n        function(name) {\n          if (name) {\n            return `${name} is outside of buffer bounds`;\n          }\n          return \"Attempt to access memory outside buffer bounds\";\n        },\n        RangeError\n      );\n      E(\n        \"ERR_INVALID_ARG_TYPE\",\n        function(name, actual) {\n          return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`;\n        },\n        TypeError\n      );\n      E(\n        \"ERR_OUT_OF_RANGE\",\n        function(str, range, input) {\n          let msg = `The value of \"${str}\" is out of range.`;\n          let received = input;\n          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n            received = addNumericalSeparator(String(input));\n          } else if (typeof input === \"bigint\") {\n            received = String(input);\n            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n              received = addNumericalSeparator(received);\n            }\n            received += \"n\";\n          }\n          msg += ` It must be ${range}. Received ${received}`;\n          return msg;\n        },\n        RangeError\n      );\n      function addNumericalSeparator(val) {\n        let res = \"\";\n        let i = val.length;\n        const start = val[0] === \"-\" ? 1 : 0;\n        for (; i >= start + 4; i -= 3) {\n          res = `_${val.slice(i - 3, i)}${res}`;\n        }\n        return `${val.slice(0, i)}${res}`;\n      }\n      function checkBounds(buf, offset, byteLength2) {\n        validateNumber(offset, \"offset\");\n        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {\n          boundsError(offset, buf.length - (byteLength2 + 1));\n        }\n      }\n      function checkIntBI(value, min, max, buf, offset, byteLength2) {\n        if (value > max || value < min) {\n          const n = typeof min === \"bigint\" ? \"n\" : \"\";\n          let range;\n          if (byteLength2 > 3) {\n            if (min === 0 || min === BigInt(0)) {\n              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;\n            } else {\n              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;\n            }\n          } else {\n            range = `>= ${min}${n} and <= ${max}${n}`;\n          }\n          throw new errors.ERR_OUT_OF_RANGE(\"value\", range, value);\n        }\n        checkBounds(buf, offset, byteLength2);\n      }\n      function validateNumber(value, name) {\n        if (typeof value !== \"number\") {\n          throw new errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n        }\n      }\n      function boundsError(value, length, type) {\n        if (Math.floor(value) !== value) {\n          validateNumber(value, type);\n          throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \"an integer\", value);\n        }\n        if (length < 0) {\n          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n        }\n        throw new errors.ERR_OUT_OF_RANGE(\n          type || \"offset\",\n          `>= ${type ? 1 : 0} and <= ${length}`,\n          value\n        );\n      }\n      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n      function base64clean(str) {\n        str = str.split(\"=\")[0];\n        str = str.trim().replace(INVALID_BASE64_RE, \"\");\n        if (str.length < 2)\n          return \"\";\n        while (str.length % 4 !== 0) {\n          str = str + \"=\";\n        }\n        return str;\n      }\n      function utf8ToBytes(string, units) {\n        units = units || Infinity;\n        let codePoint;\n        const length = string.length;\n        let leadSurrogate = null;\n        const bytes = [];\n        for (let i = 0; i < length; ++i) {\n          codePoint = string.charCodeAt(i);\n          if (codePoint > 55295 && codePoint < 57344) {\n            if (!leadSurrogate) {\n              if (codePoint > 56319) {\n                if ((units -= 3) > -1)\n                  bytes.push(239, 191, 189);\n                continue;\n              } else if (i + 1 === length) {\n                if ((units -= 3) > -1)\n                  bytes.push(239, 191, 189);\n                continue;\n              }\n              leadSurrogate = codePoint;\n              continue;\n            }\n            if (codePoint < 56320) {\n              if ((units -= 3) > -1)\n                bytes.push(239, 191, 189);\n              leadSurrogate = codePoint;\n              continue;\n            }\n            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n          } else if (leadSurrogate) {\n            if ((units -= 3) > -1)\n              bytes.push(239, 191, 189);\n          }\n          leadSurrogate = null;\n          if (codePoint < 128) {\n            if ((units -= 1) < 0)\n              break;\n            bytes.push(codePoint);\n          } else if (codePoint < 2048) {\n            if ((units -= 2) < 0)\n              break;\n            bytes.push(\n              codePoint >> 6 | 192,\n              codePoint & 63 | 128\n            );\n          } else if (codePoint < 65536) {\n            if ((units -= 3) < 0)\n              break;\n            bytes.push(\n              codePoint >> 12 | 224,\n              codePoint >> 6 & 63 | 128,\n              codePoint & 63 | 128\n            );\n          } else if (codePoint < 1114112) {\n            if ((units -= 4) < 0)\n              break;\n            bytes.push(\n              codePoint >> 18 | 240,\n              codePoint >> 12 & 63 | 128,\n              codePoint >> 6 & 63 | 128,\n              codePoint & 63 | 128\n            );\n          } else {\n            throw new Error(\"Invalid code point\");\n          }\n        }\n        return bytes;\n      }\n      function asciiToBytes(str) {\n        const byteArray = [];\n        for (let i = 0; i < str.length; ++i) {\n          byteArray.push(str.charCodeAt(i) & 255);\n        }\n        return byteArray;\n      }\n      function utf16leToBytes(str, units) {\n        let c, hi, lo;\n        const byteArray = [];\n        for (let i = 0; i < str.length; ++i) {\n          if ((units -= 2) < 0)\n            break;\n          c = str.charCodeAt(i);\n          hi = c >> 8;\n          lo = c % 256;\n          byteArray.push(lo);\n          byteArray.push(hi);\n        }\n        return byteArray;\n      }\n      function base64ToBytes(str) {\n        return base64.toByteArray(base64clean(str));\n      }\n      function blitBuffer(src, dst, offset, length) {\n        let i;\n        for (i = 0; i < length; ++i) {\n          if (i + offset >= dst.length || i >= src.length)\n            break;\n          dst[i + offset] = src[i];\n        }\n        return i;\n      }\n      function isInstance(obj, type) {\n        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n      }\n      function numberIsNaN(obj) {\n        return obj !== obj;\n      }\n      var hexSliceLookupTable = function() {\n        const alphabet = \"0123456789abcdef\";\n        const table = new Array(256);\n        for (let i = 0; i < 16; ++i) {\n          const i16 = i * 16;\n          for (let j = 0; j < 16; ++j) {\n            table[i16 + j] = alphabet[i] + alphabet[j];\n          }\n        }\n        return table;\n      }();\n      function defineBigIntMethod(fn) {\n        return typeof BigInt === \"undefined\" ? BufferBigIntNotDefined : fn;\n      }\n      function BufferBigIntNotDefined() {\n        throw new Error(\"BigInt not supported\");\n      }\n    }\n  });\n\n  // node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\n  var require_browser = __commonJS({\n    \"node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\"(exports, module) {\n      init_dist();\n      var process = module.exports = {};\n      var cachedSetTimeout;\n      var cachedClearTimeout;\n      function defaultSetTimout() {\n        throw new Error(\"setTimeout has not been defined\");\n      }\n      function defaultClearTimeout() {\n        throw new Error(\"clearTimeout has not been defined\");\n      }\n      (function() {\n        try {\n          if (typeof setTimeout === \"function\") {\n            cachedSetTimeout = setTimeout;\n          } else {\n            cachedSetTimeout = defaultSetTimout;\n          }\n        } catch (e) {\n          cachedSetTimeout = defaultSetTimout;\n        }\n        try {\n          if (typeof clearTimeout === \"function\") {\n            cachedClearTimeout = clearTimeout;\n          } else {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        } catch (e) {\n          cachedClearTimeout = defaultClearTimeout;\n        }\n      })();\n      function runTimeout(fun) {\n        if (cachedSetTimeout === setTimeout) {\n          return setTimeout(fun, 0);\n        }\n        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n          cachedSetTimeout = setTimeout;\n          return setTimeout(fun, 0);\n        }\n        try {\n          return cachedSetTimeout(fun, 0);\n        } catch (e) {\n          try {\n            return cachedSetTimeout.call(null, fun, 0);\n          } catch (e2) {\n            return cachedSetTimeout.call(this, fun, 0);\n          }\n        }\n      }\n      function runClearTimeout(marker) {\n        if (cachedClearTimeout === clearTimeout) {\n          return clearTimeout(marker);\n        }\n        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n          cachedClearTimeout = clearTimeout;\n          return clearTimeout(marker);\n        }\n        try {\n          return cachedClearTimeout(marker);\n        } catch (e) {\n          try {\n            return cachedClearTimeout.call(null, marker);\n          } catch (e2) {\n            return cachedClearTimeout.call(this, marker);\n          }\n        }\n      }\n      var queue = [];\n      var draining = false;\n      var currentQueue;\n      var queueIndex = -1;\n      function cleanUpNextTick() {\n        if (!draining || !currentQueue) {\n          return;\n        }\n        draining = false;\n        if (currentQueue.length) {\n          queue = currentQueue.concat(queue);\n        } else {\n          queueIndex = -1;\n        }\n        if (queue.length) {\n          drainQueue();\n        }\n      }\n      function drainQueue() {\n        if (draining) {\n          return;\n        }\n        var timeout = runTimeout(cleanUpNextTick);\n        draining = true;\n        var len = queue.length;\n        while (len) {\n          currentQueue = queue;\n          queue = [];\n          while (++queueIndex < len) {\n            if (currentQueue) {\n              currentQueue[queueIndex].run();\n            }\n          }\n          queueIndex = -1;\n          len = queue.length;\n        }\n        currentQueue = null;\n        draining = false;\n        runClearTimeout(timeout);\n      }\n      process.nextTick = function(fun) {\n        var args = new Array(arguments.length - 1);\n        if (arguments.length > 1) {\n          for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n          }\n        }\n        queue.push(new Item(fun, args));\n        if (queue.length === 1 && !draining) {\n          runTimeout(drainQueue);\n        }\n      };\n      function Item(fun, array) {\n        this.fun = fun;\n        this.array = array;\n      }\n      Item.prototype.run = function() {\n        this.fun.apply(null, this.array);\n      };\n      process.title = \"browser\";\n      process.browser = true;\n      process.env = {};\n      process.argv = [];\n      process.version = \"\";\n      process.versions = {};\n      function noop() {\n      }\n      process.on = noop;\n      process.addListener = noop;\n      process.once = noop;\n      process.off = noop;\n      process.removeListener = noop;\n      process.removeAllListeners = noop;\n      process.emit = noop;\n      process.prependListener = noop;\n      process.prependOnceListener = noop;\n      process.listeners = function(name) {\n        return [];\n      };\n      process.binding = function(name) {\n        throw new Error(\"process.binding is not supported\");\n      };\n      process.cwd = function() {\n        return \"/\";\n      };\n      process.chdir = function(dir) {\n        throw new Error(\"process.chdir is not supported\");\n      };\n      process.umask = function() {\n        return 0;\n      };\n    }\n  });\n\n  // shims/dist/index.js\n  var import_buffer_polyfill, import_process, o;\n  var init_dist = __esm({\n    \"shims/dist/index.js\"() {\n      \"use strict\";\n      import_buffer_polyfill = __toESM(require_buffer(), 1);\n      import_process = __toESM(require_browser(), 1);\n      o = globalThis || void 0 || self;\n    }\n  });\n\n  // shims/banner/index.cjs\n  var require_banner = __commonJS({\n    \"shims/banner/index.cjs\"() {\n      init_dist();\n      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;\n      globalThis.global = globalThis.global || o;\n      globalThis.process = globalThis.process || import_process.default;\n    }\n  });\n  require_banner();\n})();\n/*! Bundled license information:\n\nieee754/index.js:\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n\nbuffer/index.js:\n  (*!\n   * The buffer module from node.js, for the browser.\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   *)\n*/\n\nimport {\n  require_markup\n} from \"/node_modules/.vite/deps/chunk-PINGGLI2.js?v=733ce8d4\";\nimport {\n  require_javascript\n} from \"/node_modules/.vite/deps/chunk-XQX5AV7V.js?v=733ce8d4\";\nimport {\n  require_css\n} from \"/node_modules/.vite/deps/chunk-R6DSTLQR.js?v=733ce8d4\";\nimport {\n  require_clike\n} from \"/node_modules/.vite/deps/chunk-7LJ3LUKO.js?v=733ce8d4\";\nimport {\n  require_immutable\n} from \"/node_modules/.vite/deps/chunk-MWYXR23D.js?v=733ce8d4\";\nimport {\n  __commonJS,\n  __toESM,\n  require_dist\n} from \"/node_modules/.vite/deps/chunk-VMXIV7NB.js?v=733ce8d4\";\n\n// node_modules/property-information/lib/util/schema.js\nvar require_schema = __commonJS({\n  \"node_modules/property-information/lib/util/schema.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = Schema;\n    var proto = Schema.prototype;\n    proto.space = null;\n    proto.normal = {};\n    proto.property = {};\n    function Schema(property, normal, space) {\n      this.property = property;\n      this.normal = normal;\n      if (space) {\n        this.space = space;\n      }\n    }\n  }\n});\n\n// node_modules/property-information/lib/util/merge.js\nvar require_merge = __commonJS({\n  \"node_modules/property-information/lib/util/merge.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var xtend = require_immutable();\n    var Schema = require_schema();\n    module.exports = merge;\n    function merge(definitions) {\n      var length = definitions.length;\n      var property = [];\n      var normal = [];\n      var index = -1;\n      var info;\n      var space;\n      while (++index < length) {\n        info = definitions[index];\n        property.push(info.property);\n        normal.push(info.normal);\n        space = info.space;\n      }\n      return new Schema(\n        xtend.apply(null, property),\n        xtend.apply(null, normal),\n        space\n      );\n    }\n  }\n});\n\n// node_modules/property-information/normalize.js\nvar require_normalize = __commonJS({\n  \"node_modules/property-information/normalize.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = normalize;\n    function normalize(value) {\n      return value.toLowerCase();\n    }\n  }\n});\n\n// node_modules/property-information/lib/util/info.js\nvar require_info = __commonJS({\n  \"node_modules/property-information/lib/util/info.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = Info;\n    var proto = Info.prototype;\n    proto.space = null;\n    proto.attribute = null;\n    proto.property = null;\n    proto.boolean = false;\n    proto.booleanish = false;\n    proto.overloadedBoolean = false;\n    proto.number = false;\n    proto.commaSeparated = false;\n    proto.spaceSeparated = false;\n    proto.commaOrSpaceSeparated = false;\n    proto.mustUseProperty = false;\n    proto.defined = false;\n    function Info(property, attribute) {\n      this.property = property;\n      this.attribute = attribute;\n    }\n  }\n});\n\n// node_modules/property-information/lib/util/types.js\nvar require_types = __commonJS({\n  \"node_modules/property-information/lib/util/types.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var powers = 0;\n    exports.boolean = increment();\n    exports.booleanish = increment();\n    exports.overloadedBoolean = increment();\n    exports.number = increment();\n    exports.spaceSeparated = increment();\n    exports.commaSeparated = increment();\n    exports.commaOrSpaceSeparated = increment();\n    function increment() {\n      return Math.pow(2, ++powers);\n    }\n  }\n});\n\n// node_modules/property-information/lib/util/defined-info.js\nvar require_defined_info = __commonJS({\n  \"node_modules/property-information/lib/util/defined-info.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var Info = require_info();\n    var types = require_types();\n    module.exports = DefinedInfo;\n    DefinedInfo.prototype = new Info();\n    DefinedInfo.prototype.defined = true;\n    var checks = [\n      \"boolean\",\n      \"booleanish\",\n      \"overloadedBoolean\",\n      \"number\",\n      \"commaSeparated\",\n      \"spaceSeparated\",\n      \"commaOrSpaceSeparated\"\n    ];\n    var checksLength = checks.length;\n    function DefinedInfo(property, attribute, mask, space) {\n      var index = -1;\n      var check;\n      mark(this, \"space\", space);\n      Info.call(this, property, attribute);\n      while (++index < checksLength) {\n        check = checks[index];\n        mark(this, check, (mask & types[check]) === types[check]);\n      }\n    }\n    function mark(values, key, value) {\n      if (value) {\n        values[key] = value;\n      }\n    }\n  }\n});\n\n// node_modules/property-information/lib/util/create.js\nvar require_create = __commonJS({\n  \"node_modules/property-information/lib/util/create.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var normalize = require_normalize();\n    var Schema = require_schema();\n    var DefinedInfo = require_defined_info();\n    module.exports = create;\n    function create(definition) {\n      var space = definition.space;\n      var mustUseProperty = definition.mustUseProperty || [];\n      var attributes = definition.attributes || {};\n      var props = definition.properties;\n      var transform = definition.transform;\n      var property = {};\n      var normal = {};\n      var prop;\n      var info;\n      for (prop in props) {\n        info = new DefinedInfo(\n          prop,\n          transform(attributes, prop),\n          props[prop],\n          space\n        );\n        if (mustUseProperty.indexOf(prop) !== -1) {\n          info.mustUseProperty = true;\n        }\n        property[prop] = info;\n        normal[normalize(prop)] = prop;\n        normal[normalize(info.attribute)] = prop;\n      }\n      return new Schema(property, normal, space);\n    }\n  }\n});\n\n// node_modules/property-information/lib/xlink.js\nvar require_xlink = __commonJS({\n  \"node_modules/property-information/lib/xlink.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var create = require_create();\n    module.exports = create({\n      space: \"xlink\",\n      transform: xlinkTransform,\n      properties: {\n        xLinkActuate: null,\n        xLinkArcRole: null,\n        xLinkHref: null,\n        xLinkRole: null,\n        xLinkShow: null,\n        xLinkTitle: null,\n        xLinkType: null\n      }\n    });\n    function xlinkTransform(_, prop) {\n      return \"xlink:\" + prop.slice(5).toLowerCase();\n    }\n  }\n});\n\n// node_modules/property-information/lib/xml.js\nvar require_xml = __commonJS({\n  \"node_modules/property-information/lib/xml.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var create = require_create();\n    module.exports = create({\n      space: \"xml\",\n      transform: xmlTransform,\n      properties: {\n        xmlLang: null,\n        xmlBase: null,\n        xmlSpace: null\n      }\n    });\n    function xmlTransform(_, prop) {\n      return \"xml:\" + prop.slice(3).toLowerCase();\n    }\n  }\n});\n\n// node_modules/property-information/lib/util/case-sensitive-transform.js\nvar require_case_sensitive_transform = __commonJS({\n  \"node_modules/property-information/lib/util/case-sensitive-transform.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = caseSensitiveTransform;\n    function caseSensitiveTransform(attributes, attribute) {\n      return attribute in attributes ? attributes[attribute] : attribute;\n    }\n  }\n});\n\n// node_modules/property-information/lib/util/case-insensitive-transform.js\nvar require_case_insensitive_transform = __commonJS({\n  \"node_modules/property-information/lib/util/case-insensitive-transform.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var caseSensitiveTransform = require_case_sensitive_transform();\n    module.exports = caseInsensitiveTransform;\n    function caseInsensitiveTransform(attributes, property) {\n      return caseSensitiveTransform(attributes, property.toLowerCase());\n    }\n  }\n});\n\n// node_modules/property-information/lib/xmlns.js\nvar require_xmlns = __commonJS({\n  \"node_modules/property-information/lib/xmlns.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var create = require_create();\n    var caseInsensitiveTransform = require_case_insensitive_transform();\n    module.exports = create({\n      space: \"xmlns\",\n      attributes: {\n        xmlnsxlink: \"xmlns:xlink\"\n      },\n      transform: caseInsensitiveTransform,\n      properties: {\n        xmlns: null,\n        xmlnsXLink: null\n      }\n    });\n  }\n});\n\n// node_modules/property-information/lib/aria.js\nvar require_aria = __commonJS({\n  \"node_modules/property-information/lib/aria.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var types = require_types();\n    var create = require_create();\n    var booleanish = types.booleanish;\n    var number = types.number;\n    var spaceSeparated = types.spaceSeparated;\n    module.exports = create({\n      transform: ariaTransform,\n      properties: {\n        ariaActiveDescendant: null,\n        ariaAtomic: booleanish,\n        ariaAutoComplete: null,\n        ariaBusy: booleanish,\n        ariaChecked: booleanish,\n        ariaColCount: number,\n        ariaColIndex: number,\n        ariaColSpan: number,\n        ariaControls: spaceSeparated,\n        ariaCurrent: null,\n        ariaDescribedBy: spaceSeparated,\n        ariaDetails: null,\n        ariaDisabled: booleanish,\n        ariaDropEffect: spaceSeparated,\n        ariaErrorMessage: null,\n        ariaExpanded: booleanish,\n        ariaFlowTo: spaceSeparated,\n        ariaGrabbed: booleanish,\n        ariaHasPopup: null,\n        ariaHidden: booleanish,\n        ariaInvalid: null,\n        ariaKeyShortcuts: null,\n        ariaLabel: null,\n        ariaLabelledBy: spaceSeparated,\n        ariaLevel: number,\n        ariaLive: null,\n        ariaModal: booleanish,\n        ariaMultiLine: booleanish,\n        ariaMultiSelectable: booleanish,\n        ariaOrientation: null,\n        ariaOwns: spaceSeparated,\n        ariaPlaceholder: null,\n        ariaPosInSet: number,\n        ariaPressed: booleanish,\n        ariaReadOnly: booleanish,\n        ariaRelevant: null,\n        ariaRequired: booleanish,\n        ariaRoleDescription: spaceSeparated,\n        ariaRowCount: number,\n        ariaRowIndex: number,\n        ariaRowSpan: number,\n        ariaSelected: booleanish,\n        ariaSetSize: number,\n        ariaSort: null,\n        ariaValueMax: number,\n        ariaValueMin: number,\n        ariaValueNow: number,\n        ariaValueText: null,\n        role: null\n      }\n    });\n    function ariaTransform(_, prop) {\n      return prop === \"role\" ? prop : \"aria-\" + prop.slice(4).toLowerCase();\n    }\n  }\n});\n\n// node_modules/property-information/lib/html.js\nvar require_html = __commonJS({\n  \"node_modules/property-information/lib/html.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var types = require_types();\n    var create = require_create();\n    var caseInsensitiveTransform = require_case_insensitive_transform();\n    var boolean = types.boolean;\n    var overloadedBoolean = types.overloadedBoolean;\n    var booleanish = types.booleanish;\n    var number = types.number;\n    var spaceSeparated = types.spaceSeparated;\n    var commaSeparated = types.commaSeparated;\n    module.exports = create({\n      space: \"html\",\n      attributes: {\n        acceptcharset: \"accept-charset\",\n        classname: \"class\",\n        htmlfor: \"for\",\n        httpequiv: \"http-equiv\"\n      },\n      transform: caseInsensitiveTransform,\n      mustUseProperty: [\"checked\", \"multiple\", \"muted\", \"selected\"],\n      properties: {\n        // Standard Properties.\n        abbr: null,\n        accept: commaSeparated,\n        acceptCharset: spaceSeparated,\n        accessKey: spaceSeparated,\n        action: null,\n        allow: null,\n        allowFullScreen: boolean,\n        allowPaymentRequest: boolean,\n        allowUserMedia: boolean,\n        alt: null,\n        as: null,\n        async: boolean,\n        autoCapitalize: null,\n        autoComplete: spaceSeparated,\n        autoFocus: boolean,\n        autoPlay: boolean,\n        capture: boolean,\n        charSet: null,\n        checked: boolean,\n        cite: null,\n        className: spaceSeparated,\n        cols: number,\n        colSpan: null,\n        content: null,\n        contentEditable: booleanish,\n        controls: boolean,\n        controlsList: spaceSeparated,\n        coords: number | commaSeparated,\n        crossOrigin: null,\n        data: null,\n        dateTime: null,\n        decoding: null,\n        default: boolean,\n        defer: boolean,\n        dir: null,\n        dirName: null,\n        disabled: boolean,\n        download: overloadedBoolean,\n        draggable: booleanish,\n        encType: null,\n        enterKeyHint: null,\n        form: null,\n        formAction: null,\n        formEncType: null,\n        formMethod: null,\n        formNoValidate: boolean,\n        formTarget: null,\n        headers: spaceSeparated,\n        height: number,\n        hidden: boolean,\n        high: number,\n        href: null,\n        hrefLang: null,\n        htmlFor: spaceSeparated,\n        httpEquiv: spaceSeparated,\n        id: null,\n        imageSizes: null,\n        imageSrcSet: commaSeparated,\n        inputMode: null,\n        integrity: null,\n        is: null,\n        isMap: boolean,\n        itemId: null,\n        itemProp: spaceSeparated,\n        itemRef: spaceSeparated,\n        itemScope: boolean,\n        itemType: spaceSeparated,\n        kind: null,\n        label: null,\n        lang: null,\n        language: null,\n        list: null,\n        loading: null,\n        loop: boolean,\n        low: number,\n        manifest: null,\n        max: null,\n        maxLength: number,\n        media: null,\n        method: null,\n        min: null,\n        minLength: number,\n        multiple: boolean,\n        muted: boolean,\n        name: null,\n        nonce: null,\n        noModule: boolean,\n        noValidate: boolean,\n        onAbort: null,\n        onAfterPrint: null,\n        onAuxClick: null,\n        onBeforePrint: null,\n        onBeforeUnload: null,\n        onBlur: null,\n        onCancel: null,\n        onCanPlay: null,\n        onCanPlayThrough: null,\n        onChange: null,\n        onClick: null,\n        onClose: null,\n        onContextMenu: null,\n        onCopy: null,\n        onCueChange: null,\n        onCut: null,\n        onDblClick: null,\n        onDrag: null,\n        onDragEnd: null,\n        onDragEnter: null,\n        onDragExit: null,\n        onDragLeave: null,\n        onDragOver: null,\n        onDragStart: null,\n        onDrop: null,\n        onDurationChange: null,\n        onEmptied: null,\n        onEnded: null,\n        onError: null,\n        onFocus: null,\n        onFormData: null,\n        onHashChange: null,\n        onInput: null,\n        onInvalid: null,\n        onKeyDown: null,\n        onKeyPress: null,\n        onKeyUp: null,\n        onLanguageChange: null,\n        onLoad: null,\n        onLoadedData: null,\n        onLoadedMetadata: null,\n        onLoadEnd: null,\n        onLoadStart: null,\n        onMessage: null,\n        onMessageError: null,\n        onMouseDown: null,\n        onMouseEnter: null,\n        onMouseLeave: null,\n        onMouseMove: null,\n        onMouseOut: null,\n        onMouseOver: null,\n        onMouseUp: null,\n        onOffline: null,\n        onOnline: null,\n        onPageHide: null,\n        onPageShow: null,\n        onPaste: null,\n        onPause: null,\n        onPlay: null,\n        onPlaying: null,\n        onPopState: null,\n        onProgress: null,\n        onRateChange: null,\n        onRejectionHandled: null,\n        onReset: null,\n        onResize: null,\n        onScroll: null,\n        onSecurityPolicyViolation: null,\n        onSeeked: null,\n        onSeeking: null,\n        onSelect: null,\n        onSlotChange: null,\n        onStalled: null,\n        onStorage: null,\n        onSubmit: null,\n        onSuspend: null,\n        onTimeUpdate: null,\n        onToggle: null,\n        onUnhandledRejection: null,\n        onUnload: null,\n        onVolumeChange: null,\n        onWaiting: null,\n        onWheel: null,\n        open: boolean,\n        optimum: number,\n        pattern: null,\n        ping: spaceSeparated,\n        placeholder: null,\n        playsInline: boolean,\n        poster: null,\n        preload: null,\n        readOnly: boolean,\n        referrerPolicy: null,\n        rel: spaceSeparated,\n        required: boolean,\n        reversed: boolean,\n        rows: number,\n        rowSpan: number,\n        sandbox: spaceSeparated,\n        scope: null,\n        scoped: boolean,\n        seamless: boolean,\n        selected: boolean,\n        shape: null,\n        size: number,\n        sizes: null,\n        slot: null,\n        span: number,\n        spellCheck: booleanish,\n        src: null,\n        srcDoc: null,\n        srcLang: null,\n        srcSet: commaSeparated,\n        start: number,\n        step: null,\n        style: null,\n        tabIndex: number,\n        target: null,\n        title: null,\n        translate: null,\n        type: null,\n        typeMustMatch: boolean,\n        useMap: null,\n        value: booleanish,\n        width: number,\n        wrap: null,\n        // Legacy.\n        // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n        align: null,\n        // Several. Use CSS `text-align` instead,\n        aLink: null,\n        // `<body>`. Use CSS `a:active {color}` instead\n        archive: spaceSeparated,\n        // `<object>`. List of URIs to archives\n        axis: null,\n        // `<td>` and `<th>`. Use `scope` on `<th>`\n        background: null,\n        // `<body>`. Use CSS `background-image` instead\n        bgColor: null,\n        // `<body>` and table elements. Use CSS `background-color` instead\n        border: number,\n        // `<table>`. Use CSS `border-width` instead,\n        borderColor: null,\n        // `<table>`. Use CSS `border-color` instead,\n        bottomMargin: number,\n        // `<body>`\n        cellPadding: null,\n        // `<table>`\n        cellSpacing: null,\n        // `<table>`\n        char: null,\n        // Several table elements. When `align=char`, sets the character to align on\n        charOff: null,\n        // Several table elements. When `char`, offsets the alignment\n        classId: null,\n        // `<object>`\n        clear: null,\n        // `<br>`. Use CSS `clear` instead\n        code: null,\n        // `<object>`\n        codeBase: null,\n        // `<object>`\n        codeType: null,\n        // `<object>`\n        color: null,\n        // `<font>` and `<hr>`. Use CSS instead\n        compact: boolean,\n        // Lists. Use CSS to reduce space between items instead\n        declare: boolean,\n        // `<object>`\n        event: null,\n        // `<script>`\n        face: null,\n        // `<font>`. Use CSS instead\n        frame: null,\n        // `<table>`\n        frameBorder: null,\n        // `<iframe>`. Use CSS `border` instead\n        hSpace: number,\n        // `<img>` and `<object>`\n        leftMargin: number,\n        // `<body>`\n        link: null,\n        // `<body>`. Use CSS `a:link {color: *}` instead\n        longDesc: null,\n        // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n        lowSrc: null,\n        // `<img>`. Use a `<picture>`\n        marginHeight: number,\n        // `<body>`\n        marginWidth: number,\n        // `<body>`\n        noResize: boolean,\n        // `<frame>`\n        noHref: boolean,\n        // `<area>`. Use no href instead of an explicit `nohref`\n        noShade: boolean,\n        // `<hr>`. Use background-color and height instead of borders\n        noWrap: boolean,\n        // `<td>` and `<th>`\n        object: null,\n        // `<applet>`\n        profile: null,\n        // `<head>`\n        prompt: null,\n        // `<isindex>`\n        rev: null,\n        // `<link>`\n        rightMargin: number,\n        // `<body>`\n        rules: null,\n        // `<table>`\n        scheme: null,\n        // `<meta>`\n        scrolling: booleanish,\n        // `<frame>`. Use overflow in the child context\n        standby: null,\n        // `<object>`\n        summary: null,\n        // `<table>`\n        text: null,\n        // `<body>`. Use CSS `color` instead\n        topMargin: number,\n        // `<body>`\n        valueType: null,\n        // `<param>`\n        version: null,\n        // `<html>`. Use a doctype.\n        vAlign: null,\n        // Several. Use CSS `vertical-align` instead\n        vLink: null,\n        // `<body>`. Use CSS `a:visited {color}` instead\n        vSpace: number,\n        // `<img>` and `<object>`\n        // Non-standard Properties.\n        allowTransparency: null,\n        autoCorrect: null,\n        autoSave: null,\n        disablePictureInPicture: boolean,\n        disableRemotePlayback: boolean,\n        prefix: null,\n        property: null,\n        results: number,\n        security: null,\n        unselectable: null\n      }\n    });\n  }\n});\n\n// node_modules/property-information/html.js\nvar require_html2 = __commonJS({\n  \"node_modules/property-information/html.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var merge = require_merge();\n    var xlink = require_xlink();\n    var xml = require_xml();\n    var xmlns = require_xmlns();\n    var aria = require_aria();\n    var html = require_html();\n    module.exports = merge([xml, xlink, xmlns, aria, html]);\n  }\n});\n\n// node_modules/property-information/find.js\nvar require_find = __commonJS({\n  \"node_modules/property-information/find.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var normalize = require_normalize();\n    var DefinedInfo = require_defined_info();\n    var Info = require_info();\n    var data = \"data\";\n    module.exports = find;\n    var valid = /^data[-\\w.:]+$/i;\n    var dash = /-[a-z]/g;\n    var cap = /[A-Z]/g;\n    function find(schema, value) {\n      var normal = normalize(value);\n      var prop = value;\n      var Type = Info;\n      if (normal in schema.normal) {\n        return schema.property[schema.normal[normal]];\n      }\n      if (normal.length > 4 && normal.slice(0, 4) === data && valid.test(value)) {\n        if (value.charAt(4) === \"-\") {\n          prop = datasetToProperty(value);\n        } else {\n          value = datasetToAttribute(value);\n        }\n        Type = DefinedInfo;\n      }\n      return new Type(prop, value);\n    }\n    function datasetToProperty(attribute) {\n      var value = attribute.slice(5).replace(dash, camelcase);\n      return data + value.charAt(0).toUpperCase() + value.slice(1);\n    }\n    function datasetToAttribute(property) {\n      var value = property.slice(4);\n      if (dash.test(value)) {\n        return property;\n      }\n      value = value.replace(cap, kebab);\n      if (value.charAt(0) !== \"-\") {\n        value = \"-\" + value;\n      }\n      return data + value;\n    }\n    function kebab($0) {\n      return \"-\" + $0.toLowerCase();\n    }\n    function camelcase($0) {\n      return $0.charAt(1).toUpperCase();\n    }\n  }\n});\n\n// node_modules/hast-util-parse-selector/index.js\nvar require_hast_util_parse_selector = __commonJS({\n  \"node_modules/hast-util-parse-selector/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = parse;\n    var search = /[#.]/g;\n    function parse(selector, defaultTagName) {\n      var value = selector || \"\";\n      var name = defaultTagName || \"div\";\n      var props = {};\n      var start = 0;\n      var subvalue;\n      var previous;\n      var match;\n      while (start < value.length) {\n        search.lastIndex = start;\n        match = search.exec(value);\n        subvalue = value.slice(start, match ? match.index : value.length);\n        if (subvalue) {\n          if (!previous) {\n            name = subvalue;\n          } else if (previous === \"#\") {\n            props.id = subvalue;\n          } else if (props.className) {\n            props.className.push(subvalue);\n          } else {\n            props.className = [subvalue];\n          }\n          start += subvalue.length;\n        }\n        if (match) {\n          previous = match[0];\n          start++;\n        }\n      }\n      return { type: \"element\", tagName: name, properties: props, children: [] };\n    }\n  }\n});\n\n// node_modules/space-separated-tokens/index.js\nvar require_space_separated_tokens = __commonJS({\n  \"node_modules/space-separated-tokens/index.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    exports.parse = parse;\n    exports.stringify = stringify;\n    var empty = \"\";\n    var space = \" \";\n    var whiteSpace = /[ \\t\\n\\r\\f]+/g;\n    function parse(value) {\n      var input = String(value || empty).trim();\n      return input === empty ? [] : input.split(whiteSpace);\n    }\n    function stringify(values) {\n      return values.join(space).trim();\n    }\n  }\n});\n\n// node_modules/comma-separated-tokens/index.js\nvar require_comma_separated_tokens = __commonJS({\n  \"node_modules/comma-separated-tokens/index.js\"(exports) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    exports.parse = parse;\n    exports.stringify = stringify;\n    var comma = \",\";\n    var space = \" \";\n    var empty = \"\";\n    function parse(value) {\n      var values = [];\n      var input = String(value || empty);\n      var index = input.indexOf(comma);\n      var lastIndex = 0;\n      var end = false;\n      var val;\n      while (!end) {\n        if (index === -1) {\n          index = input.length;\n          end = true;\n        }\n        val = input.slice(lastIndex, index).trim();\n        if (val || !end) {\n          values.push(val);\n        }\n        lastIndex = index + 1;\n        index = input.indexOf(comma, lastIndex);\n      }\n      return values;\n    }\n    function stringify(values, options) {\n      var settings = options || {};\n      var left = settings.padLeft === false ? empty : space;\n      var right = settings.padRight ? space : empty;\n      if (values[values.length - 1] === empty) {\n        values = values.concat(empty);\n      }\n      return values.join(right + comma + left).trim();\n    }\n  }\n});\n\n// node_modules/hastscript/factory.js\nvar require_factory = __commonJS({\n  \"node_modules/hastscript/factory.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var find = require_find();\n    var normalize = require_normalize();\n    var parseSelector = require_hast_util_parse_selector();\n    var spaces = require_space_separated_tokens().parse;\n    var commas = require_comma_separated_tokens().parse;\n    module.exports = factory;\n    var own = {}.hasOwnProperty;\n    function factory(schema, defaultTagName, caseSensitive) {\n      var adjust = caseSensitive ? createAdjustMap(caseSensitive) : null;\n      return h;\n      function h(selector, properties) {\n        var node = parseSelector(selector, defaultTagName);\n        var children = Array.prototype.slice.call(arguments, 2);\n        var name = node.tagName.toLowerCase();\n        var property;\n        node.tagName = adjust && own.call(adjust, name) ? adjust[name] : name;\n        if (properties && isChildren(properties, node)) {\n          children.unshift(properties);\n          properties = null;\n        }\n        if (properties) {\n          for (property in properties) {\n            addProperty(node.properties, property, properties[property]);\n          }\n        }\n        addChild(node.children, children);\n        if (node.tagName === \"template\") {\n          node.content = { type: \"root\", children: node.children };\n          node.children = [];\n        }\n        return node;\n      }\n      function addProperty(properties, key, value) {\n        var info;\n        var property;\n        var result;\n        if (value === null || value === void 0 || value !== value) {\n          return;\n        }\n        info = find(schema, key);\n        property = info.property;\n        result = value;\n        if (typeof result === \"string\") {\n          if (info.spaceSeparated) {\n            result = spaces(result);\n          } else if (info.commaSeparated) {\n            result = commas(result);\n          } else if (info.commaOrSpaceSeparated) {\n            result = spaces(commas(result).join(\" \"));\n          }\n        }\n        if (property === \"style\" && typeof value !== \"string\") {\n          result = style(result);\n        }\n        if (property === \"className\" && properties.className) {\n          result = properties.className.concat(result);\n        }\n        properties[property] = parsePrimitives(info, property, result);\n      }\n    }\n    function isChildren(value, node) {\n      return typeof value === \"string\" || \"length\" in value || isNode(node.tagName, value);\n    }\n    function isNode(tagName, value) {\n      var type = value.type;\n      if (tagName === \"input\" || !type || typeof type !== \"string\") {\n        return false;\n      }\n      if (typeof value.children === \"object\" && \"length\" in value.children) {\n        return true;\n      }\n      type = type.toLowerCase();\n      if (tagName === \"button\") {\n        return type !== \"menu\" && type !== \"submit\" && type !== \"reset\" && type !== \"button\";\n      }\n      return \"value\" in value;\n    }\n    function addChild(nodes, value) {\n      var index;\n      var length;\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        nodes.push({ type: \"text\", value: String(value) });\n        return;\n      }\n      if (typeof value === \"object\" && \"length\" in value) {\n        index = -1;\n        length = value.length;\n        while (++index < length) {\n          addChild(nodes, value[index]);\n        }\n        return;\n      }\n      if (typeof value !== \"object\" || !(\"type\" in value)) {\n        throw new Error(\"Expected node, nodes, or string, got `\" + value + \"`\");\n      }\n      nodes.push(value);\n    }\n    function parsePrimitives(info, name, value) {\n      var index;\n      var length;\n      var result;\n      if (typeof value !== \"object\" || !(\"length\" in value)) {\n        return parsePrimitive(info, name, value);\n      }\n      length = value.length;\n      index = -1;\n      result = [];\n      while (++index < length) {\n        result[index] = parsePrimitive(info, name, value[index]);\n      }\n      return result;\n    }\n    function parsePrimitive(info, name, value) {\n      var result = value;\n      if (info.number || info.positiveNumber) {\n        if (!isNaN(result) && result !== \"\") {\n          result = Number(result);\n        }\n      } else if (info.boolean || info.overloadedBoolean) {\n        if (typeof result === \"string\" && (result === \"\" || normalize(value) === normalize(name))) {\n          result = true;\n        }\n      }\n      return result;\n    }\n    function style(value) {\n      var result = [];\n      var key;\n      for (key in value) {\n        result.push([key, value[key]].join(\": \"));\n      }\n      return result.join(\"; \");\n    }\n    function createAdjustMap(values) {\n      var length = values.length;\n      var index = -1;\n      var result = {};\n      var value;\n      while (++index < length) {\n        value = values[index];\n        result[value.toLowerCase()] = value;\n      }\n      return result;\n    }\n  }\n});\n\n// node_modules/hastscript/html.js\nvar require_html3 = __commonJS({\n  \"node_modules/hastscript/html.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var schema = require_html2();\n    var factory = require_factory();\n    var html = factory(schema, \"div\");\n    html.displayName = \"html\";\n    module.exports = html;\n  }\n});\n\n// node_modules/hastscript/index.js\nvar require_hastscript = __commonJS({\n  \"node_modules/hastscript/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = require_html3();\n  }\n});\n\n// node_modules/character-entities-legacy/index.json\nvar require_character_entities_legacy = __commonJS({\n  \"node_modules/character-entities-legacy/index.json\"(exports, module) {\n    module.exports = {\n      AElig: \"Æ\",\n      AMP: \"&\",\n      Aacute: \"Á\",\n      Acirc: \"Â\",\n      Agrave: \"À\",\n      Aring: \"Å\",\n      Atilde: \"Ã\",\n      Auml: \"Ä\",\n      COPY: \"©\",\n      Ccedil: \"Ç\",\n      ETH: \"Ð\",\n      Eacute: \"É\",\n      Ecirc: \"Ê\",\n      Egrave: \"È\",\n      Euml: \"Ë\",\n      GT: \">\",\n      Iacute: \"Í\",\n      Icirc: \"Î\",\n      Igrave: \"Ì\",\n      Iuml: \"Ï\",\n      LT: \"<\",\n      Ntilde: \"Ñ\",\n      Oacute: \"Ó\",\n      Ocirc: \"Ô\",\n      Ograve: \"Ò\",\n      Oslash: \"Ø\",\n      Otilde: \"Õ\",\n      Ouml: \"Ö\",\n      QUOT: '\"',\n      REG: \"®\",\n      THORN: \"Þ\",\n      Uacute: \"Ú\",\n      Ucirc: \"Û\",\n      Ugrave: \"Ù\",\n      Uuml: \"Ü\",\n      Yacute: \"Ý\",\n      aacute: \"á\",\n      acirc: \"â\",\n      acute: \"´\",\n      aelig: \"æ\",\n      agrave: \"à\",\n      amp: \"&\",\n      aring: \"å\",\n      atilde: \"ã\",\n      auml: \"ä\",\n      brvbar: \"¦\",\n      ccedil: \"ç\",\n      cedil: \"¸\",\n      cent: \"¢\",\n      copy: \"©\",\n      curren: \"¤\",\n      deg: \"°\",\n      divide: \"÷\",\n      eacute: \"é\",\n      ecirc: \"ê\",\n      egrave: \"è\",\n      eth: \"ð\",\n      euml: \"ë\",\n      frac12: \"½\",\n      frac14: \"¼\",\n      frac34: \"¾\",\n      gt: \">\",\n      iacute: \"í\",\n      icirc: \"î\",\n      iexcl: \"¡\",\n      igrave: \"ì\",\n      iquest: \"¿\",\n      iuml: \"ï\",\n      laquo: \"«\",\n      lt: \"<\",\n      macr: \"¯\",\n      micro: \"µ\",\n      middot: \"·\",\n      nbsp: \" \",\n      not: \"¬\",\n      ntilde: \"ñ\",\n      oacute: \"ó\",\n      ocirc: \"ô\",\n      ograve: \"ò\",\n      ordf: \"ª\",\n      ordm: \"º\",\n      oslash: \"ø\",\n      otilde: \"õ\",\n      ouml: \"ö\",\n      para: \"¶\",\n      plusmn: \"±\",\n      pound: \"£\",\n      quot: '\"',\n      raquo: \"»\",\n      reg: \"®\",\n      sect: \"§\",\n      shy: \"­\",\n      sup1: \"¹\",\n      sup2: \"²\",\n      sup3: \"³\",\n      szlig: \"ß\",\n      thorn: \"þ\",\n      times: \"×\",\n      uacute: \"ú\",\n      ucirc: \"û\",\n      ugrave: \"ù\",\n      uml: \"¨\",\n      uuml: \"ü\",\n      yacute: \"ý\",\n      yen: \"¥\",\n      yuml: \"ÿ\"\n    };\n  }\n});\n\n// node_modules/character-reference-invalid/index.json\nvar require_character_reference_invalid = __commonJS({\n  \"node_modules/character-reference-invalid/index.json\"(exports, module) {\n    module.exports = {\n      \"0\": \"�\",\n      \"128\": \"€\",\n      \"130\": \"‚\",\n      \"131\": \"ƒ\",\n      \"132\": \"„\",\n      \"133\": \"…\",\n      \"134\": \"†\",\n      \"135\": \"‡\",\n      \"136\": \"ˆ\",\n      \"137\": \"‰\",\n      \"138\": \"Š\",\n      \"139\": \"‹\",\n      \"140\": \"Œ\",\n      \"142\": \"Ž\",\n      \"145\": \"‘\",\n      \"146\": \"’\",\n      \"147\": \"“\",\n      \"148\": \"”\",\n      \"149\": \"•\",\n      \"150\": \"–\",\n      \"151\": \"—\",\n      \"152\": \"˜\",\n      \"153\": \"™\",\n      \"154\": \"š\",\n      \"155\": \"›\",\n      \"156\": \"œ\",\n      \"158\": \"ž\",\n      \"159\": \"Ÿ\"\n    };\n  }\n});\n\n// node_modules/is-decimal/index.js\nvar require_is_decimal = __commonJS({\n  \"node_modules/is-decimal/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = decimal;\n    function decimal(character) {\n      var code = typeof character === \"string\" ? character.charCodeAt(0) : character;\n      return code >= 48 && code <= 57;\n    }\n  }\n});\n\n// node_modules/is-hexadecimal/index.js\nvar require_is_hexadecimal = __commonJS({\n  \"node_modules/is-hexadecimal/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = hexadecimal;\n    function hexadecimal(character) {\n      var code = typeof character === \"string\" ? character.charCodeAt(0) : character;\n      return code >= 97 && code <= 102 || code >= 65 && code <= 70 || code >= 48 && code <= 57;\n    }\n  }\n});\n\n// node_modules/is-alphabetical/index.js\nvar require_is_alphabetical = __commonJS({\n  \"node_modules/is-alphabetical/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    module.exports = alphabetical;\n    function alphabetical(character) {\n      var code = typeof character === \"string\" ? character.charCodeAt(0) : character;\n      return code >= 97 && code <= 122 || code >= 65 && code <= 90;\n    }\n  }\n});\n\n// node_modules/is-alphanumerical/index.js\nvar require_is_alphanumerical = __commonJS({\n  \"node_modules/is-alphanumerical/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var alphabetical = require_is_alphabetical();\n    var decimal = require_is_decimal();\n    module.exports = alphanumerical;\n    function alphanumerical(character) {\n      return alphabetical(character) || decimal(character);\n    }\n  }\n});\n\n// node_modules/parse-entities/decode-entity.browser.js\nvar require_decode_entity_browser = __commonJS({\n  \"node_modules/parse-entities/decode-entity.browser.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var el;\n    var semicolon = 59;\n    module.exports = decodeEntity;\n    function decodeEntity(characters) {\n      var entity = \"&\" + characters + \";\";\n      var char;\n      el = el || document.createElement(\"i\");\n      el.innerHTML = entity;\n      char = el.textContent;\n      if (char.charCodeAt(char.length - 1) === semicolon && characters !== \"semi\") {\n        return false;\n      }\n      return char === entity ? false : char;\n    }\n  }\n});\n\n// node_modules/parse-entities/index.js\nvar require_parse_entities = __commonJS({\n  \"node_modules/parse-entities/index.js\"(exports, module) {\n    \"use strict\";\n    var import_dist = __toESM(require_dist());\n    var legacy = require_character_entities_legacy();\n    var invalid = require_character_reference_invalid();\n    var decimal = require_is_decimal();\n    var hexadecimal = require_is_hexadecimal();\n    var alphanumerical = require_is_alphanumerical();\n    var decodeEntity = require_decode_entity_browser();\n    module.exports = parseEntities;\n    var own = {}.hasOwnProperty;\n    var fromCharCode = String.fromCharCode;\n    var noop = Function.prototype;\n    var defaults = {\n      warning: null,\n      reference: null,\n      text: null,\n      warningContext: null,\n      referenceContext: null,\n      textContext: null,\n      position: {},\n      additional: null,\n      attribute: false,\n      nonTerminated: true\n    };\n    var tab = 9;\n    var lineFeed = 10;\n    var formFeed = 12;\n    var space = 32;\n    var ampersand = 38;\n    var semicolon = 59;\n    var lessThan = 60;\n    var equalsTo = 61;\n    var numberSign = 35;\n    var uppercaseX = 88;\n    var lowercaseX = 120;\n    var replacementCharacter = 65533;\n    var name = \"named\";\n    var hexa = \"hexadecimal\";\n    var deci = \"decimal\";\n    var bases = {};\n    bases[hexa] = 16;\n    bases[deci] = 10;\n    var tests = {};\n    tests[name] = alphanumerical;\n    tests[deci] = decimal;\n    tests[hexa] = hexadecimal;\n    var namedNotTerminated = 1;\n    var numericNotTerminated = 2;\n    var namedEmpty = 3;\n    var numericEmpty = 4;\n    var namedUnknown = 5;\n    var numericDisallowed = 6;\n    var numericProhibited = 7;\n    var messages = {};\n    messages[namedNotTerminated] = \"Named character references must be terminated by a semicolon\";\n    messages[numericNotTerminated] = \"Numeric character references must be terminated by a semicolon\";\n    messages[namedEmpty] = \"Named character references cannot be empty\";\n    messages[numericEmpty] = \"Numeric character references cannot be empty\";\n    messages[namedUnknown] = \"Named character references must be known\";\n    messages[numericDisallowed] = \"Numeric character references cannot be disallowed\";\n    messages[numericProhibited] = \"Numeric character references cannot be outside the permissible Unicode range\";\n    function parseEntities(value, options) {\n      var settings = {};\n      var option;\n      var key;\n      if (!options) {\n        options = {};\n      }\n      for (key in defaults) {\n        option = options[key];\n        settings[key] = option === null || option === void 0 ? defaults[key] : option;\n      }\n      if (settings.position.indent || settings.position.start) {\n        settings.indent = settings.position.indent || [];\n        settings.position = settings.position.start;\n      }\n      return parse(value, settings);\n    }\n    function parse(value, settings) {\n      var additional = settings.additional;\n      var nonTerminated = settings.nonTerminated;\n      var handleText = settings.text;\n      var handleReference = settings.reference;\n      var handleWarning = settings.warning;\n      var textContext = settings.textContext;\n      var referenceContext = settings.referenceContext;\n      var warningContext = settings.warningContext;\n      var pos = settings.position;\n      var indent = settings.indent || [];\n      var length = value.length;\n      var index = 0;\n      var lines = -1;\n      var column = pos.column || 1;\n      var line = pos.line || 1;\n      var queue = \"\";\n      var result = [];\n      var entityCharacters;\n      var namedEntity;\n      var terminated;\n      var characters;\n      var character;\n      var reference;\n      var following;\n      var warning;\n      var reason;\n      var output;\n      var entity;\n      var begin;\n      var start;\n      var type;\n      var test;\n      var prev;\n      var next;\n      var diff;\n      var end;\n      if (typeof additional === \"string\") {\n        additional = additional.charCodeAt(0);\n      }\n      prev = now();\n      warning = handleWarning ? parseError : noop;\n      index--;\n      length++;\n      while (++index < length) {\n        if (character === lineFeed) {\n          column = indent[lines] || 1;\n        }\n        character = value.charCodeAt(index);\n        if (character === ampersand) {\n          following = value.charCodeAt(index + 1);\n          if (following === tab || following === lineFeed || following === formFeed || following === space || following === ampersand || following === lessThan || following !== following || additional && following === additional) {\n            queue += fromCharCode(character);\n            column++;\n            continue;\n          }\n          start = index + 1;\n          begin = start;\n          end = start;\n          if (following === numberSign) {\n            end = ++begin;\n            following = value.charCodeAt(end);\n            if (following === uppercaseX || following === lowercaseX) {\n              type = hexa;\n              end = ++begin;\n            } else {\n              type = deci;\n            }\n          } else {\n            type = name;\n          }\n          entityCharacters = \"\";\n          entity = \"\";\n          characters = \"\";\n          test = tests[type];\n          end--;\n          while (++end < length) {\n            following = value.charCodeAt(end);\n            if (!test(following)) {\n              break;\n            }\n            characters += fromCharCode(following);\n            if (type === name && own.call(legacy, characters)) {\n              entityCharacters = characters;\n              entity = legacy[characters];\n            }\n          }\n          terminated = value.charCodeAt(end) === semicolon;\n          if (terminated) {\n            end++;\n            namedEntity = type === name ? decodeEntity(characters) : false;\n            if (namedEntity) {\n              entityCharacters = characters;\n              entity = namedEntity;\n            }\n          }\n          diff = 1 + end - start;\n          if (!terminated && !nonTerminated) {\n          } else if (!characters) {\n            if (type !== name) {\n              warning(numericEmpty, diff);\n            }\n          } else if (type === name) {\n            if (terminated && !entity) {\n              warning(namedUnknown, 1);\n            } else {\n              if (entityCharacters !== characters) {\n                end = begin + entityCharacters.length;\n                diff = 1 + end - begin;\n                terminated = false;\n              }\n              if (!terminated) {\n                reason = entityCharacters ? namedNotTerminated : namedEmpty;\n                if (settings.attribute) {\n                  following = value.charCodeAt(end);\n                  if (following === equalsTo) {\n                    warning(reason, diff);\n                    entity = null;\n                  } else if (alphanumerical(following)) {\n                    entity = null;\n                  } else {\n                    warning(reason, diff);\n                  }\n                } else {\n                  warning(reason, diff);\n                }\n              }\n            }\n            reference = entity;\n          } else {\n            if (!terminated) {\n              warning(numericNotTerminated, diff);\n            }\n            reference = parseInt(characters, bases[type]);\n            if (prohibited(reference)) {\n              warning(numericProhibited, diff);\n              reference = fromCharCode(replacementCharacter);\n            } else if (reference in invalid) {\n              warning(numericDisallowed, diff);\n              reference = invalid[reference];\n            } else {\n              output = \"\";\n              if (disallowed(reference)) {\n                warning(numericDisallowed, diff);\n              }\n              if (reference > 65535) {\n                reference -= 65536;\n                output += fromCharCode(reference >>> (10 & 1023) | 55296);\n                reference = 56320 | reference & 1023;\n              }\n              reference = output + fromCharCode(reference);\n            }\n          }\n          if (reference) {\n            flush();\n            prev = now();\n            index = end - 1;\n            column += end - start + 1;\n            result.push(reference);\n            next = now();\n            next.offset++;\n            if (handleReference) {\n              handleReference.call(\n                referenceContext,\n                reference,\n                { start: prev, end: next },\n                value.slice(start - 1, end)\n              );\n            }\n            prev = next;\n          } else {\n            characters = value.slice(start - 1, end);\n            queue += characters;\n            column += characters.length;\n            index = end - 1;\n          }\n        } else {\n          if (character === 10) {\n            line++;\n            lines++;\n            column = 0;\n          }\n          if (character === character) {\n            queue += fromCharCode(character);\n            column++;\n          } else {\n            flush();\n          }\n        }\n      }\n      return result.join(\"\");\n      function now() {\n        return {\n          line,\n          column,\n          offset: index + (pos.offset || 0)\n        };\n      }\n      function parseError(code, offset) {\n        var position = now();\n        position.column += offset;\n        position.offset += offset;\n        handleWarning.call(warningContext, messages[code], position, code);\n      }\n      function flush() {\n        if (queue) {\n          result.push(queue);\n          if (handleText) {\n            handleText.call(textContext, queue, { start: prev, end: now() });\n          }\n          queue = \"\";\n        }\n      }\n    }\n    function prohibited(code) {\n      return code >= 55296 && code <= 57343 || code > 1114111;\n    }\n    function disallowed(code) {\n      return code >= 1 && code <= 8 || code === 11 || code >= 13 && code <= 31 || code >= 127 && code <= 159 || code >= 64976 && code <= 65007 || (code & 65535) === 65535 || (code & 65535) === 65534;\n    }\n  }\n});\n\n// node_modules/refractor/node_modules/prismjs/components/prism-core.js\nvar require_prism_core = __commonJS({\n  \"node_modules/refractor/node_modules/prismjs/components/prism-core.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var _self = typeof window !== \"undefined\" ? window : typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope ? self : {};\n    var Prism = function(_self2) {\n      var lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n      var uniqueId = 0;\n      var plainTextGrammar = {};\n      var _ = {\n        /**\n         * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n         * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n         * additional languages or plugins yourself.\n         *\n         * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n         *\n         * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n         * empty Prism object into the global scope before loading the Prism script like this:\n         *\n         * ```js\n         * window.Prism = window.Prism || {};\n         * Prism.manual = true;\n         * // add a new <script> to load Prism's script\n         * ```\n         *\n         * @default false\n         * @type {boolean}\n         * @memberof Prism\n         * @public\n         */\n        manual: _self2.Prism && _self2.Prism.manual,\n        /**\n         * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\n         * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\n         * own worker, you don't want it to do this.\n         *\n         * By setting this value to `true`, Prism will not add its own listeners to the worker.\n         *\n         * You obviously have to change this value before Prism executes. To do this, you can add an\n         * empty Prism object into the global scope before loading the Prism script like this:\n         *\n         * ```js\n         * window.Prism = window.Prism || {};\n         * Prism.disableWorkerMessageHandler = true;\n         * // Load Prism's script\n         * ```\n         *\n         * @default false\n         * @type {boolean}\n         * @memberof Prism\n         * @public\n         */\n        disableWorkerMessageHandler: _self2.Prism && _self2.Prism.disableWorkerMessageHandler,\n        /**\n         * A namespace for utility methods.\n         *\n         * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n         * change or disappear at any time.\n         *\n         * @namespace\n         * @memberof Prism\n         */\n        util: {\n          encode: function encode(tokens) {\n            if (tokens instanceof Token) {\n              return new Token(tokens.type, encode(tokens.content), tokens.alias);\n            } else if (Array.isArray(tokens)) {\n              return tokens.map(encode);\n            } else {\n              return tokens.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n            }\n          },\n          /**\n           * Returns the name of the type of the given value.\n           *\n           * @param {any} o\n           * @returns {string}\n           * @example\n           * type(null)      === 'Null'\n           * type(undefined) === 'Undefined'\n           * type(123)       === 'Number'\n           * type('foo')     === 'String'\n           * type(true)      === 'Boolean'\n           * type([1, 2])    === 'Array'\n           * type({})        === 'Object'\n           * type(String)    === 'Function'\n           * type(/abc+/)    === 'RegExp'\n           */\n          type: function(o) {\n            return Object.prototype.toString.call(o).slice(8, -1);\n          },\n          /**\n           * Returns a unique number for the given object. Later calls will still return the same number.\n           *\n           * @param {Object} obj\n           * @returns {number}\n           */\n          objId: function(obj) {\n            if (!obj[\"__id\"]) {\n              Object.defineProperty(obj, \"__id\", { value: ++uniqueId });\n            }\n            return obj[\"__id\"];\n          },\n          /**\n           * Creates a deep clone of the given object.\n           *\n           * The main intended use of this function is to clone language definitions.\n           *\n           * @param {T} o\n           * @param {Record<number, any>} [visited]\n           * @returns {T}\n           * @template T\n           */\n          clone: function deepClone(o, visited) {\n            visited = visited || {};\n            var clone;\n            var id;\n            switch (_.util.type(o)) {\n              case \"Object\":\n                id = _.util.objId(o);\n                if (visited[id]) {\n                  return visited[id];\n                }\n                clone = /** @type {Record<string, any>} */\n                {};\n                visited[id] = clone;\n                for (var key in o) {\n                  if (o.hasOwnProperty(key)) {\n                    clone[key] = deepClone(o[key], visited);\n                  }\n                }\n                return (\n                  /** @type {any} */\n                  clone\n                );\n              case \"Array\":\n                id = _.util.objId(o);\n                if (visited[id]) {\n                  return visited[id];\n                }\n                clone = [];\n                visited[id] = clone;\n                /** @type {Array} */\n                /** @type {any} */\n                o.forEach(function(v, i) {\n                  clone[i] = deepClone(v, visited);\n                });\n                return (\n                  /** @type {any} */\n                  clone\n                );\n              default:\n                return o;\n            }\n          },\n          /**\n           * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n           *\n           * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n           *\n           * @param {Element} element\n           * @returns {string}\n           */\n          getLanguage: function(element) {\n            while (element) {\n              var m = lang.exec(element.className);\n              if (m) {\n                return m[1].toLowerCase();\n              }\n              element = element.parentElement;\n            }\n            return \"none\";\n          },\n          /**\n           * Sets the Prism `language-xxxx` class of the given element.\n           *\n           * @param {Element} element\n           * @param {string} language\n           * @returns {void}\n           */\n          setLanguage: function(element, language) {\n            element.className = element.className.replace(RegExp(lang, \"gi\"), \"\");\n            element.classList.add(\"language-\" + language);\n          },\n          /**\n           * Returns the script element that is currently executing.\n           *\n           * This does __not__ work for line script element.\n           *\n           * @returns {HTMLScriptElement | null}\n           */\n          currentScript: function() {\n            if (typeof document === \"undefined\") {\n              return null;\n            }\n            if (\"currentScript\" in document && 1 < 2) {\n              return (\n                /** @type {any} */\n                document.currentScript\n              );\n            }\n            try {\n              throw new Error();\n            } catch (err) {\n              var src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n              if (src) {\n                var scripts = document.getElementsByTagName(\"script\");\n                for (var i in scripts) {\n                  if (scripts[i].src == src) {\n                    return scripts[i];\n                  }\n                }\n              }\n              return null;\n            }\n          },\n          /**\n           * Returns whether a given class is active for `element`.\n           *\n           * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n           * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n           * given class is just the given class with a `no-` prefix.\n           *\n           * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n           * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n           * ancestors have the given class or the negated version of it, then the default activation will be returned.\n           *\n           * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n           * version of it, the class is considered active.\n           *\n           * @param {Element} element\n           * @param {string} className\n           * @param {boolean} [defaultActivation=false]\n           * @returns {boolean}\n           */\n          isActive: function(element, className, defaultActivation) {\n            var no = \"no-\" + className;\n            while (element) {\n              var classList = element.classList;\n              if (classList.contains(className)) {\n                return true;\n              }\n              if (classList.contains(no)) {\n                return false;\n              }\n              element = element.parentElement;\n            }\n            return !!defaultActivation;\n          }\n        },\n        /**\n         * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n         *\n         * @namespace\n         * @memberof Prism\n         * @public\n         */\n        languages: {\n          /**\n           * The grammar for plain, unformatted text.\n           */\n          plain: plainTextGrammar,\n          plaintext: plainTextGrammar,\n          text: plainTextGrammar,\n          txt: plainTextGrammar,\n          /**\n           * Creates a deep copy of the language with the given id and appends the given tokens.\n           *\n           * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n           * will be overwritten at its original position.\n           *\n           * ## Best practices\n           *\n           * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n           * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n           * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n           *\n           * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n           * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n           *\n           * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n           * @param {Grammar} redef The new tokens to append.\n           * @returns {Grammar} The new language created.\n           * @public\n           * @example\n           * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n           *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n           *     // at its original position\n           *     'comment': { ... },\n           *     // CSS doesn't have a 'color' token, so this token will be appended\n           *     'color': /\\b(?:red|green|blue)\\b/\n           * });\n           */\n          extend: function(id, redef) {\n            var lang2 = _.util.clone(_.languages[id]);\n            for (var key in redef) {\n              lang2[key] = redef[key];\n            }\n            return lang2;\n          },\n          /**\n           * Inserts tokens _before_ another token in a language definition or any other grammar.\n           *\n           * ## Usage\n           *\n           * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n           * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n           * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n           * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n           * this:\n           *\n           * ```js\n           * Prism.languages.markup.style = {\n           *     // token\n           * };\n           * ```\n           *\n           * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n           * before existing tokens. For the CSS example above, you would use it like this:\n           *\n           * ```js\n           * Prism.languages.insertBefore('markup', 'cdata', {\n           *     'style': {\n           *         // token\n           *     }\n           * });\n           * ```\n           *\n           * ## Special cases\n           *\n           * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n           * will be ignored.\n           *\n           * This behavior can be used to insert tokens after `before`:\n           *\n           * ```js\n           * Prism.languages.insertBefore('markup', 'comment', {\n           *     'comment': Prism.languages.markup.comment,\n           *     // tokens after 'comment'\n           * });\n           * ```\n           *\n           * ## Limitations\n           *\n           * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n           * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n           * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n           * deleting properties which is necessary to insert at arbitrary positions.\n           *\n           * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n           * Instead, it will create a new object and replace all references to the target object with the new one. This\n           * can be done without temporarily deleting properties, so the iteration order is well-defined.\n           *\n           * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n           * you hold the target object in a variable, then the value of the variable will not change.\n           *\n           * ```js\n           * var oldMarkup = Prism.languages.markup;\n           * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n           *\n           * assert(oldMarkup !== Prism.languages.markup);\n           * assert(newMarkup === Prism.languages.markup);\n           * ```\n           *\n           * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n           * object to be modified.\n           * @param {string} before The key to insert before.\n           * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n           * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n           * object to be modified.\n           *\n           * Defaults to `Prism.languages`.\n           * @returns {Grammar} The new grammar object.\n           * @public\n           */\n          insertBefore: function(inside, before, insert, root) {\n            root = root || /** @type {any} */\n            _.languages;\n            var grammar = root[inside];\n            var ret = {};\n            for (var token in grammar) {\n              if (grammar.hasOwnProperty(token)) {\n                if (token == before) {\n                  for (var newToken in insert) {\n                    if (insert.hasOwnProperty(newToken)) {\n                      ret[newToken] = insert[newToken];\n                    }\n                  }\n                }\n                if (!insert.hasOwnProperty(token)) {\n                  ret[token] = grammar[token];\n                }\n              }\n            }\n            var old = root[inside];\n            root[inside] = ret;\n            _.languages.DFS(_.languages, function(key, value) {\n              if (value === old && key != inside) {\n                this[key] = ret;\n              }\n            });\n            return ret;\n          },\n          // Traverse a language definition with Depth First Search\n          DFS: function DFS(o, callback, type, visited) {\n            visited = visited || {};\n            var objId = _.util.objId;\n            for (var i in o) {\n              if (o.hasOwnProperty(i)) {\n                callback.call(o, i, o[i], type || i);\n                var property = o[i];\n                var propertyType = _.util.type(property);\n                if (propertyType === \"Object\" && !visited[objId(property)]) {\n                  visited[objId(property)] = true;\n                  DFS(property, callback, null, visited);\n                } else if (propertyType === \"Array\" && !visited[objId(property)]) {\n                  visited[objId(property)] = true;\n                  DFS(property, callback, i, visited);\n                }\n              }\n            }\n          }\n        },\n        plugins: {},\n        /**\n         * This is the most high-level function in Prism’s API.\n         * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n         * each one of them.\n         *\n         * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n         *\n         * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n         * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n         * @memberof Prism\n         * @public\n         */\n        highlightAll: function(async, callback) {\n          _.highlightAllUnder(document, async, callback);\n        },\n        /**\n         * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n         * {@link Prism.highlightElement} on each one of them.\n         *\n         * The following hooks will be run:\n         * 1. `before-highlightall`\n         * 2. `before-all-elements-highlight`\n         * 3. All hooks of {@link Prism.highlightElement} for each element.\n         *\n         * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n         * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n         * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n         * @memberof Prism\n         * @public\n         */\n        highlightAllUnder: function(container, async, callback) {\n          var env = {\n            callback,\n            container,\n            selector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n          };\n          _.hooks.run(\"before-highlightall\", env);\n          env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n          _.hooks.run(\"before-all-elements-highlight\", env);\n          for (var i = 0, element; element = env.elements[i++]; ) {\n            _.highlightElement(element, async === true, env.callback);\n          }\n        },\n        /**\n         * Highlights the code inside a single element.\n         *\n         * The following hooks will be run:\n         * 1. `before-sanity-check`\n         * 2. `before-highlight`\n         * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n         * 4. `before-insert`\n         * 5. `after-highlight`\n         * 6. `complete`\n         *\n         * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n         * the element's language.\n         *\n         * @param {Element} element The element containing the code.\n         * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n         * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n         * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n         * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n         *\n         * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n         * asynchronous highlighting to work. You can build your own bundle on the\n         * [Download page](https://prismjs.com/download.html).\n         * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n         * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n         * @memberof Prism\n         * @public\n         */\n        highlightElement: function(element, async, callback) {\n          var language = _.util.getLanguage(element);\n          var grammar = _.languages[language];\n          _.util.setLanguage(element, language);\n          var parent = element.parentElement;\n          if (parent && parent.nodeName.toLowerCase() === \"pre\") {\n            _.util.setLanguage(parent, language);\n          }\n          var code = element.textContent;\n          var env = {\n            element,\n            language,\n            grammar,\n            code\n          };\n          function insertHighlightedCode(highlightedCode) {\n            env.highlightedCode = highlightedCode;\n            _.hooks.run(\"before-insert\", env);\n            env.element.innerHTML = env.highlightedCode;\n            _.hooks.run(\"after-highlight\", env);\n            _.hooks.run(\"complete\", env);\n            callback && callback.call(env.element);\n          }\n          _.hooks.run(\"before-sanity-check\", env);\n          parent = env.element.parentElement;\n          if (parent && parent.nodeName.toLowerCase() === \"pre\" && !parent.hasAttribute(\"tabindex\")) {\n            parent.setAttribute(\"tabindex\", \"0\");\n          }\n          if (!env.code) {\n            _.hooks.run(\"complete\", env);\n            callback && callback.call(env.element);\n            return;\n          }\n          _.hooks.run(\"before-highlight\", env);\n          if (!env.grammar) {\n            insertHighlightedCode(_.util.encode(env.code));\n            return;\n          }\n          if (async && _self2.Worker) {\n            var worker = new Worker(_.filename);\n            worker.onmessage = function(evt) {\n              insertHighlightedCode(evt.data);\n            };\n            worker.postMessage(JSON.stringify({\n              language: env.language,\n              code: env.code,\n              immediateClose: true\n            }));\n          } else {\n            insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n          }\n        },\n        /**\n         * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n         * and the language definitions to use, and returns a string with the HTML produced.\n         *\n         * The following hooks will be run:\n         * 1. `before-tokenize`\n         * 2. `after-tokenize`\n         * 3. `wrap`: On each {@link Token}.\n         *\n         * @param {string} text A string with the code to be highlighted.\n         * @param {Grammar} grammar An object containing the tokens to use.\n         *\n         * Usually a language definition like `Prism.languages.markup`.\n         * @param {string} language The name of the language definition passed to `grammar`.\n         * @returns {string} The highlighted HTML.\n         * @memberof Prism\n         * @public\n         * @example\n         * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n         */\n        highlight: function(text, grammar, language) {\n          var env = {\n            code: text,\n            grammar,\n            language\n          };\n          _.hooks.run(\"before-tokenize\", env);\n          if (!env.grammar) {\n            throw new Error('The language \"' + env.language + '\" has no grammar.');\n          }\n          env.tokens = _.tokenize(env.code, env.grammar);\n          _.hooks.run(\"after-tokenize\", env);\n          return Token.stringify(_.util.encode(env.tokens), env.language);\n        },\n        /**\n         * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n         * and the language definitions to use, and returns an array with the tokenized code.\n         *\n         * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n         *\n         * This method could be useful in other contexts as well, as a very crude parser.\n         *\n         * @param {string} text A string with the code to be highlighted.\n         * @param {Grammar} grammar An object containing the tokens to use.\n         *\n         * Usually a language definition like `Prism.languages.markup`.\n         * @returns {TokenStream} An array of strings and tokens, a token stream.\n         * @memberof Prism\n         * @public\n         * @example\n         * let code = `var foo = 0;`;\n         * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n         * tokens.forEach(token => {\n         *     if (token instanceof Prism.Token && token.type === 'number') {\n         *         console.log(`Found numeric literal: ${token.content}`);\n         *     }\n         * });\n         */\n        tokenize: function(text, grammar) {\n          var rest = grammar.rest;\n          if (rest) {\n            for (var token in rest) {\n              grammar[token] = rest[token];\n            }\n            delete grammar.rest;\n          }\n          var tokenList = new LinkedList();\n          addAfter(tokenList, tokenList.head, text);\n          matchGrammar(text, tokenList, grammar, tokenList.head, 0);\n          return toArray(tokenList);\n        },\n        /**\n         * @namespace\n         * @memberof Prism\n         * @public\n         */\n        hooks: {\n          all: {},\n          /**\n           * Adds the given callback to the list of callbacks for the given hook.\n           *\n           * The callback will be invoked when the hook it is registered for is run.\n           * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n           *\n           * One callback function can be registered to multiple hooks and the same hook multiple times.\n           *\n           * @param {string} name The name of the hook.\n           * @param {HookCallback} callback The callback function which is given environment variables.\n           * @public\n           */\n          add: function(name, callback) {\n            var hooks = _.hooks.all;\n            hooks[name] = hooks[name] || [];\n            hooks[name].push(callback);\n          },\n          /**\n           * Runs a hook invoking all registered callbacks with the given environment variables.\n           *\n           * Callbacks will be invoked synchronously and in the order in which they were registered.\n           *\n           * @param {string} name The name of the hook.\n           * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n           * @public\n           */\n          run: function(name, env) {\n            var callbacks = _.hooks.all[name];\n            if (!callbacks || !callbacks.length) {\n              return;\n            }\n            for (var i = 0, callback; callback = callbacks[i++]; ) {\n              callback(env);\n            }\n          }\n        },\n        Token\n      };\n      _self2.Prism = _;\n      function Token(type, content, alias, matchedStr) {\n        this.type = type;\n        this.content = content;\n        this.alias = alias;\n        this.length = (matchedStr || \"\").length | 0;\n      }\n      Token.stringify = function stringify(o, language) {\n        if (typeof o == \"string\") {\n          return o;\n        }\n        if (Array.isArray(o)) {\n          var s = \"\";\n          o.forEach(function(e) {\n            s += stringify(e, language);\n          });\n          return s;\n        }\n        var env = {\n          type: o.type,\n          content: stringify(o.content, language),\n          tag: \"span\",\n          classes: [\"token\", o.type],\n          attributes: {},\n          language\n        };\n        var aliases = o.alias;\n        if (aliases) {\n          if (Array.isArray(aliases)) {\n            Array.prototype.push.apply(env.classes, aliases);\n          } else {\n            env.classes.push(aliases);\n          }\n        }\n        _.hooks.run(\"wrap\", env);\n        var attributes = \"\";\n        for (var name in env.attributes) {\n          attributes += \" \" + name + '=\"' + (env.attributes[name] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n        }\n        return \"<\" + env.tag + ' class=\"' + env.classes.join(\" \") + '\"' + attributes + \">\" + env.content + \"</\" + env.tag + \">\";\n      };\n      function matchPattern(pattern, pos, text, lookbehind) {\n        pattern.lastIndex = pos;\n        var match = pattern.exec(text);\n        if (match && lookbehind && match[1]) {\n          var lookbehindLength = match[1].length;\n          match.index += lookbehindLength;\n          match[0] = match[0].slice(lookbehindLength);\n        }\n        return match;\n      }\n      function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n        for (var token in grammar) {\n          if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n            continue;\n          }\n          var patterns = grammar[token];\n          patterns = Array.isArray(patterns) ? patterns : [patterns];\n          for (var j = 0; j < patterns.length; ++j) {\n            if (rematch && rematch.cause == token + \",\" + j) {\n              return;\n            }\n            var patternObj = patterns[j];\n            var inside = patternObj.inside;\n            var lookbehind = !!patternObj.lookbehind;\n            var greedy = !!patternObj.greedy;\n            var alias = patternObj.alias;\n            if (greedy && !patternObj.pattern.global) {\n              var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n              patternObj.pattern = RegExp(patternObj.pattern.source, flags + \"g\");\n            }\n            var pattern = patternObj.pattern || patternObj;\n            for (var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {\n              if (rematch && pos >= rematch.reach) {\n                break;\n              }\n              var str = currentNode.value;\n              if (tokenList.length > text.length) {\n                return;\n              }\n              if (str instanceof Token) {\n                continue;\n              }\n              var removeCount = 1;\n              var match;\n              if (greedy) {\n                match = matchPattern(pattern, pos, text, lookbehind);\n                if (!match || match.index >= text.length) {\n                  break;\n                }\n                var from = match.index;\n                var to = match.index + match[0].length;\n                var p = pos;\n                p += currentNode.value.length;\n                while (from >= p) {\n                  currentNode = currentNode.next;\n                  p += currentNode.value.length;\n                }\n                p -= currentNode.value.length;\n                pos = p;\n                if (currentNode.value instanceof Token) {\n                  continue;\n                }\n                for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === \"string\"); k = k.next) {\n                  removeCount++;\n                  p += k.value.length;\n                }\n                removeCount--;\n                str = text.slice(pos, p);\n                match.index -= pos;\n              } else {\n                match = matchPattern(pattern, 0, str, lookbehind);\n                if (!match) {\n                  continue;\n                }\n              }\n              var from = match.index;\n              var matchStr = match[0];\n              var before = str.slice(0, from);\n              var after = str.slice(from + matchStr.length);\n              var reach = pos + str.length;\n              if (rematch && reach > rematch.reach) {\n                rematch.reach = reach;\n              }\n              var removeFrom = currentNode.prev;\n              if (before) {\n                removeFrom = addAfter(tokenList, removeFrom, before);\n                pos += before.length;\n              }\n              removeRange(tokenList, removeFrom, removeCount);\n              var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n              currentNode = addAfter(tokenList, removeFrom, wrapped);\n              if (after) {\n                addAfter(tokenList, currentNode, after);\n              }\n              if (removeCount > 1) {\n                var nestedRematch = {\n                  cause: token + \",\" + j,\n                  reach\n                };\n                matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n                if (rematch && nestedRematch.reach > rematch.reach) {\n                  rematch.reach = nestedRematch.reach;\n                }\n              }\n            }\n          }\n        }\n      }\n      function LinkedList() {\n        var head = { value: null, prev: null, next: null };\n        var tail = { value: null, prev: head, next: null };\n        head.next = tail;\n        this.head = head;\n        this.tail = tail;\n        this.length = 0;\n      }\n      function addAfter(list, node, value) {\n        var next = node.next;\n        var newNode = { value, prev: node, next };\n        node.next = newNode;\n        next.prev = newNode;\n        list.length++;\n        return newNode;\n      }\n      function removeRange(list, node, count) {\n        var next = node.next;\n        for (var i = 0; i < count && next !== list.tail; i++) {\n          next = next.next;\n        }\n        node.next = next;\n        next.prev = node;\n        list.length -= i;\n      }\n      function toArray(list) {\n        var array = [];\n        var node = list.head.next;\n        while (node !== list.tail) {\n          array.push(node.value);\n          node = node.next;\n        }\n        return array;\n      }\n      if (!_self2.document) {\n        if (!_self2.addEventListener) {\n          return _;\n        }\n        if (!_.disableWorkerMessageHandler) {\n          _self2.addEventListener(\"message\", function(evt) {\n            var message = JSON.parse(evt.data);\n            var lang2 = message.language;\n            var code = message.code;\n            var immediateClose = message.immediateClose;\n            _self2.postMessage(_.highlight(code, _.languages[lang2], lang2));\n            if (immediateClose) {\n              _self2.close();\n            }\n          }, false);\n        }\n        return _;\n      }\n      var script = _.util.currentScript();\n      if (script) {\n        _.filename = script.src;\n        if (script.hasAttribute(\"data-manual\")) {\n          _.manual = true;\n        }\n      }\n      function highlightAutomaticallyCallback() {\n        if (!_.manual) {\n          _.highlightAll();\n        }\n      }\n      if (!_.manual) {\n        var readyState = document.readyState;\n        if (readyState === \"loading\" || readyState === \"interactive\" && script && script.defer) {\n          document.addEventListener(\"DOMContentLoaded\", highlightAutomaticallyCallback);\n        } else {\n          if (window.requestAnimationFrame) {\n            window.requestAnimationFrame(highlightAutomaticallyCallback);\n          } else {\n            window.setTimeout(highlightAutomaticallyCallback, 16);\n          }\n        }\n      }\n      return _;\n    }(_self);\n    if (typeof module !== \"undefined\" && module.exports) {\n      module.exports = Prism;\n    }\n    if (typeof global !== \"undefined\") {\n      global.Prism = Prism;\n    }\n  }\n});\n\n// node_modules/refractor/core.js\nvar require_core = __commonJS({\n  \"node_modules/refractor/core.js\"(exports, module) {\n    var import_dist = __toESM(require_dist());\n    var ctx = typeof globalThis === \"object\" ? globalThis : typeof self === \"object\" ? self : typeof window === \"object\" ? window : typeof global === \"object\" ? global : {};\n    var restore = capture();\n    ctx.Prism = { manual: true, disableWorkerMessageHandler: true };\n    var h = require_hastscript();\n    var decode = require_parse_entities();\n    var Prism = require_prism_core();\n    var markup = require_markup();\n    var css = require_css();\n    var clike = require_clike();\n    var js = require_javascript();\n    restore();\n    var own = {}.hasOwnProperty;\n    function Refractor() {\n    }\n    Refractor.prototype = Prism;\n    var refract = new Refractor();\n    module.exports = refract;\n    refract.highlight = highlight;\n    refract.register = register;\n    refract.alias = alias;\n    refract.registered = registered;\n    refract.listLanguages = listLanguages;\n    register(markup);\n    register(css);\n    register(clike);\n    register(js);\n    refract.util.encode = encode;\n    refract.Token.stringify = stringify;\n    function register(grammar) {\n      if (typeof grammar !== \"function\" || !grammar.displayName) {\n        throw new Error(\"Expected `function` for `grammar`, got `\" + grammar + \"`\");\n      }\n      if (refract.languages[grammar.displayName] === void 0) {\n        grammar(refract);\n      }\n    }\n    function alias(name, alias2) {\n      var languages = refract.languages;\n      var map = name;\n      var key;\n      var list;\n      var length;\n      var index;\n      if (alias2) {\n        map = {};\n        map[name] = alias2;\n      }\n      for (key in map) {\n        list = map[key];\n        list = typeof list === \"string\" ? [list] : list;\n        length = list.length;\n        index = -1;\n        while (++index < length) {\n          languages[list[index]] = languages[key];\n        }\n      }\n    }\n    function highlight(value, name) {\n      var sup = Prism.highlight;\n      var grammar;\n      if (typeof value !== \"string\") {\n        throw new Error(\"Expected `string` for `value`, got `\" + value + \"`\");\n      }\n      if (refract.util.type(name) === \"Object\") {\n        grammar = name;\n        name = null;\n      } else {\n        if (typeof name !== \"string\") {\n          throw new Error(\"Expected `string` for `name`, got `\" + name + \"`\");\n        }\n        if (own.call(refract.languages, name)) {\n          grammar = refract.languages[name];\n        } else {\n          throw new Error(\"Unknown language: `\" + name + \"` is not registered\");\n        }\n      }\n      return sup.call(this, value, grammar, name);\n    }\n    function registered(language) {\n      if (typeof language !== \"string\") {\n        throw new Error(\"Expected `string` for `language`, got `\" + language + \"`\");\n      }\n      return own.call(refract.languages, language);\n    }\n    function listLanguages() {\n      var languages = refract.languages;\n      var list = [];\n      var language;\n      for (language in languages) {\n        if (own.call(languages, language) && typeof languages[language] === \"object\") {\n          list.push(language);\n        }\n      }\n      return list;\n    }\n    function stringify(value, language, parent) {\n      var env;\n      if (typeof value === \"string\") {\n        return { type: \"text\", value };\n      }\n      if (refract.util.type(value) === \"Array\") {\n        return stringifyAll(value, language);\n      }\n      env = {\n        type: value.type,\n        content: refract.Token.stringify(value.content, language, parent),\n        tag: \"span\",\n        classes: [\"token\", value.type],\n        attributes: {},\n        language,\n        parent\n      };\n      if (value.alias) {\n        env.classes = env.classes.concat(value.alias);\n      }\n      refract.hooks.run(\"wrap\", env);\n      return h(\n        env.tag + \".\" + env.classes.join(\".\"),\n        attributes(env.attributes),\n        env.content\n      );\n    }\n    function stringifyAll(values, language) {\n      var result = [];\n      var length = values.length;\n      var index = -1;\n      var value;\n      while (++index < length) {\n        value = values[index];\n        if (value !== \"\" && value !== null && value !== void 0) {\n          result.push(value);\n        }\n      }\n      index = -1;\n      length = result.length;\n      while (++index < length) {\n        value = result[index];\n        result[index] = refract.Token.stringify(value, language, result);\n      }\n      return result;\n    }\n    function encode(tokens) {\n      return tokens;\n    }\n    function attributes(attrs) {\n      var key;\n      for (key in attrs) {\n        attrs[key] = decode(attrs[key]);\n      }\n      return attrs;\n    }\n    function capture() {\n      var defined = \"Prism\" in ctx;\n      var current = defined ? ctx.Prism : void 0;\n      return restore2;\n      function restore2() {\n        if (defined) {\n          ctx.Prism = current;\n        } else {\n          delete ctx.Prism;\n        }\n        defined = void 0;\n        current = void 0;\n      }\n    }\n  }\n});\n\nexport {\n  require_core\n};\n/*! Bundled license information:\n\nprismjs/components/prism-core.js:\n  (**\n   * Prism: Lightweight, robust, elegant syntax highlighting\n   *\n   * @license MIT <https://opensource.org/licenses/MIT>\n   * @author Lea Verou <https://lea.verou.me>\n   * @namespace\n   * @public\n   *)\n*/\n//# sourceMappingURL=chunk-WKT44JLE.js.map\n",
      "start": 1703289478893,
      "end": 1703289478894,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
