{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/react-syntax-highlighter/dist/esm/async-syntax-highlighter.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport highlight from './highlight';\nexport default (function (options) {\n  var loader = options.loader,\n      isLanguageRegistered = options.isLanguageRegistered,\n      registerLanguage = options.registerLanguage,\n      languageLoaders = options.languageLoaders,\n      noAsyncLoadingLanguages = options.noAsyncLoadingLanguages;\n\n  var ReactAsyncHighlighter = /*#__PURE__*/function (_React$PureComponent) {\n    _inherits(ReactAsyncHighlighter, _React$PureComponent);\n\n    var _super = _createSuper(ReactAsyncHighlighter);\n\n    function ReactAsyncHighlighter() {\n      _classCallCheck(this, ReactAsyncHighlighter);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(ReactAsyncHighlighter, [{\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        if (!ReactAsyncHighlighter.isRegistered(this.props.language) && languageLoaders) {\n          this.loadLanguage();\n        }\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this = this;\n\n        if (!ReactAsyncHighlighter.astGeneratorPromise) {\n          ReactAsyncHighlighter.loadAstGenerator();\n        }\n\n        if (!ReactAsyncHighlighter.astGenerator) {\n          ReactAsyncHighlighter.astGeneratorPromise.then(function () {\n            _this.forceUpdate();\n          });\n        }\n\n        if (!ReactAsyncHighlighter.isRegistered(this.props.language) && languageLoaders) {\n          this.loadLanguage();\n        }\n      }\n    }, {\n      key: \"loadLanguage\",\n      value: function loadLanguage() {\n        var _this2 = this;\n\n        var language = this.props.language;\n\n        if (language === 'text') {\n          return;\n        }\n\n        ReactAsyncHighlighter.loadLanguage(language).then(function () {\n          return _this2.forceUpdate();\n        })[\"catch\"](function () {});\n      }\n    }, {\n      key: \"normalizeLanguage\",\n      value: function normalizeLanguage(language) {\n        return ReactAsyncHighlighter.isSupportedLanguage(language) ? language : 'text';\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return /*#__PURE__*/React.createElement(ReactAsyncHighlighter.highlightInstance, _extends({}, this.props, {\n          language: this.normalizeLanguage(this.props.language),\n          astGenerator: ReactAsyncHighlighter.astGenerator\n        }));\n      }\n    }], [{\n      key: \"preload\",\n      value: function preload() {\n        return ReactAsyncHighlighter.loadAstGenerator();\n      }\n    }, {\n      key: \"loadLanguage\",\n      value: function () {\n        var _loadLanguage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(language) {\n          var languageLoader;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  languageLoader = languageLoaders[language];\n\n                  if (!(typeof languageLoader === 'function')) {\n                    _context.next = 5;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", languageLoader(ReactAsyncHighlighter.registerLanguage));\n\n                case 5:\n                  throw new Error(\"Language \".concat(language, \" not supported\"));\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function loadLanguage(_x) {\n          return _loadLanguage.apply(this, arguments);\n        }\n\n        return loadLanguage;\n      }()\n    }, {\n      key: \"isSupportedLanguage\",\n      value: function isSupportedLanguage(language) {\n        return ReactAsyncHighlighter.isRegistered(language) || typeof languageLoaders[language] === 'function';\n      }\n    }, {\n      key: \"loadAstGenerator\",\n      value: function loadAstGenerator() {\n        ReactAsyncHighlighter.astGeneratorPromise = loader().then(function (astGenerator) {\n          ReactAsyncHighlighter.astGenerator = astGenerator;\n\n          if (registerLanguage) {\n            ReactAsyncHighlighter.languages.forEach(function (language, name) {\n              return registerLanguage(astGenerator, name, language);\n            });\n          }\n        });\n        return ReactAsyncHighlighter.astGeneratorPromise;\n      }\n    }]);\n\n    return ReactAsyncHighlighter;\n  }(React.PureComponent);\n\n  _defineProperty(ReactAsyncHighlighter, \"astGenerator\", null);\n\n  _defineProperty(ReactAsyncHighlighter, \"highlightInstance\", highlight(null, {}));\n\n  _defineProperty(ReactAsyncHighlighter, \"astGeneratorPromise\", null);\n\n  _defineProperty(ReactAsyncHighlighter, \"languages\", new Map());\n\n  _defineProperty(ReactAsyncHighlighter, \"supportedLanguages\", options.supportedLanguages || Object.keys(languageLoaders || {}));\n\n  _defineProperty(ReactAsyncHighlighter, \"isRegistered\", function (language) {\n    if (noAsyncLoadingLanguages) {\n      return true;\n    }\n\n    if (!registerLanguage) {\n      throw new Error(\"Current syntax highlighter doesn't support registration of languages\");\n    }\n\n    if (!ReactAsyncHighlighter.astGenerator) {\n      // Ast generator not available yet, but language will be registered once it is.\n      return ReactAsyncHighlighter.languages.has(language);\n    }\n\n    return isLanguageRegistered(ReactAsyncHighlighter.astGenerator, language);\n  });\n\n  _defineProperty(ReactAsyncHighlighter, \"registerLanguage\", function (name, language) {\n    if (!registerLanguage) {\n      throw new Error(\"Current syntax highlighter doesn't support registration of languages\");\n    }\n\n    if (ReactAsyncHighlighter.astGenerator) {\n      return registerLanguage(ReactAsyncHighlighter.astGenerator, name, language);\n    } else {\n      ReactAsyncHighlighter.languages.set(name, language);\n    }\n  });\n\n  return ReactAsyncHighlighter;\n});",
      "start": 1702937444067,
      "end": 1702937444099,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444099,
      "end": 1702937444099,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444099,
      "end": 1702937444099,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444099,
      "end": 1702937444099,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444099,
      "end": 1702937444099,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444099,
      "end": 1702937444099,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444099,
      "end": 1702937444099,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444099,
      "end": 1702937444099,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444099,
      "end": 1702937444099,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444099,
      "end": 1702937444099,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444099,
      "end": 1702937444099,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937444099,
      "end": 1702937444099,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937444099,
      "end": 1702937444099,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444099,
      "end": 1702937444099,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444099,
      "end": 1702937444099,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444099,
      "end": 1702937444099,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444099,
      "end": 1702937444099,
      "order": "normal"
    }
  ]
}
