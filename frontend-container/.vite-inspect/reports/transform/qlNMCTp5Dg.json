{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/lodash/isEqual.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n",
      "start": 1702937442517,
      "end": 1702937442538,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937442538,
      "end": 1702937442538,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937442538,
      "end": 1702937442538,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937442538,
      "end": 1702937442538,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937442538,
      "end": 1702937442538,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937442538,
      "end": 1702937442538,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937442538,
      "end": 1702937442538,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937442538,
      "end": 1702937442538,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937442538,
      "end": 1702937442538,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937442538,
      "end": 1702937442538,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937442538,
      "end": 1702937442538,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/zepor/ssweb/frontend-container/node_modules/lodash/_baseIsEqual.js?commonjs-proxy\";\n\nvar baseIsEqual = require$$0;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nvar isEqual_1 = isEqual;\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(isEqual_1);\nexport { isEqual_1 as __moduleExports };",
      "start": 1702937442538,
      "end": 1702937445441,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;AAAA,IAAI,WAAW,GAAG,UAAyB,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE;AAC/B,EAAE,OAAO,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACnC,CAAC;AACD;IACA,SAAc,GAAG,OAAO"
      }
    },
    {
      "name": "inject",
      "start": 1702937445441,
      "end": 1702937445441,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445441,
      "end": 1702937445441,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445441,
      "end": 1702937445441,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445441,
      "end": 1702937445441,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445441,
      "end": 1702937445441,
      "order": "normal"
    }
  ]
}
