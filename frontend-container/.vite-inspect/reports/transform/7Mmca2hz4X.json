{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/mermaid.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = mermaid\nmermaid.displayName = 'mermaid'\nmermaid.aliases = []\nfunction mermaid(Prism) {\n  Prism.languages.mermaid = {\n    comment: {\n      pattern: /%%.*/,\n      greedy: true\n    },\n    style: {\n      pattern:\n        /^([ \\t]*(?:classDef|linkStyle|style)[ \\t]+[\\w$-]+[ \\t]+)\\w.*[^\\s;]/m,\n      lookbehind: true,\n      inside: {\n        property: /\\b\\w[\\w-]*(?=[ \\t]*:)/,\n        operator: /:/,\n        punctuation: /,/\n      }\n    },\n    'inter-arrow-label': {\n      pattern:\n        /([^<>ox.=-])(?:-[-.]|==)(?![<>ox.=-])[ \\t]*(?:\"[^\"\\r\\n]*\"|[^\\s\".=-](?:[^\\r\\n.=-]*[^\\s.=-])?)[ \\t]*(?:\\.+->?|--+[->]|==+[=>])(?![<>ox.=-])/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        arrow: {\n          pattern: /(?:\\.+->?|--+[->]|==+[=>])$/,\n          alias: 'operator'\n        },\n        label: {\n          pattern: /^([\\s\\S]{2}[ \\t]*)\\S(?:[\\s\\S]*\\S)?/,\n          lookbehind: true,\n          alias: 'property'\n        },\n        'arrow-head': {\n          pattern: /^\\S+/,\n          alias: ['arrow', 'operator']\n        }\n      }\n    },\n    arrow: [\n      // This might look complex but it really isn't.\n      // There are many possible arrows (see tests) and it's impossible to fit all of them into one pattern. The\n      // problem is that we only have one lookbehind per pattern. However, we cannot disallow too many arrow\n      // characters in the one lookbehind because that would create too many false negatives. So we have to split the\n      // arrows into different patterns.\n      {\n        // ER diagram\n        pattern: /(^|[^{}|o.-])[|}][|o](?:--|\\.\\.)[|o][|{](?![{}|o.-])/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      {\n        // flow chart\n        // (?:==+|--+|-\\.*-)\n        pattern:\n          /(^|[^<>ox.=-])(?:[<ox](?:==+|--+|-\\.*-)[>ox]?|(?:==+|--+|-\\.*-)[>ox]|===+|---+|-\\.+-)(?![<>ox.=-])/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      {\n        // sequence diagram\n        pattern:\n          /(^|[^<>()x-])(?:--?(?:>>|[x>)])(?![<>()x])|(?:<<|[x<(])--?(?!-))/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      {\n        // class diagram\n        pattern:\n          /(^|[^<>|*o.-])(?:[*o]--|--[*o]|<\\|?(?:--|\\.\\.)|(?:--|\\.\\.)\\|?>|--|\\.\\.)(?![<>|*o.-])/,\n        lookbehind: true,\n        alias: 'operator'\n      }\n    ],\n    label: {\n      pattern: /(^|[^|<])\\|(?:[^\\r\\n\"|]|\"[^\"\\r\\n]*\")+\\|/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    },\n    text: {\n      pattern: /(?:[(\\[{]+|\\b>)(?:[^\\r\\n\"()\\[\\]{}]|\"[^\"\\r\\n]*\")+(?:[)\\]}]+|>)/,\n      alias: 'string'\n    },\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"/,\n      greedy: true\n    },\n    annotation: {\n      pattern:\n        /<<(?:abstract|choice|enumeration|fork|interface|join|service)>>|\\[\\[(?:choice|fork|join)\\]\\]/i,\n      alias: 'important'\n    },\n    keyword: [\n      // This language has both case-sensitive and case-insensitive keywords\n      {\n        pattern:\n          /(^[ \\t]*)(?:action|callback|class|classDef|classDiagram|click|direction|erDiagram|flowchart|gantt|gitGraph|graph|journey|link|linkStyle|pie|requirementDiagram|sequenceDiagram|stateDiagram|stateDiagram-v2|style|subgraph)(?![\\w$-])/m,\n        lookbehind: true,\n        greedy: true\n      },\n      {\n        pattern:\n          /(^[ \\t]*)(?:activate|alt|and|as|autonumber|deactivate|else|end(?:[ \\t]+note)?|loop|opt|par|participant|rect|state|note[ \\t]+(?:over|(?:left|right)[ \\t]+of))(?![\\w$-])/im,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    entity: /#[a-z0-9]+;/,\n    operator: {\n      pattern: /(\\w[ \\t]*)&(?=[ \\t]*\\w)|:::|:/,\n      lookbehind: true\n    },\n    punctuation: /[(){};]/\n  }\n}\n",
      "start": 1702937444967,
      "end": 1702937444992,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444992,
      "end": 1702937444992,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444992,
      "end": 1702937444992,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444992,
      "end": 1702937444992,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444992,
      "end": 1702937444992,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444992,
      "end": 1702937444992,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444992,
      "end": 1702937444992,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444992,
      "end": 1702937444992,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444992,
      "end": 1702937444992,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444992,
      "end": 1702937444992,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444992,
      "end": 1702937444992,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar mermaid_1;\nvar hasRequiredMermaid;\n\nfunction requireMermaid () {\n\tif (hasRequiredMermaid) return mermaid_1;\n\thasRequiredMermaid = 1;\n\t'use strict'\n\n\tmermaid_1 = mermaid\n\tmermaid.displayName = 'mermaid'\n\tmermaid.aliases = []\n\tfunction mermaid(Prism) {\n\t  Prism.languages.mermaid = {\n\t    comment: {\n\t      pattern: /%%.*/,\n\t      greedy: true\n\t    },\n\t    style: {\n\t      pattern:\n\t        /^([ \\t]*(?:classDef|linkStyle|style)[ \\t]+[\\w$-]+[ \\t]+)\\w.*[^\\s;]/m,\n\t      lookbehind: true,\n\t      inside: {\n\t        property: /\\b\\w[\\w-]*(?=[ \\t]*:)/,\n\t        operator: /:/,\n\t        punctuation: /,/\n\t      }\n\t    },\n\t    'inter-arrow-label': {\n\t      pattern:\n\t        /([^<>ox.=-])(?:-[-.]|==)(?![<>ox.=-])[ \\t]*(?:\"[^\"\\r\\n]*\"|[^\\s\".=-](?:[^\\r\\n.=-]*[^\\s.=-])?)[ \\t]*(?:\\.+->?|--+[->]|==+[=>])(?![<>ox.=-])/,\n\t      lookbehind: true,\n\t      greedy: true,\n\t      inside: {\n\t        arrow: {\n\t          pattern: /(?:\\.+->?|--+[->]|==+[=>])$/,\n\t          alias: 'operator'\n\t        },\n\t        label: {\n\t          pattern: /^([\\s\\S]{2}[ \\t]*)\\S(?:[\\s\\S]*\\S)?/,\n\t          lookbehind: true,\n\t          alias: 'property'\n\t        },\n\t        'arrow-head': {\n\t          pattern: /^\\S+/,\n\t          alias: ['arrow', 'operator']\n\t        }\n\t      }\n\t    },\n\t    arrow: [\n\t      // This might look complex but it really isn't.\n\t      // There are many possible arrows (see tests) and it's impossible to fit all of them into one pattern. The\n\t      // problem is that we only have one lookbehind per pattern. However, we cannot disallow too many arrow\n\t      // characters in the one lookbehind because that would create too many false negatives. So we have to split the\n\t      // arrows into different patterns.\n\t      {\n\t        // ER diagram\n\t        pattern: /(^|[^{}|o.-])[|}][|o](?:--|\\.\\.)[|o][|{](?![{}|o.-])/,\n\t        lookbehind: true,\n\t        alias: 'operator'\n\t      },\n\t      {\n\t        // flow chart\n\t        // (?:==+|--+|-\\.*-)\n\t        pattern:\n\t          /(^|[^<>ox.=-])(?:[<ox](?:==+|--+|-\\.*-)[>ox]?|(?:==+|--+|-\\.*-)[>ox]|===+|---+|-\\.+-)(?![<>ox.=-])/,\n\t        lookbehind: true,\n\t        alias: 'operator'\n\t      },\n\t      {\n\t        // sequence diagram\n\t        pattern:\n\t          /(^|[^<>()x-])(?:--?(?:>>|[x>)])(?![<>()x])|(?:<<|[x<(])--?(?!-))/,\n\t        lookbehind: true,\n\t        alias: 'operator'\n\t      },\n\t      {\n\t        // class diagram\n\t        pattern:\n\t          /(^|[^<>|*o.-])(?:[*o]--|--[*o]|<\\|?(?:--|\\.\\.)|(?:--|\\.\\.)\\|?>|--|\\.\\.)(?![<>|*o.-])/,\n\t        lookbehind: true,\n\t        alias: 'operator'\n\t      }\n\t    ],\n\t    label: {\n\t      pattern: /(^|[^|<])\\|(?:[^\\r\\n\"|]|\"[^\"\\r\\n]*\")+\\|/,\n\t      lookbehind: true,\n\t      greedy: true,\n\t      alias: 'property'\n\t    },\n\t    text: {\n\t      pattern: /(?:[(\\[{]+|\\b>)(?:[^\\r\\n\"()\\[\\]{}]|\"[^\"\\r\\n]*\")+(?:[)\\]}]+|>)/,\n\t      alias: 'string'\n\t    },\n\t    string: {\n\t      pattern: /\"[^\"\\r\\n]*\"/,\n\t      greedy: true\n\t    },\n\t    annotation: {\n\t      pattern:\n\t        /<<(?:abstract|choice|enumeration|fork|interface|join|service)>>|\\[\\[(?:choice|fork|join)\\]\\]/i,\n\t      alias: 'important'\n\t    },\n\t    keyword: [\n\t      // This language has both case-sensitive and case-insensitive keywords\n\t      {\n\t        pattern:\n\t          /(^[ \\t]*)(?:action|callback|class|classDef|classDiagram|click|direction|erDiagram|flowchart|gantt|gitGraph|graph|journey|link|linkStyle|pie|requirementDiagram|sequenceDiagram|stateDiagram|stateDiagram-v2|style|subgraph)(?![\\w$-])/m,\n\t        lookbehind: true,\n\t        greedy: true\n\t      },\n\t      {\n\t        pattern:\n\t          /(^[ \\t]*)(?:activate|alt|and|as|autonumber|deactivate|else|end(?:[ \\t]+note)?|loop|opt|par|participant|rect|state|note[ \\t]+(?:over|(?:left|right)[ \\t]+of))(?![\\w$-])/im,\n\t        lookbehind: true,\n\t        greedy: true\n\t      }\n\t    ],\n\t    entity: /#[a-z0-9]+;/,\n\t    operator: {\n\t      pattern: /(\\w[ \\t]*)&(?=[ \\t]*\\w)|:::|:/,\n\t      lookbehind: true\n\t    },\n\t    punctuation: /[(){};]/\n\t  }\n\t}\n\treturn mermaid_1;\n}\n\nexport { requireMermaid as __require };",
      "start": 1702937444992,
      "end": 1702937444992,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937444992,
      "end": 1702937444992,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444992,
      "end": 1702937444992,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444992,
      "end": 1702937444992,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444992,
      "end": 1702937444992,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444992,
      "end": 1702937444992,
      "order": "normal"
    }
  ]
}
