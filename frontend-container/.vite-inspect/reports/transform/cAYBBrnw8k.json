{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/@restart/ui/esm/NavItem.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "const _excluded = [\"as\", \"active\", \"eventKey\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport NavContext from './NavContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport Button from './Button';\nimport { dataAttr } from './DataKey';\nimport TabContext from './TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useNavItem({\n  key,\n  onClick,\n  active,\n  id,\n  role,\n  disabled\n}) {\n  const parentOnSelect = useContext(SelectableContext);\n  const navContext = useContext(NavContext);\n  const tabContext = useContext(TabContext);\n  let isActive = active;\n  const props = {\n    role\n  };\n  if (navContext) {\n    if (!role && navContext.role === 'tablist') props.role = 'tab';\n    const contextControllerId = navContext.getControllerId(key != null ? key : null);\n    const contextControlledId = navContext.getControlledId(key != null ? key : null);\n\n    // @ts-ignore\n    props[dataAttr('event-key')] = key;\n    props.id = contextControllerId || id;\n    isActive = active == null && key != null ? navContext.activeKey === key : active;\n\n    /**\n     * Simplified scenario for `mountOnEnter`.\n     *\n     * While it would make sense to keep 'aria-controls' for tabs that have been mounted at least\n     * once, it would also complicate the code quite a bit, for very little gain.\n     * The following implementation is probably good enough.\n     *\n     * @see https://github.com/react-restart/ui/pull/40#issuecomment-1009971561\n     */\n    if (isActive || !(tabContext != null && tabContext.unmountOnExit) && !(tabContext != null && tabContext.mountOnEnter)) props['aria-controls'] = contextControlledId;\n  }\n  if (props.role === 'tab') {\n    props['aria-selected'] = isActive;\n    if (!isActive) {\n      props.tabIndex = -1;\n    }\n    if (disabled) {\n      props.tabIndex = -1;\n      props['aria-disabled'] = true;\n    }\n  }\n  props.onClick = useEventCallback(e => {\n    if (disabled) return;\n    onClick == null ? void 0 : onClick(e);\n    if (key == null) {\n      return;\n    }\n    if (parentOnSelect && !e.isPropagationStopped()) {\n      parentOnSelect(key, e);\n    }\n  });\n  return [props, {\n    isActive\n  }];\n}\nconst NavItem = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      as: Component = Button,\n      active,\n      eventKey\n    } = _ref,\n    options = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [props, meta] = useNavItem(Object.assign({\n    key: makeEventKey(eventKey, options.href),\n    active\n  }, options));\n\n  // @ts-ignore\n  props[dataAttr('active')] = meta.isActive;\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, options, props, {\n    ref: ref\n  }));\n});\nNavItem.displayName = 'NavItem';\nexport default NavItem;",
      "start": 1702937442090,
      "end": 1702937442101,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    }
  ]
}
