{
  "resolvedId": "/home/zepor/ssweb/frontend-container/src/redux/slices/counter.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: \"idle\",\r\n};\r\n\r\n// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  \"counter/fetchCount\",\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = \"idle\";\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n",
      "start": 1702937436253,
      "end": 1702937436399,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937436399,
      "end": 1702937436399,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937436399,
      "end": 1702937436399,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937436399,
      "end": 1702937436399,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937436399,
      "end": 1702937436399,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937436399,
      "end": 1702937436399,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937436399,
      "end": 1702937436399,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937436399,
      "end": 1702937436399,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937436399,
      "end": 1702937436399,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937436399,
      "end": 1702937436399,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937436399,
      "end": 1702937436399,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937436399,
      "end": 1702937436399,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937436399,
      "end": 1702937436399,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937436399,
      "end": 1702937436399,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937436399,
      "end": 1702937436399,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937436399,
      "end": 1702937436399,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937436399,
      "end": 1702937436399,
      "order": "normal"
    }
  ]
}
