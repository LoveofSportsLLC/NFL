{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/@restart/hooks/esm/useImage.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { useState, useEffect } from 'react';\n/**\n * Fetch and load an image for programatic use such as in a `<canvas>` element.\n *\n * @param imageOrUrl The `HtmlImageElement` or image url to load\n * @param crossOrigin The `crossorigin` attribute to set\n *\n * ```ts\n * const { image, error } = useImage('/static/kittens.png')\n * const ref = useRef<HTMLCanvasElement>()\n *\n * useEffect(() => {\n *   const ctx = ref.current.getContext('2d')\n *\n *   if (image) {\n *     ctx.drawImage(image, 0, 0)\n *   }\n * }, [ref, image])\n *\n * return (\n *   <>\n *     {error && \"there was a problem loading the image\"}\n *     <canvas ref={ref} />\n *   </>\n * ```\n */\nexport default function useImage(imageOrUrl, crossOrigin) {\n  const [state, setState] = useState({\n    image: null,\n    error: null\n  });\n  useEffect(() => {\n    if (!imageOrUrl) return undefined;\n    let image;\n    if (typeof imageOrUrl === 'string') {\n      image = new Image();\n      if (crossOrigin) image.crossOrigin = crossOrigin;\n      image.src = imageOrUrl;\n    } else {\n      image = imageOrUrl;\n      if (image.complete && image.naturalHeight > 0) {\n        setState({\n          image,\n          error: null\n        });\n        return;\n      }\n    }\n    function onLoad() {\n      setState({\n        image,\n        error: null\n      });\n    }\n    function onError(error) {\n      setState({\n        image,\n        error\n      });\n    }\n    image.addEventListener('load', onLoad);\n    image.addEventListener('error', onError);\n    return () => {\n      image.removeEventListener('load', onLoad);\n      image.removeEventListener('error', onError);\n    };\n  }, [imageOrUrl, crossOrigin]);\n  return state;\n}",
      "start": 1702937443996,
      "end": 1702937444011,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444011,
      "end": 1702937444011,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444011,
      "end": 1702937444011,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444011,
      "end": 1702937444011,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444011,
      "end": 1702937444011,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444011,
      "end": 1702937444011,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444011,
      "end": 1702937444011,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444011,
      "end": 1702937444011,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444011,
      "end": 1702937444011,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444011,
      "end": 1702937444011,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444011,
      "end": 1702937444011,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937444011,
      "end": 1702937444011,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937444011,
      "end": 1702937444011,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444011,
      "end": 1702937444011,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444011,
      "end": 1702937444011,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444011,
      "end": 1702937444011,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444011,
      "end": 1702937444011,
      "order": "normal"
    }
  ]
}
