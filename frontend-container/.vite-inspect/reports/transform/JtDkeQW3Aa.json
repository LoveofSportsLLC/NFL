{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/wren.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = wren\nwren.displayName = 'wren'\nwren.aliases = []\nfunction wren(Prism) {\n  // https://wren.io/\n  Prism.languages.wren = {\n    // Multiline comments in Wren can have nested multiline comments\n    // Comments: // and /* */\n    comment: [\n      {\n        // support 3 levels of nesting\n        // regex: \\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\/\n        pattern:\n          /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*))*\\*\\/)*\\*\\/)*\\*\\//,\n        greedy: true\n      },\n      {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    // Triple quoted strings are multiline but cannot have interpolation (raw strings)\n    // Based on prism-python.js\n    'triple-quoted-string': {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    // see below\n    'string-literal': null,\n    // #!/usr/bin/env wren on the first line\n    hashbang: {\n      pattern: /^#!\\/.+/,\n      greedy: true,\n      alias: 'comment'\n    },\n    // Attributes are special keywords to add meta data to classes\n    attribute: {\n      // #! attributes are stored in class properties\n      // #!myvar = true\n      // #attributes are not stored and dismissed at compilation\n      pattern: /#!?[ \\t\\u3000]*\\w+/,\n      alias: 'keyword'\n    },\n    'class-name': [\n      {\n        // class definition\n        // class Meta {}\n        pattern: /(\\bclass\\s+)\\w+/,\n        lookbehind: true\n      }, // A class must always start with an uppercase.\n      // File.read\n      /\\b[A-Z][a-z\\d_]*\\b/\n    ],\n    // A constant can be a variable, class, property or method. Just named in all uppercase letters\n    constant: /\\b[A-Z][A-Z\\d_]*\\b/,\n    null: {\n      pattern: /\\bnull\\b/,\n      alias: 'keyword'\n    },\n    keyword:\n      /\\b(?:as|break|class|construct|continue|else|for|foreign|if|import|in|is|return|static|super|this|var|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n    // Functions can be Class.method()\n    function: /\\b[a-z_]\\w*(?=\\s*[({])/i,\n    operator: /<<|>>|[=!<>]=?|&&|\\|\\||[-+*/%~^&|?:]|\\.{2,3}/,\n    punctuation: /[\\[\\](){}.,;]/\n  }\n  Prism.languages.wren['string-literal'] = {\n    // A single quote string is multiline and can have interpolation (similar to JS backticks ``)\n    pattern:\n      /(^|[^\\\\\"])\"(?:[^\\\\\"%]|\\\\[\\s\\S]|%(?!\\()|%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\))*\"/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      interpolation: {\n        // \"%(interpolation)\"\n        pattern:\n          /((?:^|[^\\\\])(?:\\\\{2})*)%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\)/,\n        lookbehind: true,\n        inside: {\n          expression: {\n            pattern: /^(%\\()[\\s\\S]+(?=\\)$)/,\n            lookbehind: true,\n            inside: Prism.languages.wren\n          },\n          'interpolation-punctuation': {\n            pattern: /^%\\(|\\)$/,\n            alias: 'punctuation'\n          }\n        }\n      },\n      string: /[\\s\\S]+/\n    }\n  }\n}\n",
      "start": 1702937445120,
      "end": 1702937445144,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445144,
      "end": 1702937445144,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445144,
      "end": 1702937445144,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445144,
      "end": 1702937445144,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445144,
      "end": 1702937445144,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445144,
      "end": 1702937445144,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445144,
      "end": 1702937445144,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445144,
      "end": 1702937445144,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445144,
      "end": 1702937445144,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445144,
      "end": 1702937445144,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445144,
      "end": 1702937445144,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar wren_1;\nvar hasRequiredWren;\n\nfunction requireWren () {\n\tif (hasRequiredWren) return wren_1;\n\thasRequiredWren = 1;\n\t'use strict'\n\n\twren_1 = wren\n\twren.displayName = 'wren'\n\twren.aliases = []\n\tfunction wren(Prism) {\n\t  // https://wren.io/\n\t  Prism.languages.wren = {\n\t    // Multiline comments in Wren can have nested multiline comments\n\t    // Comments: // and /* */\n\t    comment: [\n\t      {\n\t        // support 3 levels of nesting\n\t        // regex: \\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\/\n\t        pattern:\n\t          /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*))*\\*\\/)*\\*\\/)*\\*\\//,\n\t        greedy: true\n\t      },\n\t      {\n\t        pattern: /(^|[^\\\\:])\\/\\/.*/,\n\t        lookbehind: true,\n\t        greedy: true\n\t      }\n\t    ],\n\t    // Triple quoted strings are multiline but cannot have interpolation (raw strings)\n\t    // Based on prism-python.js\n\t    'triple-quoted-string': {\n\t      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n\t      greedy: true,\n\t      alias: 'string'\n\t    },\n\t    // see below\n\t    'string-literal': null,\n\t    // #!/usr/bin/env wren on the first line\n\t    hashbang: {\n\t      pattern: /^#!\\/.+/,\n\t      greedy: true,\n\t      alias: 'comment'\n\t    },\n\t    // Attributes are special keywords to add meta data to classes\n\t    attribute: {\n\t      // #! attributes are stored in class properties\n\t      // #!myvar = true\n\t      // #attributes are not stored and dismissed at compilation\n\t      pattern: /#!?[ \\t\\u3000]*\\w+/,\n\t      alias: 'keyword'\n\t    },\n\t    'class-name': [\n\t      {\n\t        // class definition\n\t        // class Meta {}\n\t        pattern: /(\\bclass\\s+)\\w+/,\n\t        lookbehind: true\n\t      }, // A class must always start with an uppercase.\n\t      // File.read\n\t      /\\b[A-Z][a-z\\d_]*\\b/\n\t    ],\n\t    // A constant can be a variable, class, property or method. Just named in all uppercase letters\n\t    constant: /\\b[A-Z][A-Z\\d_]*\\b/,\n\t    null: {\n\t      pattern: /\\bnull\\b/,\n\t      alias: 'keyword'\n\t    },\n\t    keyword:\n\t      /\\b(?:as|break|class|construct|continue|else|for|foreign|if|import|in|is|return|static|super|this|var|while)\\b/,\n\t    boolean: /\\b(?:false|true)\\b/,\n\t    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n\t    // Functions can be Class.method()\n\t    function: /\\b[a-z_]\\w*(?=\\s*[({])/i,\n\t    operator: /<<|>>|[=!<>]=?|&&|\\|\\||[-+*/%~^&|?:]|\\.{2,3}/,\n\t    punctuation: /[\\[\\](){}.,;]/\n\t  }\n\t  Prism.languages.wren['string-literal'] = {\n\t    // A single quote string is multiline and can have interpolation (similar to JS backticks ``)\n\t    pattern:\n\t      /(^|[^\\\\\"])\"(?:[^\\\\\"%]|\\\\[\\s\\S]|%(?!\\()|%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\))*\"/,\n\t    lookbehind: true,\n\t    greedy: true,\n\t    inside: {\n\t      interpolation: {\n\t        // \"%(interpolation)\"\n\t        pattern:\n\t          /((?:^|[^\\\\])(?:\\\\{2})*)%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\)/,\n\t        lookbehind: true,\n\t        inside: {\n\t          expression: {\n\t            pattern: /^(%\\()[\\s\\S]+(?=\\)$)/,\n\t            lookbehind: true,\n\t            inside: Prism.languages.wren\n\t          },\n\t          'interpolation-punctuation': {\n\t            pattern: /^%\\(|\\)$/,\n\t            alias: 'punctuation'\n\t          }\n\t        }\n\t      },\n\t      string: /[\\s\\S]+/\n\t    }\n\t  }\n\t}\n\treturn wren_1;\n}\n\nexport { requireWren as __require };",
      "start": 1702937445144,
      "end": 1702937445144,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;CAAA,YAAY;AACZ;AACA,OAAc,GAAG,IAAI;CACrB,IAAI,CAAC,WAAW,GAAG,MAAM;CACzB,IAAI,CAAC,OAAO,GAAG,EAAE;CACjB,SAAS,IAAI,CAAC,KAAK,EAAE;CACrB;CACA,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG;CACzB;CACA;CACA,IAAI,OAAO,EAAE;CACb,MAAM;CACN;CACA;CACA,QAAQ,OAAO;CACf,UAAU,gHAAgH;CAC1H,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,MAAM;CACN,QAAQ,OAAO,EAAE,kBAAkB;CACnC,QAAQ,UAAU,EAAE,IAAI;CACxB,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,KAAK;CACL;CACA;CACA,IAAI,sBAAsB,EAAE;CAC5B,MAAM,OAAO,EAAE,gBAAgB;CAC/B,MAAM,MAAM,EAAE,IAAI;CAClB,MAAM,KAAK,EAAE,QAAQ;CACrB,KAAK;CACL;CACA,IAAI,gBAAgB,EAAE,IAAI;CAC1B;CACA,IAAI,QAAQ,EAAE;CACd,MAAM,OAAO,EAAE,SAAS;CACxB,MAAM,MAAM,EAAE,IAAI;CAClB,MAAM,KAAK,EAAE,SAAS;CACtB,KAAK;CACL;CACA,IAAI,SAAS,EAAE;CACf;CACA;CACA;CACA,MAAM,OAAO,EAAE,oBAAoB;CACnC,MAAM,KAAK,EAAE,SAAS;CACtB,KAAK;CACL,IAAI,YAAY,EAAE;CAClB,MAAM;CACN;CACA;CACA,QAAQ,OAAO,EAAE,iBAAiB;CAClC,QAAQ,UAAU,EAAE,IAAI;CACxB,OAAO;CACP;CACA,MAAM,oBAAoB;CAC1B,KAAK;CACL;CACA,IAAI,QAAQ,EAAE,oBAAoB;CAClC,IAAI,IAAI,EAAE;CACV,MAAM,OAAO,EAAE,UAAU;CACzB,MAAM,KAAK,EAAE,SAAS;CACtB,KAAK;CACL,IAAI,OAAO;CACX,MAAM,+GAA+G;CACrH,IAAI,OAAO,EAAE,oBAAoB;CACjC,IAAI,MAAM,EAAE,iDAAiD;CAC7D;CACA,IAAI,QAAQ,EAAE,yBAAyB;CACvC,IAAI,QAAQ,EAAE,8CAA8C;CAC5D,IAAI,WAAW,EAAE,eAAe;CAChC,GAAG;CACH,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG;CAC3C;CACA,IAAI,OAAO;CACX,MAAM,oFAAoF;CAC1F,IAAI,UAAU,EAAE,IAAI;CACpB,IAAI,MAAM,EAAE,IAAI;CAChB,IAAI,MAAM,EAAE;CACZ,MAAM,aAAa,EAAE;CACrB;CACA,QAAQ,OAAO;CACf,UAAU,iEAAiE;CAC3E,QAAQ,UAAU,EAAE,IAAI;CACxB,QAAQ,MAAM,EAAE;CAChB,UAAU,UAAU,EAAE;CACtB,YAAY,OAAO,EAAE,sBAAsB;CAC3C,YAAY,UAAU,EAAE,IAAI;CAC5B,YAAY,MAAM,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI;CACxC,WAAW;CACX,UAAU,2BAA2B,EAAE;CACvC,YAAY,OAAO,EAAE,UAAU;CAC/B,YAAY,KAAK,EAAE,aAAa;CAChC,WAAW;CACX,SAAS;CACT,OAAO;CACP,MAAM,MAAM,EAAE,SAAS;CACvB,KAAK;CACL,GAAG;CACH"
      }
    },
    {
      "name": "inject",
      "start": 1702937445144,
      "end": 1702937445144,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445144,
      "end": 1702937445144,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445144,
      "end": 1702937445144,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445144,
      "end": 1702937445144,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445144,
      "end": 1702937445144,
      "order": "normal"
    }
  ]
}
