{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/erlang.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = erlang\nerlang.displayName = 'erlang'\nerlang.aliases = []\nfunction erlang(Prism) {\n  Prism.languages.erlang = {\n    comment: /%.+/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    'quoted-function': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n      alias: 'function'\n    },\n    'quoted-atom': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n      alias: 'atom'\n    },\n    boolean: /\\b(?:false|true)\\b/,\n    keyword: /\\b(?:after|case|catch|end|fun|if|of|receive|try|when)\\b/,\n    number: [\n      /\\$\\\\?./,\n      /\\b\\d+#[a-z0-9]+/i,\n      /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    ],\n    function: /\\b[a-z][\\w@]*(?=\\()/,\n    variable: {\n      // Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\n      pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n      lookbehind: true\n    },\n    operator: [\n      /[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:and|andalso|band|bnot|bor|bsl|bsr|bxor|div|not|or|orelse|rem|xor)\\b/,\n      {\n        // We don't want to match <<\n        pattern: /(^|[^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /(^|[^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    atom: /\\b[a-z][\\w@]*/,\n    punctuation: /[()[\\]{}:;,.#|]|<<|>>/\n  }\n}\n",
      "start": 1702937444878,
      "end": 1702937444898,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444898,
      "end": 1702937444898,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444898,
      "end": 1702937444898,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444898,
      "end": 1702937444898,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444898,
      "end": 1702937444898,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444898,
      "end": 1702937444898,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444898,
      "end": 1702937444898,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444898,
      "end": 1702937444898,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444898,
      "end": 1702937444898,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444898,
      "end": 1702937444898,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444898,
      "end": 1702937444898,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar erlang_1;\nvar hasRequiredErlang;\n\nfunction requireErlang () {\n\tif (hasRequiredErlang) return erlang_1;\n\thasRequiredErlang = 1;\n\t'use strict'\n\n\terlang_1 = erlang\n\terlang.displayName = 'erlang'\n\terlang.aliases = []\n\tfunction erlang(Prism) {\n\t  Prism.languages.erlang = {\n\t    comment: /%.+/,\n\t    string: {\n\t      pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n\t      greedy: true\n\t    },\n\t    'quoted-function': {\n\t      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n\t      alias: 'function'\n\t    },\n\t    'quoted-atom': {\n\t      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n\t      alias: 'atom'\n\t    },\n\t    boolean: /\\b(?:false|true)\\b/,\n\t    keyword: /\\b(?:after|case|catch|end|fun|if|of|receive|try|when)\\b/,\n\t    number: [\n\t      /\\$\\\\?./,\n\t      /\\b\\d+#[a-z0-9]+/i,\n\t      /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n\t    ],\n\t    function: /\\b[a-z][\\w@]*(?=\\()/,\n\t    variable: {\n\t      // Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\n\t      pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n\t      lookbehind: true\n\t    },\n\t    operator: [\n\t      /[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:and|andalso|band|bnot|bor|bsl|bsr|bxor|div|not|or|orelse|rem|xor)\\b/,\n\t      {\n\t        // We don't want to match <<\n\t        pattern: /(^|[^<])<(?!<)/,\n\t        lookbehind: true\n\t      },\n\t      {\n\t        // We don't want to match >>\n\t        pattern: /(^|[^>])>(?!>)/,\n\t        lookbehind: true\n\t      }\n\t    ],\n\t    atom: /\\b[a-z][\\w@]*/,\n\t    punctuation: /[()[\\]{}:;,.#|]|<<|>>/\n\t  }\n\t}\n\treturn erlang_1;\n}\n\nexport { requireErlang as __require };",
      "start": 1702937444898,
      "end": 1702937444898,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;CAAA,YAAY;AACZ;AACA,SAAc,GAAG,MAAM;CACvB,MAAM,CAAC,WAAW,GAAG,QAAQ;CAC7B,MAAM,CAAC,OAAO,GAAG,EAAE;CACnB,SAAS,MAAM,CAAC,KAAK,EAAE;CACvB,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG;CAC3B,IAAI,OAAO,EAAE,KAAK;CAClB,IAAI,MAAM,EAAE;CACZ,MAAM,OAAO,EAAE,uBAAuB;CACtC,MAAM,MAAM,EAAE,IAAI;CAClB,KAAK;CACL,IAAI,iBAAiB,EAAE;CACvB,MAAM,OAAO,EAAE,6BAA6B;CAC5C,MAAM,KAAK,EAAE,UAAU;CACvB,KAAK;CACL,IAAI,aAAa,EAAE;CACnB,MAAM,OAAO,EAAE,uBAAuB;CACtC,MAAM,KAAK,EAAE,MAAM;CACnB,KAAK;CACL,IAAI,OAAO,EAAE,oBAAoB;CACjC,IAAI,OAAO,EAAE,yDAAyD;CACtE,IAAI,MAAM,EAAE;CACZ,MAAM,QAAQ;CACd,MAAM,kBAAkB;CACxB,MAAM,4CAA4C;CAClD,KAAK;CACL,IAAI,QAAQ,EAAE,qBAAqB;CACnC,IAAI,QAAQ,EAAE;CACd;CACA,MAAM,OAAO,EAAE,+BAA+B;CAC9C,MAAM,UAAU,EAAE,IAAI;CACtB,KAAK;CACL,IAAI,QAAQ,EAAE;CACd,MAAM,8GAA8G;CACpH,MAAM;CACN;CACA,QAAQ,OAAO,EAAE,gBAAgB;CACjC,QAAQ,UAAU,EAAE,IAAI;CACxB,OAAO;CACP,MAAM;CACN;CACA,QAAQ,OAAO,EAAE,gBAAgB;CACjC,QAAQ,UAAU,EAAE,IAAI;CACxB,OAAO;CACP,KAAK;CACL,IAAI,IAAI,EAAE,eAAe;CACzB,IAAI,WAAW,EAAE,uBAAuB;CACxC,GAAG;CACH"
      }
    },
    {
      "name": "inject",
      "start": 1702937444898,
      "end": 1702937444898,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444898,
      "end": 1702937444898,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444898,
      "end": 1702937444898,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444898,
      "end": 1702937444898,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444898,
      "end": 1702937444898,
      "order": "normal"
    }
  ]
}
