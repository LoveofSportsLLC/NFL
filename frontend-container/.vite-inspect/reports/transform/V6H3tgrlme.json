{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/factor.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = factor\nfactor.displayName = 'factor'\nfactor.aliases = []\nfunction factor(Prism) {\n  ;(function (Prism) {\n    var comment_inside = {\n      function:\n        /\\b(?:BUGS?|FIX(?:MES?)?|NOTES?|TODOS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\n    }\n    var string_inside = {\n      number: /\\\\[^\\s']|%\\w/\n    }\n    var factor = {\n      comment: [\n        {\n          // ! single-line exclamation point comments with whitespace after/around the !\n          pattern: /(^|\\s)(?:! .*|!$)/,\n          lookbehind: true,\n          inside: comment_inside\n        },\n        /* from basis/multiline: */\n        {\n          // /* comment */, /* comment*/\n          pattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\n          lookbehind: true,\n          greedy: true,\n          inside: comment_inside\n        },\n        {\n          // ![[ comment ]] , ![===[ comment]===]\n          pattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n          lookbehind: true,\n          greedy: true,\n          inside: comment_inside\n        }\n      ],\n      number: [\n        {\n          // basic base 10 integers 9, -9\n          pattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\n          lookbehind: true\n        },\n        {\n          // base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9\n          pattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\n          lookbehind: true\n        },\n        {\n          // fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.\n          pattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\n          lookbehind: true\n        },\n        {\n          // positive mixed numbers 23+1/5 +23+1/5\n          pattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\n          lookbehind: true\n        },\n        {\n          // negative mixed numbers -23-1/5\n          pattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\n          lookbehind: true\n        },\n        {\n          // basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13\n          // and scientific notation with base 10 exponents 3e4 3e-4 .3e-4\n          pattern:\n            /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\n          lookbehind: true\n        },\n        {\n          // NAN literal syntax NAN: 80000deadbeef, NAN: a\n          pattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\n          lookbehind: true\n        },\n        {\n          /*\nbase prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...\n\"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.\nThe values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"\n<https://docs.factorcode.org/content/article-syntax-floats.html>\n*/\n          pattern:\n            /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\n          lookbehind: true\n        }\n      ],\n      // R/ regexp?\\/\\\\/\n      regexp: {\n        pattern:\n          /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'number',\n        inside: {\n          variable: /\\\\\\S/,\n          keyword: /[+?*\\[\\]^$(){}.|]/,\n          operator: {\n            pattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\n            lookbehind: true\n          }\n        }\n      },\n      boolean: {\n        pattern: /(^|\\s)[tf](?=\\s|$)/,\n        lookbehind: true\n      },\n      // SBUF\" asd\", URL\" ://...\", P\" /etc/\"\n      'custom-string': {\n        pattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          number: /\\\\\\S|%\\w|\\//\n        }\n      },\n      'multiline-string': [\n        {\n          // STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)\n          pattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'string',\n          inside: {\n            number: string_inside.number,\n            // trailing semicolon on its own line\n            'semicolon-or-setlocal': {\n              pattern: /([\\r\\n][ \\t]*);(?=\\s|$)/,\n              lookbehind: true,\n              alias: 'function'\n            }\n          }\n        },\n        {\n          // HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)\n          pattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'string',\n          inside: string_inside\n        },\n        {\n          // [[ string ]], [==[ string]==]\n          pattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'string',\n          inside: string_inside\n        }\n      ],\n      'special-using': {\n        pattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\n        lookbehind: true,\n        alias: 'function',\n        inside: {\n          // this is essentially a regex for vocab names, which i don't want to specify\n          // but the USING: gets picked up as a vocab name\n          string: {\n            pattern: /(\\s)[^:\\s]+/,\n            lookbehind: true\n          }\n        }\n      },\n      /* this description of stack effect literal syntax is not complete and not as specific as theoretically possible\ntrying to do better is more work and regex-computation-time than it's worth though.\n- we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents\n- we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)\n- we'd like if the following variable name conventions were recognised specifically:\nspecial row variables = ..a b..\ntype and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )\nword throws unconditional error = *\nany other word-like variable name = a ? q' etc\nhttps://docs.factorcode.org/content/article-effects.html\nthese are pretty complicated to highlight properly without a real parser, and therefore out of scope\nthe old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)\n*/\n      // current solution is not great\n      'stack-effect-delimiter': [\n        {\n          // opening parenthesis\n          pattern: /(^|\\s)(?:call|eval|execute)?\\((?=\\s)/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        {\n          // middle --\n          pattern: /(\\s)--(?=\\s)/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        {\n          // closing parenthesis\n          pattern: /(\\s)\\)(?=\\s|$)/,\n          lookbehind: true,\n          alias: 'operator'\n        }\n      ],\n      combinators: {\n        pattern: null,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'kernel-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'sequences-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'math-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'constructor-word': {\n        // <array> but not <=>\n        pattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'other-builtin-syntax': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      /*\nfull list of supported word naming conventions: (the convention appears outside of the [brackets])\nset-[x]\nchange-[x]\nwith-[x]\nnew-[x]\n>[string]\n[base]>\n[string]>[number]\n+[symbol]+\n[boolean-word]?\n?[of]\n[slot-reader]>>\n>>[slot-setter]\n[slot-writer]<<\n([implementation-detail])\n[mutater]!\n[variant]*\n[prettyprint].\n$[help-markup]\n<constructors>, SYNTAX:, etc are supported by their own patterns.\n`with` and `new` from `kernel` are their own builtins.\nsee <https://docs.factorcode.org/content/article-conventions.html>\n*/\n      'conventionally-named-word': {\n        pattern:\n          /(^|\\s)(?!\")(?:(?:change|new|set|with)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'colon-syntax': {\n        pattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'function'\n      },\n      'semicolon-or-setlocal': {\n        pattern: /(\\s)(?:;|:>)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      // do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax\n      'curly-brace-literal-delimiter': [\n        {\n          // opening\n          pattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        {\n          // closing\n          pattern: /(\\s)\\}(?=\\s|$)/,\n          lookbehind: true,\n          alias: 'operator'\n        }\n      ],\n      // do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax\n      'quotation-delimiter': [\n        {\n          // opening\n          pattern: /(^|\\s)\\[(?=\\s)/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        {\n          // closing\n          pattern: /(\\s)\\](?=\\s|$)/,\n          lookbehind: true,\n          alias: 'operator'\n        }\n      ],\n      'normal-word': {\n        pattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,\n        lookbehind: true\n      },\n      /*\nbasic first-class string \"a\"\nwith escaped double-quote \"a\\\"\"\nescaped backslash \"\\\\\"\nand general escapes since Factor has so many \"\\N\"\nsyntax that works in the reference implementation that isn't fully\nsupported because it's an implementation detail:\n\"string 1\"\"string 2\" -> 2 strings (works anyway)\n\"string\"5 -> string, 5\n\"string\"[ ] -> string, quotation\n{ \"a\"} -> array<string>\nthe rest of those examples all properly recognise the string, but not\nthe other object (number, quotation, etc)\nthis is fine for a regex-only implementation.\n*/\n      string: {\n        pattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,\n        greedy: true,\n        inside: string_inside\n      }\n    }\n    var escape = function (str) {\n      return (str + '').replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, '\\\\$1')\n    }\n    var arrToWordsRegExp = function (arr) {\n      return new RegExp('(^|\\\\s)(?:' + arr.map(escape).join('|') + ')(?=\\\\s|$)')\n    }\n    var builtins = {\n      'kernel-builtin': [\n        'or',\n        '2nipd',\n        '4drop',\n        'tuck',\n        'wrapper',\n        'nip',\n        'wrapper?',\n        'callstack>array',\n        'die',\n        'dupd',\n        'callstack',\n        'callstack?',\n        '3dup',\n        'hashcode',\n        'pick',\n        '4nip',\n        'build',\n        '>boolean',\n        'nipd',\n        'clone',\n        '5nip',\n        'eq?',\n        '?',\n        '=',\n        'swapd',\n        '2over',\n        'clear',\n        '2dup',\n        'get-retainstack',\n        'not',\n        'tuple?',\n        'dup',\n        '3nipd',\n        'call',\n        '-rotd',\n        'object',\n        'drop',\n        'assert=',\n        'assert?',\n        '-rot',\n        'execute',\n        'boa',\n        'get-callstack',\n        'curried?',\n        '3drop',\n        'pickd',\n        'overd',\n        'over',\n        'roll',\n        '3nip',\n        'swap',\n        'and',\n        '2nip',\n        'rotd',\n        'throw',\n        '(clone)',\n        'hashcode*',\n        'spin',\n        'reach',\n        '4dup',\n        'equal?',\n        'get-datastack',\n        'assert',\n        '2drop',\n        '<wrapper>',\n        'boolean?',\n        'identity-hashcode',\n        'identity-tuple?',\n        'null',\n        'composed?',\n        'new',\n        '5drop',\n        'rot',\n        '-roll',\n        'xor',\n        'identity-tuple',\n        'boolean'\n      ],\n      'other-builtin-syntax': [\n        // syntax\n        '=======',\n        'recursive',\n        'flushable',\n        '>>',\n        '<<<<<<',\n        'M\\\\',\n        'B',\n        'PRIVATE>',\n        '\\\\',\n        '======',\n        'final',\n        'inline',\n        'delimiter',\n        'deprecated',\n        '<PRIVATE',\n        '>>>>>>',\n        '<<<<<<<',\n        'parse-complex',\n        'malformed-complex',\n        'read-only',\n        '>>>>>>>',\n        'call-next-method',\n        '<<',\n        'foldable', // literals\n        '$',\n        '$[',\n        '${'\n      ],\n      'sequences-builtin': [\n        'member-eq?',\n        'mismatch',\n        'append',\n        'assert-sequence=',\n        'longer',\n        'repetition',\n        'clone-like',\n        '3sequence',\n        'assert-sequence?',\n        'last-index-from',\n        'reversed',\n        'index-from',\n        'cut*',\n        'pad-tail',\n        'join-as',\n        'remove-eq!',\n        'concat-as',\n        'but-last',\n        'snip',\n        'nths',\n        'nth',\n        'sequence',\n        'longest',\n        'slice?',\n        '<slice>',\n        'remove-nth',\n        'tail-slice',\n        'empty?',\n        'tail*',\n        'member?',\n        'virtual-sequence?',\n        'set-length',\n        'drop-prefix',\n        'iota',\n        'unclip',\n        'bounds-error?',\n        'unclip-last-slice',\n        'non-negative-integer-expected',\n        'non-negative-integer-expected?',\n        'midpoint@',\n        'longer?',\n        '?set-nth',\n        '?first',\n        'rest-slice',\n        'prepend-as',\n        'prepend',\n        'fourth',\n        'sift',\n        'subseq-start',\n        'new-sequence',\n        '?last',\n        'like',\n        'first4',\n        '1sequence',\n        'reverse',\n        'slice',\n        'virtual@',\n        'repetition?',\n        'set-last',\n        'index',\n        '4sequence',\n        'max-length',\n        'set-second',\n        'immutable-sequence',\n        'first2',\n        'first3',\n        'supremum',\n        'unclip-slice',\n        'suffix!',\n        'insert-nth',\n        'tail',\n        '3append',\n        'short',\n        'suffix',\n        'concat',\n        'flip',\n        'immutable?',\n        'reverse!',\n        '2sequence',\n        'sum',\n        'delete-all',\n        'indices',\n        'snip-slice',\n        '<iota>',\n        'check-slice',\n        'sequence?',\n        'head',\n        'append-as',\n        'halves',\n        'sequence=',\n        'collapse-slice',\n        '?second',\n        'slice-error?',\n        'product',\n        'bounds-check?',\n        'bounds-check',\n        'immutable',\n        'virtual-exemplar',\n        'harvest',\n        'remove',\n        'pad-head',\n        'last',\n        'set-fourth',\n        'cartesian-product',\n        'remove-eq',\n        'shorten',\n        'shorter',\n        'reversed?',\n        'shorter?',\n        'shortest',\n        'head-slice',\n        'pop*',\n        'tail-slice*',\n        'but-last-slice',\n        'iota?',\n        'append!',\n        'cut-slice',\n        'new-resizable',\n        'head-slice*',\n        'sequence-hashcode',\n        'pop',\n        'set-nth',\n        '?nth',\n        'second',\n        'join',\n        'immutable-sequence?',\n        '<reversed>',\n        '3append-as',\n        'virtual-sequence',\n        'subseq?',\n        'remove-nth!',\n        'length',\n        'last-index',\n        'lengthen',\n        'assert-sequence',\n        'copy',\n        'move',\n        'third',\n        'first',\n        'tail?',\n        'set-first',\n        'prefix',\n        'bounds-error',\n        '<repetition>',\n        'exchange',\n        'surround',\n        'cut',\n        'min-length',\n        'set-third',\n        'push-all',\n        'head?',\n        'subseq-start-from',\n        'delete-slice',\n        'rest',\n        'sum-lengths',\n        'head*',\n        'infimum',\n        'remove!',\n        'glue',\n        'slice-error',\n        'subseq',\n        'push',\n        'replace-slice',\n        'subseq-as',\n        'unclip-last'\n      ],\n      'math-builtin': [\n        'number=',\n        'next-power-of-2',\n        '?1+',\n        'fp-special?',\n        'imaginary-part',\n        'float>bits',\n        'number?',\n        'fp-infinity?',\n        'bignum?',\n        'fp-snan?',\n        'denominator',\n        'gcd',\n        '*',\n        '+',\n        'fp-bitwise=',\n        '-',\n        'u>=',\n        '/',\n        '>=',\n        'bitand',\n        'power-of-2?',\n        'log2-expects-positive',\n        'neg?',\n        '<',\n        'log2',\n        '>',\n        'integer?',\n        'number',\n        'bits>double',\n        '2/',\n        'zero?',\n        'bits>float',\n        'float?',\n        'shift',\n        'ratio?',\n        'rect>',\n        'even?',\n        'ratio',\n        'fp-sign',\n        'bitnot',\n        '>fixnum',\n        'complex?',\n        '/i',\n        'integer>fixnum',\n        '/f',\n        'sgn',\n        '>bignum',\n        'next-float',\n        'u<',\n        'u>',\n        'mod',\n        'recip',\n        'rational',\n        '>float',\n        '2^',\n        'integer',\n        'fixnum?',\n        'neg',\n        'fixnum',\n        'sq',\n        'bignum',\n        '>rect',\n        'bit?',\n        'fp-qnan?',\n        'simple-gcd',\n        'complex',\n        '<fp-nan>',\n        'real',\n        '>fraction',\n        'double>bits',\n        'bitor',\n        'rem',\n        'fp-nan-payload',\n        'real-part',\n        'log2-expects-positive?',\n        'prev-float',\n        'align',\n        'unordered?',\n        'float',\n        'fp-nan?',\n        'abs',\n        'bitxor',\n        'integer>fixnum-strict',\n        'u<=',\n        'odd?',\n        '<=',\n        '/mod',\n        '>integer',\n        'real?',\n        'rational?',\n        'numerator'\n      ] // that's all for now\n    }\n    Object.keys(builtins).forEach(function (k) {\n      factor[k].pattern = arrToWordsRegExp(builtins[k])\n    })\n    var combinators = [\n      // kernel\n      '2bi',\n      'while',\n      '2tri',\n      'bi*',\n      '4dip',\n      'both?',\n      'same?',\n      'tri@',\n      'curry',\n      'prepose',\n      '3bi',\n      '?if',\n      'tri*',\n      '2keep',\n      '3keep',\n      'curried',\n      '2keepd',\n      'when',\n      '2bi*',\n      '2tri*',\n      '4keep',\n      'bi@',\n      'keepdd',\n      'do',\n      'unless*',\n      'tri-curry',\n      'if*',\n      'loop',\n      'bi-curry*',\n      'when*',\n      '2bi@',\n      '2tri@',\n      'with',\n      '2with',\n      'either?',\n      'bi',\n      'until',\n      '3dip',\n      '3curry',\n      'tri-curry*',\n      'tri-curry@',\n      'bi-curry',\n      'keepd',\n      'compose',\n      '2dip',\n      'if',\n      '3tri',\n      'unless',\n      'tuple',\n      'keep',\n      '2curry',\n      'tri',\n      'most',\n      'while*',\n      'dip',\n      'composed',\n      'bi-curry@', // sequences\n      'find-last-from',\n      'trim-head-slice',\n      'map-as',\n      'each-from',\n      'none?',\n      'trim-tail',\n      'partition',\n      'if-empty',\n      'accumulate*',\n      'reject!',\n      'find-from',\n      'accumulate-as',\n      'collector-for-as',\n      'reject',\n      'map',\n      'map-sum',\n      'accumulate!',\n      '2each-from',\n      'follow',\n      'supremum-by',\n      'map!',\n      'unless-empty',\n      'collector',\n      'padding',\n      'reduce-index',\n      'replicate-as',\n      'infimum-by',\n      'trim-tail-slice',\n      'count',\n      'find-index',\n      'filter',\n      'accumulate*!',\n      'reject-as',\n      'map-integers',\n      'map-find',\n      'reduce',\n      'selector',\n      'interleave',\n      '2map',\n      'filter-as',\n      'binary-reduce',\n      'map-index-as',\n      'find',\n      'produce',\n      'filter!',\n      'replicate',\n      'cartesian-map',\n      'cartesian-each',\n      'find-index-from',\n      'map-find-last',\n      '3map-as',\n      '3map',\n      'find-last',\n      'selector-as',\n      '2map-as',\n      '2map-reduce',\n      'accumulate',\n      'each',\n      'each-index',\n      'accumulate*-as',\n      'when-empty',\n      'all?',\n      'collector-as',\n      'push-either',\n      'new-like',\n      'collector-for',\n      '2selector',\n      'push-if',\n      '2all?',\n      'map-reduce',\n      '3each',\n      'any?',\n      'trim-slice',\n      '2reduce',\n      'change-nth',\n      'produce-as',\n      '2each',\n      'trim',\n      'trim-head',\n      'cartesian-find',\n      'map-index', // math\n      'if-zero',\n      'each-integer',\n      'unless-zero',\n      '(find-integer)',\n      'when-zero',\n      'find-last-integer',\n      '(all-integers?)',\n      'times',\n      '(each-integer)',\n      'find-integer',\n      'all-integers?', // math.combinators\n      'unless-negative',\n      'if-positive',\n      'when-positive',\n      'when-negative',\n      'unless-positive',\n      'if-negative', // combinators\n      'case',\n      '2cleave',\n      'cond>quot',\n      'case>quot',\n      '3cleave',\n      'wrong-values',\n      'to-fixed-point',\n      'alist>quot',\n      'cond',\n      'cleave',\n      'call-effect',\n      'recursive-hashcode',\n      'spread',\n      'deep-spread>quot', // combinators.short-circuit\n      '2||',\n      '0||',\n      'n||',\n      '0&&',\n      '2&&',\n      '3||',\n      '1||',\n      '1&&',\n      'n&&',\n      '3&&', // combinators.smart\n      'smart-unless*',\n      'keep-inputs',\n      'reduce-outputs',\n      'smart-when*',\n      'cleave>array',\n      'smart-with',\n      'smart-apply',\n      'smart-if',\n      'inputs/outputs',\n      'output>sequence-n',\n      'map-outputs',\n      'map-reduce-outputs',\n      'dropping',\n      'output>array',\n      'smart-map-reduce',\n      'smart-2map-reduce',\n      'output>array-n',\n      'nullary',\n      'input<sequence',\n      'append-outputs',\n      'drop-inputs',\n      'inputs',\n      'smart-2reduce',\n      'drop-outputs',\n      'smart-reduce',\n      'preserving',\n      'smart-when',\n      'outputs',\n      'append-outputs-as',\n      'smart-unless',\n      'smart-if*',\n      'sum-outputs',\n      'input<sequence-unsafe',\n      'output>sequence' // tafn\n    ]\n    factor.combinators.pattern = arrToWordsRegExp(combinators)\n    Prism.languages.factor = factor\n  })(Prism)\n}\n",
      "start": 1702937444887,
      "end": 1702937444900,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444900,
      "end": 1702937444900,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444900,
      "end": 1702937444900,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444900,
      "end": 1702937444900,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444900,
      "end": 1702937444900,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444900,
      "end": 1702937444900,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444900,
      "end": 1702937444900,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444900,
      "end": 1702937444900,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444900,
      "end": 1702937444900,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444900,
      "end": 1702937444900,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444900,
      "end": 1702937444900,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar factor_1;\nvar hasRequiredFactor;\n\nfunction requireFactor () {\n\tif (hasRequiredFactor) return factor_1;\n\thasRequiredFactor = 1;\n\t'use strict'\n\n\tfactor_1 = factor\n\tfactor.displayName = 'factor'\n\tfactor.aliases = []\n\tfunction factor(Prism) {\n\t  ;(function (Prism) {\n\t    var comment_inside = {\n\t      function:\n\t        /\\b(?:BUGS?|FIX(?:MES?)?|NOTES?|TODOS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\n\t    }\n\t    var string_inside = {\n\t      number: /\\\\[^\\s']|%\\w/\n\t    }\n\t    var factor = {\n\t      comment: [\n\t        {\n\t          // ! single-line exclamation point comments with whitespace after/around the !\n\t          pattern: /(^|\\s)(?:! .*|!$)/,\n\t          lookbehind: true,\n\t          inside: comment_inside\n\t        },\n\t        /* from basis/multiline: */\n\t        {\n\t          // /* comment */, /* comment*/\n\t          pattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\n\t          lookbehind: true,\n\t          greedy: true,\n\t          inside: comment_inside\n\t        },\n\t        {\n\t          // ![[ comment ]] , ![===[ comment]===]\n\t          pattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n\t          lookbehind: true,\n\t          greedy: true,\n\t          inside: comment_inside\n\t        }\n\t      ],\n\t      number: [\n\t        {\n\t          // basic base 10 integers 9, -9\n\t          pattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\n\t          lookbehind: true\n\t        },\n\t        {\n\t          // base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9\n\t          pattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\n\t          lookbehind: true\n\t        },\n\t        {\n\t          // fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.\n\t          pattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\n\t          lookbehind: true\n\t        },\n\t        {\n\t          // positive mixed numbers 23+1/5 +23+1/5\n\t          pattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\n\t          lookbehind: true\n\t        },\n\t        {\n\t          // negative mixed numbers -23-1/5\n\t          pattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\n\t          lookbehind: true\n\t        },\n\t        {\n\t          // basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13\n\t          // and scientific notation with base 10 exponents 3e4 3e-4 .3e-4\n\t          pattern:\n\t            /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\n\t          lookbehind: true\n\t        },\n\t        {\n\t          // NAN literal syntax NAN: 80000deadbeef, NAN: a\n\t          pattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\n\t          lookbehind: true\n\t        },\n\t        {\n\t          /*\n\tbase prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...\n\t\"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.\n\tThe values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"\n\t<https://docs.factorcode.org/content/article-syntax-floats.html>\n\t*/\n\t          pattern:\n\t            /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\n\t          lookbehind: true\n\t        }\n\t      ],\n\t      // R/ regexp?\\/\\\\/\n\t      regexp: {\n\t        pattern:\n\t          /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\n\t        lookbehind: true,\n\t        alias: 'number',\n\t        inside: {\n\t          variable: /\\\\\\S/,\n\t          keyword: /[+?*\\[\\]^$(){}.|]/,\n\t          operator: {\n\t            pattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\n\t            lookbehind: true\n\t          }\n\t        }\n\t      },\n\t      boolean: {\n\t        pattern: /(^|\\s)[tf](?=\\s|$)/,\n\t        lookbehind: true\n\t      },\n\t      // SBUF\" asd\", URL\" ://...\", P\" /etc/\"\n\t      'custom-string': {\n\t        pattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\n\t        lookbehind: true,\n\t        greedy: true,\n\t        alias: 'string',\n\t        inside: {\n\t          number: /\\\\\\S|%\\w|\\//\n\t        }\n\t      },\n\t      'multiline-string': [\n\t        {\n\t          // STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)\n\t          pattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\n\t          lookbehind: true,\n\t          greedy: true,\n\t          alias: 'string',\n\t          inside: {\n\t            number: string_inside.number,\n\t            // trailing semicolon on its own line\n\t            'semicolon-or-setlocal': {\n\t              pattern: /([\\r\\n][ \\t]*);(?=\\s|$)/,\n\t              lookbehind: true,\n\t              alias: 'function'\n\t            }\n\t          }\n\t        },\n\t        {\n\t          // HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)\n\t          pattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\n\t          lookbehind: true,\n\t          greedy: true,\n\t          alias: 'string',\n\t          inside: string_inside\n\t        },\n\t        {\n\t          // [[ string ]], [==[ string]==]\n\t          pattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n\t          lookbehind: true,\n\t          greedy: true,\n\t          alias: 'string',\n\t          inside: string_inside\n\t        }\n\t      ],\n\t      'special-using': {\n\t        pattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\n\t        lookbehind: true,\n\t        alias: 'function',\n\t        inside: {\n\t          // this is essentially a regex for vocab names, which i don't want to specify\n\t          // but the USING: gets picked up as a vocab name\n\t          string: {\n\t            pattern: /(\\s)[^:\\s]+/,\n\t            lookbehind: true\n\t          }\n\t        }\n\t      },\n\t      /* this description of stack effect literal syntax is not complete and not as specific as theoretically possible\n\ttrying to do better is more work and regex-computation-time than it's worth though.\n\t- we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents\n\t- we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)\n\t- we'd like if the following variable name conventions were recognised specifically:\n\tspecial row variables = ..a b..\n\ttype and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )\n\tword throws unconditional error = *\n\tany other word-like variable name = a ? q' etc\n\thttps://docs.factorcode.org/content/article-effects.html\n\tthese are pretty complicated to highlight properly without a real parser, and therefore out of scope\n\tthe old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)\n\t*/\n\t      // current solution is not great\n\t      'stack-effect-delimiter': [\n\t        {\n\t          // opening parenthesis\n\t          pattern: /(^|\\s)(?:call|eval|execute)?\\((?=\\s)/,\n\t          lookbehind: true,\n\t          alias: 'operator'\n\t        },\n\t        {\n\t          // middle --\n\t          pattern: /(\\s)--(?=\\s)/,\n\t          lookbehind: true,\n\t          alias: 'operator'\n\t        },\n\t        {\n\t          // closing parenthesis\n\t          pattern: /(\\s)\\)(?=\\s|$)/,\n\t          lookbehind: true,\n\t          alias: 'operator'\n\t        }\n\t      ],\n\t      combinators: {\n\t        pattern: null,\n\t        lookbehind: true,\n\t        alias: 'keyword'\n\t      },\n\t      'kernel-builtin': {\n\t        pattern: null,\n\t        lookbehind: true,\n\t        alias: 'variable'\n\t      },\n\t      'sequences-builtin': {\n\t        pattern: null,\n\t        lookbehind: true,\n\t        alias: 'variable'\n\t      },\n\t      'math-builtin': {\n\t        pattern: null,\n\t        lookbehind: true,\n\t        alias: 'variable'\n\t      },\n\t      'constructor-word': {\n\t        // <array> but not <=>\n\t        pattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\n\t        lookbehind: true,\n\t        alias: 'keyword'\n\t      },\n\t      'other-builtin-syntax': {\n\t        pattern: null,\n\t        lookbehind: true,\n\t        alias: 'operator'\n\t      },\n\t      /*\n\tfull list of supported word naming conventions: (the convention appears outside of the [brackets])\n\tset-[x]\n\tchange-[x]\n\twith-[x]\n\tnew-[x]\n\t>[string]\n\t[base]>\n\t[string]>[number]\n\t+[symbol]+\n\t[boolean-word]?\n\t?[of]\n\t[slot-reader]>>\n\t>>[slot-setter]\n\t[slot-writer]<<\n\t([implementation-detail])\n\t[mutater]!\n\t[variant]*\n\t[prettyprint].\n\t$[help-markup]\n\t<constructors>, SYNTAX:, etc are supported by their own patterns.\n\t`with` and `new` from `kernel` are their own builtins.\n\tsee <https://docs.factorcode.org/content/article-conventions.html>\n\t*/\n\t      'conventionally-named-word': {\n\t        pattern:\n\t          /(^|\\s)(?!\")(?:(?:change|new|set|with)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\n\t        lookbehind: true,\n\t        alias: 'keyword'\n\t      },\n\t      'colon-syntax': {\n\t        pattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\n\t        lookbehind: true,\n\t        greedy: true,\n\t        alias: 'function'\n\t      },\n\t      'semicolon-or-setlocal': {\n\t        pattern: /(\\s)(?:;|:>)(?=\\s|$)/,\n\t        lookbehind: true,\n\t        alias: 'function'\n\t      },\n\t      // do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax\n\t      'curly-brace-literal-delimiter': [\n\t        {\n\t          // opening\n\t          pattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\n\t          lookbehind: true,\n\t          alias: 'operator'\n\t        },\n\t        {\n\t          // closing\n\t          pattern: /(\\s)\\}(?=\\s|$)/,\n\t          lookbehind: true,\n\t          alias: 'operator'\n\t        }\n\t      ],\n\t      // do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax\n\t      'quotation-delimiter': [\n\t        {\n\t          // opening\n\t          pattern: /(^|\\s)\\[(?=\\s)/,\n\t          lookbehind: true,\n\t          alias: 'operator'\n\t        },\n\t        {\n\t          // closing\n\t          pattern: /(\\s)\\](?=\\s|$)/,\n\t          lookbehind: true,\n\t          alias: 'operator'\n\t        }\n\t      ],\n\t      'normal-word': {\n\t        pattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,\n\t        lookbehind: true\n\t      },\n\t      /*\n\tbasic first-class string \"a\"\n\twith escaped double-quote \"a\\\"\"\n\tescaped backslash \"\\\\\"\n\tand general escapes since Factor has so many \"\\N\"\n\tsyntax that works in the reference implementation that isn't fully\n\tsupported because it's an implementation detail:\n\t\"string 1\"\"string 2\" -> 2 strings (works anyway)\n\t\"string\"5 -> string, 5\n\t\"string\"[ ] -> string, quotation\n\t{ \"a\"} -> array<string>\n\tthe rest of those examples all properly recognise the string, but not\n\tthe other object (number, quotation, etc)\n\tthis is fine for a regex-only implementation.\n\t*/\n\t      string: {\n\t        pattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,\n\t        greedy: true,\n\t        inside: string_inside\n\t      }\n\t    }\n\t    var escape = function (str) {\n\t      return (str + '').replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, '\\\\$1')\n\t    }\n\t    var arrToWordsRegExp = function (arr) {\n\t      return new RegExp('(^|\\\\s)(?:' + arr.map(escape).join('|') + ')(?=\\\\s|$)')\n\t    }\n\t    var builtins = {\n\t      'kernel-builtin': [\n\t        'or',\n\t        '2nipd',\n\t        '4drop',\n\t        'tuck',\n\t        'wrapper',\n\t        'nip',\n\t        'wrapper?',\n\t        'callstack>array',\n\t        'die',\n\t        'dupd',\n\t        'callstack',\n\t        'callstack?',\n\t        '3dup',\n\t        'hashcode',\n\t        'pick',\n\t        '4nip',\n\t        'build',\n\t        '>boolean',\n\t        'nipd',\n\t        'clone',\n\t        '5nip',\n\t        'eq?',\n\t        '?',\n\t        '=',\n\t        'swapd',\n\t        '2over',\n\t        'clear',\n\t        '2dup',\n\t        'get-retainstack',\n\t        'not',\n\t        'tuple?',\n\t        'dup',\n\t        '3nipd',\n\t        'call',\n\t        '-rotd',\n\t        'object',\n\t        'drop',\n\t        'assert=',\n\t        'assert?',\n\t        '-rot',\n\t        'execute',\n\t        'boa',\n\t        'get-callstack',\n\t        'curried?',\n\t        '3drop',\n\t        'pickd',\n\t        'overd',\n\t        'over',\n\t        'roll',\n\t        '3nip',\n\t        'swap',\n\t        'and',\n\t        '2nip',\n\t        'rotd',\n\t        'throw',\n\t        '(clone)',\n\t        'hashcode*',\n\t        'spin',\n\t        'reach',\n\t        '4dup',\n\t        'equal?',\n\t        'get-datastack',\n\t        'assert',\n\t        '2drop',\n\t        '<wrapper>',\n\t        'boolean?',\n\t        'identity-hashcode',\n\t        'identity-tuple?',\n\t        'null',\n\t        'composed?',\n\t        'new',\n\t        '5drop',\n\t        'rot',\n\t        '-roll',\n\t        'xor',\n\t        'identity-tuple',\n\t        'boolean'\n\t      ],\n\t      'other-builtin-syntax': [\n\t        // syntax\n\t        '=======',\n\t        'recursive',\n\t        'flushable',\n\t        '>>',\n\t        '<<<<<<',\n\t        'M\\\\',\n\t        'B',\n\t        'PRIVATE>',\n\t        '\\\\',\n\t        '======',\n\t        'final',\n\t        'inline',\n\t        'delimiter',\n\t        'deprecated',\n\t        '<PRIVATE',\n\t        '>>>>>>',\n\t        '<<<<<<<',\n\t        'parse-complex',\n\t        'malformed-complex',\n\t        'read-only',\n\t        '>>>>>>>',\n\t        'call-next-method',\n\t        '<<',\n\t        'foldable', // literals\n\t        '$',\n\t        '$[',\n\t        '${'\n\t      ],\n\t      'sequences-builtin': [\n\t        'member-eq?',\n\t        'mismatch',\n\t        'append',\n\t        'assert-sequence=',\n\t        'longer',\n\t        'repetition',\n\t        'clone-like',\n\t        '3sequence',\n\t        'assert-sequence?',\n\t        'last-index-from',\n\t        'reversed',\n\t        'index-from',\n\t        'cut*',\n\t        'pad-tail',\n\t        'join-as',\n\t        'remove-eq!',\n\t        'concat-as',\n\t        'but-last',\n\t        'snip',\n\t        'nths',\n\t        'nth',\n\t        'sequence',\n\t        'longest',\n\t        'slice?',\n\t        '<slice>',\n\t        'remove-nth',\n\t        'tail-slice',\n\t        'empty?',\n\t        'tail*',\n\t        'member?',\n\t        'virtual-sequence?',\n\t        'set-length',\n\t        'drop-prefix',\n\t        'iota',\n\t        'unclip',\n\t        'bounds-error?',\n\t        'unclip-last-slice',\n\t        'non-negative-integer-expected',\n\t        'non-negative-integer-expected?',\n\t        'midpoint@',\n\t        'longer?',\n\t        '?set-nth',\n\t        '?first',\n\t        'rest-slice',\n\t        'prepend-as',\n\t        'prepend',\n\t        'fourth',\n\t        'sift',\n\t        'subseq-start',\n\t        'new-sequence',\n\t        '?last',\n\t        'like',\n\t        'first4',\n\t        '1sequence',\n\t        'reverse',\n\t        'slice',\n\t        'virtual@',\n\t        'repetition?',\n\t        'set-last',\n\t        'index',\n\t        '4sequence',\n\t        'max-length',\n\t        'set-second',\n\t        'immutable-sequence',\n\t        'first2',\n\t        'first3',\n\t        'supremum',\n\t        'unclip-slice',\n\t        'suffix!',\n\t        'insert-nth',\n\t        'tail',\n\t        '3append',\n\t        'short',\n\t        'suffix',\n\t        'concat',\n\t        'flip',\n\t        'immutable?',\n\t        'reverse!',\n\t        '2sequence',\n\t        'sum',\n\t        'delete-all',\n\t        'indices',\n\t        'snip-slice',\n\t        '<iota>',\n\t        'check-slice',\n\t        'sequence?',\n\t        'head',\n\t        'append-as',\n\t        'halves',\n\t        'sequence=',\n\t        'collapse-slice',\n\t        '?second',\n\t        'slice-error?',\n\t        'product',\n\t        'bounds-check?',\n\t        'bounds-check',\n\t        'immutable',\n\t        'virtual-exemplar',\n\t        'harvest',\n\t        'remove',\n\t        'pad-head',\n\t        'last',\n\t        'set-fourth',\n\t        'cartesian-product',\n\t        'remove-eq',\n\t        'shorten',\n\t        'shorter',\n\t        'reversed?',\n\t        'shorter?',\n\t        'shortest',\n\t        'head-slice',\n\t        'pop*',\n\t        'tail-slice*',\n\t        'but-last-slice',\n\t        'iota?',\n\t        'append!',\n\t        'cut-slice',\n\t        'new-resizable',\n\t        'head-slice*',\n\t        'sequence-hashcode',\n\t        'pop',\n\t        'set-nth',\n\t        '?nth',\n\t        'second',\n\t        'join',\n\t        'immutable-sequence?',\n\t        '<reversed>',\n\t        '3append-as',\n\t        'virtual-sequence',\n\t        'subseq?',\n\t        'remove-nth!',\n\t        'length',\n\t        'last-index',\n\t        'lengthen',\n\t        'assert-sequence',\n\t        'copy',\n\t        'move',\n\t        'third',\n\t        'first',\n\t        'tail?',\n\t        'set-first',\n\t        'prefix',\n\t        'bounds-error',\n\t        '<repetition>',\n\t        'exchange',\n\t        'surround',\n\t        'cut',\n\t        'min-length',\n\t        'set-third',\n\t        'push-all',\n\t        'head?',\n\t        'subseq-start-from',\n\t        'delete-slice',\n\t        'rest',\n\t        'sum-lengths',\n\t        'head*',\n\t        'infimum',\n\t        'remove!',\n\t        'glue',\n\t        'slice-error',\n\t        'subseq',\n\t        'push',\n\t        'replace-slice',\n\t        'subseq-as',\n\t        'unclip-last'\n\t      ],\n\t      'math-builtin': [\n\t        'number=',\n\t        'next-power-of-2',\n\t        '?1+',\n\t        'fp-special?',\n\t        'imaginary-part',\n\t        'float>bits',\n\t        'number?',\n\t        'fp-infinity?',\n\t        'bignum?',\n\t        'fp-snan?',\n\t        'denominator',\n\t        'gcd',\n\t        '*',\n\t        '+',\n\t        'fp-bitwise=',\n\t        '-',\n\t        'u>=',\n\t        '/',\n\t        '>=',\n\t        'bitand',\n\t        'power-of-2?',\n\t        'log2-expects-positive',\n\t        'neg?',\n\t        '<',\n\t        'log2',\n\t        '>',\n\t        'integer?',\n\t        'number',\n\t        'bits>double',\n\t        '2/',\n\t        'zero?',\n\t        'bits>float',\n\t        'float?',\n\t        'shift',\n\t        'ratio?',\n\t        'rect>',\n\t        'even?',\n\t        'ratio',\n\t        'fp-sign',\n\t        'bitnot',\n\t        '>fixnum',\n\t        'complex?',\n\t        '/i',\n\t        'integer>fixnum',\n\t        '/f',\n\t        'sgn',\n\t        '>bignum',\n\t        'next-float',\n\t        'u<',\n\t        'u>',\n\t        'mod',\n\t        'recip',\n\t        'rational',\n\t        '>float',\n\t        '2^',\n\t        'integer',\n\t        'fixnum?',\n\t        'neg',\n\t        'fixnum',\n\t        'sq',\n\t        'bignum',\n\t        '>rect',\n\t        'bit?',\n\t        'fp-qnan?',\n\t        'simple-gcd',\n\t        'complex',\n\t        '<fp-nan>',\n\t        'real',\n\t        '>fraction',\n\t        'double>bits',\n\t        'bitor',\n\t        'rem',\n\t        'fp-nan-payload',\n\t        'real-part',\n\t        'log2-expects-positive?',\n\t        'prev-float',\n\t        'align',\n\t        'unordered?',\n\t        'float',\n\t        'fp-nan?',\n\t        'abs',\n\t        'bitxor',\n\t        'integer>fixnum-strict',\n\t        'u<=',\n\t        'odd?',\n\t        '<=',\n\t        '/mod',\n\t        '>integer',\n\t        'real?',\n\t        'rational?',\n\t        'numerator'\n\t      ] // that's all for now\n\t    }\n\t    Object.keys(builtins).forEach(function (k) {\n\t      factor[k].pattern = arrToWordsRegExp(builtins[k])\n\t    })\n\t    var combinators = [\n\t      // kernel\n\t      '2bi',\n\t      'while',\n\t      '2tri',\n\t      'bi*',\n\t      '4dip',\n\t      'both?',\n\t      'same?',\n\t      'tri@',\n\t      'curry',\n\t      'prepose',\n\t      '3bi',\n\t      '?if',\n\t      'tri*',\n\t      '2keep',\n\t      '3keep',\n\t      'curried',\n\t      '2keepd',\n\t      'when',\n\t      '2bi*',\n\t      '2tri*',\n\t      '4keep',\n\t      'bi@',\n\t      'keepdd',\n\t      'do',\n\t      'unless*',\n\t      'tri-curry',\n\t      'if*',\n\t      'loop',\n\t      'bi-curry*',\n\t      'when*',\n\t      '2bi@',\n\t      '2tri@',\n\t      'with',\n\t      '2with',\n\t      'either?',\n\t      'bi',\n\t      'until',\n\t      '3dip',\n\t      '3curry',\n\t      'tri-curry*',\n\t      'tri-curry@',\n\t      'bi-curry',\n\t      'keepd',\n\t      'compose',\n\t      '2dip',\n\t      'if',\n\t      '3tri',\n\t      'unless',\n\t      'tuple',\n\t      'keep',\n\t      '2curry',\n\t      'tri',\n\t      'most',\n\t      'while*',\n\t      'dip',\n\t      'composed',\n\t      'bi-curry@', // sequences\n\t      'find-last-from',\n\t      'trim-head-slice',\n\t      'map-as',\n\t      'each-from',\n\t      'none?',\n\t      'trim-tail',\n\t      'partition',\n\t      'if-empty',\n\t      'accumulate*',\n\t      'reject!',\n\t      'find-from',\n\t      'accumulate-as',\n\t      'collector-for-as',\n\t      'reject',\n\t      'map',\n\t      'map-sum',\n\t      'accumulate!',\n\t      '2each-from',\n\t      'follow',\n\t      'supremum-by',\n\t      'map!',\n\t      'unless-empty',\n\t      'collector',\n\t      'padding',\n\t      'reduce-index',\n\t      'replicate-as',\n\t      'infimum-by',\n\t      'trim-tail-slice',\n\t      'count',\n\t      'find-index',\n\t      'filter',\n\t      'accumulate*!',\n\t      'reject-as',\n\t      'map-integers',\n\t      'map-find',\n\t      'reduce',\n\t      'selector',\n\t      'interleave',\n\t      '2map',\n\t      'filter-as',\n\t      'binary-reduce',\n\t      'map-index-as',\n\t      'find',\n\t      'produce',\n\t      'filter!',\n\t      'replicate',\n\t      'cartesian-map',\n\t      'cartesian-each',\n\t      'find-index-from',\n\t      'map-find-last',\n\t      '3map-as',\n\t      '3map',\n\t      'find-last',\n\t      'selector-as',\n\t      '2map-as',\n\t      '2map-reduce',\n\t      'accumulate',\n\t      'each',\n\t      'each-index',\n\t      'accumulate*-as',\n\t      'when-empty',\n\t      'all?',\n\t      'collector-as',\n\t      'push-either',\n\t      'new-like',\n\t      'collector-for',\n\t      '2selector',\n\t      'push-if',\n\t      '2all?',\n\t      'map-reduce',\n\t      '3each',\n\t      'any?',\n\t      'trim-slice',\n\t      '2reduce',\n\t      'change-nth',\n\t      'produce-as',\n\t      '2each',\n\t      'trim',\n\t      'trim-head',\n\t      'cartesian-find',\n\t      'map-index', // math\n\t      'if-zero',\n\t      'each-integer',\n\t      'unless-zero',\n\t      '(find-integer)',\n\t      'when-zero',\n\t      'find-last-integer',\n\t      '(all-integers?)',\n\t      'times',\n\t      '(each-integer)',\n\t      'find-integer',\n\t      'all-integers?', // math.combinators\n\t      'unless-negative',\n\t      'if-positive',\n\t      'when-positive',\n\t      'when-negative',\n\t      'unless-positive',\n\t      'if-negative', // combinators\n\t      'case',\n\t      '2cleave',\n\t      'cond>quot',\n\t      'case>quot',\n\t      '3cleave',\n\t      'wrong-values',\n\t      'to-fixed-point',\n\t      'alist>quot',\n\t      'cond',\n\t      'cleave',\n\t      'call-effect',\n\t      'recursive-hashcode',\n\t      'spread',\n\t      'deep-spread>quot', // combinators.short-circuit\n\t      '2||',\n\t      '0||',\n\t      'n||',\n\t      '0&&',\n\t      '2&&',\n\t      '3||',\n\t      '1||',\n\t      '1&&',\n\t      'n&&',\n\t      '3&&', // combinators.smart\n\t      'smart-unless*',\n\t      'keep-inputs',\n\t      'reduce-outputs',\n\t      'smart-when*',\n\t      'cleave>array',\n\t      'smart-with',\n\t      'smart-apply',\n\t      'smart-if',\n\t      'inputs/outputs',\n\t      'output>sequence-n',\n\t      'map-outputs',\n\t      'map-reduce-outputs',\n\t      'dropping',\n\t      'output>array',\n\t      'smart-map-reduce',\n\t      'smart-2map-reduce',\n\t      'output>array-n',\n\t      'nullary',\n\t      'input<sequence',\n\t      'append-outputs',\n\t      'drop-inputs',\n\t      'inputs',\n\t      'smart-2reduce',\n\t      'drop-outputs',\n\t      'smart-reduce',\n\t      'preserving',\n\t      'smart-when',\n\t      'outputs',\n\t      'append-outputs-as',\n\t      'smart-unless',\n\t      'smart-if*',\n\t      'sum-outputs',\n\t      'input<sequence-unsafe',\n\t      'output>sequence' // tafn\n\t    ]\n\t    factor.combinators.pattern = arrToWordsRegExp(combinators)\n\t    Prism.languages.factor = factor\n\t  })(Prism)\n\t}\n\treturn factor_1;\n}\n\nexport { requireFactor as __require };",
      "start": 1702937444900,
      "end": 1702937444902,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937444902,
      "end": 1702937444902,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444902,
      "end": 1702937444902,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444902,
      "end": 1702937444902,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444902,
      "end": 1702937444902,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444902,
      "end": 1702937444902,
      "order": "normal"
    }
  ]
}
