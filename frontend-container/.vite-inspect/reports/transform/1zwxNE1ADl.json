{
  "resolvedId": "/home/zepor/ssweb/frontend-container/src/pages/docs/Redux.jsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { Button, Card, Col, Container, Row } from \"react-bootstrap\";\r\n\r\nimport Code from \"../../components/Code\";\r\n\r\nimport useAppSelector from \"../../hooks/useAppSelector\";\r\nimport useAppDispatch from \"../../hooks/useAppDispatch\";\r\n\r\nimport {\r\n  decrement,\r\n  increment,\r\n  incrementByAmount,\r\n  incrementAsync,\r\n  incrementIfOdd,\r\n  selectCount,\r\n} from \"../../redux/slices/counter\";\r\n\r\nconst Intro = () => (\r\n  <div className=\"mb-5\">\r\n    <h3>Introduction</h3>\r\n\r\n    <p className=\"text-lg\">\r\n      Redux helps you write applications that behave consistently, run in\r\n      different environments (client, server, and native), and are easy to test.\r\n      AppStack leverages{\" \"}\r\n      <a\r\n        href=\"https://redux-toolkit.js.org/\"\r\n        target=\"_blank\"\r\n        rel=\"noreferrer noopener\"\r\n      >\r\n        Redux Toolkit\r\n      </a>\r\n      , to keep the amount of boilerplate code and complexity to a minimum.\r\n    </p>\r\n  </div>\r\n);\r\n\r\nconst Usage = () => (\r\n  <div className=\"mb-5\">\r\n    <h3>Usage</h3>\r\n    <p className=\"text-lg\">\r\n      AppStack contains the following folders/files to store any Redux related\r\n      logic:\r\n    </p>\r\n\r\n    <ul className=\"text-lg\">\r\n      <li>\r\n        <code>src/redux/store.js</code> where reducers are combined and the\r\n        store is initialized\r\n      </li>\r\n      <li>\r\n        <code>src/redux/slices/</code> where reducers are implemented\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nconst CreatingANewSlice = () => (\r\n  <div className=\"mb-5\">\r\n    <h4>1. Creating a new slice</h4>\r\n    <p className=\"text-lg\">\r\n      If you want to create a new slice, pleae add a file to the{\" \"}\r\n      <code>/src/redux/slices/</code> folder. Quick example:\r\n    </p>\r\n\r\n    <Code>{`import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  products: []\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: 'products',\r\n  initialState,\r\n  reducers: {\r\n    setProducts(state, payload) {\r\n      state.products = [\r\n        {\r\n          id: '1',\r\n          slug: 'my-first-product',\r\n          title: 'My first product'\r\n        }\r\n      ];\r\n    }\r\n  }\r\n});\r\n\r\nexport const { reducer } = slice;\r\n\r\nexport default slice;\r\n\r\nexport function getProducts() {\r\n  return async dispatch => {\r\n    const response = await axios.get('/api/products');\r\n    dispatch(slice.actions.setProducts(response.data.products));\r\n  };\r\n}`}</Code>\r\n  </div>\r\n);\r\n\r\nconst AddSliceToRootReducer = () => (\r\n  <div className=\"mb-5\">\r\n    <h4>2. Add slice to root reducer</h4>\r\n    <p className=\"text-lg\">\r\n      Open the <code>/src/redux/store.ts</code> file and add the new slice:\r\n    </p>\r\n\r\n    <Code>{`import productsReducer from \"./slices/products\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    products: productsReducer,\r\n  },\r\n});`}</Code>\r\n  </div>\r\n);\r\n\r\nconst UsingTheSlice = () => (\r\n  <div className=\"mb-5\">\r\n    <h4>3. Using the slice</h4>\r\n    <Code>{`import { useDispatch, useSelector } from 'react-redux';\r\nimport { getProducts } from '../redux/slices/products';\r\n\r\nfunction ProductList() {\r\n  const dispatch = useDispatch();\r\n  const { products } = useSelector((state) => state.products);\r\n\r\n  useEffect(() => {\r\n    dispatch(getProducts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      {products.map((product) => (\r\n        <div key={product.id}>\r\n          <div>{product.name}</div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}`}</Code>\r\n  </div>\r\n);\r\n\r\nfunction Counter() {\r\n  const count = useAppSelector(selectCount);\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Body>\r\n        <Card.Title className=\"mb-0\">Example</Card.Title>\r\n        <div className=\"my-3\">\r\n          <Button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            aria-label=\"Decrement value\"\r\n            onClick={() => dispatch(decrement())}\r\n          >\r\n            -\r\n          </Button>\r\n          <div className=\"d-inline-block mx-2\">{count}</div>\r\n          <Button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            aria-label=\"Increment value\"\r\n            onClick={() => dispatch(increment())}\r\n          >\r\n            +\r\n          </Button>\r\n        </div>\r\n        <div className=\"my-3\">\r\n          <Button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            onClick={() => dispatch(incrementByAmount(1))}\r\n            className=\"me-2\"\r\n          >\r\n            Add Amount\r\n          </Button>\r\n          <Button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            onClick={() => dispatch(incrementAsync(1))}\r\n            className=\"me-2\"\r\n          >\r\n            Add Async\r\n          </Button>\r\n          <Button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            onClick={() => dispatch(incrementIfOdd(1))}\r\n            className=\"me-2\"\r\n          >\r\n            Add If Odd\r\n          </Button>\r\n        </div>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nconst RealLifeExample = () => (\r\n  <div className=\"mb-5\">\r\n    <h3>Real-life example</h3>\r\n    <p className=\"text-lg\">\r\n      The example below includes various methods, including{\" \"}\r\n      <code>createSlice</code> and <code>createAsyncThunk</code>. Any time you\r\n      click the \"Increment\" and \"Decrement buttons in the example below, the\r\n      following happens:\r\n    </p>\r\n\r\n    <ul className=\"text-lg\">\r\n      <li>The corresponding Redux action will be dispatched to the store</li>\r\n      <li>\r\n        The counter slice reducer will see the actions and update its state\r\n      </li>\r\n      <li>\r\n        The <code>{`<Counter>`}</code> component will see the new state value\r\n        from the store and re-render itself with the new data\r\n      </li>\r\n    </ul>\r\n\r\n    <Counter />\r\n  </div>\r\n);\r\n\r\nconst ReduxDevTools = () => (\r\n  <div className=\"mb-5\">\r\n    <h3>Redux DevTools</h3>\r\n    <p className=\"text-lg\">\r\n      Redux DevTools offers developer tools to power-up Redux development\r\n      workflow or any other architecture which handles the state change (see\r\n      integrations).\r\n    </p>\r\n    <p className=\"text-lg\">\r\n      It can be used as a browser extension (for{\" \"}\r\n      <a\r\n        href=\"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd\"\r\n        target=\"_blank\"\r\n        rel=\"nofollow noreferrer\"\r\n      >\r\n        Chrome\r\n      </a>\r\n      ,{\" \"}\r\n      <a\r\n        href=\"https://microsoftedge.microsoft.com/addons/detail/redux-devtools/nnkgneoiohoecpdiaponcejilbhhikei\"\r\n        target=\"_blank\"\r\n        rel=\"nofollow noreferrer\"\r\n      >\r\n        Edge\r\n      </a>{\" \"}\r\n      and{\" \"}\r\n      <a\r\n        href=\"https://addons.mozilla.org/en-US/firefox/addon/reduxdevtools/\"\r\n        target=\"_blank\"\r\n        rel=\"nofollow noreferrer\"\r\n      >\r\n        Firefox\r\n      </a>\r\n      ), as{\" \"}\r\n      <a\r\n        href=\"https://github.com/zalmoxisus/remotedev-app\"\r\n        target=\"_blank\"\r\n        rel=\"nofollow noreferrer\"\r\n      >\r\n        a standalone app\r\n      </a>{\" \"}\r\n      or as{\" \"}\r\n      <a\r\n        href=\"https://github.com/reduxjs/redux-devtools/tree/master/packages/redux-devtools\"\r\n        target=\"_blank\"\r\n        rel=\"nofollow noreferrer\"\r\n      >\r\n        a React component\r\n      </a>{\" \"}\r\n      integrated in the client app.\r\n    </p>\r\n  </div>\r\n);\r\n\r\nconst Redux = () => (\r\n  <React.Fragment>\r\n    <Helmet title=\"Redux\" />\r\n    <Container fluid className=\"p-0\">\r\n      <Row>\r\n        <Col lg={10} xl={8} className=\"col-xxl-7 mx-auto\">\r\n          <h1>Redux</h1>\r\n          <hr className=\"my-4\" />\r\n          <Intro />\r\n          <Usage />\r\n          <CreatingANewSlice />\r\n          <AddSliceToRootReducer />\r\n          <UsingTheSlice />\r\n          <RealLifeExample />\r\n          <ReduxDevTools />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default Redux;\r\n",
      "start": 1702937440809,
      "end": 1702937440872,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937440872,
      "end": 1702937440872,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937440872,
      "end": 1702937440872,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx, jsxs } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Button, Card, Col, Container, Row } from \"react-bootstrap\";\nimport Code from \"../../components/Code\";\nimport useAppSelector from \"../../hooks/useAppSelector\";\nimport useAppDispatch from \"../../hooks/useAppDispatch\";\nimport {\n  decrement,\n  increment,\n  incrementByAmount,\n  incrementAsync,\n  incrementIfOdd,\n  selectCount\n} from \"../../redux/slices/counter\";\nconst Intro = () => /* @__PURE__ */ jsxs(\"div\", { className: \"mb-5\", children: [\n  /* @__PURE__ */ jsx(\"h3\", { children: \"Introduction\" }),\n  /* @__PURE__ */ jsxs(\"p\", { className: \"text-lg\", children: [\n    \"Redux helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. AppStack leverages\",\n    \" \",\n    /* @__PURE__ */ jsx(\n      \"a\",\n      {\n        href: \"https://redux-toolkit.js.org/\",\n        target: \"_blank\",\n        rel: \"noreferrer noopener\",\n        children: \"Redux Toolkit\"\n      }\n    ),\n    \", to keep the amount of boilerplate code and complexity to a minimum.\"\n  ] })\n] });\nconst Usage = () => /* @__PURE__ */ jsxs(\"div\", { className: \"mb-5\", children: [\n  /* @__PURE__ */ jsx(\"h3\", { children: \"Usage\" }),\n  /* @__PURE__ */ jsx(\"p\", { className: \"text-lg\", children: \"AppStack contains the following folders/files to store any Redux related logic:\" }),\n  /* @__PURE__ */ jsxs(\"ul\", { className: \"text-lg\", children: [\n    /* @__PURE__ */ jsxs(\"li\", { children: [\n      /* @__PURE__ */ jsx(\"code\", { children: \"src/redux/store.js\" }),\n      \" where reducers are combined and the store is initialized\"\n    ] }),\n    /* @__PURE__ */ jsxs(\"li\", { children: [\n      /* @__PURE__ */ jsx(\"code\", { children: \"src/redux/slices/\" }),\n      \" where reducers are implemented\"\n    ] })\n  ] })\n] });\nconst CreatingANewSlice = () => /* @__PURE__ */ jsxs(\"div\", { className: \"mb-5\", children: [\n  /* @__PURE__ */ jsx(\"h4\", { children: \"1. Creating a new slice\" }),\n  /* @__PURE__ */ jsxs(\"p\", { className: \"text-lg\", children: [\n    \"If you want to create a new slice, pleae add a file to the\",\n    \" \",\n    /* @__PURE__ */ jsx(\"code\", { children: \"/src/redux/slices/\" }),\n    \" folder. Quick example:\"\n  ] }),\n  /* @__PURE__ */ jsx(Code, { children: `import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  products: []\n};\n\nconst slice = createSlice({\n  name: 'products',\n  initialState,\n  reducers: {\n    setProducts(state, payload) {\n      state.products = [\n        {\n          id: '1',\n          slug: 'my-first-product',\n          title: 'My first product'\n        }\n      ];\n    }\n  }\n});\n\nexport const { reducer } = slice;\n\nexport default slice;\n\nexport function getProducts() {\n  return async dispatch => {\n    const response = await axios.get('/api/products');\n    dispatch(slice.actions.setProducts(response.data.products));\n  };\n}` })\n] });\nconst AddSliceToRootReducer = () => /* @__PURE__ */ jsxs(\"div\", { className: \"mb-5\", children: [\n  /* @__PURE__ */ jsx(\"h4\", { children: \"2. Add slice to root reducer\" }),\n  /* @__PURE__ */ jsxs(\"p\", { className: \"text-lg\", children: [\n    \"Open the \",\n    /* @__PURE__ */ jsx(\"code\", { children: \"/src/redux/store.ts\" }),\n    \" file and add the new slice:\"\n  ] }),\n  /* @__PURE__ */ jsx(Code, { children: `import productsReducer from \"./slices/products\";\n\nexport const store = configureStore({\n  reducer: {\n    products: productsReducer,\n  },\n});` })\n] });\nconst UsingTheSlice = () => /* @__PURE__ */ jsxs(\"div\", { className: \"mb-5\", children: [\n  /* @__PURE__ */ jsx(\"h4\", { children: \"3. Using the slice\" }),\n  /* @__PURE__ */ jsx(Code, { children: `import { useDispatch, useSelector } from 'react-redux';\nimport { getProducts } from '../redux/slices/products';\n\nfunction ProductList() {\n  const dispatch = useDispatch();\n  const { products } = useSelector((state) => state.products);\n\n  useEffect(() => {\n    dispatch(getProducts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {products.map((product) => (\n        <div key={product.id}>\n          <div>{product.name}</div>\n        </div>\n      ))}\n    </div>\n  );\n}` })\n] });\nfunction Counter() {\n  const count = useAppSelector(selectCount);\n  const dispatch = useAppDispatch();\n  return /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsxs(Card.Body, { children: [\n    /* @__PURE__ */ jsx(Card.Title, { className: \"mb-0\", children: \"Example\" }),\n    /* @__PURE__ */ jsxs(\"div\", { className: \"my-3\", children: [\n      /* @__PURE__ */ jsx(\n        Button,\n        {\n          variant: \"primary\",\n          size: \"sm\",\n          \"aria-label\": \"Decrement value\",\n          onClick: () => dispatch(decrement()),\n          children: \"-\"\n        }\n      ),\n      /* @__PURE__ */ jsx(\"div\", { className: \"d-inline-block mx-2\", children: count }),\n      /* @__PURE__ */ jsx(\n        Button,\n        {\n          variant: \"primary\",\n          size: \"sm\",\n          \"aria-label\": \"Increment value\",\n          onClick: () => dispatch(increment()),\n          children: \"+\"\n        }\n      )\n    ] }),\n    /* @__PURE__ */ jsxs(\"div\", { className: \"my-3\", children: [\n      /* @__PURE__ */ jsx(\n        Button,\n        {\n          variant: \"primary\",\n          size: \"sm\",\n          onClick: () => dispatch(incrementByAmount(1)),\n          className: \"me-2\",\n          children: \"Add Amount\"\n        }\n      ),\n      /* @__PURE__ */ jsx(\n        Button,\n        {\n          variant: \"primary\",\n          size: \"sm\",\n          onClick: () => dispatch(incrementAsync(1)),\n          className: \"me-2\",\n          children: \"Add Async\"\n        }\n      ),\n      /* @__PURE__ */ jsx(\n        Button,\n        {\n          variant: \"primary\",\n          size: \"sm\",\n          onClick: () => dispatch(incrementIfOdd(1)),\n          className: \"me-2\",\n          children: \"Add If Odd\"\n        }\n      )\n    ] })\n  ] }) });\n}\nconst RealLifeExample = () => /* @__PURE__ */ jsxs(\"div\", { className: \"mb-5\", children: [\n  /* @__PURE__ */ jsx(\"h3\", { children: \"Real-life example\" }),\n  /* @__PURE__ */ jsxs(\"p\", { className: \"text-lg\", children: [\n    \"The example below includes various methods, including\",\n    \" \",\n    /* @__PURE__ */ jsx(\"code\", { children: \"createSlice\" }),\n    \" and \",\n    /* @__PURE__ */ jsx(\"code\", { children: \"createAsyncThunk\" }),\n    '. Any time you click the \"Increment\" and \"Decrement buttons in the example below, the following happens:'\n  ] }),\n  /* @__PURE__ */ jsxs(\"ul\", { className: \"text-lg\", children: [\n    /* @__PURE__ */ jsx(\"li\", { children: \"The corresponding Redux action will be dispatched to the store\" }),\n    /* @__PURE__ */ jsx(\"li\", { children: \"The counter slice reducer will see the actions and update its state\" }),\n    /* @__PURE__ */ jsxs(\"li\", { children: [\n      \"The \",\n      /* @__PURE__ */ jsx(\"code\", { children: `<Counter>` }),\n      \" component will see the new state value from the store and re-render itself with the new data\"\n    ] })\n  ] }),\n  /* @__PURE__ */ jsx(Counter, {})\n] });\nconst ReduxDevTools = () => /* @__PURE__ */ jsxs(\"div\", { className: \"mb-5\", children: [\n  /* @__PURE__ */ jsx(\"h3\", { children: \"Redux DevTools\" }),\n  /* @__PURE__ */ jsx(\"p\", { className: \"text-lg\", children: \"Redux DevTools offers developer tools to power-up Redux development workflow or any other architecture which handles the state change (see integrations).\" }),\n  /* @__PURE__ */ jsxs(\"p\", { className: \"text-lg\", children: [\n    \"It can be used as a browser extension (for\",\n    \" \",\n    /* @__PURE__ */ jsx(\n      \"a\",\n      {\n        href: \"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd\",\n        target: \"_blank\",\n        rel: \"nofollow noreferrer\",\n        children: \"Chrome\"\n      }\n    ),\n    \",\",\n    \" \",\n    /* @__PURE__ */ jsx(\n      \"a\",\n      {\n        href: \"https://microsoftedge.microsoft.com/addons/detail/redux-devtools/nnkgneoiohoecpdiaponcejilbhhikei\",\n        target: \"_blank\",\n        rel: \"nofollow noreferrer\",\n        children: \"Edge\"\n      }\n    ),\n    \" \",\n    \"and\",\n    \" \",\n    /* @__PURE__ */ jsx(\n      \"a\",\n      {\n        href: \"https://addons.mozilla.org/en-US/firefox/addon/reduxdevtools/\",\n        target: \"_blank\",\n        rel: \"nofollow noreferrer\",\n        children: \"Firefox\"\n      }\n    ),\n    \"), as\",\n    \" \",\n    /* @__PURE__ */ jsx(\n      \"a\",\n      {\n        href: \"https://github.com/zalmoxisus/remotedev-app\",\n        target: \"_blank\",\n        rel: \"nofollow noreferrer\",\n        children: \"a standalone app\"\n      }\n    ),\n    \" \",\n    \"or as\",\n    \" \",\n    /* @__PURE__ */ jsx(\n      \"a\",\n      {\n        href: \"https://github.com/reduxjs/redux-devtools/tree/master/packages/redux-devtools\",\n        target: \"_blank\",\n        rel: \"nofollow noreferrer\",\n        children: \"a React component\"\n      }\n    ),\n    \" \",\n    \"integrated in the client app.\"\n  ] })\n] });\nconst Redux = () => /* @__PURE__ */ jsxs(React.Fragment, { children: [\n  /* @__PURE__ */ jsx(Helmet, { title: \"Redux\" }),\n  /* @__PURE__ */ jsx(Container, { fluid: true, className: \"p-0\", children: /* @__PURE__ */ jsx(Row, { children: /* @__PURE__ */ jsxs(Col, { lg: 10, xl: 8, className: \"col-xxl-7 mx-auto\", children: [\n    /* @__PURE__ */ jsx(\"h1\", { children: \"Redux\" }),\n    /* @__PURE__ */ jsx(\"hr\", { className: \"my-4\" }),\n    /* @__PURE__ */ jsx(Intro, {}),\n    /* @__PURE__ */ jsx(Usage, {}),\n    /* @__PURE__ */ jsx(CreatingANewSlice, {}),\n    /* @__PURE__ */ jsx(AddSliceToRootReducer, {}),\n    /* @__PURE__ */ jsx(UsingTheSlice, {}),\n    /* @__PURE__ */ jsx(RealLifeExample, {}),\n    /* @__PURE__ */ jsx(ReduxDevTools, {})\n  ] }) }) })\n] });\nexport default Redux;\n",
      "start": 1702937440872,
      "end": 1702937440875,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/home/zepor/ssweb/frontend-container/src/pages/docs/Redux.jsx"
        ],
        "sourcesContent": [
          "import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { Button, Card, Col, Container, Row } from \"react-bootstrap\";\r\n\r\nimport Code from \"../../components/Code\";\r\n\r\nimport useAppSelector from \"../../hooks/useAppSelector\";\r\nimport useAppDispatch from \"../../hooks/useAppDispatch\";\r\n\r\nimport {\r\n  decrement,\r\n  increment,\r\n  incrementByAmount,\r\n  incrementAsync,\r\n  incrementIfOdd,\r\n  selectCount,\r\n} from \"../../redux/slices/counter\";\r\n\r\nconst Intro = () => (\r\n  <div className=\"mb-5\">\r\n    <h3>Introduction</h3>\r\n\r\n    <p className=\"text-lg\">\r\n      Redux helps you write applications that behave consistently, run in\r\n      different environments (client, server, and native), and are easy to test.\r\n      AppStack leverages{\" \"}\r\n      <a\r\n        href=\"https://redux-toolkit.js.org/\"\r\n        target=\"_blank\"\r\n        rel=\"noreferrer noopener\"\r\n      >\r\n        Redux Toolkit\r\n      </a>\r\n      , to keep the amount of boilerplate code and complexity to a minimum.\r\n    </p>\r\n  </div>\r\n);\r\n\r\nconst Usage = () => (\r\n  <div className=\"mb-5\">\r\n    <h3>Usage</h3>\r\n    <p className=\"text-lg\">\r\n      AppStack contains the following folders/files to store any Redux related\r\n      logic:\r\n    </p>\r\n\r\n    <ul className=\"text-lg\">\r\n      <li>\r\n        <code>src/redux/store.js</code> where reducers are combined and the\r\n        store is initialized\r\n      </li>\r\n      <li>\r\n        <code>src/redux/slices/</code> where reducers are implemented\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nconst CreatingANewSlice = () => (\r\n  <div className=\"mb-5\">\r\n    <h4>1. Creating a new slice</h4>\r\n    <p className=\"text-lg\">\r\n      If you want to create a new slice, pleae add a file to the{\" \"}\r\n      <code>/src/redux/slices/</code> folder. Quick example:\r\n    </p>\r\n\r\n    <Code>{`import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  products: []\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: 'products',\r\n  initialState,\r\n  reducers: {\r\n    setProducts(state, payload) {\r\n      state.products = [\r\n        {\r\n          id: '1',\r\n          slug: 'my-first-product',\r\n          title: 'My first product'\r\n        }\r\n      ];\r\n    }\r\n  }\r\n});\r\n\r\nexport const { reducer } = slice;\r\n\r\nexport default slice;\r\n\r\nexport function getProducts() {\r\n  return async dispatch => {\r\n    const response = await axios.get('/api/products');\r\n    dispatch(slice.actions.setProducts(response.data.products));\r\n  };\r\n}`}</Code>\r\n  </div>\r\n);\r\n\r\nconst AddSliceToRootReducer = () => (\r\n  <div className=\"mb-5\">\r\n    <h4>2. Add slice to root reducer</h4>\r\n    <p className=\"text-lg\">\r\n      Open the <code>/src/redux/store.ts</code> file and add the new slice:\r\n    </p>\r\n\r\n    <Code>{`import productsReducer from \"./slices/products\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    products: productsReducer,\r\n  },\r\n});`}</Code>\r\n  </div>\r\n);\r\n\r\nconst UsingTheSlice = () => (\r\n  <div className=\"mb-5\">\r\n    <h4>3. Using the slice</h4>\r\n    <Code>{`import { useDispatch, useSelector } from 'react-redux';\r\nimport { getProducts } from '../redux/slices/products';\r\n\r\nfunction ProductList() {\r\n  const dispatch = useDispatch();\r\n  const { products } = useSelector((state) => state.products);\r\n\r\n  useEffect(() => {\r\n    dispatch(getProducts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      {products.map((product) => (\r\n        <div key={product.id}>\r\n          <div>{product.name}</div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}`}</Code>\r\n  </div>\r\n);\r\n\r\nfunction Counter() {\r\n  const count = useAppSelector(selectCount);\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Body>\r\n        <Card.Title className=\"mb-0\">Example</Card.Title>\r\n        <div className=\"my-3\">\r\n          <Button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            aria-label=\"Decrement value\"\r\n            onClick={() => dispatch(decrement())}\r\n          >\r\n            -\r\n          </Button>\r\n          <div className=\"d-inline-block mx-2\">{count}</div>\r\n          <Button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            aria-label=\"Increment value\"\r\n            onClick={() => dispatch(increment())}\r\n          >\r\n            +\r\n          </Button>\r\n        </div>\r\n        <div className=\"my-3\">\r\n          <Button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            onClick={() => dispatch(incrementByAmount(1))}\r\n            className=\"me-2\"\r\n          >\r\n            Add Amount\r\n          </Button>\r\n          <Button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            onClick={() => dispatch(incrementAsync(1))}\r\n            className=\"me-2\"\r\n          >\r\n            Add Async\r\n          </Button>\r\n          <Button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            onClick={() => dispatch(incrementIfOdd(1))}\r\n            className=\"me-2\"\r\n          >\r\n            Add If Odd\r\n          </Button>\r\n        </div>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nconst RealLifeExample = () => (\r\n  <div className=\"mb-5\">\r\n    <h3>Real-life example</h3>\r\n    <p className=\"text-lg\">\r\n      The example below includes various methods, including{\" \"}\r\n      <code>createSlice</code> and <code>createAsyncThunk</code>. Any time you\r\n      click the \"Increment\" and \"Decrement buttons in the example below, the\r\n      following happens:\r\n    </p>\r\n\r\n    <ul className=\"text-lg\">\r\n      <li>The corresponding Redux action will be dispatched to the store</li>\r\n      <li>\r\n        The counter slice reducer will see the actions and update its state\r\n      </li>\r\n      <li>\r\n        The <code>{`<Counter>`}</code> component will see the new state value\r\n        from the store and re-render itself with the new data\r\n      </li>\r\n    </ul>\r\n\r\n    <Counter />\r\n  </div>\r\n);\r\n\r\nconst ReduxDevTools = () => (\r\n  <div className=\"mb-5\">\r\n    <h3>Redux DevTools</h3>\r\n    <p className=\"text-lg\">\r\n      Redux DevTools offers developer tools to power-up Redux development\r\n      workflow or any other architecture which handles the state change (see\r\n      integrations).\r\n    </p>\r\n    <p className=\"text-lg\">\r\n      It can be used as a browser extension (for{\" \"}\r\n      <a\r\n        href=\"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd\"\r\n        target=\"_blank\"\r\n        rel=\"nofollow noreferrer\"\r\n      >\r\n        Chrome\r\n      </a>\r\n      ,{\" \"}\r\n      <a\r\n        href=\"https://microsoftedge.microsoft.com/addons/detail/redux-devtools/nnkgneoiohoecpdiaponcejilbhhikei\"\r\n        target=\"_blank\"\r\n        rel=\"nofollow noreferrer\"\r\n      >\r\n        Edge\r\n      </a>{\" \"}\r\n      and{\" \"}\r\n      <a\r\n        href=\"https://addons.mozilla.org/en-US/firefox/addon/reduxdevtools/\"\r\n        target=\"_blank\"\r\n        rel=\"nofollow noreferrer\"\r\n      >\r\n        Firefox\r\n      </a>\r\n      ), as{\" \"}\r\n      <a\r\n        href=\"https://github.com/zalmoxisus/remotedev-app\"\r\n        target=\"_blank\"\r\n        rel=\"nofollow noreferrer\"\r\n      >\r\n        a standalone app\r\n      </a>{\" \"}\r\n      or as{\" \"}\r\n      <a\r\n        href=\"https://github.com/reduxjs/redux-devtools/tree/master/packages/redux-devtools\"\r\n        target=\"_blank\"\r\n        rel=\"nofollow noreferrer\"\r\n      >\r\n        a React component\r\n      </a>{\" \"}\r\n      integrated in the client app.\r\n    </p>\r\n  </div>\r\n);\r\n\r\nconst Redux = () => (\r\n  <React.Fragment>\r\n    <Helmet title=\"Redux\" />\r\n    <Container fluid className=\"p-0\">\r\n      <Row>\r\n        <Col lg={10} xl={8} className=\"col-xxl-7 mx-auto\">\r\n          <h1>Redux</h1>\r\n          <hr className=\"my-4\" />\r\n          <Intro />\r\n          <Usage />\r\n          <CreatingANewSlice />\r\n          <AddSliceToRootReducer />\r\n          <UsingTheSlice />\r\n          <RealLifeExample />\r\n          <ReduxDevTools />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default Redux;\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1702937440876,
      "end": 1702937440876,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937440876,
      "end": 1702937440876,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937440876,
      "end": 1702937440876,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937440876,
      "end": 1702937440876,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937440876,
      "end": 1702937440876,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937440876,
      "end": 1702937440876,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937440876,
      "end": 1702937440876,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937440876,
      "end": 1702937440876,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937440876,
      "end": 1702937440876,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937440876,
      "end": 1702937440876,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937440876,
      "end": 1702937440876,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937440876,
      "end": 1702937440876,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937440876,
      "end": 1702937440876,
      "order": "normal"
    }
  ]
}
