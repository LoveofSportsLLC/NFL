{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/regex.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = regex\nregex.displayName = 'regex'\nregex.aliases = []\nfunction regex(Prism) {\n  ;(function (Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    }\n    var escape =\n      /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/\n    var charSet = {\n      pattern: /\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    }\n    var charSetWithoutDot = {\n      pattern: /\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    }\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')'\n    var range = RegExp(rangeChar + '-' + rangeChar) // the name of a capturing group\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    }\n    Prism.languages.regex = {\n      'char-class': {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'char-class-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          'char-class-punctuation': {\n            pattern: /^\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': {\n                pattern: /-/,\n                alias: 'operator'\n              }\n            }\n          },\n          'special-escape': specialEscape,\n          'char-set': charSetWithoutDot,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      'char-set': charSet,\n      backreference: [\n        {\n          // a backreference which is not an octal escape\n          pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n          alias: 'keyword'\n        },\n        {\n          pattern: /\\\\k<[^<>']+>/,\n          alias: 'keyword',\n          inside: {\n            'group-name': groupName\n          }\n        }\n      ],\n      anchor: {\n        pattern: /[$^]|\\\\[ABbGZz]/,\n        alias: 'function'\n      },\n      escape: escape,\n      group: [\n        {\n          // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n          // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n          // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n          pattern:\n            /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n          alias: 'punctuation',\n          inside: {\n            'group-name': groupName\n          }\n        },\n        {\n          pattern: /\\)/,\n          alias: 'punctuation'\n        }\n      ],\n      quantifier: {\n        pattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,\n        alias: 'number'\n      },\n      alternation: {\n        pattern: /\\|/,\n        alias: 'keyword'\n      }\n    }\n  })(Prism)\n}\n",
      "start": 1702937445039,
      "end": 1702937445060,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445060,
      "end": 1702937445060,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445060,
      "end": 1702937445060,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445060,
      "end": 1702937445060,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445060,
      "end": 1702937445060,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445060,
      "end": 1702937445060,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445060,
      "end": 1702937445060,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445060,
      "end": 1702937445060,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445060,
      "end": 1702937445060,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445060,
      "end": 1702937445060,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445060,
      "end": 1702937445060,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar regex_1;\nvar hasRequiredRegex;\n\nfunction requireRegex () {\n\tif (hasRequiredRegex) return regex_1;\n\thasRequiredRegex = 1;\n\t'use strict'\n\n\tregex_1 = regex\n\tregex.displayName = 'regex'\n\tregex.aliases = []\n\tfunction regex(Prism) {\n\t  ;(function (Prism) {\n\t    var specialEscape = {\n\t      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n\t      alias: 'escape'\n\t    }\n\t    var escape =\n\t      /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/\n\t    var charSet = {\n\t      pattern: /\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n\t      alias: 'class-name'\n\t    }\n\t    var charSetWithoutDot = {\n\t      pattern: /\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n\t      alias: 'class-name'\n\t    }\n\t    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')'\n\t    var range = RegExp(rangeChar + '-' + rangeChar) // the name of a capturing group\n\t    var groupName = {\n\t      pattern: /(<|')[^<>']+(?=[>']$)/,\n\t      lookbehind: true,\n\t      alias: 'variable'\n\t    }\n\t    Prism.languages.regex = {\n\t      'char-class': {\n\t        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n\t        lookbehind: true,\n\t        inside: {\n\t          'char-class-negation': {\n\t            pattern: /(^\\[)\\^/,\n\t            lookbehind: true,\n\t            alias: 'operator'\n\t          },\n\t          'char-class-punctuation': {\n\t            pattern: /^\\[|\\]$/,\n\t            alias: 'punctuation'\n\t          },\n\t          range: {\n\t            pattern: range,\n\t            inside: {\n\t              escape: escape,\n\t              'range-punctuation': {\n\t                pattern: /-/,\n\t                alias: 'operator'\n\t              }\n\t            }\n\t          },\n\t          'special-escape': specialEscape,\n\t          'char-set': charSetWithoutDot,\n\t          escape: escape\n\t        }\n\t      },\n\t      'special-escape': specialEscape,\n\t      'char-set': charSet,\n\t      backreference: [\n\t        {\n\t          // a backreference which is not an octal escape\n\t          pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n\t          alias: 'keyword'\n\t        },\n\t        {\n\t          pattern: /\\\\k<[^<>']+>/,\n\t          alias: 'keyword',\n\t          inside: {\n\t            'group-name': groupName\n\t          }\n\t        }\n\t      ],\n\t      anchor: {\n\t        pattern: /[$^]|\\\\[ABbGZz]/,\n\t        alias: 'function'\n\t      },\n\t      escape: escape,\n\t      group: [\n\t        {\n\t          // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n\t          // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n\t          // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n\t          pattern:\n\t            /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n\t          alias: 'punctuation',\n\t          inside: {\n\t            'group-name': groupName\n\t          }\n\t        },\n\t        {\n\t          pattern: /\\)/,\n\t          alias: 'punctuation'\n\t        }\n\t      ],\n\t      quantifier: {\n\t        pattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,\n\t        alias: 'number'\n\t      },\n\t      alternation: {\n\t        pattern: /\\|/,\n\t        alias: 'keyword'\n\t      }\n\t    }\n\t  })(Prism)\n\t}\n\treturn regex_1;\n}\n\nexport { requireRegex as __require };",
      "start": 1702937445060,
      "end": 1702937445060,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937445060,
      "end": 1702937445060,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445060,
      "end": 1702937445060,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445060,
      "end": 1702937445060,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445060,
      "end": 1702937445060,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445060,
      "end": 1702937445060,
      "order": "normal"
    }
  ]
}
