{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/swift.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = swift\nswift.displayName = 'swift'\nswift.aliases = []\nfunction swift(Prism) {\n  Prism.languages.swift = {\n    comment: {\n      // Nested comments are supported up to 2 levels\n      pattern:\n        /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'string-literal': [\n      // https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\n      {\n        pattern: RegExp(\n          /(^|[^\"#])/.source +\n            '(?:' + // single-line string\n            /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/\n              .source +\n            '|' + // multi-line string\n            /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/\n              .source +\n            ')' +\n            /(?![\"#])/.source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n            lookbehind: true,\n            inside: null // see below\n          },\n          'interpolation-punctuation': {\n            pattern: /^\\)|\\\\\\($/,\n            alias: 'punctuation'\n          },\n          punctuation: /\\\\(?=[\\r\\n])/,\n          string: /[\\s\\S]+/\n        }\n      },\n      {\n        pattern: RegExp(\n          /(^|[^\"#])(#+)/.source +\n            '(?:' + // single-line string\n            /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/\n              .source +\n            '|' + // multi-line string\n            /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source +\n            ')' +\n            '\\\\2'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n            lookbehind: true,\n            inside: null // see below\n          },\n          'interpolation-punctuation': {\n            pattern: /^\\)|\\\\#+\\($/,\n            alias: 'punctuation'\n          },\n          string: /[\\s\\S]+/\n        }\n      }\n    ],\n    directive: {\n      // directives with conditions\n      pattern: RegExp(\n        /#/.source +\n          '(?:' +\n          (/(?:elseif|if)\\b/.source +\n            '(?:[ \\t]*' + // This regex is a little complex. It's equivalent to this:\n            //   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\n            // where <round> is a general parentheses expression.\n            /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/\n              .source +\n            ')+') +\n          '|' +\n          /(?:else|endif)\\b/.source +\n          ')'\n      ),\n      alias: 'property',\n      inside: {\n        'directive-name': /^#\\w+/,\n        boolean: /\\b(?:false|true)\\b/,\n        number: /\\b\\d+(?:\\.\\d+)*\\b/,\n        operator: /!|&&|\\|\\||[<>]=?/,\n        punctuation: /[(),]/\n      }\n    },\n    literal: {\n      pattern:\n        /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n      alias: 'constant'\n    },\n    'other-directive': {\n      pattern: /#\\w+\\b/,\n      alias: 'property'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'atrule'\n    },\n    'function-definition': {\n      pattern: /(\\bfunc\\s+)\\w+/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    label: {\n      // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\n      pattern:\n        /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n      lookbehind: true,\n      alias: 'important'\n    },\n    keyword:\n      /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    nil: {\n      pattern: /\\bnil\\b/,\n      alias: 'constant'\n    },\n    'short-argument': /\\$\\d+\\b/,\n    omit: {\n      pattern: /\\b_\\b/,\n      alias: 'keyword'\n    },\n    number:\n      /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n    // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\n    'class-name': /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    constant: /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n    // Operators are generic in Swift. Developers can even create new operators (e.g. +++).\n    // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\n    // This regex only supports ASCII operators.\n    operator: /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n    punctuation: /[{}[\\]();,.:\\\\]/\n  }\n  Prism.languages.swift['string-literal'].forEach(function (rule) {\n    rule.inside['interpolation'].inside = Prism.languages.swift\n  })\n}\n",
      "start": 1702937445078,
      "end": 1702937445106,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445106,
      "end": 1702937445106,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445106,
      "end": 1702937445106,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445107,
      "end": 1702937445107,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445107,
      "end": 1702937445107,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445107,
      "end": 1702937445107,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445107,
      "end": 1702937445107,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445107,
      "end": 1702937445107,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445107,
      "end": 1702937445107,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445107,
      "end": 1702937445107,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445107,
      "end": 1702937445107,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar swift_1;\nvar hasRequiredSwift;\n\nfunction requireSwift () {\n\tif (hasRequiredSwift) return swift_1;\n\thasRequiredSwift = 1;\n\t'use strict'\n\n\tswift_1 = swift\n\tswift.displayName = 'swift'\n\tswift.aliases = []\n\tfunction swift(Prism) {\n\t  Prism.languages.swift = {\n\t    comment: {\n\t      // Nested comments are supported up to 2 levels\n\t      pattern:\n\t        /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n\t      lookbehind: true,\n\t      greedy: true\n\t    },\n\t    'string-literal': [\n\t      // https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\n\t      {\n\t        pattern: RegExp(\n\t          /(^|[^\"#])/.source +\n\t            '(?:' + // single-line string\n\t            /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/\n\t              .source +\n\t            '|' + // multi-line string\n\t            /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/\n\t              .source +\n\t            ')' +\n\t            /(?![\"#])/.source\n\t        ),\n\t        lookbehind: true,\n\t        greedy: true,\n\t        inside: {\n\t          interpolation: {\n\t            pattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n\t            lookbehind: true,\n\t            inside: null // see below\n\t          },\n\t          'interpolation-punctuation': {\n\t            pattern: /^\\)|\\\\\\($/,\n\t            alias: 'punctuation'\n\t          },\n\t          punctuation: /\\\\(?=[\\r\\n])/,\n\t          string: /[\\s\\S]+/\n\t        }\n\t      },\n\t      {\n\t        pattern: RegExp(\n\t          /(^|[^\"#])(#+)/.source +\n\t            '(?:' + // single-line string\n\t            /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/\n\t              .source +\n\t            '|' + // multi-line string\n\t            /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source +\n\t            ')' +\n\t            '\\\\2'\n\t        ),\n\t        lookbehind: true,\n\t        greedy: true,\n\t        inside: {\n\t          interpolation: {\n\t            pattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n\t            lookbehind: true,\n\t            inside: null // see below\n\t          },\n\t          'interpolation-punctuation': {\n\t            pattern: /^\\)|\\\\#+\\($/,\n\t            alias: 'punctuation'\n\t          },\n\t          string: /[\\s\\S]+/\n\t        }\n\t      }\n\t    ],\n\t    directive: {\n\t      // directives with conditions\n\t      pattern: RegExp(\n\t        /#/.source +\n\t          '(?:' +\n\t          (/(?:elseif|if)\\b/.source +\n\t            '(?:[ \\t]*' + // This regex is a little complex. It's equivalent to this:\n\t            //   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\n\t            // where <round> is a general parentheses expression.\n\t            /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/\n\t              .source +\n\t            ')+') +\n\t          '|' +\n\t          /(?:else|endif)\\b/.source +\n\t          ')'\n\t      ),\n\t      alias: 'property',\n\t      inside: {\n\t        'directive-name': /^#\\w+/,\n\t        boolean: /\\b(?:false|true)\\b/,\n\t        number: /\\b\\d+(?:\\.\\d+)*\\b/,\n\t        operator: /!|&&|\\|\\||[<>]=?/,\n\t        punctuation: /[(),]/\n\t      }\n\t    },\n\t    literal: {\n\t      pattern:\n\t        /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n\t      alias: 'constant'\n\t    },\n\t    'other-directive': {\n\t      pattern: /#\\w+\\b/,\n\t      alias: 'property'\n\t    },\n\t    attribute: {\n\t      pattern: /@\\w+/,\n\t      alias: 'atrule'\n\t    },\n\t    'function-definition': {\n\t      pattern: /(\\bfunc\\s+)\\w+/,\n\t      lookbehind: true,\n\t      alias: 'function'\n\t    },\n\t    label: {\n\t      // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\n\t      pattern:\n\t        /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n\t      lookbehind: true,\n\t      alias: 'important'\n\t    },\n\t    keyword:\n\t      /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n\t    boolean: /\\b(?:false|true)\\b/,\n\t    nil: {\n\t      pattern: /\\bnil\\b/,\n\t      alias: 'constant'\n\t    },\n\t    'short-argument': /\\$\\d+\\b/,\n\t    omit: {\n\t      pattern: /\\b_\\b/,\n\t      alias: 'keyword'\n\t    },\n\t    number:\n\t      /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n\t    // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\n\t    'class-name': /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n\t    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n\t    constant: /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n\t    // Operators are generic in Swift. Developers can even create new operators (e.g. +++).\n\t    // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\n\t    // This regex only supports ASCII operators.\n\t    operator: /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n\t    punctuation: /[{}[\\]();,.:\\\\]/\n\t  }\n\t  Prism.languages.swift['string-literal'].forEach(function (rule) {\n\t    rule.inside['interpolation'].inside = Prism.languages.swift\n\t  })\n\t}\n\treturn swift_1;\n}\n\nexport { requireSwift as __require };",
      "start": 1702937445107,
      "end": 1702937445107,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937445107,
      "end": 1702937445107,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445107,
      "end": 1702937445107,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445107,
      "end": 1702937445107,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445107,
      "end": 1702937445107,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445107,
      "end": 1702937445107,
      "order": "normal"
    }
  ]
}
