{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/highlight.js/lib/languages/htmlbars.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction anyNumberOfTimes(re) {\n  return concat('(', re, ')*');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/*\nLanguage: Handlebars\nRequires: xml.js\nAuthor: Robin Ward <robin.ward@gmail.com>\nDescription: Matcher for Handlebars as well as EmberJS additions.\nWebsite: https://handlebarsjs.com\nCategory: template\n*/\n\nfunction handlebars(hljs) {\n  const BUILT_INS = {\n    'builtin-name': [\n      'action',\n      'bindattr',\n      'collection',\n      'component',\n      'concat',\n      'debugger',\n      'each',\n      'each-in',\n      'get',\n      'hash',\n      'if',\n      'in',\n      'input',\n      'link-to',\n      'loc',\n      'log',\n      'lookup',\n      'mut',\n      'outlet',\n      'partial',\n      'query-params',\n      'render',\n      'template',\n      'textarea',\n      'unbound',\n      'unless',\n      'view',\n      'with',\n      'yield'\n    ]\n  };\n\n  const LITERALS = {\n    literal: [\n      'true',\n      'false',\n      'undefined',\n      'null'\n    ]\n  };\n\n  // as defined in https://handlebarsjs.com/guide/expressions.html#literal-segments\n  // this regex matches literal segments like ' abc ' or [ abc ] as well as helpers and paths\n  // like a/b, ./abc/cde, and abc.bcd\n\n  const DOUBLE_QUOTED_ID_REGEX = /\"\"|\"[^\"]+\"/;\n  const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;\n  const BRACKET_QUOTED_ID_REGEX = /\\[\\]|\\[[^\\]]+\\]/;\n  const PLAIN_ID_REGEX = /[^\\s!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]+/;\n  const PATH_DELIMITER_REGEX = /(\\.|\\/)/;\n  const ANY_ID = either(\n    DOUBLE_QUOTED_ID_REGEX,\n    SINGLE_QUOTED_ID_REGEX,\n    BRACKET_QUOTED_ID_REGEX,\n    PLAIN_ID_REGEX\n    );\n\n  const IDENTIFIER_REGEX = concat(\n    optional(/\\.|\\.\\/|\\//), // relative or absolute path\n    ANY_ID,\n    anyNumberOfTimes(concat(\n      PATH_DELIMITER_REGEX,\n      ANY_ID\n    ))\n  );\n\n  // identifier followed by a equal-sign (without the equal sign)\n  const HASH_PARAM_REGEX = concat(\n    '(',\n    BRACKET_QUOTED_ID_REGEX, '|',\n    PLAIN_ID_REGEX,\n    ')(?==)'\n  );\n\n  const HELPER_NAME_OR_PATH_EXPRESSION = {\n    begin: IDENTIFIER_REGEX,\n    lexemes: /[\\w.\\/]+/\n  };\n\n  const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: LITERALS\n  });\n\n  const SUB_EXPRESSION = {\n    begin: /\\(/,\n    end: /\\)/\n    // the \"contains\" is added below when all necessary sub-modes are defined\n  };\n\n  const HASH = {\n    // fka \"attribute-assignment\", parameters of the form 'key=value'\n    className: 'attr',\n    begin: HASH_PARAM_REGEX,\n    relevance: 0,\n    starts: {\n      begin: /=/,\n      end: /=/,\n      starts: {\n        contains: [\n          hljs.NUMBER_MODE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.APOS_STRING_MODE,\n          HELPER_PARAMETER,\n          SUB_EXPRESSION\n        ]\n      }\n    }\n  };\n\n  const BLOCK_PARAMS = {\n    // parameters of the form '{{#with x as | y |}}...{{/with}}'\n    begin: /as\\s+\\|/,\n    keywords: {\n      keyword: 'as'\n    },\n    end: /\\|/,\n    contains: [\n      {\n        // define sub-mode in order to prevent highlighting of block-parameter named \"as\"\n        begin: /\\w+/\n      }\n    ]\n  };\n\n  const HELPER_PARAMETERS = {\n    contains: [\n      hljs.NUMBER_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.APOS_STRING_MODE,\n      BLOCK_PARAMS,\n      HASH,\n      HELPER_PARAMETER,\n      SUB_EXPRESSION\n    ],\n    returnEnd: true\n    // the property \"end\" is defined through inheritance when the mode is used. If depends\n    // on the surrounding mode, but \"endsWithParent\" does not work here (i.e. it includes the\n    // end-token of the surrounding mode)\n  };\n\n  const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\)/\n    })\n  });\n\n  SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];\n\n  const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name',\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\}\\}/\n    })\n  });\n\n  const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name'\n  });\n\n  const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\}\\}/\n    })\n  });\n\n  const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {\n    begin: /\\\\\\{\\{/,\n    skip: true\n  };\n  const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {\n    begin: /\\\\\\\\(?=\\{\\{)/,\n    skip: true\n  };\n\n  return {\n    name: 'Handlebars',\n    aliases: [\n      'hbs',\n      'html.hbs',\n      'html.handlebars',\n      'htmlbars'\n    ],\n    case_insensitive: true,\n    subLanguage: 'xml',\n    contains: [\n      ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,\n      PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,\n      hljs.COMMENT(/\\{\\{!--/, /--\\}\\}/),\n      hljs.COMMENT(/\\{\\{!/, /\\}\\}/),\n      {\n        // open raw block \"{{{{raw}}}} content not evaluated {{{{/raw}}}}\"\n        className: 'template-tag',\n        begin: /\\{\\{\\{\\{(?!\\/)/,\n        end: /\\}\\}\\}\\}/,\n        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],\n        starts: {\n          end: /\\{\\{\\{\\{\\//,\n          returnEnd: true,\n          subLanguage: 'xml'\n        }\n      },\n      {\n        // close raw block\n        className: 'template-tag',\n        begin: /\\{\\{\\{\\{\\//,\n        end: /\\}\\}\\}\\}/,\n        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        // open block statement\n        className: 'template-tag',\n        begin: /\\{\\{#/,\n        end: /\\}\\}/,\n        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        className: 'template-tag',\n        begin: /\\{\\{(?=else\\}\\})/,\n        end: /\\}\\}/,\n        keywords: 'else'\n      },\n      {\n        className: 'template-tag',\n        begin: /\\{\\{(?=else if)/,\n        end: /\\}\\}/,\n        keywords: 'else if'\n      },\n      {\n        // closing block statement\n        className: 'template-tag',\n        begin: /\\{\\{\\//,\n        end: /\\}\\}/,\n        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        // template variable or helper-call that is NOT html-escaped\n        className: 'template-variable',\n        begin: /\\{\\{\\{/,\n        end: /\\}\\}\\}/,\n        contains: [BASIC_MUSTACHE_CONTENTS]\n      },\n      {\n        // template variable or helper-call that is html-escaped\n        className: 'template-variable',\n        begin: /\\{\\{/,\n        end: /\\}\\}/,\n        contains: [BASIC_MUSTACHE_CONTENTS]\n      }\n    ]\n  };\n}\n\n/*\n Language: HTMLBars (legacy)\n Requires: xml.js\n Description: Matcher for Handlebars as well as EmberJS additions.\n Website: https://github.com/tildeio/htmlbars\n Category: template\n */\n\nfunction htmlbars(hljs) {\n  const definition = handlebars(hljs);\n\n  definition.name = \"HTMLbars\";\n\n  // HACK: This lets handlebars do the auto-detection if it's been loaded (by\n  // default the build script will load in alphabetical order) and if not (perhaps\n  // an install is only using `htmlbars`, not `handlebars`) then this will still\n  // allow HTMLBars to participate in the auto-detection\n\n  // worse case someone will have HTMLbars and handlebars competing for the same\n  // content and will need to change their setup to only require handlebars, but\n  // I don't consider this a breaking change\n  if (hljs.getLanguage(\"handlebars\")) {\n    definition.disableAutodetect = true;\n  }\n\n  return definition;\n}\n\nmodule.exports = htmlbars;\n",
      "start": 1702937444342,
      "end": 1702937444383,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444384,
      "end": 1702937444384,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444384,
      "end": 1702937444384,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444384,
      "end": 1702937444384,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444384,
      "end": 1702937444384,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444384,
      "end": 1702937444384,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444384,
      "end": 1702937444384,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444384,
      "end": 1702937444384,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444384,
      "end": 1702937444384,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444384,
      "end": 1702937444384,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444384,
      "end": 1702937444384,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "/**\n * @param {string} value\n * @returns {RegExp}\n * */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar htmlbars_1;\nvar hasRequiredHtmlbars;\n\nfunction requireHtmlbars () {\n\tif (hasRequiredHtmlbars) return htmlbars_1;\n\thasRequiredHtmlbars = 1;\n\t/**\n\t * @param {RegExp | string } re\n\t * @returns {string}\n\t */\n\tfunction source(re) {\n\t  if (!re) return null;\n\t  if (typeof re === \"string\") return re;\n\n\t  return re.source;\n\t}\n\n\t/**\n\t * @param {RegExp | string } re\n\t * @returns {string}\n\t */\n\tfunction anyNumberOfTimes(re) {\n\t  return concat('(', re, ')*');\n\t}\n\n\t/**\n\t * @param {RegExp | string } re\n\t * @returns {string}\n\t */\n\tfunction optional(re) {\n\t  return concat('(', re, ')?');\n\t}\n\n\t/**\n\t * @param {...(RegExp | string) } args\n\t * @returns {string}\n\t */\n\tfunction concat(...args) {\n\t  const joined = args.map((x) => source(x)).join(\"\");\n\t  return joined;\n\t}\n\n\t/**\n\t * Any of the passed expresssions may match\n\t *\n\t * Creates a huge this | this | that | that match\n\t * @param {(RegExp | string)[] } args\n\t * @returns {string}\n\t */\n\tfunction either(...args) {\n\t  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\n\t  return joined;\n\t}\n\n\t/*\n\tLanguage: Handlebars\n\tRequires: xml.js\n\tAuthor: Robin Ward <robin.ward@gmail.com>\n\tDescription: Matcher for Handlebars as well as EmberJS additions.\n\tWebsite: https://handlebarsjs.com\n\tCategory: template\n\t*/\n\n\tfunction handlebars(hljs) {\n\t  const BUILT_INS = {\n\t    'builtin-name': [\n\t      'action',\n\t      'bindattr',\n\t      'collection',\n\t      'component',\n\t      'concat',\n\t      'debugger',\n\t      'each',\n\t      'each-in',\n\t      'get',\n\t      'hash',\n\t      'if',\n\t      'in',\n\t      'input',\n\t      'link-to',\n\t      'loc',\n\t      'log',\n\t      'lookup',\n\t      'mut',\n\t      'outlet',\n\t      'partial',\n\t      'query-params',\n\t      'render',\n\t      'template',\n\t      'textarea',\n\t      'unbound',\n\t      'unless',\n\t      'view',\n\t      'with',\n\t      'yield'\n\t    ]\n\t  };\n\n\t  const LITERALS = {\n\t    literal: [\n\t      'true',\n\t      'false',\n\t      'undefined',\n\t      'null'\n\t    ]\n\t  };\n\n\t  // as defined in https://handlebarsjs.com/guide/expressions.html#literal-segments\n\t  // this regex matches literal segments like ' abc ' or [ abc ] as well as helpers and paths\n\t  // like a/b, ./abc/cde, and abc.bcd\n\n\t  const DOUBLE_QUOTED_ID_REGEX = /\"\"|\"[^\"]+\"/;\n\t  const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;\n\t  const BRACKET_QUOTED_ID_REGEX = /\\[\\]|\\[[^\\]]+\\]/;\n\t  const PLAIN_ID_REGEX = /[^\\s!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]+/;\n\t  const PATH_DELIMITER_REGEX = /(\\.|\\/)/;\n\t  const ANY_ID = either(\n\t    DOUBLE_QUOTED_ID_REGEX,\n\t    SINGLE_QUOTED_ID_REGEX,\n\t    BRACKET_QUOTED_ID_REGEX,\n\t    PLAIN_ID_REGEX\n\t    );\n\n\t  const IDENTIFIER_REGEX = concat(\n\t    optional(/\\.|\\.\\/|\\//), // relative or absolute path\n\t    ANY_ID,\n\t    anyNumberOfTimes(concat(\n\t      PATH_DELIMITER_REGEX,\n\t      ANY_ID\n\t    ))\n\t  );\n\n\t  // identifier followed by a equal-sign (without the equal sign)\n\t  const HASH_PARAM_REGEX = concat(\n\t    '(',\n\t    BRACKET_QUOTED_ID_REGEX, '|',\n\t    PLAIN_ID_REGEX,\n\t    ')(?==)'\n\t  );\n\n\t  const HELPER_NAME_OR_PATH_EXPRESSION = {\n\t    begin: IDENTIFIER_REGEX,\n\t    lexemes: /[\\w.\\/]+/\n\t  };\n\n\t  const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n\t    keywords: LITERALS\n\t  });\n\n\t  const SUB_EXPRESSION = {\n\t    begin: /\\(/,\n\t    end: /\\)/\n\t    // the \"contains\" is added below when all necessary sub-modes are defined\n\t  };\n\n\t  const HASH = {\n\t    // fka \"attribute-assignment\", parameters of the form 'key=value'\n\t    className: 'attr',\n\t    begin: HASH_PARAM_REGEX,\n\t    relevance: 0,\n\t    starts: {\n\t      begin: /=/,\n\t      end: /=/,\n\t      starts: {\n\t        contains: [\n\t          hljs.NUMBER_MODE,\n\t          hljs.QUOTE_STRING_MODE,\n\t          hljs.APOS_STRING_MODE,\n\t          HELPER_PARAMETER,\n\t          SUB_EXPRESSION\n\t        ]\n\t      }\n\t    }\n\t  };\n\n\t  const BLOCK_PARAMS = {\n\t    // parameters of the form '{{#with x as | y |}}...{{/with}}'\n\t    begin: /as\\s+\\|/,\n\t    keywords: {\n\t      keyword: 'as'\n\t    },\n\t    end: /\\|/,\n\t    contains: [\n\t      {\n\t        // define sub-mode in order to prevent highlighting of block-parameter named \"as\"\n\t        begin: /\\w+/\n\t      }\n\t    ]\n\t  };\n\n\t  const HELPER_PARAMETERS = {\n\t    contains: [\n\t      hljs.NUMBER_MODE,\n\t      hljs.QUOTE_STRING_MODE,\n\t      hljs.APOS_STRING_MODE,\n\t      BLOCK_PARAMS,\n\t      HASH,\n\t      HELPER_PARAMETER,\n\t      SUB_EXPRESSION\n\t    ],\n\t    returnEnd: true\n\t    // the property \"end\" is defined through inheritance when the mode is used. If depends\n\t    // on the surrounding mode, but \"endsWithParent\" does not work here (i.e. it includes the\n\t    // end-token of the surrounding mode)\n\t  };\n\n\t  const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n\t    className: 'name',\n\t    keywords: BUILT_INS,\n\t    starts: hljs.inherit(HELPER_PARAMETERS, {\n\t      end: /\\)/\n\t    })\n\t  });\n\n\t  SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];\n\n\t  const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n\t    keywords: BUILT_INS,\n\t    className: 'name',\n\t    starts: hljs.inherit(HELPER_PARAMETERS, {\n\t      end: /\\}\\}/\n\t    })\n\t  });\n\n\t  const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n\t    keywords: BUILT_INS,\n\t    className: 'name'\n\t  });\n\n\t  const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n\t    className: 'name',\n\t    keywords: BUILT_INS,\n\t    starts: hljs.inherit(HELPER_PARAMETERS, {\n\t      end: /\\}\\}/\n\t    })\n\t  });\n\n\t  const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {\n\t    begin: /\\\\\\{\\{/,\n\t    skip: true\n\t  };\n\t  const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {\n\t    begin: /\\\\\\\\(?=\\{\\{)/,\n\t    skip: true\n\t  };\n\n\t  return {\n\t    name: 'Handlebars',\n\t    aliases: [\n\t      'hbs',\n\t      'html.hbs',\n\t      'html.handlebars',\n\t      'htmlbars'\n\t    ],\n\t    case_insensitive: true,\n\t    subLanguage: 'xml',\n\t    contains: [\n\t      ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,\n\t      PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,\n\t      hljs.COMMENT(/\\{\\{!--/, /--\\}\\}/),\n\t      hljs.COMMENT(/\\{\\{!/, /\\}\\}/),\n\t      {\n\t        // open raw block \"{{{{raw}}}} content not evaluated {{{{/raw}}}}\"\n\t        className: 'template-tag',\n\t        begin: /\\{\\{\\{\\{(?!\\/)/,\n\t        end: /\\}\\}\\}\\}/,\n\t        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],\n\t        starts: {\n\t          end: /\\{\\{\\{\\{\\//,\n\t          returnEnd: true,\n\t          subLanguage: 'xml'\n\t        }\n\t      },\n\t      {\n\t        // close raw block\n\t        className: 'template-tag',\n\t        begin: /\\{\\{\\{\\{\\//,\n\t        end: /\\}\\}\\}\\}/,\n\t        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n\t      },\n\t      {\n\t        // open block statement\n\t        className: 'template-tag',\n\t        begin: /\\{\\{#/,\n\t        end: /\\}\\}/,\n\t        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]\n\t      },\n\t      {\n\t        className: 'template-tag',\n\t        begin: /\\{\\{(?=else\\}\\})/,\n\t        end: /\\}\\}/,\n\t        keywords: 'else'\n\t      },\n\t      {\n\t        className: 'template-tag',\n\t        begin: /\\{\\{(?=else if)/,\n\t        end: /\\}\\}/,\n\t        keywords: 'else if'\n\t      },\n\t      {\n\t        // closing block statement\n\t        className: 'template-tag',\n\t        begin: /\\{\\{\\//,\n\t        end: /\\}\\}/,\n\t        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n\t      },\n\t      {\n\t        // template variable or helper-call that is NOT html-escaped\n\t        className: 'template-variable',\n\t        begin: /\\{\\{\\{/,\n\t        end: /\\}\\}\\}/,\n\t        contains: [BASIC_MUSTACHE_CONTENTS]\n\t      },\n\t      {\n\t        // template variable or helper-call that is html-escaped\n\t        className: 'template-variable',\n\t        begin: /\\{\\{/,\n\t        end: /\\}\\}/,\n\t        contains: [BASIC_MUSTACHE_CONTENTS]\n\t      }\n\t    ]\n\t  };\n\t}\n\n\t/*\n\t Language: HTMLBars (legacy)\n\t Requires: xml.js\n\t Description: Matcher for Handlebars as well as EmberJS additions.\n\t Website: https://github.com/tildeio/htmlbars\n\t Category: template\n\t */\n\n\tfunction htmlbars(hljs) {\n\t  const definition = handlebars(hljs);\n\n\t  definition.name = \"HTMLbars\";\n\n\t  // HACK: This lets handlebars do the auto-detection if it's been loaded (by\n\t  // default the build script will load in alphabetical order) and if not (perhaps\n\t  // an install is only using `htmlbars`, not `handlebars`) then this will still\n\t  // allow HTMLBars to participate in the auto-detection\n\n\t  // worse case someone will have HTMLbars and handlebars competing for the same\n\t  // content and will need to change their setup to only require handlebars, but\n\t  // I don't consider this a breaking change\n\t  if (hljs.getLanguage(\"handlebars\")) {\n\t    definition.disableAutodetect = true;\n\t  }\n\n\t  return definition;\n\t}\n\n\thtmlbars_1 = htmlbars;\n\treturn htmlbars_1;\n}\n\nexport { requireHtmlbars as __require };",
      "start": 1702937444384,
      "end": 1702937444384,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937444384,
      "end": 1702937444384,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444384,
      "end": 1702937444384,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444384,
      "end": 1702937444385,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444385,
      "end": 1702937444385,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444385,
      "end": 1702937444385,
      "order": "normal"
    }
  ]
}
