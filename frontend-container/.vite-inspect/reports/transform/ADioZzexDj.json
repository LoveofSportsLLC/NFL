{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/smarty.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = smarty\nsmarty.displayName = 'smarty'\nsmarty.aliases = []\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.smarty = {\n      comment: {\n        pattern: /^\\{\\*[\\s\\S]*?\\*\\}/,\n        greedy: true\n      },\n      'embedded-php': {\n        pattern: /^\\{php\\}[\\s\\S]*?\\{\\/php\\}/,\n        greedy: true,\n        inside: {\n          smarty: {\n            pattern: /^\\{php\\}|\\{\\/php\\}$/,\n            inside: null // see below\n          },\n          php: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-php',\n            inside: Prism.languages.php\n          }\n        }\n      },\n      string: [\n        {\n          pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n          greedy: true,\n          inside: {\n            interpolation: {\n              pattern: /\\{[^{}]*\\}|`[^`]*`/,\n              inside: {\n                'interpolation-punctuation': {\n                  pattern: /^[{`]|[`}]$/,\n                  alias: 'punctuation'\n                },\n                expression: {\n                  pattern: /[\\s\\S]+/,\n                  inside: null // see below\n                }\n              }\n            },\n            variable: /\\$\\w+/\n          }\n        },\n        {\n          pattern: /'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n          greedy: true\n        }\n      ],\n      keyword: {\n        pattern: /(^\\{\\/?)[a-z_]\\w*\\b(?!\\()/i,\n        lookbehind: true,\n        greedy: true\n      },\n      delimiter: {\n        pattern: /^\\{\\/?|\\}$/,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [\n        /\\$(?!\\d)\\w+/,\n        /#(?!\\d)\\w+#/,\n        {\n          pattern: /(\\.|->|\\w\\s*=)(?!\\d)\\w+\\b(?!\\()/,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n          lookbehind: true\n        }\n      ],\n      function: {\n        pattern: /(\\|\\s*)@?[a-z_]\\w*|\\b[a-z_]\\w*(?=\\()/i,\n        lookbehind: true\n      },\n      'attr-name': /\\b[a-z_]\\w*(?=\\s*=)/i,\n      boolean: /\\b(?:false|no|off|on|true|yes)\\b/,\n      punctuation: /[\\[\\](){}.,:`]|->/,\n      operator: [\n        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n        /\\b(?:and|eq|gt?e|gt|lt?e|lt|mod|neq?|not|or)\\b/\n      ]\n    }\n    Prism.languages.smarty['embedded-php'].inside.smarty.inside =\n      Prism.languages.smarty\n    Prism.languages.smarty.string[0].inside.interpolation.inside.expression.inside =\n      Prism.languages.smarty\n    var string = /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/\n    var smartyPattern = RegExp(\n      // comments\n      /\\{\\*[\\s\\S]*?\\*\\}/.source +\n        '|' + // php tags\n        /\\{php\\}[\\s\\S]*?\\{\\/php\\}/.source +\n        '|' + // smarty blocks\n        /\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>)*\\})*\\})*\\}/.source.replace(\n          /<str>/g,\n          function () {\n            return string.source\n          }\n        ),\n      'g'\n    ) // Tokenize all inline Smarty expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var smartyLiteralStart = '{literal}'\n      var smartyLiteralEnd = '{/literal}'\n      var smartyLiteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'smarty',\n        smartyPattern,\n        function (match) {\n          // Smarty tags inside {literal} block are ignored\n          if (match === smartyLiteralEnd) {\n            smartyLiteralMode = false\n          }\n          if (!smartyLiteralMode) {\n            if (match === smartyLiteralStart) {\n              smartyLiteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\n    })\n  })(Prism)\n}\n",
      "start": 1702937445058,
      "end": 1702937445087,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445087,
      "end": 1702937445087,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445087,
      "end": 1702937445087,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445087,
      "end": 1702937445087,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445087,
      "end": 1702937445087,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445087,
      "end": 1702937445087,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445087,
      "end": 1702937445087,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445087,
      "end": 1702937445087,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445087,
      "end": 1702937445087,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445087,
      "end": 1702937445087,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445087,
      "end": 1702937445087,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/markup-templating.js?commonjs-wrapped\";\n\nvar smarty_1;\nvar hasRequiredSmarty;\n\nfunction requireSmarty () {\n\tif (hasRequiredSmarty) return smarty_1;\n\thasRequiredSmarty = 1;\n\t'use strict'\n\tvar refractorMarkupTemplating = require$$0()\n\tsmarty_1 = smarty\n\tsmarty.displayName = 'smarty'\n\tsmarty.aliases = []\n\tfunction smarty(Prism) {\n\t  Prism.register(refractorMarkupTemplating)\n\t  ;(function (Prism) {\n\t    Prism.languages.smarty = {\n\t      comment: {\n\t        pattern: /^\\{\\*[\\s\\S]*?\\*\\}/,\n\t        greedy: true\n\t      },\n\t      'embedded-php': {\n\t        pattern: /^\\{php\\}[\\s\\S]*?\\{\\/php\\}/,\n\t        greedy: true,\n\t        inside: {\n\t          smarty: {\n\t            pattern: /^\\{php\\}|\\{\\/php\\}$/,\n\t            inside: null // see below\n\t          },\n\t          php: {\n\t            pattern: /[\\s\\S]+/,\n\t            alias: 'language-php',\n\t            inside: Prism.languages.php\n\t          }\n\t        }\n\t      },\n\t      string: [\n\t        {\n\t          pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n\t          greedy: true,\n\t          inside: {\n\t            interpolation: {\n\t              pattern: /\\{[^{}]*\\}|`[^`]*`/,\n\t              inside: {\n\t                'interpolation-punctuation': {\n\t                  pattern: /^[{`]|[`}]$/,\n\t                  alias: 'punctuation'\n\t                },\n\t                expression: {\n\t                  pattern: /[\\s\\S]+/,\n\t                  inside: null // see below\n\t                }\n\t              }\n\t            },\n\t            variable: /\\$\\w+/\n\t          }\n\t        },\n\t        {\n\t          pattern: /'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n\t          greedy: true\n\t        }\n\t      ],\n\t      keyword: {\n\t        pattern: /(^\\{\\/?)[a-z_]\\w*\\b(?!\\()/i,\n\t        lookbehind: true,\n\t        greedy: true\n\t      },\n\t      delimiter: {\n\t        pattern: /^\\{\\/?|\\}$/,\n\t        greedy: true,\n\t        alias: 'punctuation'\n\t      },\n\t      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n\t      variable: [\n\t        /\\$(?!\\d)\\w+/,\n\t        /#(?!\\d)\\w+#/,\n\t        {\n\t          pattern: /(\\.|->|\\w\\s*=)(?!\\d)\\w+\\b(?!\\()/,\n\t          lookbehind: true\n\t        },\n\t        {\n\t          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n\t          lookbehind: true\n\t        }\n\t      ],\n\t      function: {\n\t        pattern: /(\\|\\s*)@?[a-z_]\\w*|\\b[a-z_]\\w*(?=\\()/i,\n\t        lookbehind: true\n\t      },\n\t      'attr-name': /\\b[a-z_]\\w*(?=\\s*=)/i,\n\t      boolean: /\\b(?:false|no|off|on|true|yes)\\b/,\n\t      punctuation: /[\\[\\](){}.,:`]|->/,\n\t      operator: [\n\t        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n\t        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n\t        /\\b(?:and|eq|gt?e|gt|lt?e|lt|mod|neq?|not|or)\\b/\n\t      ]\n\t    }\n\t    Prism.languages.smarty['embedded-php'].inside.smarty.inside =\n\t      Prism.languages.smarty\n\t    Prism.languages.smarty.string[0].inside.interpolation.inside.expression.inside =\n\t      Prism.languages.smarty\n\t    var string = /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/\n\t    var smartyPattern = RegExp(\n\t      // comments\n\t      /\\{\\*[\\s\\S]*?\\*\\}/.source +\n\t        '|' + // php tags\n\t        /\\{php\\}[\\s\\S]*?\\{\\/php\\}/.source +\n\t        '|' + // smarty blocks\n\t        /\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>)*\\})*\\})*\\}/.source.replace(\n\t          /<str>/g,\n\t          function () {\n\t            return string.source\n\t          }\n\t        ),\n\t      'g'\n\t    ) // Tokenize all inline Smarty expressions\n\t    Prism.hooks.add('before-tokenize', function (env) {\n\t      var smartyLiteralStart = '{literal}'\n\t      var smartyLiteralEnd = '{/literal}'\n\t      var smartyLiteralMode = false\n\t      Prism.languages['markup-templating'].buildPlaceholders(\n\t        env,\n\t        'smarty',\n\t        smartyPattern,\n\t        function (match) {\n\t          // Smarty tags inside {literal} block are ignored\n\t          if (match === smartyLiteralEnd) {\n\t            smartyLiteralMode = false\n\t          }\n\t          if (!smartyLiteralMode) {\n\t            if (match === smartyLiteralStart) {\n\t              smartyLiteralMode = true\n\t            }\n\t            return true\n\t          }\n\t          return false\n\t        }\n\t      )\n\t    }) // Re-insert the tokens after tokenizing\n\t    Prism.hooks.add('after-tokenize', function (env) {\n\t      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\n\t    })\n\t  })(Prism)\n\t}\n\treturn smarty_1;\n}\n\nexport { requireSmarty as __require };",
      "start": 1702937445087,
      "end": 1702937445087,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;;CAAA,YAAY;CACZ,IAAI,yBAAyB,GAAG,YAAiC;AACjE,SAAc,GAAG,MAAM;CACvB,MAAM,CAAC,WAAW,GAAG,QAAQ;CAC7B,MAAM,CAAC,OAAO,GAAG,EAAE;CACnB,SAAS,MAAM,CAAC,KAAK,EAAE;CACvB,EAAE,KAAK,CAAC,QAAQ,CAAC,yBAAyB,CAAC;CAC3C,GAAG,CAAC,UAAU,KAAK,EAAE;CACrB,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG;CAC7B,MAAM,OAAO,EAAE;CACf,QAAQ,OAAO,EAAE,mBAAmB;CACpC,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,MAAM,cAAc,EAAE;CACtB,QAAQ,OAAO,EAAE,2BAA2B;CAC5C,QAAQ,MAAM,EAAE,IAAI;CACpB,QAAQ,MAAM,EAAE;CAChB,UAAU,MAAM,EAAE;CAClB,YAAY,OAAO,EAAE,qBAAqB;CAC1C,YAAY,MAAM,EAAE,IAAI;CACxB,WAAW;CACX,UAAU,GAAG,EAAE;CACf,YAAY,OAAO,EAAE,SAAS;CAC9B,YAAY,KAAK,EAAE,cAAc;CACjC,YAAY,MAAM,EAAE,KAAK,CAAC,SAAS,CAAC,GAAG;CACvC,WAAW;CACX,SAAS;CACT,OAAO;CACP,MAAM,MAAM,EAAE;CACd,QAAQ;CACR,UAAU,OAAO,EAAE,uBAAuB;CAC1C,UAAU,MAAM,EAAE,IAAI;CACtB,UAAU,MAAM,EAAE;CAClB,YAAY,aAAa,EAAE;CAC3B,cAAc,OAAO,EAAE,oBAAoB;CAC3C,cAAc,MAAM,EAAE;CACtB,gBAAgB,2BAA2B,EAAE;CAC7C,kBAAkB,OAAO,EAAE,aAAa;CACxC,kBAAkB,KAAK,EAAE,aAAa;CACtC,iBAAiB;CACjB,gBAAgB,UAAU,EAAE;CAC5B,kBAAkB,OAAO,EAAE,SAAS;CACpC,kBAAkB,MAAM,EAAE,IAAI;CAC9B,iBAAiB;CACjB,eAAe;CACf,aAAa;CACb,YAAY,QAAQ,EAAE,OAAO;CAC7B,WAAW;CACX,SAAS;CACT,QAAQ;CACR,UAAU,OAAO,EAAE,uBAAuB;CAC1C,UAAU,MAAM,EAAE,IAAI;CACtB,SAAS;CACT,OAAO;CACP,MAAM,OAAO,EAAE;CACf,QAAQ,OAAO,EAAE,4BAA4B;CAC7C,QAAQ,UAAU,EAAE,IAAI;CACxB,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,MAAM,SAAS,EAAE;CACjB,QAAQ,OAAO,EAAE,YAAY;CAC7B,QAAQ,MAAM,EAAE,IAAI;CACpB,QAAQ,KAAK,EAAE,aAAa;CAC5B,OAAO;CACP,MAAM,MAAM,EAAE,8DAA8D;CAC5E,MAAM,QAAQ,EAAE;CAChB,QAAQ,aAAa;CACrB,QAAQ,aAAa;CACrB,QAAQ;CACR,UAAU,OAAO,EAAE,iCAAiC;CACpD,UAAU,UAAU,EAAE,IAAI;CAC1B,SAAS;CACT,QAAQ;CACR,UAAU,OAAO,EAAE,qBAAqB;CACxC,UAAU,UAAU,EAAE,IAAI;CAC1B,SAAS;CACT,OAAO;CACP,MAAM,QAAQ,EAAE;CAChB,QAAQ,OAAO,EAAE,uCAAuC;CACxD,QAAQ,UAAU,EAAE,IAAI;CACxB,OAAO;CACP,MAAM,WAAW,EAAE,sBAAsB;CACzC,MAAM,OAAO,EAAE,kCAAkC;CACjD,MAAM,WAAW,EAAE,mBAAmB;CACtC,MAAM,QAAQ,EAAE;CAChB,QAAQ,kCAAkC;CAC1C,QAAQ,gDAAgD;CACxD,QAAQ,gDAAgD;CACxD,OAAO;CACP,KAAK;CACL,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM;CAC/D,MAAM,KAAK,CAAC,SAAS,CAAC,MAAM;CAC5B,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM;CAClF,MAAM,KAAK,CAAC,SAAS,CAAC,MAAM;CAC5B,IAAI,IAAI,MAAM,GAAG,6CAA6C;CAC9D,IAAI,IAAI,aAAa,GAAG,MAAM;CAC9B;CACA,MAAM,kBAAkB,CAAC,MAAM;CAC/B,QAAQ,GAAG;CACX,QAAQ,0BAA0B,CAAC,MAAM;CACzC,QAAQ,GAAG;CACX,QAAQ,sEAAsE,CAAC,MAAM,CAAC,OAAO;CAC7F,UAAU,QAAQ;CAClB,UAAU,YAAY;CACtB,YAAY,OAAO,MAAM,CAAC,MAAM;CAChC,WAAW;CACX,SAAS;CACT,MAAM,GAAG;CACT,KAAK;CACL,IAAI,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,EAAE,UAAU,GAAG,EAAE;CACtD,MAAM,IAAI,kBAAkB,GAAG,WAAW;CAC1C,MAAM,IAAI,gBAAgB,GAAG,YAAY;CACzC,MAAM,IAAI,iBAAiB,GAAG,KAAK;CACnC,MAAM,KAAK,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,iBAAiB;CAC5D,QAAQ,GAAG;CACX,QAAQ,QAAQ;CAChB,QAAQ,aAAa;CACrB,QAAQ,UAAU,KAAK,EAAE;CACzB;CACA,UAAU,IAAI,KAAK,KAAK,gBAAgB,EAAE;CAC1C,YAAY,iBAAiB,GAAG,KAAK;CACrC,WAAW;CACX,UAAU,IAAI,CAAC,iBAAiB,EAAE;CAClC,YAAY,IAAI,KAAK,KAAK,kBAAkB,EAAE;CAC9C,cAAc,iBAAiB,GAAG,IAAI;CACtC,aAAa;CACb,YAAY,OAAO,IAAI;CACvB,WAAW;CACX,UAAU,OAAO,KAAK;CACtB,SAAS;CACT,OAAO;CACP,KAAK,CAAC;CACN,IAAI,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,gBAAgB,EAAE,UAAU,GAAG,EAAE;CACrD,MAAM,KAAK,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,oBAAoB,CAAC,GAAG,EAAE,QAAQ,CAAC;CAC9E,KAAK,CAAC;CACN,GAAG,EAAE,KAAK,CAAC;CACX"
      }
    },
    {
      "name": "inject",
      "start": 1702937445087,
      "end": 1702937445088,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445088,
      "end": 1702937445088,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445088,
      "end": 1702937445088,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445088,
      "end": 1702937445088,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445088,
      "end": 1702937445088,
      "order": "normal"
    }
  ]
}
