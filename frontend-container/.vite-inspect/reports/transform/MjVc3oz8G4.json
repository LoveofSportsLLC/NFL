{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/react-bootstrap/esm/ToggleButtonGroup.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import * as React from 'react';\nimport invariant from 'invariant';\nimport { useUncontrolled } from 'uncontrollable';\nimport chainFunction from './createChainedFunction';\nimport { map } from './ElementChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ToggleButtonGroup = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    children,\n    type = 'radio',\n    name,\n    value,\n    onChange,\n    vertical = false,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    value: 'onChange'\n  });\n  const getValues = () => value == null ? [] : [].concat(value);\n  const handleToggle = (inputVal, event) => {\n    if (!onChange) {\n      return;\n    }\n    const values = getValues();\n    const isActive = values.indexOf(inputVal) !== -1;\n    if (type === 'radio') {\n      if (!isActive) onChange(inputVal, event);\n      return;\n    }\n    if (isActive) {\n      onChange(values.filter(n => n !== inputVal), event);\n    } else {\n      onChange([...values, inputVal], event);\n    }\n  };\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n  return /*#__PURE__*/_jsx(ButtonGroup, {\n    ...controlledProps,\n    ref: ref,\n    vertical: vertical,\n    children: map(children, child => {\n      const values = getValues();\n      const {\n        value: childVal,\n        onChange: childOnChange\n      } = child.props;\n      const handler = e => handleToggle(childVal, e);\n      return /*#__PURE__*/React.cloneElement(child, {\n        type,\n        name: child.name || name,\n        checked: values.indexOf(childVal) !== -1,\n        onChange: chainFunction(childOnChange, handler)\n      });\n    })\n  });\n});\nexport default Object.assign(ToggleButtonGroup, {\n  Button: ToggleButton\n});",
      "start": 1702937441537,
      "end": 1702937441553,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937441553,
      "end": 1702937441553,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937441553,
      "end": 1702937441553,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937441553,
      "end": 1702937441553,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937441553,
      "end": 1702937441553,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937441553,
      "end": 1702937441553,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import * as React from \"react\";\nimport invariant from \"invariant\";\nimport { useUncontrolled } from \"uncontrollable\";\nimport chainFunction from \"./createChainedFunction\";\nimport { map } from \"./ElementChildren\";\nimport ButtonGroup from \"./ButtonGroup\";\nimport ToggleButton from \"./ToggleButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ToggleButtonGroup = /* @__PURE__ */ React.forwardRef((props, ref) => {\n  const {\n    children,\n    type = \"radio\",\n    name,\n    value,\n    onChange,\n    vertical = false,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    value: \"onChange\"\n  });\n  const getValues = () => value == null ? [] : [].concat(value);\n  const handleToggle = (inputVal, event) => {\n    if (!onChange) {\n      return;\n    }\n    const values = getValues();\n    const isActive = values.indexOf(inputVal) !== -1;\n    if (type === \"radio\") {\n      if (!isActive)\n        onChange(inputVal, event);\n      return;\n    }\n    if (isActive) {\n      onChange(values.filter((n) => n !== inputVal), event);\n    } else {\n      onChange([...values, inputVal], event);\n    }\n  };\n  !(type !== \"radio\" || !!name) ? false ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` is set to \"radio\"') : invariant(false) : void 0;\n  return /* @__PURE__ */ _jsx(ButtonGroup, {\n    ...controlledProps,\n    ref,\n    vertical,\n    children: map(children, (child) => {\n      const values = getValues();\n      const {\n        value: childVal,\n        onChange: childOnChange\n      } = child.props;\n      const handler = (e) => handleToggle(childVal, e);\n      return /* @__PURE__ */ React.cloneElement(child, {\n        type,\n        name: child.name || name,\n        checked: values.indexOf(childVal) !== -1,\n        onChange: chainFunction(childOnChange, handler)\n      });\n    })\n  });\n});\nexport default Object.assign(ToggleButtonGroup, {\n  Button: ToggleButton\n});\n",
      "start": 1702937441553,
      "end": 1702937441560,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1702937441560,
      "end": 1702937441560,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937441560,
      "end": 1702937441560,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937441560,
      "end": 1702937441560,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937441560,
      "end": 1702937441560,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937441560,
      "end": 1702937441561,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937441561,
      "end": 1702937441561,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937441561,
      "end": 1702937441561,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937441561,
      "end": 1702937441561,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937441561,
      "end": 1702937441561,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937441561,
      "end": 1702937441561,
      "order": "normal"
    }
  ]
}
