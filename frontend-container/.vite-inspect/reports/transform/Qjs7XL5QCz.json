{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/@fullcalendar/react/dist/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { Component, createRef, PureComponent } from 'react';\nimport { createPortal, flushSync } from 'react-dom';\nimport { Calendar, } from '@fullcalendar/core';\nimport { CustomRenderingStore, } from '@fullcalendar/core/internal';\nconst reactMajorVersion = parseInt(String(React.version).split('.')[0]);\nconst syncRenderingByDefault = reactMajorVersion < 18;\nexport default class FullCalendar extends Component {\n    constructor() {\n        super(...arguments);\n        this.elRef = createRef();\n        this.isUpdating = false;\n        this.isUnmounting = false;\n        this.state = {\n            customRenderingMap: new Map()\n        };\n        this.requestResize = () => {\n            if (!this.isUnmounting) {\n                this.cancelResize();\n                this.resizeId = requestAnimationFrame(() => {\n                    this.doResize();\n                });\n            }\n        };\n    }\n    render() {\n        const customRenderingNodes = [];\n        for (const customRendering of this.state.customRenderingMap.values()) {\n            customRenderingNodes.push(React.createElement(CustomRenderingComponent, { key: customRendering.id, customRendering: customRendering }));\n        }\n        return (React.createElement(\"div\", { ref: this.elRef }, customRenderingNodes));\n    }\n    componentDidMount() {\n        const customRenderingStore = new CustomRenderingStore();\n        this.handleCustomRendering = customRenderingStore.handle.bind(customRenderingStore);\n        this.calendar = new Calendar(this.elRef.current, Object.assign(Object.assign({}, this.props), { handleCustomRendering: this.handleCustomRendering }));\n        this.calendar.render();\n        let lastRequestTimestamp;\n        customRenderingStore.subscribe((customRenderingMap) => {\n            const requestTimestamp = Date.now();\n            const isMounting = !lastRequestTimestamp;\n            const runFunc = (\n            // don't call flushSync if React version already does sync rendering by default\n            // guards against fatal errors:\n            // https://github.com/fullcalendar/fullcalendar/issues/7448\n            syncRenderingByDefault ||\n                //\n                isMounting ||\n                this.isUpdating ||\n                this.isUnmounting ||\n                (requestTimestamp - lastRequestTimestamp) < 100 // rerendering frequently\n            ) ? runNow // either sync rendering (first-time or React 16/17) or async (React 18)\n                : flushSync; // guaranteed sync rendering\n            runFunc(() => {\n                this.setState({ customRenderingMap }, () => {\n                    lastRequestTimestamp = requestTimestamp;\n                    if (isMounting) {\n                        this.doResize();\n                    }\n                    else {\n                        this.requestResize();\n                    }\n                });\n            });\n        });\n    }\n    componentDidUpdate() {\n        this.isUpdating = true;\n        this.calendar.resetOptions(Object.assign(Object.assign({}, this.props), { handleCustomRendering: this.handleCustomRendering }));\n        this.isUpdating = false;\n    }\n    componentWillUnmount() {\n        this.isUnmounting = true;\n        this.cancelResize();\n        this.calendar.destroy();\n    }\n    doResize() {\n        this.calendar.updateSize();\n    }\n    cancelResize() {\n        if (this.resizeId !== undefined) {\n            cancelAnimationFrame(this.resizeId);\n            this.resizeId = undefined;\n        }\n    }\n    getApi() {\n        return this.calendar;\n    }\n}\nFullCalendar.act = runNow; // DEPRECATED. Not leveraged anymore\nclass CustomRenderingComponent extends PureComponent {\n    render() {\n        const { customRendering } = this.props;\n        const { generatorMeta } = customRendering;\n        const vnode = typeof generatorMeta === 'function' ?\n            generatorMeta(customRendering.renderProps) :\n            generatorMeta;\n        return createPortal(vnode, customRendering.containerEl);\n    }\n}\n// Util\n// -------------------------------------------------------------------------------------------------\nfunction runNow(f) {\n    f();\n}\n//# sourceMappingURL=index.js.map",
      "start": 1702937441850,
      "end": 1702937441882,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937441882,
      "end": 1702937441882,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937441882,
      "end": 1702937441882,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937441882,
      "end": 1702937441882,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937441882,
      "end": 1702937441882,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937441882,
      "end": 1702937441882,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937441882,
      "end": 1702937441882,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937441882,
      "end": 1702937441882,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937441882,
      "end": 1702937441882,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937441882,
      "end": 1702937441882,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937441882,
      "end": 1702937441882,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937441882,
      "end": 1702937441882,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937441882,
      "end": 1702937441882,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937441882,
      "end": 1702937441882,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937441882,
      "end": 1702937441882,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937441882,
      "end": 1702937441882,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937441882,
      "end": 1702937441882,
      "order": "normal"
    }
  ]
}
