{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\n */\nexport function NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".`\n                  : `Variable \"$${varName}\" is not defined.`,\n                {\n                  nodes: [node, operation],\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    },\n  };\n}\n",
      "start": 1702937443072,
      "end": 1702937443092,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937443092,
      "end": 1702937443092,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937443092,
      "end": 1702937443092,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937443092,
      "end": 1702937443092,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937443092,
      "end": 1702937443092,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937443092,
      "end": 1702937443092,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937443092,
      "end": 1702937443092,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937443092,
      "end": 1702937443092,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937443092,
      "end": 1702937443092,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937443092,
      "end": 1702937443092,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937443092,
      "end": 1702937443092,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937443092,
      "end": 1702937443092,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937443092,
      "end": 1702937443092,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937443092,
      "end": 1702937443092,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937443092,
      "end": 1702937443092,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937443092,
      "end": 1702937443092,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937443092,
      "end": 1702937443092,
      "order": "normal"
    }
  ]
}
