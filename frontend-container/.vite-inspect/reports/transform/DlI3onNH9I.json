{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/pure.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = pure\npure.displayName = 'pure'\npure.aliases = []\nfunction pure(Prism) {\n  ;(function (Prism) {\n    // https://agraef.github.io/pure-docs/pure.html#lexical-matters\n    Prism.languages.pure = {\n      comment: [\n        {\n          pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n          lookbehind: true\n        },\n        {\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\n          lookbehind: true\n        },\n        /#!.+/\n      ],\n      'inline-lang': {\n        pattern: /%<[\\s\\S]+?%>/,\n        greedy: true,\n        inside: {\n          lang: {\n            pattern: /(^%< *)-\\*-.+?-\\*-/,\n            lookbehind: true,\n            alias: 'comment'\n          },\n          delimiter: {\n            pattern: /^%<.*|%>$/,\n            alias: 'punctuation'\n          }\n        }\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        greedy: true\n      },\n      number: {\n        // The look-behind prevents wrong highlighting of the .. operator\n        pattern:\n          /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,\n        lookbehind: true\n      },\n      keyword:\n        /\\b(?:NULL|ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n      function:\n        /\\b(?:abs|add_(?:addr|constdef|(?:fundef|interface|macdef|typedef)(?:_at)?|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_c?string(?:_pointer)?|byte_(?:matrix|pointer)|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|sentry|short|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n      special: {\n        pattern: /\\b__[a-z]+__\\b/i,\n        alias: 'builtin'\n      },\n      // Any combination of operator chars can be an operator\n      // eslint-disable-next-line no-misleading-character-class\n      operator:\n        /(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,\n      // FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\n      punctuation: /[(){}\\[\\];,|]/\n    }\n    var inlineLanguages = [\n      'c',\n      {\n        lang: 'c++',\n        alias: 'cpp'\n      },\n      'fortran'\n    ]\n    var inlineLanguageRe = /%< *-\\*- *<lang>\\d* *-\\*-[\\s\\S]+?%>/.source\n    inlineLanguages.forEach(function (lang) {\n      var alias = lang\n      if (typeof lang !== 'string') {\n        alias = lang.alias\n        lang = lang.lang\n      }\n      if (Prism.languages[alias]) {\n        var o = {}\n        o['inline-lang-' + alias] = {\n          pattern: RegExp(\n            inlineLanguageRe.replace(\n              '<lang>',\n              lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, '\\\\$1')\n            ),\n            'i'\n          ),\n          inside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)\n        }\n        o['inline-lang-' + alias].inside.rest = Prism.util.clone(\n          Prism.languages[alias]\n        )\n        Prism.languages.insertBefore('pure', 'inline-lang', o)\n      }\n    }) // C is the default inline language\n    if (Prism.languages.c) {\n      Prism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(\n        Prism.languages.c\n      )\n    }\n  })(Prism)\n}\n",
      "start": 1702937445022,
      "end": 1702937445044,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445044,
      "end": 1702937445044,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445044,
      "end": 1702937445044,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445044,
      "end": 1702937445044,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445044,
      "end": 1702937445044,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445044,
      "end": 1702937445044,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445045,
      "end": 1702937445045,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445045,
      "end": 1702937445045,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445045,
      "end": 1702937445045,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445045,
      "end": 1702937445045,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445045,
      "end": 1702937445045,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar pure_1;\nvar hasRequiredPure;\n\nfunction requirePure () {\n\tif (hasRequiredPure) return pure_1;\n\thasRequiredPure = 1;\n\t'use strict'\n\n\tpure_1 = pure\n\tpure.displayName = 'pure'\n\tpure.aliases = []\n\tfunction pure(Prism) {\n\t  ;(function (Prism) {\n\t    // https://agraef.github.io/pure-docs/pure.html#lexical-matters\n\t    Prism.languages.pure = {\n\t      comment: [\n\t        {\n\t          pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n\t          lookbehind: true\n\t        },\n\t        {\n\t          pattern: /(^|[^\\\\:])\\/\\/.*/,\n\t          lookbehind: true\n\t        },\n\t        /#!.+/\n\t      ],\n\t      'inline-lang': {\n\t        pattern: /%<[\\s\\S]+?%>/,\n\t        greedy: true,\n\t        inside: {\n\t          lang: {\n\t            pattern: /(^%< *)-\\*-.+?-\\*-/,\n\t            lookbehind: true,\n\t            alias: 'comment'\n\t          },\n\t          delimiter: {\n\t            pattern: /^%<.*|%>$/,\n\t            alias: 'punctuation'\n\t          }\n\t        }\n\t      },\n\t      string: {\n\t        pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n\t        greedy: true\n\t      },\n\t      number: {\n\t        // The look-behind prevents wrong highlighting of the .. operator\n\t        pattern:\n\t          /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,\n\t        lookbehind: true\n\t      },\n\t      keyword:\n\t        /\\b(?:NULL|ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n\t      function:\n\t        /\\b(?:abs|add_(?:addr|constdef|(?:fundef|interface|macdef|typedef)(?:_at)?|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_c?string(?:_pointer)?|byte_(?:matrix|pointer)|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|sentry|short|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n\t      special: {\n\t        pattern: /\\b__[a-z]+__\\b/i,\n\t        alias: 'builtin'\n\t      },\n\t      // Any combination of operator chars can be an operator\n\t      // eslint-disable-next-line no-misleading-character-class\n\t      operator:\n\t        /(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,\n\t      // FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\n\t      punctuation: /[(){}\\[\\];,|]/\n\t    }\n\t    var inlineLanguages = [\n\t      'c',\n\t      {\n\t        lang: 'c++',\n\t        alias: 'cpp'\n\t      },\n\t      'fortran'\n\t    ]\n\t    var inlineLanguageRe = /%< *-\\*- *<lang>\\d* *-\\*-[\\s\\S]+?%>/.source\n\t    inlineLanguages.forEach(function (lang) {\n\t      var alias = lang\n\t      if (typeof lang !== 'string') {\n\t        alias = lang.alias\n\t        lang = lang.lang\n\t      }\n\t      if (Prism.languages[alias]) {\n\t        var o = {}\n\t        o['inline-lang-' + alias] = {\n\t          pattern: RegExp(\n\t            inlineLanguageRe.replace(\n\t              '<lang>',\n\t              lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, '\\\\$1')\n\t            ),\n\t            'i'\n\t          ),\n\t          inside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)\n\t        }\n\t        o['inline-lang-' + alias].inside.rest = Prism.util.clone(\n\t          Prism.languages[alias]\n\t        )\n\t        Prism.languages.insertBefore('pure', 'inline-lang', o)\n\t      }\n\t    }) // C is the default inline language\n\t    if (Prism.languages.c) {\n\t      Prism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(\n\t        Prism.languages.c\n\t      )\n\t    }\n\t  })(Prism)\n\t}\n\treturn pure_1;\n}\n\nexport { requirePure as __require };",
      "start": 1702937445045,
      "end": 1702937445045,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;CAAA,YAAY;AACZ;AACA,OAAc,GAAG,IAAI;CACrB,IAAI,CAAC,WAAW,GAAG,MAAM;CACzB,IAAI,CAAC,OAAO,GAAG,EAAE;CACjB,SAAS,IAAI,CAAC,KAAK,EAAE;CACrB,EAAE,CAAC,CAAC,UAAU,KAAK,EAAE;CACrB;CACA,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG;CAC3B,MAAM,OAAO,EAAE;CACf,QAAQ;CACR,UAAU,OAAO,EAAE,2BAA2B;CAC9C,UAAU,UAAU,EAAE,IAAI;CAC1B,SAAS;CACT,QAAQ;CACR,UAAU,OAAO,EAAE,kBAAkB;CACrC,UAAU,UAAU,EAAE,IAAI;CAC1B,SAAS;CACT,QAAQ,MAAM;CACd,OAAO;CACP,MAAM,aAAa,EAAE;CACrB,QAAQ,OAAO,EAAE,cAAc;CAC/B,QAAQ,MAAM,EAAE,IAAI;CACpB,QAAQ,MAAM,EAAE;CAChB,UAAU,IAAI,EAAE;CAChB,YAAY,OAAO,EAAE,oBAAoB;CACzC,YAAY,UAAU,EAAE,IAAI;CAC5B,YAAY,KAAK,EAAE,SAAS;CAC5B,WAAW;CACX,UAAU,SAAS,EAAE;CACrB,YAAY,OAAO,EAAE,WAAW;CAChC,YAAY,KAAK,EAAE,aAAa;CAChC,WAAW;CACX,SAAS;CACT,OAAO;CACP,MAAM,MAAM,EAAE;CACd,QAAQ,OAAO,EAAE,uBAAuB;CACxC,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,MAAM,MAAM,EAAE;CACd;CACA,QAAQ,OAAO;CACf,UAAU,iGAAiG;CAC3G,QAAQ,UAAU,EAAE,IAAI;CACxB,OAAO;CACP,MAAM,OAAO;CACb,QAAQ,ySAAyS;CACjT,MAAM,QAAQ;CACd,QAAQ,y0DAAy0D;CACj1D,MAAM,OAAO,EAAE;CACf,QAAQ,OAAO,EAAE,iBAAiB;CAClC,QAAQ,KAAK,EAAE,SAAS;CACxB,OAAO;CACP;CACA;CACA,MAAM,QAAQ;CACd,QAAQ,6GAA6G;CACrH;CACA,MAAM,WAAW,EAAE,eAAe;CAClC,KAAK;CACL,IAAI,IAAI,eAAe,GAAG;CAC1B,MAAM,GAAG;CACT,MAAM;CACN,QAAQ,IAAI,EAAE,KAAK;CACnB,QAAQ,KAAK,EAAE,KAAK;CACpB,OAAO;CACP,MAAM,SAAS;CACf,KAAK;CACL,IAAI,IAAI,gBAAgB,GAAG,qCAAqC,CAAC,MAAM;CACvE,IAAI,eAAe,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;CAC5C,MAAM,IAAI,KAAK,GAAG,IAAI;CACtB,MAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;CACpC,QAAQ,KAAK,GAAG,IAAI,CAAC,KAAK;CAC1B,QAAQ,IAAI,GAAG,IAAI,CAAC,IAAI;CACxB,OAAO;CACP,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;CAClC,QAAQ,IAAI,CAAC,GAAG,EAAE;CAClB,QAAQ,CAAC,CAAC,cAAc,GAAG,KAAK,CAAC,GAAG;CACpC,UAAU,OAAO,EAAE,MAAM;CACzB,YAAY,gBAAgB,CAAC,OAAO;CACpC,cAAc,QAAQ;CACtB,cAAc,IAAI,CAAC,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC;CAC3D,aAAa;CACb,YAAY,GAAG;CACf,WAAW;CACX,UAAU,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC;CAC9E,SAAS;CACT,QAAQ,CAAC,CAAC,cAAc,GAAG,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK;CAChE,UAAU,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC;CAChC,SAAS;CACT,QAAQ,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;CAC9D,OAAO;CACP,KAAK,CAAC;CACN,IAAI,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE;CAC3B,MAAM,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK;CACxE,QAAQ,KAAK,CAAC,SAAS,CAAC,CAAC;CACzB,OAAO;CACP,KAAK;CACL,GAAG,EAAE,KAAK,CAAC;CACX"
      }
    },
    {
      "name": "inject",
      "start": 1702937445045,
      "end": 1702937445045,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445045,
      "end": 1702937445045,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445045,
      "end": 1702937445045,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445045,
      "end": 1702937445045,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445045,
      "end": 1702937445045,
      "order": "normal"
    }
  ]
}
