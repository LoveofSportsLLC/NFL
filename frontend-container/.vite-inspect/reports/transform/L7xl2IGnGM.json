{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/batch.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = batch\nbatch.displayName = 'batch'\nbatch.aliases = []\nfunction batch(Prism) {\n  ;(function (Prism) {\n    var variable = /%%?[~:\\w]+%?|!\\S+!/\n    var parameter = {\n      pattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,\n      alias: 'attr-name',\n      inside: {\n        punctuation: /:/\n      }\n    }\n    var string = /\"(?:[\\\\\"]\"|[^\"])*\"(?!\")/\n    var number = /(?:\\b|-)\\d+\\b/\n    Prism.languages.batch = {\n      comment: [\n        /^::.*/m,\n        {\n          pattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true\n        }\n      ],\n      label: {\n        pattern: /^:.*/m,\n        alias: 'property'\n      },\n      command: [\n        {\n          // FOR command\n          pattern:\n            /((?:^|[&(])[ \\t]*)for(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* \\S+ in \\([^)]+\\) do/im,\n          lookbehind: true,\n          inside: {\n            keyword: /\\b(?:do|in)\\b|^for\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: variable,\n            number: number,\n            punctuation: /[()',]/\n          }\n        },\n        {\n          // IF command\n          pattern:\n            /((?:^|[&(])[ \\t]*)if(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|(?!\")(?:(?!==)\\S)+)?(?:==| (?:equ|geq|gtr|leq|lss|neq) )(?:\"[^\"]*\"|[^\\s\"]\\S*))/im,\n          lookbehind: true,\n          inside: {\n            keyword:\n              /\\b(?:cmdextversion|defined|errorlevel|exist|not)\\b|^if\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: variable,\n            number: number,\n            operator: /\\^|==|\\b(?:equ|geq|gtr|leq|lss|neq)\\b/i\n          }\n        },\n        {\n          // ELSE command\n          pattern: /((?:^|[&()])[ \\t]*)else\\b/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^else\\b/i\n          }\n        },\n        {\n          // SET command\n          pattern:\n            /((?:^|[&(])[ \\t]*)set(?: \\/[a-z](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^set\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: [variable, /\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],\n            number: number,\n            operator: /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,\n            punctuation: /[()',]/\n          }\n        },\n        {\n          // Other commands\n          pattern:\n            /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:\"(?:[\\\\\"]\"|[^\"])*\"(?!\")|[^\"^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/m,\n          lookbehind: true,\n          inside: {\n            keyword: /^\\w+\\b/,\n            string: string,\n            parameter: parameter,\n            label: {\n              pattern: /(^\\s*):\\S+/m,\n              lookbehind: true,\n              alias: 'property'\n            },\n            variable: variable,\n            number: number,\n            operator: /\\^/\n          }\n        }\n      ],\n      operator: /[&@]/,\n      punctuation: /[()']/\n    }\n  })(Prism)\n}\n",
      "start": 1702937444822,
      "end": 1702937444848,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444848,
      "end": 1702937444848,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444848,
      "end": 1702937444848,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444848,
      "end": 1702937444848,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444848,
      "end": 1702937444848,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444848,
      "end": 1702937444848,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444848,
      "end": 1702937444848,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444848,
      "end": 1702937444848,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444848,
      "end": 1702937444848,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444848,
      "end": 1702937444848,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444848,
      "end": 1702937444849,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar batch_1;\nvar hasRequiredBatch;\n\nfunction requireBatch () {\n\tif (hasRequiredBatch) return batch_1;\n\thasRequiredBatch = 1;\n\t'use strict'\n\n\tbatch_1 = batch\n\tbatch.displayName = 'batch'\n\tbatch.aliases = []\n\tfunction batch(Prism) {\n\t  ;(function (Prism) {\n\t    var variable = /%%?[~:\\w]+%?|!\\S+!/\n\t    var parameter = {\n\t      pattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,\n\t      alias: 'attr-name',\n\t      inside: {\n\t        punctuation: /:/\n\t      }\n\t    }\n\t    var string = /\"(?:[\\\\\"]\"|[^\"])*\"(?!\")/\n\t    var number = /(?:\\b|-)\\d+\\b/\n\t    Prism.languages.batch = {\n\t      comment: [\n\t        /^::.*/m,\n\t        {\n\t          pattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n\t          lookbehind: true\n\t        }\n\t      ],\n\t      label: {\n\t        pattern: /^:.*/m,\n\t        alias: 'property'\n\t      },\n\t      command: [\n\t        {\n\t          // FOR command\n\t          pattern:\n\t            /((?:^|[&(])[ \\t]*)for(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* \\S+ in \\([^)]+\\) do/im,\n\t          lookbehind: true,\n\t          inside: {\n\t            keyword: /\\b(?:do|in)\\b|^for\\b/i,\n\t            string: string,\n\t            parameter: parameter,\n\t            variable: variable,\n\t            number: number,\n\t            punctuation: /[()',]/\n\t          }\n\t        },\n\t        {\n\t          // IF command\n\t          pattern:\n\t            /((?:^|[&(])[ \\t]*)if(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|(?!\")(?:(?!==)\\S)+)?(?:==| (?:equ|geq|gtr|leq|lss|neq) )(?:\"[^\"]*\"|[^\\s\"]\\S*))/im,\n\t          lookbehind: true,\n\t          inside: {\n\t            keyword:\n\t              /\\b(?:cmdextversion|defined|errorlevel|exist|not)\\b|^if\\b/i,\n\t            string: string,\n\t            parameter: parameter,\n\t            variable: variable,\n\t            number: number,\n\t            operator: /\\^|==|\\b(?:equ|geq|gtr|leq|lss|neq)\\b/i\n\t          }\n\t        },\n\t        {\n\t          // ELSE command\n\t          pattern: /((?:^|[&()])[ \\t]*)else\\b/im,\n\t          lookbehind: true,\n\t          inside: {\n\t            keyword: /^else\\b/i\n\t          }\n\t        },\n\t        {\n\t          // SET command\n\t          pattern:\n\t            /((?:^|[&(])[ \\t]*)set(?: \\/[a-z](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n\t          lookbehind: true,\n\t          inside: {\n\t            keyword: /^set\\b/i,\n\t            string: string,\n\t            parameter: parameter,\n\t            variable: [variable, /\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],\n\t            number: number,\n\t            operator: /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,\n\t            punctuation: /[()',]/\n\t          }\n\t        },\n\t        {\n\t          // Other commands\n\t          pattern:\n\t            /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:\"(?:[\\\\\"]\"|[^\"])*\"(?!\")|[^\"^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/m,\n\t          lookbehind: true,\n\t          inside: {\n\t            keyword: /^\\w+\\b/,\n\t            string: string,\n\t            parameter: parameter,\n\t            label: {\n\t              pattern: /(^\\s*):\\S+/m,\n\t              lookbehind: true,\n\t              alias: 'property'\n\t            },\n\t            variable: variable,\n\t            number: number,\n\t            operator: /\\^/\n\t          }\n\t        }\n\t      ],\n\t      operator: /[&@]/,\n\t      punctuation: /[()']/\n\t    }\n\t  })(Prism)\n\t}\n\treturn batch_1;\n}\n\nexport { requireBatch as __require };",
      "start": 1702937444849,
      "end": 1702937444849,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937444849,
      "end": 1702937444849,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444849,
      "end": 1702937444849,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444849,
      "end": 1702937444849,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444849,
      "end": 1702937444849,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444849,
      "end": 1702937444849,
      "order": "normal"
    }
  ]
}
