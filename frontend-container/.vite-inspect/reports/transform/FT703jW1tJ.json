{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/@restart/hooks/esm/useBreakpoint.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import useMediaQuery from './useMediaQuery';\nimport { useMemo } from 'react';\n/**\n * Create a responsive hook we a set of breakpoint names and widths.\n * You can use any valid css units as well as a numbers (for pixels).\n *\n * **NOTE:** The object key order is important! it's assumed to be in order from smallest to largest\n *\n * ```ts\n * const useBreakpoint = createBreakpointHook({\n *  xs: 0,\n *  sm: 576,\n *  md: 768,\n *  lg: 992,\n *  xl: 1200,\n * })\n * ```\n *\n * **Watch out!** using string values will sometimes construct media queries using css `calc()` which\n * is NOT supported in media queries by all browsers at the moment. use numbers for\n * the widest range of browser support.\n *\n * @param breakpointValues A object hash of names to breakpoint dimensions\n */\nexport function createBreakpointHook(breakpointValues) {\n  const names = Object.keys(breakpointValues);\n  function and(query, next) {\n    if (query === next) {\n      return next;\n    }\n    return query ? `${query} and ${next}` : next;\n  }\n  function getNext(breakpoint) {\n    return names[Math.min(names.indexOf(breakpoint) + 1, names.length - 1)];\n  }\n  function getMaxQuery(breakpoint) {\n    const next = getNext(breakpoint);\n    let value = breakpointValues[next];\n    if (typeof value === 'number') value = `${value - 0.2}px`;else value = `calc(${value} - 0.2px)`;\n    return `(max-width: ${value})`;\n  }\n  function getMinQuery(breakpoint) {\n    let value = breakpointValues[breakpoint];\n    if (typeof value === 'number') {\n      value = `${value}px`;\n    }\n    return `(min-width: ${value})`;\n  }\n\n  /**\n   * Match a set of breakpoints\n   *\n   * ```tsx\n   * const MidSizeOnly = () => {\n   *   const isMid = useBreakpoint({ lg: 'down', sm: 'up' });\n   *\n   *   if (isMid) return <div>On a Reasonable sized Screen!</div>\n   *   return null;\n   * }\n   * ```\n   * @param breakpointMap An object map of breakpoints and directions, queries are constructed using \"and\" to join\n   * breakpoints together\n   * @param window Optionally specify the target window to match against (useful when rendering into iframes)\n   */\n\n  /**\n   * Match a single breakpoint exactly, up, or down.\n   *\n   * ```tsx\n   * const PhoneOnly = () => {\n   *   const isSmall = useBreakpoint('sm', 'down');\n   *\n   *   if (isSmall) return <div>On a Small Screen!</div>\n   *   return null;\n   * }\n   * ```\n   *\n   * @param breakpoint The breakpoint key\n   * @param direction A direction 'up' for a max, 'down' for min, true to match only the breakpoint\n   * @param window Optionally specify the target window to match against (useful when rendering into iframes)\n   */\n\n  function useBreakpoint(breakpointOrMap, direction, window) {\n    let breakpointMap;\n    if (typeof breakpointOrMap === 'object') {\n      breakpointMap = breakpointOrMap;\n      window = direction;\n      direction = true;\n    } else {\n      direction = direction || true;\n      breakpointMap = {\n        [breakpointOrMap]: direction\n      };\n    }\n    let query = useMemo(() => Object.entries(breakpointMap).reduce((query, [key, direction]) => {\n      if (direction === 'up' || direction === true) {\n        query = and(query, getMinQuery(key));\n      }\n      if (direction === 'down' || direction === true) {\n        query = and(query, getMaxQuery(key));\n      }\n      return query;\n    }, ''), [JSON.stringify(breakpointMap)]);\n    return useMediaQuery(query, window);\n  }\n  return useBreakpoint;\n}\nconst useBreakpoint = createBreakpointHook({\n  xs: 0,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n  xxl: 1400\n});\nexport default useBreakpoint;",
      "start": 1702937442090,
      "end": 1702937442101,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937442101,
      "end": 1702937442101,
      "order": "normal"
    }
  ]
}
