{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/prolog.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = prolog\nprolog.displayName = 'prolog'\nprolog.aliases = []\nfunction prolog(Prism) {\n  Prism.languages.prolog = {\n    // Syntax depends on the implementation\n    comment: {\n      pattern: /\\/\\*[\\s\\S]*?\\*\\/|%.*/,\n      greedy: true\n    },\n    // Depending on the implementation, strings may allow escaped newlines and quote-escape\n    string: {\n      pattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1(?!\\1)/,\n      greedy: true\n    },\n    builtin: /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\n    // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?\n    function: /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\n    number: /\\b\\d+(?:\\.\\d*)?/,\n    // Custom operators are allowed\n    operator: /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\n    punctuation: /[(){}\\[\\],]/\n  }\n}\n",
      "start": 1702937445014,
      "end": 1702937445041,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar prolog_1;\nvar hasRequiredProlog;\n\nfunction requireProlog () {\n\tif (hasRequiredProlog) return prolog_1;\n\thasRequiredProlog = 1;\n\t'use strict'\n\n\tprolog_1 = prolog\n\tprolog.displayName = 'prolog'\n\tprolog.aliases = []\n\tfunction prolog(Prism) {\n\t  Prism.languages.prolog = {\n\t    // Syntax depends on the implementation\n\t    comment: {\n\t      pattern: /\\/\\*[\\s\\S]*?\\*\\/|%.*/,\n\t      greedy: true\n\t    },\n\t    // Depending on the implementation, strings may allow escaped newlines and quote-escape\n\t    string: {\n\t      pattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1(?!\\1)/,\n\t      greedy: true\n\t    },\n\t    builtin: /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\n\t    // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?\n\t    function: /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\n\t    number: /\\b\\d+(?:\\.\\d*)?/,\n\t    // Custom operators are allowed\n\t    operator: /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\n\t    punctuation: /[(){}\\[\\],]/\n\t  }\n\t}\n\treturn prolog_1;\n}\n\nexport { requireProlog as __require };",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;CAAA,YAAY;AACZ;AACA,SAAc,GAAG,MAAM;CACvB,MAAM,CAAC,WAAW,GAAG,QAAQ;CAC7B,MAAM,CAAC,OAAO,GAAG,EAAE;CACnB,SAAS,MAAM,CAAC,KAAK,EAAE;CACvB,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG;CAC3B;CACA,IAAI,OAAO,EAAE;CACb,MAAM,OAAO,EAAE,sBAAsB;CACrC,MAAM,MAAM,EAAE,IAAI;CAClB,KAAK;CACL;CACA,IAAI,MAAM,EAAE;CACZ,MAAM,OAAO,EAAE,2DAA2D;CAC1E,MAAM,MAAM,EAAE,IAAI;CAClB,KAAK;CACL,IAAI,OAAO,EAAE,4BAA4B;CACzC;CACA,IAAI,QAAQ,EAAE,4BAA4B;CAC1C,IAAI,MAAM,EAAE,iBAAiB;CAC7B;CACA,IAAI,QAAQ,EAAE,gDAAgD;CAC9D,IAAI,WAAW,EAAE,aAAa;CAC9B,GAAG;CACH"
      }
    },
    {
      "name": "inject",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    }
  ]
}
