{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/less.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = less\nless.displayName = 'less'\nless.aliases = []\nfunction less(Prism) {\n  /* FIXME :\n:extend() is not handled specifically : its highlighting is buggy.\nMixin usage must be inside a ruleset to be highlighted.\nAt-rules (e.g. import) containing interpolations are buggy.\nDetached rulesets are highlighted as at-rules.\nA comment before a mixin usage prevents the latter to be properly highlighted.\n*/\n  Prism.languages.less = Prism.languages.extend('css', {\n    comment: [\n      /\\/\\*[\\s\\S]*?\\*\\//,\n      {\n        pattern: /(^|[^\\\\])\\/\\/.*/,\n        lookbehind: true\n      }\n    ],\n    atrule: {\n      pattern:\n        /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n      inside: {\n        punctuation: /[:()]/\n      }\n    },\n    // selectors and mixins are considered the same\n    selector: {\n      pattern:\n        /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n      inside: {\n        // mixin parameters\n        variable: /@+[\\w-]+/\n      }\n    },\n    property: /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n    operator: /[+\\-*\\/]/\n  })\n  Prism.languages.insertBefore('less', 'property', {\n    variable: [\n      // Variable declaration (the colon must be consumed!)\n      {\n        pattern: /@[\\w-]+\\s*:/,\n        inside: {\n          punctuation: /:/\n        }\n      }, // Variable usage\n      /@@?[\\w-]+/\n    ],\n    'mixin-usage': {\n      pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n      lookbehind: true,\n      alias: 'function'\n    }\n  })\n}\n",
      "start": 1702937444945,
      "end": 1702937444972,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar less_1;\nvar hasRequiredLess;\n\nfunction requireLess () {\n\tif (hasRequiredLess) return less_1;\n\thasRequiredLess = 1;\n\t'use strict'\n\n\tless_1 = less\n\tless.displayName = 'less'\n\tless.aliases = []\n\tfunction less(Prism) {\n\t  /* FIXME :\n\t:extend() is not handled specifically : its highlighting is buggy.\n\tMixin usage must be inside a ruleset to be highlighted.\n\tAt-rules (e.g. import) containing interpolations are buggy.\n\tDetached rulesets are highlighted as at-rules.\n\tA comment before a mixin usage prevents the latter to be properly highlighted.\n\t*/\n\t  Prism.languages.less = Prism.languages.extend('css', {\n\t    comment: [\n\t      /\\/\\*[\\s\\S]*?\\*\\//,\n\t      {\n\t        pattern: /(^|[^\\\\])\\/\\/.*/,\n\t        lookbehind: true\n\t      }\n\t    ],\n\t    atrule: {\n\t      pattern:\n\t        /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n\t      inside: {\n\t        punctuation: /[:()]/\n\t      }\n\t    },\n\t    // selectors and mixins are considered the same\n\t    selector: {\n\t      pattern:\n\t        /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n\t      inside: {\n\t        // mixin parameters\n\t        variable: /@+[\\w-]+/\n\t      }\n\t    },\n\t    property: /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n\t    operator: /[+\\-*\\/]/\n\t  })\n\t  Prism.languages.insertBefore('less', 'property', {\n\t    variable: [\n\t      // Variable declaration (the colon must be consumed!)\n\t      {\n\t        pattern: /@[\\w-]+\\s*:/,\n\t        inside: {\n\t          punctuation: /:/\n\t        }\n\t      }, // Variable usage\n\t      /@@?[\\w-]+/\n\t    ],\n\t    'mixin-usage': {\n\t      pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n\t      lookbehind: true,\n\t      alias: 'function'\n\t    }\n\t  })\n\t}\n\treturn less_1;\n}\n\nexport { requireLess as __require };",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;CAAA,YAAY;AACZ;AACA,OAAc,GAAG,IAAI;CACrB,IAAI,CAAC,WAAW,GAAG,MAAM;CACzB,IAAI,CAAC,OAAO,GAAG,EAAE;CACjB,SAAS,IAAI,CAAC,KAAK,EAAE;CACrB;CACA;CACA;CACA;CACA;CACA;CACA;CACA,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE;CACvD,IAAI,OAAO,EAAE;CACb,MAAM,kBAAkB;CACxB,MAAM;CACN,QAAQ,OAAO,EAAE,iBAAiB;CAClC,QAAQ,UAAU,EAAE,IAAI;CACxB,OAAO;CACP,KAAK;CACL,IAAI,MAAM,EAAE;CACZ,MAAM,OAAO;CACb,QAAQ,yEAAyE;CACjF,MAAM,MAAM,EAAE;CACd,QAAQ,WAAW,EAAE,OAAO;CAC5B,OAAO;CACP,KAAK;CACL;CACA,IAAI,QAAQ,EAAE;CACd,MAAM,OAAO;CACb,QAAQ,yGAAyG;CACjH,MAAM,MAAM,EAAE;CACd;CACA,QAAQ,QAAQ,EAAE,UAAU;CAC5B,OAAO;CACP,KAAK;CACL,IAAI,QAAQ,EAAE,yCAAyC;CACvD,IAAI,QAAQ,EAAE,UAAU;CACxB,GAAG,CAAC;CACJ,EAAE,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,EAAE;CACnD,IAAI,QAAQ,EAAE;CACd;CACA,MAAM;CACN,QAAQ,OAAO,EAAE,aAAa;CAC9B,QAAQ,MAAM,EAAE;CAChB,UAAU,WAAW,EAAE,GAAG;CAC1B,SAAS;CACT,OAAO;CACP,MAAM,WAAW;CACjB,KAAK;CACL,IAAI,aAAa,EAAE;CACnB,MAAM,OAAO,EAAE,qCAAqC;CACpD,MAAM,UAAU,EAAE,IAAI;CACtB,MAAM,KAAK,EAAE,UAAU;CACvB,KAAK;CACL,GAAG,CAAC;CACJ"
      }
    },
    {
      "name": "inject",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    }
  ]
}
