{
  "resolvedId": "/home/zepor/ssweb/frontend-container/src/pages/docs/Deployment.jsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\n\r\nimport Code from \"../../components/Code\";\r\n\r\nconst Intro = () => (\r\n  <div className=\"mb-5\">\r\n    <h3>Introduction</h3>\r\n    <p className=\"text-lg\">\r\n      <code>npm run build</code> creates a build directory with a production\r\n      build of your app. Set up your favorite HTTP server so that a visitor to\r\n      your site is served index.html, and requests to static paths like{\" \"}\r\n      <code>{`/static/js/main.<hash>.js`}</code> are served with the contents of\r\n      the <code>{`/static/js/main.<hash>.js`}</code> file.\r\n    </p>\r\n  </div>\r\n);\r\n\r\nconst StaticServer = () => (\r\n  <div className=\"mb-5\">\r\n    <h3>Static Server</h3>\r\n    <p className=\"text-lg\">\r\n      For environments using{\" \"}\r\n      <a\r\n        href=\"https://nodejs.org/en/\"\r\n        target=\"_blank\"\r\n        rel=\"noreferrer noopener\"\r\n      >\r\n        Node\r\n      </a>\r\n      , the easiest way to handle this would be to install{\" \"}\r\n      <a\r\n        href=\"https://github.com/zeit/serve\"\r\n        target=\"_blank\"\r\n        rel=\"noreferrer noopener\"\r\n      >\r\n        serve\r\n      </a>{\" \"}\r\n      and let it handle the rest:\r\n    </p>\r\n    <Code>{`npm install -g serve\r\nserve -s build`}</Code>\r\n\r\n    <p className=\"text-lg\">\r\n      The last command shown above will serve your static site on the port 5000.\r\n      Like many of\r\n      <a\r\n        href=\"https://github.com/vercel/serve\"\r\n        target=\"_blank\"\r\n        rel=\"noreferrer noopener\"\r\n      >\r\n        serve\r\n      </a>\r\n      ’s internal settings, the port can be adjusted using the <code>-l</code>{\" \"}\r\n      or <code>--listen</code> flags:\r\n    </p>\r\n    <Code>serve -s build -l 4000</Code>\r\n\r\n    <p className=\"text-lg\">\r\n      Run this command to get a full list of the options available:\r\n    </p>\r\n    <Code>serve -h</Code>\r\n  </div>\r\n);\r\n\r\nconst OtherSolutions = () => (\r\n  <div className=\"mb-5\">\r\n    <h3>Other Solutions</h3>\r\n    <p className=\"text-lg\">\r\n      You don’t necessarily need a static server in order to run a Create React\r\n      App project in production. It also works well when integrated into an\r\n      existing server side app.\r\n    </p>\r\n  </div>\r\n);\r\n\r\nconst Express = () => (\r\n  <div className=\"mb-5\">\r\n    <h4>Express</h4>\r\n    <p className=\"text-lg\">\r\n      Express is a fast, unopinionated, minimalist web framework for Node.js.\r\n      Here’s a programmatic example:\r\n    </p>\r\n    <Code>{`const express = require('express');\r\nconst path = require('path');\r\nconst app = express();\r\napp.use(express.static(path.join(__dirname, 'build')));\r\napp.get('/', function(req, res) {\r\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\r\n});\r\napp.listen(9000);`}</Code>\r\n  </div>\r\n);\r\n\r\nconst Netlify = () => (\r\n  <div className=\"mb-5\">\r\n    <h4>Netlify</h4>\r\n    <p className=\"text-lg\">\r\n      Deploy modern static websites with Netlify. Get CDN, Continuous\r\n      deployment, 1-click HTTPS, and all the services you need.\r\n    </p>\r\n    <p className=\"text-lg\">To do a manual deploy to Netlify’s CDN:</p>\r\n    <Code>{`npm install netlify-cli -g\r\nnetlify deploy`}</Code>\r\n\r\n    <p className=\"text-lg\">\r\n      Choose <code>build</code> as the path to deploy.\r\n    </p>\r\n    <p className=\"text-lg\">\r\n      To setup continuous delivery:\r\n      <br />\r\n      With this setup Netlify will build and deploy when you push to git or open\r\n      a pull request:\r\n    </p>\r\n    <ol className=\"text-lg\">\r\n      <li>\r\n        <a\r\n          href=\"https://app.netlify.com/signup\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Start a new netlify project\r\n        </a>\r\n      </li>\r\n      <li>Pick your Git hosting service and select your repository</li>\r\n      <li>\r\n        Click <code>Build your site</code>\r\n      </li>\r\n    </ol>\r\n  </div>\r\n);\r\n\r\nconst Deployment = () => (\r\n  <React.Fragment>\r\n    <Helmet title=\"Deployment\" />\r\n    <Container fluid className=\"p-0\">\r\n      <Row>\r\n        <Col lg={10} xl={8} className=\"col-xxl-7 mx-auto\">\r\n          <h1>Deployment</h1>\r\n          <hr className=\"my-4\" />\r\n          <Intro />\r\n          <StaticServer />\r\n          <OtherSolutions />\r\n          <Express />\r\n          <Netlify />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default Deployment;\r\n",
      "start": 1702937440868,
      "end": 1702937440894,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937440894,
      "end": 1702937440894,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937440894,
      "end": 1702937440894,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx, jsxs } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport Code from \"../../components/Code\";\nconst Intro = () => /* @__PURE__ */ jsxs(\"div\", { className: \"mb-5\", children: [\n  /* @__PURE__ */ jsx(\"h3\", { children: \"Introduction\" }),\n  /* @__PURE__ */ jsxs(\"p\", { className: \"text-lg\", children: [\n    /* @__PURE__ */ jsx(\"code\", { children: \"npm run build\" }),\n    \" creates a build directory with a production build of your app. Set up your favorite HTTP server so that a visitor to your site is served index.html, and requests to static paths like\",\n    \" \",\n    /* @__PURE__ */ jsx(\"code\", { children: `/static/js/main.<hash>.js` }),\n    \" are served with the contents of the \",\n    /* @__PURE__ */ jsx(\"code\", { children: `/static/js/main.<hash>.js` }),\n    \" file.\"\n  ] })\n] });\nconst StaticServer = () => /* @__PURE__ */ jsxs(\"div\", { className: \"mb-5\", children: [\n  /* @__PURE__ */ jsx(\"h3\", { children: \"Static Server\" }),\n  /* @__PURE__ */ jsxs(\"p\", { className: \"text-lg\", children: [\n    \"For environments using\",\n    \" \",\n    /* @__PURE__ */ jsx(\n      \"a\",\n      {\n        href: \"https://nodejs.org/en/\",\n        target: \"_blank\",\n        rel: \"noreferrer noopener\",\n        children: \"Node\"\n      }\n    ),\n    \", the easiest way to handle this would be to install\",\n    \" \",\n    /* @__PURE__ */ jsx(\n      \"a\",\n      {\n        href: \"https://github.com/zeit/serve\",\n        target: \"_blank\",\n        rel: \"noreferrer noopener\",\n        children: \"serve\"\n      }\n    ),\n    \" \",\n    \"and let it handle the rest:\"\n  ] }),\n  /* @__PURE__ */ jsx(Code, { children: `npm install -g serve\nserve -s build` }),\n  /* @__PURE__ */ jsxs(\"p\", { className: \"text-lg\", children: [\n    \"The last command shown above will serve your static site on the port 5000. Like many of\",\n    /* @__PURE__ */ jsx(\n      \"a\",\n      {\n        href: \"https://github.com/vercel/serve\",\n        target: \"_blank\",\n        rel: \"noreferrer noopener\",\n        children: \"serve\"\n      }\n    ),\n    \"’s internal settings, the port can be adjusted using the \",\n    /* @__PURE__ */ jsx(\"code\", { children: \"-l\" }),\n    \" \",\n    \"or \",\n    /* @__PURE__ */ jsx(\"code\", { children: \"--listen\" }),\n    \" flags:\"\n  ] }),\n  /* @__PURE__ */ jsx(Code, { children: \"serve -s build -l 4000\" }),\n  /* @__PURE__ */ jsx(\"p\", { className: \"text-lg\", children: \"Run this command to get a full list of the options available:\" }),\n  /* @__PURE__ */ jsx(Code, { children: \"serve -h\" })\n] });\nconst OtherSolutions = () => /* @__PURE__ */ jsxs(\"div\", { className: \"mb-5\", children: [\n  /* @__PURE__ */ jsx(\"h3\", { children: \"Other Solutions\" }),\n  /* @__PURE__ */ jsx(\"p\", { className: \"text-lg\", children: \"You don’t necessarily need a static server in order to run a Create React App project in production. It also works well when integrated into an existing server side app.\" })\n] });\nconst Express = () => /* @__PURE__ */ jsxs(\"div\", { className: \"mb-5\", children: [\n  /* @__PURE__ */ jsx(\"h4\", { children: \"Express\" }),\n  /* @__PURE__ */ jsx(\"p\", { className: \"text-lg\", children: \"Express is a fast, unopinionated, minimalist web framework for Node.js. Here’s a programmatic example:\" }),\n  /* @__PURE__ */ jsx(Code, { children: `const express = require('express');\nconst path = require('path');\nconst app = express();\napp.use(express.static(path.join(__dirname, 'build')));\napp.get('/', function(req, res) {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n});\napp.listen(9000);` })\n] });\nconst Netlify = () => /* @__PURE__ */ jsxs(\"div\", { className: \"mb-5\", children: [\n  /* @__PURE__ */ jsx(\"h4\", { children: \"Netlify\" }),\n  /* @__PURE__ */ jsx(\"p\", { className: \"text-lg\", children: \"Deploy modern static websites with Netlify. Get CDN, Continuous deployment, 1-click HTTPS, and all the services you need.\" }),\n  /* @__PURE__ */ jsx(\"p\", { className: \"text-lg\", children: \"To do a manual deploy to Netlify’s CDN:\" }),\n  /* @__PURE__ */ jsx(Code, { children: `npm install netlify-cli -g\nnetlify deploy` }),\n  /* @__PURE__ */ jsxs(\"p\", { className: \"text-lg\", children: [\n    \"Choose \",\n    /* @__PURE__ */ jsx(\"code\", { children: \"build\" }),\n    \" as the path to deploy.\"\n  ] }),\n  /* @__PURE__ */ jsxs(\"p\", { className: \"text-lg\", children: [\n    \"To setup continuous delivery:\",\n    /* @__PURE__ */ jsx(\"br\", {}),\n    \"With this setup Netlify will build and deploy when you push to git or open a pull request:\"\n  ] }),\n  /* @__PURE__ */ jsxs(\"ol\", { className: \"text-lg\", children: [\n    /* @__PURE__ */ jsx(\"li\", { children: /* @__PURE__ */ jsx(\n      \"a\",\n      {\n        href: \"https://app.netlify.com/signup\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Start a new netlify project\"\n      }\n    ) }),\n    /* @__PURE__ */ jsx(\"li\", { children: \"Pick your Git hosting service and select your repository\" }),\n    /* @__PURE__ */ jsxs(\"li\", { children: [\n      \"Click \",\n      /* @__PURE__ */ jsx(\"code\", { children: \"Build your site\" })\n    ] })\n  ] })\n] });\nconst Deployment = () => /* @__PURE__ */ jsxs(React.Fragment, { children: [\n  /* @__PURE__ */ jsx(Helmet, { title: \"Deployment\" }),\n  /* @__PURE__ */ jsx(Container, { fluid: true, className: \"p-0\", children: /* @__PURE__ */ jsx(Row, { children: /* @__PURE__ */ jsxs(Col, { lg: 10, xl: 8, className: \"col-xxl-7 mx-auto\", children: [\n    /* @__PURE__ */ jsx(\"h1\", { children: \"Deployment\" }),\n    /* @__PURE__ */ jsx(\"hr\", { className: \"my-4\" }),\n    /* @__PURE__ */ jsx(Intro, {}),\n    /* @__PURE__ */ jsx(StaticServer, {}),\n    /* @__PURE__ */ jsx(OtherSolutions, {}),\n    /* @__PURE__ */ jsx(Express, {}),\n    /* @__PURE__ */ jsx(Netlify, {})\n  ] }) }) })\n] });\nexport default Deployment;\n",
      "start": 1702937440894,
      "end": 1702937440951,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/home/zepor/ssweb/frontend-container/src/pages/docs/Deployment.jsx"
        ],
        "sourcesContent": [
          "import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\n\r\nimport Code from \"../../components/Code\";\r\n\r\nconst Intro = () => (\r\n  <div className=\"mb-5\">\r\n    <h3>Introduction</h3>\r\n    <p className=\"text-lg\">\r\n      <code>npm run build</code> creates a build directory with a production\r\n      build of your app. Set up your favorite HTTP server so that a visitor to\r\n      your site is served index.html, and requests to static paths like{\" \"}\r\n      <code>{`/static/js/main.<hash>.js`}</code> are served with the contents of\r\n      the <code>{`/static/js/main.<hash>.js`}</code> file.\r\n    </p>\r\n  </div>\r\n);\r\n\r\nconst StaticServer = () => (\r\n  <div className=\"mb-5\">\r\n    <h3>Static Server</h3>\r\n    <p className=\"text-lg\">\r\n      For environments using{\" \"}\r\n      <a\r\n        href=\"https://nodejs.org/en/\"\r\n        target=\"_blank\"\r\n        rel=\"noreferrer noopener\"\r\n      >\r\n        Node\r\n      </a>\r\n      , the easiest way to handle this would be to install{\" \"}\r\n      <a\r\n        href=\"https://github.com/zeit/serve\"\r\n        target=\"_blank\"\r\n        rel=\"noreferrer noopener\"\r\n      >\r\n        serve\r\n      </a>{\" \"}\r\n      and let it handle the rest:\r\n    </p>\r\n    <Code>{`npm install -g serve\r\nserve -s build`}</Code>\r\n\r\n    <p className=\"text-lg\">\r\n      The last command shown above will serve your static site on the port 5000.\r\n      Like many of\r\n      <a\r\n        href=\"https://github.com/vercel/serve\"\r\n        target=\"_blank\"\r\n        rel=\"noreferrer noopener\"\r\n      >\r\n        serve\r\n      </a>\r\n      ’s internal settings, the port can be adjusted using the <code>-l</code>{\" \"}\r\n      or <code>--listen</code> flags:\r\n    </p>\r\n    <Code>serve -s build -l 4000</Code>\r\n\r\n    <p className=\"text-lg\">\r\n      Run this command to get a full list of the options available:\r\n    </p>\r\n    <Code>serve -h</Code>\r\n  </div>\r\n);\r\n\r\nconst OtherSolutions = () => (\r\n  <div className=\"mb-5\">\r\n    <h3>Other Solutions</h3>\r\n    <p className=\"text-lg\">\r\n      You don’t necessarily need a static server in order to run a Create React\r\n      App project in production. It also works well when integrated into an\r\n      existing server side app.\r\n    </p>\r\n  </div>\r\n);\r\n\r\nconst Express = () => (\r\n  <div className=\"mb-5\">\r\n    <h4>Express</h4>\r\n    <p className=\"text-lg\">\r\n      Express is a fast, unopinionated, minimalist web framework for Node.js.\r\n      Here’s a programmatic example:\r\n    </p>\r\n    <Code>{`const express = require('express');\r\nconst path = require('path');\r\nconst app = express();\r\napp.use(express.static(path.join(__dirname, 'build')));\r\napp.get('/', function(req, res) {\r\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\r\n});\r\napp.listen(9000);`}</Code>\r\n  </div>\r\n);\r\n\r\nconst Netlify = () => (\r\n  <div className=\"mb-5\">\r\n    <h4>Netlify</h4>\r\n    <p className=\"text-lg\">\r\n      Deploy modern static websites with Netlify. Get CDN, Continuous\r\n      deployment, 1-click HTTPS, and all the services you need.\r\n    </p>\r\n    <p className=\"text-lg\">To do a manual deploy to Netlify’s CDN:</p>\r\n    <Code>{`npm install netlify-cli -g\r\nnetlify deploy`}</Code>\r\n\r\n    <p className=\"text-lg\">\r\n      Choose <code>build</code> as the path to deploy.\r\n    </p>\r\n    <p className=\"text-lg\">\r\n      To setup continuous delivery:\r\n      <br />\r\n      With this setup Netlify will build and deploy when you push to git or open\r\n      a pull request:\r\n    </p>\r\n    <ol className=\"text-lg\">\r\n      <li>\r\n        <a\r\n          href=\"https://app.netlify.com/signup\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Start a new netlify project\r\n        </a>\r\n      </li>\r\n      <li>Pick your Git hosting service and select your repository</li>\r\n      <li>\r\n        Click <code>Build your site</code>\r\n      </li>\r\n    </ol>\r\n  </div>\r\n);\r\n\r\nconst Deployment = () => (\r\n  <React.Fragment>\r\n    <Helmet title=\"Deployment\" />\r\n    <Container fluid className=\"p-0\">\r\n      <Row>\r\n        <Col lg={10} xl={8} className=\"col-xxl-7 mx-auto\">\r\n          <h1>Deployment</h1>\r\n          <hr className=\"my-4\" />\r\n          <Intro />\r\n          <StaticServer />\r\n          <OtherSolutions />\r\n          <Express />\r\n          <Netlify />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default Deployment;\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1702937440951,
      "end": 1702937440951,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937440951,
      "end": 1702937440951,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937440951,
      "end": 1702937440951,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937440951,
      "end": 1702937440951,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937440951,
      "end": 1702937440951,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937440951,
      "end": 1702937440951,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937440951,
      "end": 1702937440951,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937440951,
      "end": 1702937440951,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937440951,
      "end": 1702937440952,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937440952,
      "end": 1702937440952,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937440952,
      "end": 1702937440952,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937440952,
      "end": 1702937440952,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937440952,
      "end": 1702937440952,
      "order": "normal"
    }
  ]
}
