{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/lilypond.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\nvar refractorScheme = require('./scheme.js')\nmodule.exports = lilypond\nlilypond.displayName = 'lilypond'\nlilypond.aliases = []\nfunction lilypond(Prism) {\n  Prism.register(refractorScheme)\n  ;(function (Prism) {\n    var schemeExpression =\n      /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*(?!.)|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/\n        .source // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions\n    // For some reason, this can't be 4\n    var recursivenessLog2 = 5\n    for (var i = 0; i < recursivenessLog2; i++) {\n      schemeExpression = schemeExpression.replace(/<expr>/g, function () {\n        return schemeExpression\n      })\n    }\n    schemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source)\n    var lilypond = (Prism.languages.lilypond = {\n      comment: /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\n      'embedded-scheme': {\n        pattern: RegExp(\n          /(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(\n            /<expr>/g,\n            function () {\n              return schemeExpression\n            }\n          ),\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          scheme: {\n            pattern: /^(#)[\\s\\S]+$/,\n            lookbehind: true,\n            alias: 'language-scheme',\n            inside: {\n              'embedded-lilypond': {\n                pattern: /#\\{[\\s\\S]*?#\\}/,\n                greedy: true,\n                inside: {\n                  punctuation: /^#\\{|#\\}$/,\n                  lilypond: {\n                    pattern: /[\\s\\S]+/,\n                    alias: 'language-lilypond',\n                    inside: null // see below\n                  }\n                }\n              },\n              rest: Prism.languages.scheme\n            }\n          },\n          punctuation: /#/\n        }\n      },\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\\\new\\s+)[\\w-]+/,\n        lookbehind: true\n      },\n      keyword: {\n        pattern: /\\\\[a-z][-\\w]*/i,\n        inside: {\n          punctuation: /^\\\\/\n        }\n      },\n      operator: /[=|]|<<|>>/,\n      punctuation: {\n        pattern:\n          /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\/\\d+)?\\b/\n    })\n    lilypond['embedded-scheme'].inside['scheme'].inside[\n      'embedded-lilypond'\n    ].inside['lilypond'].inside = lilypond\n    Prism.languages.ly = lilypond\n  })(Prism)\n}\n",
      "start": 1702937444945,
      "end": 1702937444972,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444972,
      "end": 1702937444972,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444972,
      "end": 1702937444973,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444973,
      "end": 1702937444973,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444973,
      "end": 1702937444973,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444973,
      "end": 1702937444973,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444973,
      "end": 1702937444973,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/scheme.js?commonjs-wrapped\";\n\nvar lilypond_1;\nvar hasRequiredLilypond;\n\nfunction requireLilypond () {\n\tif (hasRequiredLilypond) return lilypond_1;\n\thasRequiredLilypond = 1;\n\t'use strict'\n\tvar refractorScheme = require$$0()\n\tlilypond_1 = lilypond\n\tlilypond.displayName = 'lilypond'\n\tlilypond.aliases = []\n\tfunction lilypond(Prism) {\n\t  Prism.register(refractorScheme)\n\t  ;(function (Prism) {\n\t    var schemeExpression =\n\t      /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*(?!.)|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/\n\t        .source // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions\n\t    // For some reason, this can't be 4\n\t    var recursivenessLog2 = 5\n\t    for (var i = 0; i < recursivenessLog2; i++) {\n\t      schemeExpression = schemeExpression.replace(/<expr>/g, function () {\n\t        return schemeExpression\n\t      })\n\t    }\n\t    schemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source)\n\t    var lilypond = (Prism.languages.lilypond = {\n\t      comment: /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\n\t      'embedded-scheme': {\n\t        pattern: RegExp(\n\t          /(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(\n\t            /<expr>/g,\n\t            function () {\n\t              return schemeExpression\n\t            }\n\t          ),\n\t          'm'\n\t        ),\n\t        lookbehind: true,\n\t        greedy: true,\n\t        inside: {\n\t          scheme: {\n\t            pattern: /^(#)[\\s\\S]+$/,\n\t            lookbehind: true,\n\t            alias: 'language-scheme',\n\t            inside: {\n\t              'embedded-lilypond': {\n\t                pattern: /#\\{[\\s\\S]*?#\\}/,\n\t                greedy: true,\n\t                inside: {\n\t                  punctuation: /^#\\{|#\\}$/,\n\t                  lilypond: {\n\t                    pattern: /[\\s\\S]+/,\n\t                    alias: 'language-lilypond',\n\t                    inside: null // see below\n\t                  }\n\t                }\n\t              },\n\t              rest: Prism.languages.scheme\n\t            }\n\t          },\n\t          punctuation: /#/\n\t        }\n\t      },\n\t      string: {\n\t        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n\t        greedy: true\n\t      },\n\t      'class-name': {\n\t        pattern: /(\\\\new\\s+)[\\w-]+/,\n\t        lookbehind: true\n\t      },\n\t      keyword: {\n\t        pattern: /\\\\[a-z][-\\w]*/i,\n\t        inside: {\n\t          punctuation: /^\\\\/\n\t        }\n\t      },\n\t      operator: /[=|]|<<|>>/,\n\t      punctuation: {\n\t        pattern:\n\t          /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\n\t        lookbehind: true\n\t      },\n\t      number: /\\b\\d+(?:\\/\\d+)?\\b/\n\t    })\n\t    lilypond['embedded-scheme'].inside['scheme'].inside[\n\t      'embedded-lilypond'\n\t    ].inside['lilypond'].inside = lilypond\n\t    Prism.languages.ly = lilypond\n\t  })(Prism)\n\t}\n\treturn lilypond_1;\n}\n\nexport { requireLilypond as __require };",
      "start": 1702937444973,
      "end": 1702937445089,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937445089,
      "end": 1702937445089,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445089,
      "end": 1702937445089,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445089,
      "end": 1702937445089,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445089,
      "end": 1702937445089,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445089,
      "end": 1702937445089,
      "order": "normal"
    }
  ]
}
