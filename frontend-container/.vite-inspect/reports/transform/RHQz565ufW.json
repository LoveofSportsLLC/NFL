{
  "resolvedId": "/home/zepor/ssweb/frontend-container/src/pages/ui/Modals.jsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import React, { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\n\r\nimport { Button, Card, Col, Container, Modal, Row } from \"react-bootstrap\";\r\n\r\nconst colors = [\r\n  {\r\n    name: \"Primary\",\r\n    value: \"primary\",\r\n  },\r\n  {\r\n    name: \"Success\",\r\n    value: \"success\",\r\n  },\r\n  {\r\n    name: \"Danger\",\r\n    value: \"danger\",\r\n  },\r\n  {\r\n    name: \"Warning\",\r\n    value: \"warning\",\r\n  },\r\n];\r\n\r\nconst sizes = [\r\n  {\r\n    name: \"Small\",\r\n    value: \"sm\",\r\n  },\r\n  {\r\n    name: \"Medium\",\r\n    value: \"md\",\r\n  },\r\n  {\r\n    name: \"Large\",\r\n    value: \"lg\",\r\n  },\r\n];\r\n\r\nconst DefaultModal = () => {\r\n  const initOpenModals = () => {\r\n    let modals = {};\r\n\r\n    colors.forEach((color, index) => {\r\n      modals = Object.assign({}, modals, { [index]: false });\r\n    });\r\n\r\n    return modals;\r\n  };\r\n\r\n  const [openModals, setOpenModals] = useState(() => initOpenModals());\r\n\r\n  const toggle = (index) => {\r\n    // Toggle selected element\r\n    setOpenModals((openModals) =>\r\n      Object.assign({}, openModals, { [index]: !openModals[index] })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Card.Title>Default modal</Card.Title>\r\n        <h6 className=\"card-subtitle text-muted\">Default Bootstrap modal.</h6>\r\n      </Card.Header>\r\n      <Card.Body className=\"text-center\">\r\n        <p>\r\n          Use Bootstrap’s JavaScript modal plugin to add dialogs to your site\r\n          for lightboxes, user notifications, or completely custom content.\r\n        </p>\r\n\r\n        {colors.map((color, index) => (\r\n          <React.Fragment key={index}>\r\n            <Button\r\n              variant={color.value}\r\n              onClick={() => toggle(index)}\r\n              className=\"me-1\"\r\n            >\r\n              {color.name}\r\n            </Button>\r\n            <Modal show={openModals[index]} onHide={() => toggle(index)}>\r\n              <Modal.Header closeButton>Modal</Modal.Header>\r\n              <Modal.Body className=\"text-center m-3\">\r\n                <p className=\"mb-0\">\r\n                  Use Bootstrap’s JavaScript modal plugin to add dialogs to your\r\n                  site for lightboxes, user notifications, or completely custom\r\n                  content.\r\n                </p>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={() => toggle(index)}>\r\n                  Close\r\n                </Button>{\" \"}\r\n                <Button variant={color.value} onClick={() => toggle(index)}>\r\n                  Save changes\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </React.Fragment>\r\n        ))}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst ColoredModal = () => {\r\n  const initOpenModals = () => {\r\n    let modals = {};\r\n\r\n    colors.forEach((color, index) => {\r\n      modals = Object.assign({}, modals, { [index]: false });\r\n    });\r\n\r\n    return modals;\r\n  };\r\n\r\n  const [openModals, setOpenModals] = useState(() => initOpenModals());\r\n\r\n  const toggle = (index) => {\r\n    // Toggle selected element\r\n    setOpenModals((openModals) =>\r\n      Object.assign({}, openModals, { [index]: !openModals[index] })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Card.Title>Colored modal</Card.Title>\r\n        <h6 className=\"card-subtitle text-muted\">Colored Bootstrap modal.</h6>\r\n      </Card.Header>\r\n      <Card.Body className=\"text-center\">\r\n        <p>\r\n          Use Bootstrap’s JavaScript modal plugin to add dialogs to your site\r\n          for lightboxes, user notifications, or completely custom content.\r\n        </p>\r\n\r\n        {colors.map((color, index) => (\r\n          <React.Fragment key={index}>\r\n            <Button\r\n              variant={color.value}\r\n              onClick={() => toggle(index)}\r\n              className=\"me-1\"\r\n            >\r\n              {color.name}\r\n            </Button>\r\n            <Modal\r\n              show={openModals[index]}\r\n              onHide={() => toggle(index)}\r\n              className={\"modal-colored modal-\" + color.value}\r\n            >\r\n              <Modal.Header closeButton className=\"text-white\">\r\n                Colored modal\r\n              </Modal.Header>\r\n              <Modal.Body className=\"text-center m-3\">\r\n                <p className=\"mb-0 text-white\">\r\n                  Use Bootstrap’s JavaScript modal plugin to add dialogs to your\r\n                  site for lightboxes, user notifications, or completely custom\r\n                  content.\r\n                </p>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"light\" onClick={() => toggle(index)}>\r\n                  Close\r\n                </Button>{\" \"}\r\n                <Button variant=\"light\" onClick={() => toggle(index)}>\r\n                  Save changes\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </React.Fragment>\r\n        ))}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst CenteredModal = () => {\r\n  const initOpenModals = () => {\r\n    let modals = {};\r\n\r\n    colors.forEach((color, index) => {\r\n      modals = Object.assign({}, modals, { [index]: false });\r\n    });\r\n\r\n    return modals;\r\n  };\r\n\r\n  const [openModals, setOpenModals] = useState(() => initOpenModals());\r\n\r\n  const toggle = (index) => {\r\n    // Toggle selected element\r\n    setOpenModals((openModals) =>\r\n      Object.assign({}, openModals, { [index]: !openModals[index] })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Card.Title>Centered modal</Card.Title>\r\n        <h6 className=\"card-subtitle text-muted\">Vertically centered modal.</h6>\r\n      </Card.Header>\r\n      <Card.Body className=\"text-center\">\r\n        <p>\r\n          Use Bootstrap’s JavaScript modal plugin to add dialogs to your site\r\n          for lightboxes, user notifications, or completely custom content.\r\n        </p>\r\n\r\n        {colors.map((color, index) => (\r\n          <React.Fragment key={index}>\r\n            <Button\r\n              variant={color.value}\r\n              onClick={() => toggle(index)}\r\n              className=\"me-1\"\r\n            >\r\n              {color.name}\r\n            </Button>\r\n            <Modal\r\n              show={openModals[index]}\r\n              onHide={() => toggle(index)}\r\n              centered\r\n            >\r\n              <Modal.Header closeButton>Centered modal</Modal.Header>\r\n              <Modal.Body className=\"text-center m-3\">\r\n                <p className=\"mb-0\">\r\n                  Use Bootstrap’s JavaScript modal plugin to add dialogs to your\r\n                  site for lightboxes, user notifications, or completely custom\r\n                  content.\r\n                </p>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={() => toggle(index)}>\r\n                  Close\r\n                </Button>{\" \"}\r\n                <Button variant={color.value} onClick={() => toggle(index)}>\r\n                  Save changes\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </React.Fragment>\r\n        ))}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst ModalSizes = () => {\r\n  const initOpenModals = () => {\r\n    let modals = {};\r\n\r\n    sizes.forEach((color, index) => {\r\n      modals = Object.assign({}, modals, { [index]: false });\r\n    });\r\n\r\n    return modals;\r\n  };\r\n\r\n  const [openModals, setOpenModals] = useState(() => initOpenModals());\r\n\r\n  const toggle = (index) => {\r\n    // Toggle selected element\r\n    setOpenModals((openModals) =>\r\n      Object.assign({}, openModals, { [index]: !openModals[index] })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Card.Title>Modal sizes</Card.Title>\r\n        <h6 className=\"card-subtitle text-muted\">\r\n          These sizes kick in at certain breakpoints to avoid scrollbars on\r\n          smaller viewports.\r\n        </h6>\r\n      </Card.Header>\r\n      <Card.Body className=\"text-center\">\r\n        <p>\r\n          Use Bootstrap’s JavaScript modal plugin to add dialogs to your site\r\n          for lightboxes, user notifications, or completely custom content.\r\n        </p>\r\n\r\n        {sizes.map((size, index) => (\r\n          <React.Fragment key={index}>\r\n            <Button\r\n              variant=\"primary\"\r\n              onClick={() => toggle(index)}\r\n              className=\"me-1\"\r\n            >\r\n              {size.name}\r\n            </Button>\r\n            <Modal\r\n              show={openModals[index]}\r\n              onHide={() => toggle(index)}\r\n              size={size.value}\r\n            >\r\n              <Modal.Header closeButton>{size.name} modal</Modal.Header>\r\n              <Modal.Body className=\"text-center m-3\">\r\n                <p className=\"mb-0\">\r\n                  Use Bootstrap’s JavaScript modal plugin to add dialogs to your\r\n                  site for lightboxes, user notifications, or completely custom\r\n                  content.\r\n                </p>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={() => toggle(index)}>\r\n                  Close\r\n                </Button>{\" \"}\r\n                <Button variant=\"primary\" onClick={() => toggle(index)}>\r\n                  Save changes\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </React.Fragment>\r\n        ))}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst Modals = () => (\r\n  <React.Fragment>\r\n    <Helmet title=\"Modals\" />\r\n    <Container fluid className=\"p-0\">\r\n      <h1 className=\"h3 mb-3\">Modals</h1>\r\n\r\n      <Row>\r\n        <Col lg=\"6\">\r\n          <DefaultModal />\r\n        </Col>\r\n        <Col lg=\"6\">\r\n          <ColoredModal />\r\n        </Col>\r\n        <Col lg=\"6\">\r\n          <CenteredModal />\r\n        </Col>\r\n        <Col lg=\"6\">\r\n          <ModalSizes />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default Modals;\r\n",
      "start": 1702937436959,
      "end": 1702937440807,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937440807,
      "end": 1702937440807,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937440807,
      "end": 1702937440807,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx, jsxs } from \"react/jsx-runtime\";\nimport React, { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Button, Card, Col, Container, Modal, Row } from \"react-bootstrap\";\nconst colors = [\n  {\n    name: \"Primary\",\n    value: \"primary\"\n  },\n  {\n    name: \"Success\",\n    value: \"success\"\n  },\n  {\n    name: \"Danger\",\n    value: \"danger\"\n  },\n  {\n    name: \"Warning\",\n    value: \"warning\"\n  }\n];\nconst sizes = [\n  {\n    name: \"Small\",\n    value: \"sm\"\n  },\n  {\n    name: \"Medium\",\n    value: \"md\"\n  },\n  {\n    name: \"Large\",\n    value: \"lg\"\n  }\n];\nconst DefaultModal = () => {\n  const initOpenModals = () => {\n    let modals = {};\n    colors.forEach((color, index) => {\n      modals = Object.assign({}, modals, { [index]: false });\n    });\n    return modals;\n  };\n  const [openModals, setOpenModals] = useState(() => initOpenModals());\n  const toggle = (index) => {\n    setOpenModals(\n      (openModals2) => Object.assign({}, openModals2, { [index]: !openModals2[index] })\n    );\n  };\n  return /* @__PURE__ */ jsxs(Card, { children: [\n    /* @__PURE__ */ jsxs(Card.Header, { children: [\n      /* @__PURE__ */ jsx(Card.Title, { children: \"Default modal\" }),\n      /* @__PURE__ */ jsx(\"h6\", { className: \"card-subtitle text-muted\", children: \"Default Bootstrap modal.\" })\n    ] }),\n    /* @__PURE__ */ jsxs(Card.Body, { className: \"text-center\", children: [\n      /* @__PURE__ */ jsx(\"p\", { children: \"Use Bootstrap’s JavaScript modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.\" }),\n      colors.map((color, index) => /* @__PURE__ */ jsxs(React.Fragment, { children: [\n        /* @__PURE__ */ jsx(\n          Button,\n          {\n            variant: color.value,\n            onClick: () => toggle(index),\n            className: \"me-1\",\n            children: color.name\n          }\n        ),\n        /* @__PURE__ */ jsxs(Modal, { show: openModals[index], onHide: () => toggle(index), children: [\n          /* @__PURE__ */ jsx(Modal.Header, { closeButton: true, children: \"Modal\" }),\n          /* @__PURE__ */ jsx(Modal.Body, { className: \"text-center m-3\", children: /* @__PURE__ */ jsx(\"p\", { className: \"mb-0\", children: \"Use Bootstrap’s JavaScript modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.\" }) }),\n          /* @__PURE__ */ jsxs(Modal.Footer, { children: [\n            /* @__PURE__ */ jsx(Button, { variant: \"secondary\", onClick: () => toggle(index), children: \"Close\" }),\n            \" \",\n            /* @__PURE__ */ jsx(Button, { variant: color.value, onClick: () => toggle(index), children: \"Save changes\" })\n          ] })\n        ] })\n      ] }, index))\n    ] })\n  ] });\n};\nconst ColoredModal = () => {\n  const initOpenModals = () => {\n    let modals = {};\n    colors.forEach((color, index) => {\n      modals = Object.assign({}, modals, { [index]: false });\n    });\n    return modals;\n  };\n  const [openModals, setOpenModals] = useState(() => initOpenModals());\n  const toggle = (index) => {\n    setOpenModals(\n      (openModals2) => Object.assign({}, openModals2, { [index]: !openModals2[index] })\n    );\n  };\n  return /* @__PURE__ */ jsxs(Card, { children: [\n    /* @__PURE__ */ jsxs(Card.Header, { children: [\n      /* @__PURE__ */ jsx(Card.Title, { children: \"Colored modal\" }),\n      /* @__PURE__ */ jsx(\"h6\", { className: \"card-subtitle text-muted\", children: \"Colored Bootstrap modal.\" })\n    ] }),\n    /* @__PURE__ */ jsxs(Card.Body, { className: \"text-center\", children: [\n      /* @__PURE__ */ jsx(\"p\", { children: \"Use Bootstrap’s JavaScript modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.\" }),\n      colors.map((color, index) => /* @__PURE__ */ jsxs(React.Fragment, { children: [\n        /* @__PURE__ */ jsx(\n          Button,\n          {\n            variant: color.value,\n            onClick: () => toggle(index),\n            className: \"me-1\",\n            children: color.name\n          }\n        ),\n        /* @__PURE__ */ jsxs(\n          Modal,\n          {\n            show: openModals[index],\n            onHide: () => toggle(index),\n            className: \"modal-colored modal-\" + color.value,\n            children: [\n              /* @__PURE__ */ jsx(Modal.Header, { closeButton: true, className: \"text-white\", children: \"Colored modal\" }),\n              /* @__PURE__ */ jsx(Modal.Body, { className: \"text-center m-3\", children: /* @__PURE__ */ jsx(\"p\", { className: \"mb-0 text-white\", children: \"Use Bootstrap’s JavaScript modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.\" }) }),\n              /* @__PURE__ */ jsxs(Modal.Footer, { children: [\n                /* @__PURE__ */ jsx(Button, { variant: \"light\", onClick: () => toggle(index), children: \"Close\" }),\n                \" \",\n                /* @__PURE__ */ jsx(Button, { variant: \"light\", onClick: () => toggle(index), children: \"Save changes\" })\n              ] })\n            ]\n          }\n        )\n      ] }, index))\n    ] })\n  ] });\n};\nconst CenteredModal = () => {\n  const initOpenModals = () => {\n    let modals = {};\n    colors.forEach((color, index) => {\n      modals = Object.assign({}, modals, { [index]: false });\n    });\n    return modals;\n  };\n  const [openModals, setOpenModals] = useState(() => initOpenModals());\n  const toggle = (index) => {\n    setOpenModals(\n      (openModals2) => Object.assign({}, openModals2, { [index]: !openModals2[index] })\n    );\n  };\n  return /* @__PURE__ */ jsxs(Card, { children: [\n    /* @__PURE__ */ jsxs(Card.Header, { children: [\n      /* @__PURE__ */ jsx(Card.Title, { children: \"Centered modal\" }),\n      /* @__PURE__ */ jsx(\"h6\", { className: \"card-subtitle text-muted\", children: \"Vertically centered modal.\" })\n    ] }),\n    /* @__PURE__ */ jsxs(Card.Body, { className: \"text-center\", children: [\n      /* @__PURE__ */ jsx(\"p\", { children: \"Use Bootstrap’s JavaScript modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.\" }),\n      colors.map((color, index) => /* @__PURE__ */ jsxs(React.Fragment, { children: [\n        /* @__PURE__ */ jsx(\n          Button,\n          {\n            variant: color.value,\n            onClick: () => toggle(index),\n            className: \"me-1\",\n            children: color.name\n          }\n        ),\n        /* @__PURE__ */ jsxs(\n          Modal,\n          {\n            show: openModals[index],\n            onHide: () => toggle(index),\n            centered: true,\n            children: [\n              /* @__PURE__ */ jsx(Modal.Header, { closeButton: true, children: \"Centered modal\" }),\n              /* @__PURE__ */ jsx(Modal.Body, { className: \"text-center m-3\", children: /* @__PURE__ */ jsx(\"p\", { className: \"mb-0\", children: \"Use Bootstrap’s JavaScript modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.\" }) }),\n              /* @__PURE__ */ jsxs(Modal.Footer, { children: [\n                /* @__PURE__ */ jsx(Button, { variant: \"secondary\", onClick: () => toggle(index), children: \"Close\" }),\n                \" \",\n                /* @__PURE__ */ jsx(Button, { variant: color.value, onClick: () => toggle(index), children: \"Save changes\" })\n              ] })\n            ]\n          }\n        )\n      ] }, index))\n    ] })\n  ] });\n};\nconst ModalSizes = () => {\n  const initOpenModals = () => {\n    let modals = {};\n    sizes.forEach((color, index) => {\n      modals = Object.assign({}, modals, { [index]: false });\n    });\n    return modals;\n  };\n  const [openModals, setOpenModals] = useState(() => initOpenModals());\n  const toggle = (index) => {\n    setOpenModals(\n      (openModals2) => Object.assign({}, openModals2, { [index]: !openModals2[index] })\n    );\n  };\n  return /* @__PURE__ */ jsxs(Card, { children: [\n    /* @__PURE__ */ jsxs(Card.Header, { children: [\n      /* @__PURE__ */ jsx(Card.Title, { children: \"Modal sizes\" }),\n      /* @__PURE__ */ jsx(\"h6\", { className: \"card-subtitle text-muted\", children: \"These sizes kick in at certain breakpoints to avoid scrollbars on smaller viewports.\" })\n    ] }),\n    /* @__PURE__ */ jsxs(Card.Body, { className: \"text-center\", children: [\n      /* @__PURE__ */ jsx(\"p\", { children: \"Use Bootstrap’s JavaScript modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.\" }),\n      sizes.map((size, index) => /* @__PURE__ */ jsxs(React.Fragment, { children: [\n        /* @__PURE__ */ jsx(\n          Button,\n          {\n            variant: \"primary\",\n            onClick: () => toggle(index),\n            className: \"me-1\",\n            children: size.name\n          }\n        ),\n        /* @__PURE__ */ jsxs(\n          Modal,\n          {\n            show: openModals[index],\n            onHide: () => toggle(index),\n            size: size.value,\n            children: [\n              /* @__PURE__ */ jsxs(Modal.Header, { closeButton: true, children: [\n                size.name,\n                \" modal\"\n              ] }),\n              /* @__PURE__ */ jsx(Modal.Body, { className: \"text-center m-3\", children: /* @__PURE__ */ jsx(\"p\", { className: \"mb-0\", children: \"Use Bootstrap’s JavaScript modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.\" }) }),\n              /* @__PURE__ */ jsxs(Modal.Footer, { children: [\n                /* @__PURE__ */ jsx(Button, { variant: \"secondary\", onClick: () => toggle(index), children: \"Close\" }),\n                \" \",\n                /* @__PURE__ */ jsx(Button, { variant: \"primary\", onClick: () => toggle(index), children: \"Save changes\" })\n              ] })\n            ]\n          }\n        )\n      ] }, index))\n    ] })\n  ] });\n};\nconst Modals = () => /* @__PURE__ */ jsxs(React.Fragment, { children: [\n  /* @__PURE__ */ jsx(Helmet, { title: \"Modals\" }),\n  /* @__PURE__ */ jsxs(Container, { fluid: true, className: \"p-0\", children: [\n    /* @__PURE__ */ jsx(\"h1\", { className: \"h3 mb-3\", children: \"Modals\" }),\n    /* @__PURE__ */ jsxs(Row, { children: [\n      /* @__PURE__ */ jsx(Col, { lg: \"6\", children: /* @__PURE__ */ jsx(DefaultModal, {}) }),\n      /* @__PURE__ */ jsx(Col, { lg: \"6\", children: /* @__PURE__ */ jsx(ColoredModal, {}) }),\n      /* @__PURE__ */ jsx(Col, { lg: \"6\", children: /* @__PURE__ */ jsx(CenteredModal, {}) }),\n      /* @__PURE__ */ jsx(Col, { lg: \"6\", children: /* @__PURE__ */ jsx(ModalSizes, {}) })\n    ] })\n  ] })\n] });\nexport default Modals;\n",
      "start": 1702937440807,
      "end": 1702937440825,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/home/zepor/ssweb/frontend-container/src/pages/ui/Modals.jsx"
        ],
        "sourcesContent": [
          "import React, { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\n\r\nimport { Button, Card, Col, Container, Modal, Row } from \"react-bootstrap\";\r\n\r\nconst colors = [\r\n  {\r\n    name: \"Primary\",\r\n    value: \"primary\",\r\n  },\r\n  {\r\n    name: \"Success\",\r\n    value: \"success\",\r\n  },\r\n  {\r\n    name: \"Danger\",\r\n    value: \"danger\",\r\n  },\r\n  {\r\n    name: \"Warning\",\r\n    value: \"warning\",\r\n  },\r\n];\r\n\r\nconst sizes = [\r\n  {\r\n    name: \"Small\",\r\n    value: \"sm\",\r\n  },\r\n  {\r\n    name: \"Medium\",\r\n    value: \"md\",\r\n  },\r\n  {\r\n    name: \"Large\",\r\n    value: \"lg\",\r\n  },\r\n];\r\n\r\nconst DefaultModal = () => {\r\n  const initOpenModals = () => {\r\n    let modals = {};\r\n\r\n    colors.forEach((color, index) => {\r\n      modals = Object.assign({}, modals, { [index]: false });\r\n    });\r\n\r\n    return modals;\r\n  };\r\n\r\n  const [openModals, setOpenModals] = useState(() => initOpenModals());\r\n\r\n  const toggle = (index) => {\r\n    // Toggle selected element\r\n    setOpenModals((openModals) =>\r\n      Object.assign({}, openModals, { [index]: !openModals[index] })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Card.Title>Default modal</Card.Title>\r\n        <h6 className=\"card-subtitle text-muted\">Default Bootstrap modal.</h6>\r\n      </Card.Header>\r\n      <Card.Body className=\"text-center\">\r\n        <p>\r\n          Use Bootstrap’s JavaScript modal plugin to add dialogs to your site\r\n          for lightboxes, user notifications, or completely custom content.\r\n        </p>\r\n\r\n        {colors.map((color, index) => (\r\n          <React.Fragment key={index}>\r\n            <Button\r\n              variant={color.value}\r\n              onClick={() => toggle(index)}\r\n              className=\"me-1\"\r\n            >\r\n              {color.name}\r\n            </Button>\r\n            <Modal show={openModals[index]} onHide={() => toggle(index)}>\r\n              <Modal.Header closeButton>Modal</Modal.Header>\r\n              <Modal.Body className=\"text-center m-3\">\r\n                <p className=\"mb-0\">\r\n                  Use Bootstrap’s JavaScript modal plugin to add dialogs to your\r\n                  site for lightboxes, user notifications, or completely custom\r\n                  content.\r\n                </p>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={() => toggle(index)}>\r\n                  Close\r\n                </Button>{\" \"}\r\n                <Button variant={color.value} onClick={() => toggle(index)}>\r\n                  Save changes\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </React.Fragment>\r\n        ))}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst ColoredModal = () => {\r\n  const initOpenModals = () => {\r\n    let modals = {};\r\n\r\n    colors.forEach((color, index) => {\r\n      modals = Object.assign({}, modals, { [index]: false });\r\n    });\r\n\r\n    return modals;\r\n  };\r\n\r\n  const [openModals, setOpenModals] = useState(() => initOpenModals());\r\n\r\n  const toggle = (index) => {\r\n    // Toggle selected element\r\n    setOpenModals((openModals) =>\r\n      Object.assign({}, openModals, { [index]: !openModals[index] })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Card.Title>Colored modal</Card.Title>\r\n        <h6 className=\"card-subtitle text-muted\">Colored Bootstrap modal.</h6>\r\n      </Card.Header>\r\n      <Card.Body className=\"text-center\">\r\n        <p>\r\n          Use Bootstrap’s JavaScript modal plugin to add dialogs to your site\r\n          for lightboxes, user notifications, or completely custom content.\r\n        </p>\r\n\r\n        {colors.map((color, index) => (\r\n          <React.Fragment key={index}>\r\n            <Button\r\n              variant={color.value}\r\n              onClick={() => toggle(index)}\r\n              className=\"me-1\"\r\n            >\r\n              {color.name}\r\n            </Button>\r\n            <Modal\r\n              show={openModals[index]}\r\n              onHide={() => toggle(index)}\r\n              className={\"modal-colored modal-\" + color.value}\r\n            >\r\n              <Modal.Header closeButton className=\"text-white\">\r\n                Colored modal\r\n              </Modal.Header>\r\n              <Modal.Body className=\"text-center m-3\">\r\n                <p className=\"mb-0 text-white\">\r\n                  Use Bootstrap’s JavaScript modal plugin to add dialogs to your\r\n                  site for lightboxes, user notifications, or completely custom\r\n                  content.\r\n                </p>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"light\" onClick={() => toggle(index)}>\r\n                  Close\r\n                </Button>{\" \"}\r\n                <Button variant=\"light\" onClick={() => toggle(index)}>\r\n                  Save changes\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </React.Fragment>\r\n        ))}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst CenteredModal = () => {\r\n  const initOpenModals = () => {\r\n    let modals = {};\r\n\r\n    colors.forEach((color, index) => {\r\n      modals = Object.assign({}, modals, { [index]: false });\r\n    });\r\n\r\n    return modals;\r\n  };\r\n\r\n  const [openModals, setOpenModals] = useState(() => initOpenModals());\r\n\r\n  const toggle = (index) => {\r\n    // Toggle selected element\r\n    setOpenModals((openModals) =>\r\n      Object.assign({}, openModals, { [index]: !openModals[index] })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Card.Title>Centered modal</Card.Title>\r\n        <h6 className=\"card-subtitle text-muted\">Vertically centered modal.</h6>\r\n      </Card.Header>\r\n      <Card.Body className=\"text-center\">\r\n        <p>\r\n          Use Bootstrap’s JavaScript modal plugin to add dialogs to your site\r\n          for lightboxes, user notifications, or completely custom content.\r\n        </p>\r\n\r\n        {colors.map((color, index) => (\r\n          <React.Fragment key={index}>\r\n            <Button\r\n              variant={color.value}\r\n              onClick={() => toggle(index)}\r\n              className=\"me-1\"\r\n            >\r\n              {color.name}\r\n            </Button>\r\n            <Modal\r\n              show={openModals[index]}\r\n              onHide={() => toggle(index)}\r\n              centered\r\n            >\r\n              <Modal.Header closeButton>Centered modal</Modal.Header>\r\n              <Modal.Body className=\"text-center m-3\">\r\n                <p className=\"mb-0\">\r\n                  Use Bootstrap’s JavaScript modal plugin to add dialogs to your\r\n                  site for lightboxes, user notifications, or completely custom\r\n                  content.\r\n                </p>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={() => toggle(index)}>\r\n                  Close\r\n                </Button>{\" \"}\r\n                <Button variant={color.value} onClick={() => toggle(index)}>\r\n                  Save changes\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </React.Fragment>\r\n        ))}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst ModalSizes = () => {\r\n  const initOpenModals = () => {\r\n    let modals = {};\r\n\r\n    sizes.forEach((color, index) => {\r\n      modals = Object.assign({}, modals, { [index]: false });\r\n    });\r\n\r\n    return modals;\r\n  };\r\n\r\n  const [openModals, setOpenModals] = useState(() => initOpenModals());\r\n\r\n  const toggle = (index) => {\r\n    // Toggle selected element\r\n    setOpenModals((openModals) =>\r\n      Object.assign({}, openModals, { [index]: !openModals[index] })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Card.Title>Modal sizes</Card.Title>\r\n        <h6 className=\"card-subtitle text-muted\">\r\n          These sizes kick in at certain breakpoints to avoid scrollbars on\r\n          smaller viewports.\r\n        </h6>\r\n      </Card.Header>\r\n      <Card.Body className=\"text-center\">\r\n        <p>\r\n          Use Bootstrap’s JavaScript modal plugin to add dialogs to your site\r\n          for lightboxes, user notifications, or completely custom content.\r\n        </p>\r\n\r\n        {sizes.map((size, index) => (\r\n          <React.Fragment key={index}>\r\n            <Button\r\n              variant=\"primary\"\r\n              onClick={() => toggle(index)}\r\n              className=\"me-1\"\r\n            >\r\n              {size.name}\r\n            </Button>\r\n            <Modal\r\n              show={openModals[index]}\r\n              onHide={() => toggle(index)}\r\n              size={size.value}\r\n            >\r\n              <Modal.Header closeButton>{size.name} modal</Modal.Header>\r\n              <Modal.Body className=\"text-center m-3\">\r\n                <p className=\"mb-0\">\r\n                  Use Bootstrap’s JavaScript modal plugin to add dialogs to your\r\n                  site for lightboxes, user notifications, or completely custom\r\n                  content.\r\n                </p>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={() => toggle(index)}>\r\n                  Close\r\n                </Button>{\" \"}\r\n                <Button variant=\"primary\" onClick={() => toggle(index)}>\r\n                  Save changes\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </React.Fragment>\r\n        ))}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst Modals = () => (\r\n  <React.Fragment>\r\n    <Helmet title=\"Modals\" />\r\n    <Container fluid className=\"p-0\">\r\n      <h1 className=\"h3 mb-3\">Modals</h1>\r\n\r\n      <Row>\r\n        <Col lg=\"6\">\r\n          <DefaultModal />\r\n        </Col>\r\n        <Col lg=\"6\">\r\n          <ColoredModal />\r\n        </Col>\r\n        <Col lg=\"6\">\r\n          <CenteredModal />\r\n        </Col>\r\n        <Col lg=\"6\">\r\n          <ModalSizes />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default Modals;\r\n"
        ],
        "mappings": "AA6DM,SACE,KADF;AA7DN,OAAO,SAAS,gBAAgB;AAChC,SAAS,cAAc;AAEvB,SAAS,QAAQ,MAAM,KAAK,WAAW,OAAO,WAAW;AAEzD,MAAM,SAAS;AAAA,EACb;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,EACT;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,EACT;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,EACT;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,EACT;AACF;AAEA,MAAM,QAAQ;AAAA,EACZ;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,EACT;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,EACT;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,EACT;AACF;AAEA,MAAM,eAAe,MAAM;AACzB,QAAM,iBAAiB,MAAM;AAC3B,QAAI,SAAS,CAAC;AAEd,WAAO,QAAQ,CAAC,OAAO,UAAU;AAC/B,eAAS,OAAO,OAAO,CAAC,GAAG,QAAQ,EAAE,CAAC,KAAK,GAAG,MAAM,CAAC;AAAA,IACvD,CAAC;AAED,WAAO;AAAA,EACT;AAEA,QAAM,CAAC,YAAY,aAAa,IAAI,SAAS,MAAM,eAAe,CAAC;AAEnE,QAAM,SAAS,CAAC,UAAU;AAExB;AAAA,MAAc,CAACA,gBACb,OAAO,OAAO,CAAC,GAAGA,aAAY,EAAE,CAAC,KAAK,GAAG,CAACA,YAAW,KAAK,EAAE,CAAC;AAAA,IAC/D;AAAA,EACF;AAEA,SACE,qBAAC,QACC;AAAA,yBAAC,KAAK,QAAL,EACC;AAAA,0BAAC,KAAK,OAAL,EAAW,2BAAa;AAAA,MACzB,oBAAC,QAAG,WAAU,4BAA2B,sCAAwB;AAAA,OACnE;AAAA,IACA,qBAAC,KAAK,MAAL,EAAU,WAAU,eACnB;AAAA,0BAAC,OAAE,mJAGH;AAAA,MAEC,OAAO,IAAI,CAAC,OAAO,UAClB,qBAAC,MAAM,UAAN,EACC;AAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAS,MAAM;AAAA,YACf,SAAS,MAAM,OAAO,KAAK;AAAA,YAC3B,WAAU;AAAA,YAET,gBAAM;AAAA;AAAA,QACT;AAAA,QACA,qBAAC,SAAM,MAAM,WAAW,KAAK,GAAG,QAAQ,MAAM,OAAO,KAAK,GACxD;AAAA,8BAAC,MAAM,QAAN,EAAa,aAAW,MAAC,mBAAK;AAAA,UAC/B,oBAAC,MAAM,MAAN,EAAW,WAAU,mBACpB,8BAAC,OAAE,WAAU,QAAO,mJAIpB,GACF;AAAA,UACA,qBAAC,MAAM,QAAN,EACC;AAAA,gCAAC,UAAO,SAAQ,aAAY,SAAS,MAAM,OAAO,KAAK,GAAG,mBAE1D;AAAA,YAAU;AAAA,YACV,oBAAC,UAAO,SAAS,MAAM,OAAO,SAAS,MAAM,OAAO,KAAK,GAAG,0BAE5D;AAAA,aACF;AAAA,WACF;AAAA,WAzBmB,KA0BrB,CACD;AAAA,OACH;AAAA,KACF;AAEJ;AAEA,MAAM,eAAe,MAAM;AACzB,QAAM,iBAAiB,MAAM;AAC3B,QAAI,SAAS,CAAC;AAEd,WAAO,QAAQ,CAAC,OAAO,UAAU;AAC/B,eAAS,OAAO,OAAO,CAAC,GAAG,QAAQ,EAAE,CAAC,KAAK,GAAG,MAAM,CAAC;AAAA,IACvD,CAAC;AAED,WAAO;AAAA,EACT;AAEA,QAAM,CAAC,YAAY,aAAa,IAAI,SAAS,MAAM,eAAe,CAAC;AAEnE,QAAM,SAAS,CAAC,UAAU;AAExB;AAAA,MAAc,CAACA,gBACb,OAAO,OAAO,CAAC,GAAGA,aAAY,EAAE,CAAC,KAAK,GAAG,CAACA,YAAW,KAAK,EAAE,CAAC;AAAA,IAC/D;AAAA,EACF;AAEA,SACE,qBAAC,QACC;AAAA,yBAAC,KAAK,QAAL,EACC;AAAA,0BAAC,KAAK,OAAL,EAAW,2BAAa;AAAA,MACzB,oBAAC,QAAG,WAAU,4BAA2B,sCAAwB;AAAA,OACnE;AAAA,IACA,qBAAC,KAAK,MAAL,EAAU,WAAU,eACnB;AAAA,0BAAC,OAAE,mJAGH;AAAA,MAEC,OAAO,IAAI,CAAC,OAAO,UAClB,qBAAC,MAAM,UAAN,EACC;AAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAS,MAAM;AAAA,YACf,SAAS,MAAM,OAAO,KAAK;AAAA,YAC3B,WAAU;AAAA,YAET,gBAAM;AAAA;AAAA,QACT;AAAA,QACA;AAAA,UAAC;AAAA;AAAA,YACC,MAAM,WAAW,KAAK;AAAA,YACtB,QAAQ,MAAM,OAAO,KAAK;AAAA,YAC1B,WAAW,yBAAyB,MAAM;AAAA,YAE1C;AAAA,kCAAC,MAAM,QAAN,EAAa,aAAW,MAAC,WAAU,cAAa,2BAEjD;AAAA,cACA,oBAAC,MAAM,MAAN,EAAW,WAAU,mBACpB,8BAAC,OAAE,WAAU,mBAAkB,mJAI/B,GACF;AAAA,cACA,qBAAC,MAAM,QAAN,EACC;AAAA,oCAAC,UAAO,SAAQ,SAAQ,SAAS,MAAM,OAAO,KAAK,GAAG,mBAEtD;AAAA,gBAAU;AAAA,gBACV,oBAAC,UAAO,SAAQ,SAAQ,SAAS,MAAM,OAAO,KAAK,GAAG,0BAEtD;AAAA,iBACF;AAAA;AAAA;AAAA,QACF;AAAA,WA/BmB,KAgCrB,CACD;AAAA,OACH;AAAA,KACF;AAEJ;AAEA,MAAM,gBAAgB,MAAM;AAC1B,QAAM,iBAAiB,MAAM;AAC3B,QAAI,SAAS,CAAC;AAEd,WAAO,QAAQ,CAAC,OAAO,UAAU;AAC/B,eAAS,OAAO,OAAO,CAAC,GAAG,QAAQ,EAAE,CAAC,KAAK,GAAG,MAAM,CAAC;AAAA,IACvD,CAAC;AAED,WAAO;AAAA,EACT;AAEA,QAAM,CAAC,YAAY,aAAa,IAAI,SAAS,MAAM,eAAe,CAAC;AAEnE,QAAM,SAAS,CAAC,UAAU;AAExB;AAAA,MAAc,CAACA,gBACb,OAAO,OAAO,CAAC,GAAGA,aAAY,EAAE,CAAC,KAAK,GAAG,CAACA,YAAW,KAAK,EAAE,CAAC;AAAA,IAC/D;AAAA,EACF;AAEA,SACE,qBAAC,QACC;AAAA,yBAAC,KAAK,QAAL,EACC;AAAA,0BAAC,KAAK,OAAL,EAAW,4BAAc;AAAA,MAC1B,oBAAC,QAAG,WAAU,4BAA2B,wCAA0B;AAAA,OACrE;AAAA,IACA,qBAAC,KAAK,MAAL,EAAU,WAAU,eACnB;AAAA,0BAAC,OAAE,mJAGH;AAAA,MAEC,OAAO,IAAI,CAAC,OAAO,UAClB,qBAAC,MAAM,UAAN,EACC;AAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAS,MAAM;AAAA,YACf,SAAS,MAAM,OAAO,KAAK;AAAA,YAC3B,WAAU;AAAA,YAET,gBAAM;AAAA;AAAA,QACT;AAAA,QACA;AAAA,UAAC;AAAA;AAAA,YACC,MAAM,WAAW,KAAK;AAAA,YACtB,QAAQ,MAAM,OAAO,KAAK;AAAA,YAC1B,UAAQ;AAAA,YAER;AAAA,kCAAC,MAAM,QAAN,EAAa,aAAW,MAAC,4BAAc;AAAA,cACxC,oBAAC,MAAM,MAAN,EAAW,WAAU,mBACpB,8BAAC,OAAE,WAAU,QAAO,mJAIpB,GACF;AAAA,cACA,qBAAC,MAAM,QAAN,EACC;AAAA,oCAAC,UAAO,SAAQ,aAAY,SAAS,MAAM,OAAO,KAAK,GAAG,mBAE1D;AAAA,gBAAU;AAAA,gBACV,oBAAC,UAAO,SAAS,MAAM,OAAO,SAAS,MAAM,OAAO,KAAK,GAAG,0BAE5D;AAAA,iBACF;AAAA;AAAA;AAAA,QACF;AAAA,WA7BmB,KA8BrB,CACD;AAAA,OACH;AAAA,KACF;AAEJ;AAEA,MAAM,aAAa,MAAM;AACvB,QAAM,iBAAiB,MAAM;AAC3B,QAAI,SAAS,CAAC;AAEd,UAAM,QAAQ,CAAC,OAAO,UAAU;AAC9B,eAAS,OAAO,OAAO,CAAC,GAAG,QAAQ,EAAE,CAAC,KAAK,GAAG,MAAM,CAAC;AAAA,IACvD,CAAC;AAED,WAAO;AAAA,EACT;AAEA,QAAM,CAAC,YAAY,aAAa,IAAI,SAAS,MAAM,eAAe,CAAC;AAEnE,QAAM,SAAS,CAAC,UAAU;AAExB;AAAA,MAAc,CAACA,gBACb,OAAO,OAAO,CAAC,GAAGA,aAAY,EAAE,CAAC,KAAK,GAAG,CAACA,YAAW,KAAK,EAAE,CAAC;AAAA,IAC/D;AAAA,EACF;AAEA,SACE,qBAAC,QACC;AAAA,yBAAC,KAAK,QAAL,EACC;AAAA,0BAAC,KAAK,OAAL,EAAW,yBAAW;AAAA,MACvB,oBAAC,QAAG,WAAU,4BAA2B,kGAGzC;AAAA,OACF;AAAA,IACA,qBAAC,KAAK,MAAL,EAAU,WAAU,eACnB;AAAA,0BAAC,OAAE,mJAGH;AAAA,MAEC,MAAM,IAAI,CAAC,MAAM,UAChB,qBAAC,MAAM,UAAN,EACC;AAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAQ;AAAA,YACR,SAAS,MAAM,OAAO,KAAK;AAAA,YAC3B,WAAU;AAAA,YAET,eAAK;AAAA;AAAA,QACR;AAAA,QACA;AAAA,UAAC;AAAA;AAAA,YACC,MAAM,WAAW,KAAK;AAAA,YACtB,QAAQ,MAAM,OAAO,KAAK;AAAA,YAC1B,MAAM,KAAK;AAAA,YAEX;AAAA,mCAAC,MAAM,QAAN,EAAa,aAAW,MAAE;AAAA,qBAAK;AAAA,gBAAK;AAAA,iBAAM;AAAA,cAC3C,oBAAC,MAAM,MAAN,EAAW,WAAU,mBACpB,8BAAC,OAAE,WAAU,QAAO,mJAIpB,GACF;AAAA,cACA,qBAAC,MAAM,QAAN,EACC;AAAA,oCAAC,UAAO,SAAQ,aAAY,SAAS,MAAM,OAAO,KAAK,GAAG,mBAE1D;AAAA,gBAAU;AAAA,gBACV,oBAAC,UAAO,SAAQ,WAAU,SAAS,MAAM,OAAO,KAAK,GAAG,0BAExD;AAAA,iBACF;AAAA;AAAA;AAAA,QACF;AAAA,WA7BmB,KA8BrB,CACD;AAAA,OACH;AAAA,KACF;AAEJ;AAEA,MAAM,SAAS,MACb,qBAAC,MAAM,UAAN,EACC;AAAA,sBAAC,UAAO,OAAM,UAAS;AAAA,EACvB,qBAAC,aAAU,OAAK,MAAC,WAAU,OACzB;AAAA,wBAAC,QAAG,WAAU,WAAU,oBAAM;AAAA,IAE9B,qBAAC,OACC;AAAA,0BAAC,OAAI,IAAG,KACN,8BAAC,gBAAa,GAChB;AAAA,MACA,oBAAC,OAAI,IAAG,KACN,8BAAC,gBAAa,GAChB;AAAA,MACA,oBAAC,OAAI,IAAG,KACN,8BAAC,iBAAc,GACjB;AAAA,MACA,oBAAC,OAAI,IAAG,KACN,8BAAC,cAAW,GACd;AAAA,OACF;AAAA,KACF;AAAA,GACF;AAGF,eAAe;",
        "names": [
          "openModals"
        ]
      }
    },
    {
      "name": "vite:json",
      "start": 1702937440825,
      "end": 1702937440825,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937440825,
      "end": 1702937440825,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937440825,
      "end": 1702937440825,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937440825,
      "end": 1702937440825,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937440825,
      "end": 1702937440825,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937440825,
      "end": 1702937440825,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937440825,
      "end": 1702937440825,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937440825,
      "end": 1702937440825,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937440825,
      "end": 1702937440825,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937440825,
      "end": 1702937440825,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937440825,
      "end": 1702937440825,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937440825,
      "end": 1702937440825,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937440825,
      "end": 1702937440825,
      "order": "normal"
    }
  ]
}
