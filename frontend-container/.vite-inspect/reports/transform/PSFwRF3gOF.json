{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { doTypesOverlap } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment(node) {\n      const fragType = context.getType();\n      const parentType = context.getParentType();\n\n      if (\n        isCompositeType(fragType) &&\n        isCompositeType(parentType) &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    FragmentSpread(node) {\n      const fragName = node.name.value;\n      const fragType = getFragmentType(context, fragName);\n      const parentType = context.getParentType();\n\n      if (\n        fragType &&\n        parentType &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${fragName}\" cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getFragmentType(context, name) {\n  const frag = context.getFragment(name);\n\n  if (frag) {\n    const type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n",
      "start": 1702937443077,
      "end": 1702937443096,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937443096,
      "end": 1702937443096,
      "order": "normal"
    }
  ]
}
