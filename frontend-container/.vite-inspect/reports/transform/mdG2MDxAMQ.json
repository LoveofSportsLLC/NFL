{
  "resolvedId": "/home/zepor/ssweb/frontend-container/src/pages/tables/RowExpanding.jsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useTable, useExpanded } from \"react-table\";\r\n\r\nimport { Card, Container, Table } from \"react-bootstrap\";\r\nimport { PlusCircle, MinusCircle } from \"react-feather\";\r\n\r\nimport { tableData, tableColumns } from \"./data.js\";\r\n\r\nconst RowExpandingTable = ({ columns: userColumns, data }) => {\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable(\r\n      {\r\n        columns: userColumns,\r\n        data,\r\n      },\r\n      useExpanded // Use the useExpanded plugin hook\r\n    );\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Card.Title>Row Expanding</Card.Title>\r\n        <h6 className=\"card-subtitle text-muted\">\r\n          Expandable rows by react-table\r\n        </h6>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Table striped bordered {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th {...column.getHeaderProps()}>\r\n                    {column.render(\"Header\")}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst tableColumnsExpandable = [\r\n  {\r\n    // Build our expander column\r\n    id: \"expander\", // Make sure it has an ID\r\n    Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\r\n      <span {...getToggleAllRowsExpandedProps()}>\r\n        {isAllRowsExpanded ? (\r\n          <MinusCircle className=\"feather\" />\r\n        ) : (\r\n          <PlusCircle className=\"feather\" />\r\n        )}\r\n      </span>\r\n    ),\r\n    Cell: ({ row }) =>\r\n      // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\r\n      // to build the toggle for expanding a row\r\n      row.canExpand ? (\r\n        <span\r\n          {...row.getToggleRowExpandedProps({\r\n            style: {\r\n              // We can even use the row.depth property\r\n              // and paddingLeft to indicate the depth\r\n              // of the row\r\n              paddingLeft: `${row.depth * 2}rem`,\r\n            },\r\n          })}\r\n        >\r\n          {row.isExpanded ? (\r\n            <MinusCircle className=\"feather\" />\r\n          ) : (\r\n            <PlusCircle className=\"feather\" />\r\n          )}\r\n        </span>\r\n      ) : null,\r\n  },\r\n  ...tableColumns,\r\n];\r\n\r\nconst RowExpanding = () => (\r\n  <React.Fragment>\r\n    <Helmet title=\"Row Expanding\" />\r\n    <Container fluid className=\"p-0\">\r\n      <h1 className=\"h3 mb-3\">Row Expanding</h1>\r\n\r\n      <RowExpandingTable\r\n        columns={tableColumnsExpandable}\r\n        data={tableData.slice(0, 10)}\r\n      />\r\n    </Container>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default RowExpanding;\r\n",
      "start": 1702937440806,
      "end": 1702937440868,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937440868,
      "end": 1702937440868,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937440868,
      "end": 1702937440868,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx, jsxs } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useTable, useExpanded } from \"react-table\";\nimport { Card, Container, Table } from \"react-bootstrap\";\nimport { PlusCircle, MinusCircle } from \"react-feather\";\nimport { tableData, tableColumns } from \"./data.js\";\nconst RowExpandingTable = ({ columns: userColumns, data }) => {\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable(\n    {\n      columns: userColumns,\n      data\n    },\n    useExpanded\n    // Use the useExpanded plugin hook\n  );\n  return /* @__PURE__ */ jsxs(Card, { children: [\n    /* @__PURE__ */ jsxs(Card.Header, { children: [\n      /* @__PURE__ */ jsx(Card.Title, { children: \"Row Expanding\" }),\n      /* @__PURE__ */ jsx(\"h6\", { className: \"card-subtitle text-muted\", children: \"Expandable rows by react-table\" })\n    ] }),\n    /* @__PURE__ */ jsx(Card.Body, { children: /* @__PURE__ */ jsxs(Table, { striped: true, bordered: true, ...getTableProps(), children: [\n      /* @__PURE__ */ jsx(\"thead\", { children: headerGroups.map((headerGroup) => /* @__PURE__ */ jsx(\"tr\", { ...headerGroup.getHeaderGroupProps(), children: headerGroup.headers.map((column) => /* @__PURE__ */ jsx(\"th\", { ...column.getHeaderProps(), children: column.render(\"Header\") })) })) }),\n      /* @__PURE__ */ jsx(\"tbody\", { ...getTableBodyProps(), children: rows.map((row, i) => {\n        prepareRow(row);\n        return /* @__PURE__ */ jsx(\"tr\", { ...row.getRowProps(), children: row.cells.map((cell) => {\n          return /* @__PURE__ */ jsx(\"td\", { ...cell.getCellProps(), children: cell.render(\"Cell\") });\n        }) });\n      }) })\n    ] }) })\n  ] });\n};\nconst tableColumnsExpandable = [\n  {\n    // Build our expander column\n    id: \"expander\",\n    // Make sure it has an ID\n    Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => /* @__PURE__ */ jsx(\"span\", { ...getToggleAllRowsExpandedProps(), children: isAllRowsExpanded ? /* @__PURE__ */ jsx(MinusCircle, { className: \"feather\" }) : /* @__PURE__ */ jsx(PlusCircle, { className: \"feather\" }) }),\n    Cell: ({ row }) => (\n      // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n      // to build the toggle for expanding a row\n      row.canExpand ? /* @__PURE__ */ jsx(\n        \"span\",\n        {\n          ...row.getToggleRowExpandedProps({\n            style: {\n              // We can even use the row.depth property\n              // and paddingLeft to indicate the depth\n              // of the row\n              paddingLeft: `${row.depth * 2}rem`\n            }\n          }),\n          children: row.isExpanded ? /* @__PURE__ */ jsx(MinusCircle, { className: \"feather\" }) : /* @__PURE__ */ jsx(PlusCircle, { className: \"feather\" })\n        }\n      ) : null\n    )\n  },\n  ...tableColumns\n];\nconst RowExpanding = () => /* @__PURE__ */ jsxs(React.Fragment, { children: [\n  /* @__PURE__ */ jsx(Helmet, { title: \"Row Expanding\" }),\n  /* @__PURE__ */ jsxs(Container, { fluid: true, className: \"p-0\", children: [\n    /* @__PURE__ */ jsx(\"h1\", { className: \"h3 mb-3\", children: \"Row Expanding\" }),\n    /* @__PURE__ */ jsx(\n      RowExpandingTable,\n      {\n        columns: tableColumnsExpandable,\n        data: tableData.slice(0, 10)\n      }\n    )\n  ] })\n] });\nexport default RowExpanding;\n",
      "start": 1702937440868,
      "end": 1702937440873,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/home/zepor/ssweb/frontend-container/src/pages/tables/RowExpanding.jsx"
        ],
        "sourcesContent": [
          "import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useTable, useExpanded } from \"react-table\";\r\n\r\nimport { Card, Container, Table } from \"react-bootstrap\";\r\nimport { PlusCircle, MinusCircle } from \"react-feather\";\r\n\r\nimport { tableData, tableColumns } from \"./data.js\";\r\n\r\nconst RowExpandingTable = ({ columns: userColumns, data }) => {\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable(\r\n      {\r\n        columns: userColumns,\r\n        data,\r\n      },\r\n      useExpanded // Use the useExpanded plugin hook\r\n    );\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Card.Title>Row Expanding</Card.Title>\r\n        <h6 className=\"card-subtitle text-muted\">\r\n          Expandable rows by react-table\r\n        </h6>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Table striped bordered {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th {...column.getHeaderProps()}>\r\n                    {column.render(\"Header\")}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst tableColumnsExpandable = [\r\n  {\r\n    // Build our expander column\r\n    id: \"expander\", // Make sure it has an ID\r\n    Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\r\n      <span {...getToggleAllRowsExpandedProps()}>\r\n        {isAllRowsExpanded ? (\r\n          <MinusCircle className=\"feather\" />\r\n        ) : (\r\n          <PlusCircle className=\"feather\" />\r\n        )}\r\n      </span>\r\n    ),\r\n    Cell: ({ row }) =>\r\n      // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\r\n      // to build the toggle for expanding a row\r\n      row.canExpand ? (\r\n        <span\r\n          {...row.getToggleRowExpandedProps({\r\n            style: {\r\n              // We can even use the row.depth property\r\n              // and paddingLeft to indicate the depth\r\n              // of the row\r\n              paddingLeft: `${row.depth * 2}rem`,\r\n            },\r\n          })}\r\n        >\r\n          {row.isExpanded ? (\r\n            <MinusCircle className=\"feather\" />\r\n          ) : (\r\n            <PlusCircle className=\"feather\" />\r\n          )}\r\n        </span>\r\n      ) : null,\r\n  },\r\n  ...tableColumns,\r\n];\r\n\r\nconst RowExpanding = () => (\r\n  <React.Fragment>\r\n    <Helmet title=\"Row Expanding\" />\r\n    <Container fluid className=\"p-0\">\r\n      <h1 className=\"h3 mb-3\">Row Expanding</h1>\r\n\r\n      <RowExpandingTable\r\n        columns={tableColumnsExpandable}\r\n        data={tableData.slice(0, 10)}\r\n      />\r\n    </Container>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default RowExpanding;\r\n"
        ],
        "mappings": "AAqBM,SACE,KADF;AArBN,OAAO,WAAW;AAClB,SAAS,cAAc;AACvB,SAAS,UAAU,mBAAmB;AAEtC,SAAS,MAAM,WAAW,aAAa;AACvC,SAAS,YAAY,mBAAmB;AAExC,SAAS,WAAW,oBAAoB;AAExC,MAAM,oBAAoB,CAAC,EAAE,SAAS,aAAa,KAAK,MAAM;AAC5D,QAAM,EAAE,eAAe,mBAAmB,cAAc,MAAM,WAAW,IACvE;AAAA,IACE;AAAA,MACE,SAAS;AAAA,MACT;AAAA,IACF;AAAA,IACA;AAAA;AAAA,EACF;AAEF,SACE,qBAAC,QACC;AAAA,yBAAC,KAAK,QAAL,EACC;AAAA,0BAAC,KAAK,OAAL,EAAW,2BAAa;AAAA,MACzB,oBAAC,QAAG,WAAU,4BAA2B,4CAEzC;AAAA,OACF;AAAA,IACA,oBAAC,KAAK,MAAL,EACC,+BAAC,SAAM,SAAO,MAAC,UAAQ,MAAE,GAAG,cAAc,GACxC;AAAA,0BAAC,WACE,uBAAa,IAAI,CAAC,gBACjB,oBAAC,QAAI,GAAG,YAAY,oBAAoB,GACrC,sBAAY,QAAQ,IAAI,CAAC,WACxB,oBAAC,QAAI,GAAG,OAAO,eAAe,GAC3B,iBAAO,OAAO,QAAQ,GACzB,CACD,GACH,CACD,GACH;AAAA,MACA,oBAAC,WAAO,GAAG,kBAAkB,GAC1B,eAAK,IAAI,CAAC,KAAK,MAAM;AACpB,mBAAW,GAAG;AACd,eACE,oBAAC,QAAI,GAAG,IAAI,YAAY,GACrB,cAAI,MAAM,IAAI,CAAC,SAAS;AACvB,iBACE,oBAAC,QAAI,GAAG,KAAK,aAAa,GAAI,eAAK,OAAO,MAAM,GAAE;AAAA,QAEtD,CAAC,GACH;AAAA,MAEJ,CAAC,GACH;AAAA,OACF,GACF;AAAA,KACF;AAEJ;AAEA,MAAM,yBAAyB;AAAA,EAC7B;AAAA;AAAA,IAEE,IAAI;AAAA;AAAA,IACJ,QAAQ,CAAC,EAAE,+BAA+B,kBAAkB,MAC1D,oBAAC,UAAM,GAAG,8BAA8B,GACrC,8BACC,oBAAC,eAAY,WAAU,WAAU,IAEjC,oBAAC,cAAW,WAAU,WAAU,GAEpC;AAAA,IAEF,MAAM,CAAC,EAAE,IAAI;AAAA;AAAA;AAAA,MAGX,IAAI,YACF;AAAA,QAAC;AAAA;AAAA,UACE,GAAG,IAAI,0BAA0B;AAAA,YAChC,OAAO;AAAA;AAAA;AAAA;AAAA,cAIL,aAAa,GAAG,IAAI,QAAQ,CAAC;AAAA,YAC/B;AAAA,UACF,CAAC;AAAA,UAEA,cAAI,aACH,oBAAC,eAAY,WAAU,WAAU,IAEjC,oBAAC,cAAW,WAAU,WAAU;AAAA;AAAA,MAEpC,IACE;AAAA;AAAA,EACR;AAAA,EACA,GAAG;AACL;AAEA,MAAM,eAAe,MACnB,qBAAC,MAAM,UAAN,EACC;AAAA,sBAAC,UAAO,OAAM,iBAAgB;AAAA,EAC9B,qBAAC,aAAU,OAAK,MAAC,WAAU,OACzB;AAAA,wBAAC,QAAG,WAAU,WAAU,2BAAa;AAAA,IAErC;AAAA,MAAC;AAAA;AAAA,QACC,SAAS;AAAA,QACT,MAAM,UAAU,MAAM,GAAG,EAAE;AAAA;AAAA,IAC7B;AAAA,KACF;AAAA,GACF;AAGF,eAAe;",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937440873,
      "end": 1702937440873,
      "order": "normal"
    }
  ]
}
