{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/elm.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = elm\nelm.displayName = 'elm'\nelm.aliases = []\nfunction elm(Prism) {\n  Prism.languages.elm = {\n    comment: /--.*|\\{-[\\s\\S]*?-\\}/,\n    char: {\n      pattern:\n        /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+|u\\{[0-9a-fA-F]+\\}))'/,\n      greedy: true\n    },\n    string: [\n      {\n        // Multiline strings are wrapped in triple \". Quotes may appear unescaped.\n        pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n        greedy: true\n      },\n      {\n        pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,\n        greedy: true\n      }\n    ],\n    'import-statement': {\n      // The imported or hidden names are not included in this import\n      // statement. This is because we want to highlight those exactly like\n      // we do for the names in the program.\n      pattern:\n        /(^[\\t ]*)import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+(?:[A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\n      lookbehind: true,\n      inside: {\n        keyword: /\\b(?:as|exposing|import)\\b/\n      }\n    },\n    keyword:\n      /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\n    // These are builtin variables only. Constructors are highlighted later as a constant.\n    builtin:\n      /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\n    // decimal integers and floating point numbers | hexadecimal integers\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\n    // Most of this is needed because of the meaning of a single '.'.\n    // If it stands alone freely, it is the function composition.\n    // It may also be a separator between a module name and an identifier => no\n    // operator. If it comes together with other special characters it is an\n    // operator too.\n    // Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\n    // Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\n    operator: /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\n    // In Elm, nearly everything is a variable, do not highlight these.\n    hvariable: /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\n    constant: /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\n    punctuation: /[{}[\\]|(),.:]/\n  }\n}\n",
      "start": 1702937444876,
      "end": 1702937444897,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar elm_1;\nvar hasRequiredElm;\n\nfunction requireElm () {\n\tif (hasRequiredElm) return elm_1;\n\thasRequiredElm = 1;\n\t'use strict'\n\n\telm_1 = elm\n\telm.displayName = 'elm'\n\telm.aliases = []\n\tfunction elm(Prism) {\n\t  Prism.languages.elm = {\n\t    comment: /--.*|\\{-[\\s\\S]*?-\\}/,\n\t    char: {\n\t      pattern:\n\t        /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+|u\\{[0-9a-fA-F]+\\}))'/,\n\t      greedy: true\n\t    },\n\t    string: [\n\t      {\n\t        // Multiline strings are wrapped in triple \". Quotes may appear unescaped.\n\t        pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n\t        greedy: true\n\t      },\n\t      {\n\t        pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,\n\t        greedy: true\n\t      }\n\t    ],\n\t    'import-statement': {\n\t      // The imported or hidden names are not included in this import\n\t      // statement. This is because we want to highlight those exactly like\n\t      // we do for the names in the program.\n\t      pattern:\n\t        /(^[\\t ]*)import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+(?:[A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\n\t      lookbehind: true,\n\t      inside: {\n\t        keyword: /\\b(?:as|exposing|import)\\b/\n\t      }\n\t    },\n\t    keyword:\n\t      /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\n\t    // These are builtin variables only. Constructors are highlighted later as a constant.\n\t    builtin:\n\t      /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\n\t    // decimal integers and floating point numbers | hexadecimal integers\n\t    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\n\t    // Most of this is needed because of the meaning of a single '.'.\n\t    // If it stands alone freely, it is the function composition.\n\t    // It may also be a separator between a module name and an identifier => no\n\t    // operator. If it comes together with other special characters it is an\n\t    // operator too.\n\t    // Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\n\t    // Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\n\t    operator: /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\n\t    // In Elm, nearly everything is a variable, do not highlight these.\n\t    hvariable: /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\n\t    constant: /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\n\t    punctuation: /[{}[\\]|(),.:]/\n\t  }\n\t}\n\treturn elm_1;\n}\n\nexport { requireElm as __require };",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;CAAA,YAAY;AACZ;AACA,MAAc,GAAG,GAAG;CACpB,GAAG,CAAC,WAAW,GAAG,KAAK;CACvB,GAAG,CAAC,OAAO,GAAG,EAAE;CAChB,SAAS,GAAG,CAAC,KAAK,EAAE;CACpB,EAAE,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG;CACxB,IAAI,OAAO,EAAE,qBAAqB;CAClC,IAAI,IAAI,EAAE;CACV,MAAM,OAAO;CACb,QAAQ,yEAAyE;CACjF,MAAM,MAAM,EAAE,IAAI;CAClB,KAAK;CACL,IAAI,MAAM,EAAE;CACZ,MAAM;CACN;CACA,QAAQ,OAAO,EAAE,gBAAgB;CACjC,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,MAAM;CACN,QAAQ,OAAO,EAAE,uBAAuB;CACxC,QAAQ,MAAM,EAAE,IAAI;CACpB,OAAO;CACP,KAAK;CACL,IAAI,kBAAkB,EAAE;CACxB;CACA;CACA;CACA,MAAM,OAAO;CACb,QAAQ,uGAAuG;CAC/G,MAAM,UAAU,EAAE,IAAI;CACtB,MAAM,MAAM,EAAE;CACd,QAAQ,OAAO,EAAE,4BAA4B;CAC7C,OAAO;CACP,KAAK;CACL,IAAI,OAAO;CACX,MAAM,iFAAiF;CACvF;CACA,IAAI,OAAO;CACX,MAAM,yPAAyP;CAC/P;CACA,IAAI,MAAM,EAAE,kDAAkD;CAC9D;CACA;CACA;CACA;CACA;CACA;CACA;CACA,IAAI,QAAQ,EAAE,yDAAyD;CACvE;CACA,IAAI,SAAS,EAAE,6BAA6B;CAC5C,IAAI,QAAQ,EAAE,6BAA6B;CAC3C,IAAI,WAAW,EAAE,eAAe;CAChC,GAAG;CACH"
      }
    },
    {
      "name": "inject",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    }
  ]
}
