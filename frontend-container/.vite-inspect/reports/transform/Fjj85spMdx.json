{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/react-bootstrap/esm/Collapse.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import classNames from 'classnames';\nimport css from 'dom-helpers/css';\nimport React, { useMemo } from 'react';\nimport { ENTERED, ENTERING, EXITED, EXITING } from 'react-transition-group/Transition';\nimport transitionEndListener from './transitionEndListener';\nimport createChainedFunction from './createChainedFunction';\nimport triggerBrowserReflow from './triggerBrowserReflow';\nimport TransitionWrapper from './TransitionWrapper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst MARGINS = {\n  height: ['marginTop', 'marginBottom'],\n  width: ['marginLeft', 'marginRight']\n};\nfunction getDefaultDimensionValue(dimension, elem) {\n  const offset = `offset${dimension[0].toUpperCase()}${dimension.slice(1)}`;\n  const value = elem[offset];\n  const margins = MARGINS[dimension];\n  return value +\n  // @ts-ignore\n  parseInt(css(elem, margins[0]), 10) +\n  // @ts-ignore\n  parseInt(css(elem, margins[1]), 10);\n}\nconst collapseStyles = {\n  [EXITED]: 'collapse',\n  [EXITING]: 'collapsing',\n  [ENTERING]: 'collapsing',\n  [ENTERED]: 'collapse show'\n};\nconst Collapse = /*#__PURE__*/React.forwardRef(({\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n  className,\n  children,\n  dimension = 'height',\n  in: inProp = false,\n  timeout = 300,\n  mountOnEnter = false,\n  unmountOnExit = false,\n  appear = false,\n  getDimensionValue = getDefaultDimensionValue,\n  ...props\n}, ref) => {\n  /* Compute dimension */\n  const computedDimension = typeof dimension === 'function' ? dimension() : dimension;\n\n  /* -- Expanding -- */\n  const handleEnter = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = '0';\n  }, onEnter), [computedDimension, onEnter]);\n  const handleEntering = useMemo(() => createChainedFunction(elem => {\n    const scroll = `scroll${computedDimension[0].toUpperCase()}${computedDimension.slice(1)}`;\n    elem.style[computedDimension] = `${elem[scroll]}px`;\n  }, onEntering), [computedDimension, onEntering]);\n  const handleEntered = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = null;\n  }, onEntered), [computedDimension, onEntered]);\n\n  /* -- Collapsing -- */\n  const handleExit = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = `${getDimensionValue(computedDimension, elem)}px`;\n    triggerBrowserReflow(elem);\n  }, onExit), [onExit, getDimensionValue, computedDimension]);\n  const handleExiting = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = null;\n  }, onExiting), [computedDimension, onExiting]);\n  return /*#__PURE__*/_jsx(TransitionWrapper, {\n    ref: ref,\n    addEndListener: transitionEndListener,\n    ...props,\n    \"aria-expanded\": props.role ? inProp : null,\n    onEnter: handleEnter,\n    onEntering: handleEntering,\n    onEntered: handleEntered,\n    onExit: handleExit,\n    onExiting: handleExiting,\n    childRef: children.ref,\n    in: inProp,\n    timeout: timeout,\n    mountOnEnter: mountOnEnter,\n    unmountOnExit: unmountOnExit,\n    appear: appear,\n    children: (state, innerProps) => /*#__PURE__*/React.cloneElement(children, {\n      ...innerProps,\n      className: classNames(className, children.props.className, collapseStyles[state], computedDimension === 'width' && 'collapse-horizontal')\n    })\n  });\n});\n\n// @ts-ignore\n\nexport default Collapse;",
      "start": 1702937441421,
      "end": 1702937441472,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937441472,
      "end": 1702937441472,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937441472,
      "end": 1702937441472,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937441472,
      "end": 1702937441472,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937441472,
      "end": 1702937441472,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937441472,
      "end": 1702937441472,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937441472,
      "end": 1702937441472,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937441472,
      "end": 1702937441472,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937441472,
      "end": 1702937441472,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937441472,
      "end": 1702937441472,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937441472,
      "end": 1702937441472,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937441472,
      "end": 1702937441473,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937441473,
      "end": 1702937441473,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937441473,
      "end": 1702937441473,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937441473,
      "end": 1702937441473,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937441473,
      "end": 1702937441473,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937441473,
      "end": 1702937441473,
      "order": "normal"
    }
  ]
}
