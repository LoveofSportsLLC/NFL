{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/@popperjs/core/lib/utils/detectOverflow.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import getClippingRect from \"../dom-utils/getClippingRect.js\";\nimport getDocumentElement from \"../dom-utils/getDocumentElement.js\";\nimport getBoundingClientRect from \"../dom-utils/getBoundingClientRect.js\";\nimport computeOffsets from \"./computeOffsets.js\";\nimport rectToClientRect from \"./rectToClientRect.js\";\nimport { clippingParents, reference, popper, bottom, top, right, basePlacements, viewport } from \"../enums.js\";\nimport { isElement } from \"../dom-utils/instanceOf.js\";\nimport mergePaddingObject from \"./mergePaddingObject.js\";\nimport expandToHashMap from \"./expandToHashMap.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport default function detectOverflow(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$placement = _options.placement,\n      placement = _options$placement === void 0 ? state.placement : _options$placement,\n      _options$strategy = _options.strategy,\n      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,\n      _options$boundary = _options.boundary,\n      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,\n      _options$rootBoundary = _options.rootBoundary,\n      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,\n      _options$elementConte = _options.elementContext,\n      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,\n      _options$altBoundary = _options.altBoundary,\n      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n      _options$padding = _options.padding,\n      padding = _options$padding === void 0 ? 0 : _options$padding;\n  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n  var altContext = elementContext === popper ? reference : popper;\n  var popperRect = state.rects.popper;\n  var element = state.elements[altBoundary ? altContext : elementContext];\n  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);\n  var referenceClientRect = getBoundingClientRect(state.elements.reference);\n  var popperOffsets = computeOffsets({\n    reference: referenceClientRect,\n    element: popperRect,\n    strategy: 'absolute',\n    placement: placement\n  });\n  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  var overflowOffsets = {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n  if (elementContext === popper && offsetData) {\n    var offset = offsetData[placement];\n    Object.keys(overflowOffsets).forEach(function (key) {\n      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';\n      overflowOffsets[key] += offset[axis] * multiply;\n    });\n  }\n\n  return overflowOffsets;\n}",
      "start": 1702937445161,
      "end": 1702937445168,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445168,
      "end": 1702937445168,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445168,
      "end": 1702937445168,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445168,
      "end": 1702937445168,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445168,
      "end": 1702937445168,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445168,
      "end": 1702937445168,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445168,
      "end": 1702937445168,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445168,
      "end": 1702937445168,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445168,
      "end": 1702937445168,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445168,
      "end": 1702937445168,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445168,
      "end": 1702937445168,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937445168,
      "end": 1702937445169,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937445169,
      "end": 1702937445169,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445169,
      "end": 1702937445169,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445169,
      "end": 1702937445169,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445169,
      "end": 1702937445169,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445169,
      "end": 1702937445169,
      "order": "normal"
    }
  ]
}
