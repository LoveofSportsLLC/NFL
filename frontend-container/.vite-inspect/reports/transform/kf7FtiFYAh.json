{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/promql.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = promql\npromql.displayName = 'promql'\npromql.aliases = []\nfunction promql(Prism) {\n  // Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts\n  // As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/\n  ;(function (Prism) {\n    // PromQL Aggregation Operators\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\n    var aggregations = [\n      'sum',\n      'min',\n      'max',\n      'avg',\n      'group',\n      'stddev',\n      'stdvar',\n      'count',\n      'count_values',\n      'bottomk',\n      'topk',\n      'quantile'\n    ] // PromQL vector matching + the by and without clauses\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\n    var vectorMatching = [\n      'on',\n      'ignoring',\n      'group_right',\n      'group_left',\n      'by',\n      'without'\n    ] // PromQL offset modifier\n    // (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\n    var offsetModifier = ['offset']\n    var keywords = aggregations.concat(vectorMatching, offsetModifier)\n    Prism.languages.promql = {\n      comment: {\n        pattern: /(^[ \\t]*)#.*/m,\n        lookbehind: true\n      },\n      'vector-match': {\n        // Match the comma-separated label lists inside vector matching:\n        pattern: new RegExp(\n          '((?:' + vectorMatching.join('|') + ')\\\\s*)\\\\([^)]*\\\\)'\n        ),\n        lookbehind: true,\n        inside: {\n          'label-key': {\n            pattern: /\\b[^,]+\\b/,\n            alias: 'attr-name'\n          },\n          punctuation: /[(),]/\n        }\n      },\n      'context-labels': {\n        pattern: /\\{[^{}]*\\}/,\n        inside: {\n          'label-key': {\n            pattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\n            alias: 'attr-name'\n          },\n          'label-value': {\n            pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n            greedy: true,\n            alias: 'attr-value'\n          },\n          punctuation: /\\{|\\}|=~?|![=~]|,/\n        }\n      },\n      'context-range': [\n        {\n          pattern: /\\[[\\w\\s:]+\\]/,\n          // [1m]\n          inside: {\n            punctuation: /\\[|\\]|:/,\n            'range-duration': {\n              pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n              alias: 'number'\n            }\n          }\n        },\n        {\n          pattern: /(\\boffset\\s+)\\w+/,\n          // offset 1m\n          lookbehind: true,\n          inside: {\n            'range-duration': {\n              pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n              alias: 'number'\n            }\n          }\n        }\n      ],\n      keyword: new RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', 'i'),\n      function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n      number:\n        /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\n      operator: /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|or|unless)\\b/i,\n      punctuation: /[{};()`,.[\\]]/\n    }\n  })(Prism)\n}\n",
      "start": 1702937445014,
      "end": 1702937445040,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445040,
      "end": 1702937445040,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445040,
      "end": 1702937445040,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445040,
      "end": 1702937445040,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445040,
      "end": 1702937445040,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445040,
      "end": 1702937445040,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445040,
      "end": 1702937445040,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445040,
      "end": 1702937445040,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445040,
      "end": 1702937445040,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445040,
      "end": 1702937445040,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445040,
      "end": 1702937445040,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar promql_1;\nvar hasRequiredPromql;\n\nfunction requirePromql () {\n\tif (hasRequiredPromql) return promql_1;\n\thasRequiredPromql = 1;\n\t'use strict'\n\n\tpromql_1 = promql\n\tpromql.displayName = 'promql'\n\tpromql.aliases = []\n\tfunction promql(Prism) {\n\t  // Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts\n\t  // As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/\n\t  ;(function (Prism) {\n\t    // PromQL Aggregation Operators\n\t    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\n\t    var aggregations = [\n\t      'sum',\n\t      'min',\n\t      'max',\n\t      'avg',\n\t      'group',\n\t      'stddev',\n\t      'stdvar',\n\t      'count',\n\t      'count_values',\n\t      'bottomk',\n\t      'topk',\n\t      'quantile'\n\t    ] // PromQL vector matching + the by and without clauses\n\t    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\n\t    var vectorMatching = [\n\t      'on',\n\t      'ignoring',\n\t      'group_right',\n\t      'group_left',\n\t      'by',\n\t      'without'\n\t    ] // PromQL offset modifier\n\t    // (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\n\t    var offsetModifier = ['offset']\n\t    var keywords = aggregations.concat(vectorMatching, offsetModifier)\n\t    Prism.languages.promql = {\n\t      comment: {\n\t        pattern: /(^[ \\t]*)#.*/m,\n\t        lookbehind: true\n\t      },\n\t      'vector-match': {\n\t        // Match the comma-separated label lists inside vector matching:\n\t        pattern: new RegExp(\n\t          '((?:' + vectorMatching.join('|') + ')\\\\s*)\\\\([^)]*\\\\)'\n\t        ),\n\t        lookbehind: true,\n\t        inside: {\n\t          'label-key': {\n\t            pattern: /\\b[^,]+\\b/,\n\t            alias: 'attr-name'\n\t          },\n\t          punctuation: /[(),]/\n\t        }\n\t      },\n\t      'context-labels': {\n\t        pattern: /\\{[^{}]*\\}/,\n\t        inside: {\n\t          'label-key': {\n\t            pattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\n\t            alias: 'attr-name'\n\t          },\n\t          'label-value': {\n\t            pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n\t            greedy: true,\n\t            alias: 'attr-value'\n\t          },\n\t          punctuation: /\\{|\\}|=~?|![=~]|,/\n\t        }\n\t      },\n\t      'context-range': [\n\t        {\n\t          pattern: /\\[[\\w\\s:]+\\]/,\n\t          // [1m]\n\t          inside: {\n\t            punctuation: /\\[|\\]|:/,\n\t            'range-duration': {\n\t              pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n\t              alias: 'number'\n\t            }\n\t          }\n\t        },\n\t        {\n\t          pattern: /(\\boffset\\s+)\\w+/,\n\t          // offset 1m\n\t          lookbehind: true,\n\t          inside: {\n\t            'range-duration': {\n\t              pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n\t              alias: 'number'\n\t            }\n\t          }\n\t        }\n\t      ],\n\t      keyword: new RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', 'i'),\n\t      function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n\t      number:\n\t        /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\n\t      operator: /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|or|unless)\\b/i,\n\t      punctuation: /[{};()`,.[\\]]/\n\t    }\n\t  })(Prism)\n\t}\n\treturn promql_1;\n}\n\nexport { requirePromql as __require };",
      "start": 1702937445040,
      "end": 1702937445041,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445041,
      "end": 1702937445041,
      "order": "normal"
    }
  ]
}
