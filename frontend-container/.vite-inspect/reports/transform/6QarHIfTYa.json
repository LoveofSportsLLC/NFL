{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/soy.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = soy\nsoy.displayName = 'soy'\nsoy.aliases = []\nfunction soy(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/\n    Prism.languages.soy = {\n      comment: [\n        /\\/\\*[\\s\\S]*?\\*\\//,\n        {\n          pattern: /(\\s)\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'command-arg': {\n        pattern:\n          /(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [\n        {\n          pattern:\n            /(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n          lookbehind: true\n        },\n        /\\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\\b/\n      ],\n      delimiter: {\n        pattern: /^\\{+\\/?|\\/?\\}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [\n        /\\w+(?=\\()/,\n        {\n          pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n          lookbehind: true\n        }\n      ],\n      boolean: /\\b(?:false|true)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    } // Tokenize all inline Soy expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var soyPattern = /\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g\n      var soyLitteralStart = '{literal}'\n      var soyLitteralEnd = '{/literal}'\n      var soyLitteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'soy',\n        soyPattern,\n        function (match) {\n          // Soy tags inside {literal} block are ignored\n          if (match === soyLitteralEnd) {\n            soyLitteralMode = false\n          }\n          if (!soyLitteralMode) {\n            if (match === soyLitteralStart) {\n              soyLitteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy')\n    })\n  })(Prism)\n}\n",
      "start": 1702937445061,
      "end": 1702937445091,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445091,
      "end": 1702937445091,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445091,
      "end": 1702937445091,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445091,
      "end": 1702937445091,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445091,
      "end": 1702937445091,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445091,
      "end": 1702937445091,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445091,
      "end": 1702937445091,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445091,
      "end": 1702937445091,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445091,
      "end": 1702937445091,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445091,
      "end": 1702937445091,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445091,
      "end": 1702937445091,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/markup-templating.js?commonjs-wrapped\";\n\nvar soy_1;\nvar hasRequiredSoy;\n\nfunction requireSoy () {\n\tif (hasRequiredSoy) return soy_1;\n\thasRequiredSoy = 1;\n\t'use strict'\n\tvar refractorMarkupTemplating = require$$0()\n\tsoy_1 = soy\n\tsoy.displayName = 'soy'\n\tsoy.aliases = []\n\tfunction soy(Prism) {\n\t  Prism.register(refractorMarkupTemplating)\n\t  ;(function (Prism) {\n\t    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\n\t    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/\n\t    Prism.languages.soy = {\n\t      comment: [\n\t        /\\/\\*[\\s\\S]*?\\*\\//,\n\t        {\n\t          pattern: /(\\s)\\/\\/.*/,\n\t          lookbehind: true,\n\t          greedy: true\n\t        }\n\t      ],\n\t      'command-arg': {\n\t        pattern:\n\t          /(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n\t        lookbehind: true,\n\t        alias: 'string',\n\t        inside: {\n\t          punctuation: /\\./\n\t        }\n\t      },\n\t      parameter: {\n\t        pattern: /(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n\t        lookbehind: true,\n\t        alias: 'variable'\n\t      },\n\t      keyword: [\n\t        {\n\t          pattern:\n\t            /(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n\t          lookbehind: true\n\t        },\n\t        /\\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\\b/\n\t      ],\n\t      delimiter: {\n\t        pattern: /^\\{+\\/?|\\/?\\}+$/,\n\t        alias: 'punctuation'\n\t      },\n\t      property: /\\w+(?==)/,\n\t      variable: {\n\t        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,\n\t        inside: {\n\t          string: {\n\t            pattern: stringPattern,\n\t            greedy: true\n\t          },\n\t          number: numberPattern,\n\t          punctuation: /[\\[\\].?]/\n\t        }\n\t      },\n\t      string: {\n\t        pattern: stringPattern,\n\t        greedy: true\n\t      },\n\t      function: [\n\t        /\\w+(?=\\()/,\n\t        {\n\t          pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n\t          lookbehind: true\n\t        }\n\t      ],\n\t      boolean: /\\b(?:false|true)\\b/,\n\t      number: numberPattern,\n\t      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n\t      punctuation: /[{}()\\[\\]|.,:]/\n\t    } // Tokenize all inline Soy expressions\n\t    Prism.hooks.add('before-tokenize', function (env) {\n\t      var soyPattern = /\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g\n\t      var soyLitteralStart = '{literal}'\n\t      var soyLitteralEnd = '{/literal}'\n\t      var soyLitteralMode = false\n\t      Prism.languages['markup-templating'].buildPlaceholders(\n\t        env,\n\t        'soy',\n\t        soyPattern,\n\t        function (match) {\n\t          // Soy tags inside {literal} block are ignored\n\t          if (match === soyLitteralEnd) {\n\t            soyLitteralMode = false\n\t          }\n\t          if (!soyLitteralMode) {\n\t            if (match === soyLitteralStart) {\n\t              soyLitteralMode = true\n\t            }\n\t            return true\n\t          }\n\t          return false\n\t        }\n\t      )\n\t    }) // Re-insert the tokens after tokenizing\n\t    Prism.hooks.add('after-tokenize', function (env) {\n\t      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy')\n\t    })\n\t  })(Prism)\n\t}\n\treturn soy_1;\n}\n\nexport { requireSoy as __require };",
      "start": 1702937445091,
      "end": 1702937445092,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937445092,
      "end": 1702937445092,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445092,
      "end": 1702937445092,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445092,
      "end": 1702937445092,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445092,
      "end": 1702937445092,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445092,
      "end": 1702937445092,
      "order": "normal"
    }
  ]
}
