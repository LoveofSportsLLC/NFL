{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/haml.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\nvar refractorRuby = require('./ruby.js')\nmodule.exports = haml\nhaml.displayName = 'haml'\nhaml.aliases = []\nfunction haml(Prism) {\n  Prism.register(refractorRuby)\n  /* TODO\nHandle multiline code after tag\n%foo= some |\nmultiline |\ncode |\n*/\n  ;(function (Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern:\n          /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [\n        {\n          pattern:\n            /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        },\n        {\n          pattern:\n            /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*\\|[\\t ]*)*/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        }\n      ],\n      // See at the end of the file for known filters\n      filter: {\n        pattern:\n          /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'symbol'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern:\n          /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^{}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              // Lookbehind tries to prevent interpolations from breaking it all\n              // Allows for one nested group of braces\n              pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^{}])+\\}/,\n              lookbehind: true,\n              inside: Prism.languages.ruby\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                  lookbehind: true\n                },\n                'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[=(),]/\n              }\n            },\n            {\n              pattern: /\\[[^\\]]+\\]/,\n              inside: Prism.languages.ruby\n            }\n          ],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: Prism.languages.ruby\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          ruby: {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.ruby\n          }\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    }\n    var filter_pattern =\n      '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+' // Non exhaustive list of available filters and associated languages\n    var filters = [\n      'css',\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'erb',\n      'javascript',\n      'less',\n      'markdown',\n      'ruby',\n      'scss',\n      'textile'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('{{filter_name}}', function () {\n              return filter.filter\n            })\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'symbol'\n            },\n            text: {\n              pattern: /[\\s\\S]+/,\n              alias: [filter.language, 'language-' + filter.language],\n              inside: Prism.languages[filter.language]\n            }\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('haml', 'filter', all_filters)\n  })(Prism)\n}\n",
      "start": 1702937444902,
      "end": 1702937444923,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444923,
      "end": 1702937444923,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444923,
      "end": 1702937444923,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444923,
      "end": 1702937444923,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444923,
      "end": 1702937444923,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444923,
      "end": 1702937444923,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444923,
      "end": 1702937444923,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444923,
      "end": 1702937444923,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444923,
      "end": 1702937444923,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444923,
      "end": 1702937444923,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444923,
      "end": 1702937444923,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/ruby.js?commonjs-wrapped\";\n\nvar haml_1;\nvar hasRequiredHaml;\n\nfunction requireHaml () {\n\tif (hasRequiredHaml) return haml_1;\n\thasRequiredHaml = 1;\n\t'use strict'\n\tvar refractorRuby = require$$0()\n\thaml_1 = haml\n\thaml.displayName = 'haml'\n\thaml.aliases = []\n\tfunction haml(Prism) {\n\t  Prism.register(refractorRuby)\n\t  /* TODO\n\tHandle multiline code after tag\n\t%foo= some |\n\tmultiline |\n\tcode |\n\t*/\n\t  ;(function (Prism) {\n\t    Prism.languages.haml = {\n\t      // Multiline stuff should appear before the rest\n\t      'multiline-comment': {\n\t        pattern:\n\t          /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/,\n\t        lookbehind: true,\n\t        alias: 'comment'\n\t      },\n\t      'multiline-code': [\n\t        {\n\t          pattern:\n\t            /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)/,\n\t          lookbehind: true,\n\t          inside: Prism.languages.ruby\n\t        },\n\t        {\n\t          pattern:\n\t            /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*\\|[\\t ]*)*/,\n\t          lookbehind: true,\n\t          inside: Prism.languages.ruby\n\t        }\n\t      ],\n\t      // See at the end of the file for known filters\n\t      filter: {\n\t        pattern:\n\t          /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/,\n\t        lookbehind: true,\n\t        inside: {\n\t          'filter-name': {\n\t            pattern: /^:[\\w-]+/,\n\t            alias: 'symbol'\n\t          }\n\t        }\n\t      },\n\t      markup: {\n\t        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n\t        lookbehind: true,\n\t        inside: Prism.languages.markup\n\t      },\n\t      doctype: {\n\t        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n\t        lookbehind: true\n\t      },\n\t      tag: {\n\t        // Allows for one nested group of braces\n\t        pattern:\n\t          /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^{}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n\t        lookbehind: true,\n\t        inside: {\n\t          attributes: [\n\t            {\n\t              // Lookbehind tries to prevent interpolations from breaking it all\n\t              // Allows for one nested group of braces\n\t              pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^{}])+\\}/,\n\t              lookbehind: true,\n\t              inside: Prism.languages.ruby\n\t            },\n\t            {\n\t              pattern: /\\([^)]+\\)/,\n\t              inside: {\n\t                'attr-value': {\n\t                  pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n\t                  lookbehind: true\n\t                },\n\t                'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n\t                punctuation: /[=(),]/\n\t              }\n\t            },\n\t            {\n\t              pattern: /\\[[^\\]]+\\]/,\n\t              inside: Prism.languages.ruby\n\t            }\n\t          ],\n\t          punctuation: /[<>]/\n\t        }\n\t      },\n\t      code: {\n\t        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n\t        lookbehind: true,\n\t        inside: Prism.languages.ruby\n\t      },\n\t      // Interpolations in plain text\n\t      interpolation: {\n\t        pattern: /#\\{[^}]+\\}/,\n\t        inside: {\n\t          delimiter: {\n\t            pattern: /^#\\{|\\}$/,\n\t            alias: 'punctuation'\n\t          },\n\t          ruby: {\n\t            pattern: /[\\s\\S]+/,\n\t            inside: Prism.languages.ruby\n\t          }\n\t        }\n\t      },\n\t      punctuation: {\n\t        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n\t        lookbehind: true\n\t      }\n\t    }\n\t    var filter_pattern =\n\t      '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+' // Non exhaustive list of available filters and associated languages\n\t    var filters = [\n\t      'css',\n\t      {\n\t        filter: 'coffee',\n\t        language: 'coffeescript'\n\t      },\n\t      'erb',\n\t      'javascript',\n\t      'less',\n\t      'markdown',\n\t      'ruby',\n\t      'scss',\n\t      'textile'\n\t    ]\n\t    var all_filters = {}\n\t    for (var i = 0, l = filters.length; i < l; i++) {\n\t      var filter = filters[i]\n\t      filter =\n\t        typeof filter === 'string'\n\t          ? {\n\t              filter: filter,\n\t              language: filter\n\t            }\n\t          : filter\n\t      if (Prism.languages[filter.language]) {\n\t        all_filters['filter-' + filter.filter] = {\n\t          pattern: RegExp(\n\t            filter_pattern.replace('{{filter_name}}', function () {\n\t              return filter.filter\n\t            })\n\t          ),\n\t          lookbehind: true,\n\t          inside: {\n\t            'filter-name': {\n\t              pattern: /^:[\\w-]+/,\n\t              alias: 'symbol'\n\t            },\n\t            text: {\n\t              pattern: /[\\s\\S]+/,\n\t              alias: [filter.language, 'language-' + filter.language],\n\t              inside: Prism.languages[filter.language]\n\t            }\n\t          }\n\t        }\n\t      }\n\t    }\n\t    Prism.languages.insertBefore('haml', 'filter', all_filters)\n\t  })(Prism)\n\t}\n\treturn haml_1;\n}\n\nexport { requireHaml as __require };",
      "start": 1702937444923,
      "end": 1702937445073,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937445073,
      "end": 1702937445073,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445073,
      "end": 1702937445073,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445073,
      "end": 1702937445073,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445073,
      "end": 1702937445073,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445073,
      "end": 1702937445073,
      "order": "normal"
    }
  ]
}
