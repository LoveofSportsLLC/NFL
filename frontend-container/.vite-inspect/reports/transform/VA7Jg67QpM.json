{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/openqasm.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = openqasm\nopenqasm.displayName = 'openqasm'\nopenqasm.aliases = ['qasm']\nfunction openqasm(Prism) {\n  // https://qiskit.github.io/openqasm/grammar/index.html\n  Prism.languages.openqasm = {\n    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/,\n    string: {\n      pattern: /\"[^\"\\r\\n\\t]*\"|'[^'\\r\\n\\t]*'/,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:CX|OPENQASM|U|barrier|boxas|boxto|break|const|continue|ctrl|def|defcal|defcalgrammar|delay|else|end|for|gate|gphase|if|in|include|inv|kernel|lengthof|let|measure|pow|reset|return|rotary|stretchinf|while)\\b|#pragma\\b/,\n    'class-name':\n      /\\b(?:angle|bit|bool|creg|fixed|float|int|length|qreg|qubit|stretch|uint)\\b/,\n    function: /\\b(?:cos|exp|ln|popcount|rotl|rotr|sin|sqrt|tan)\\b(?=\\s*\\()/,\n    constant: /\\b(?:euler|pi|tau)\\b|π|𝜏|ℇ/,\n    number: {\n      pattern:\n        /(^|[^.\\w$])(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?(?:dt|ns|us|µs|ms|s)?/i,\n      lookbehind: true\n    },\n    operator: /->|>>=?|<<=?|&&|\\|\\||\\+\\+|--|[!=<>&|~^+\\-*/%]=?|@/,\n    punctuation: /[(){}\\[\\];,:.]/\n  }\n  Prism.languages.qasm = Prism.languages.openqasm\n}\n",
      "start": 1702937444990,
      "end": 1702937445020,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445020,
      "end": 1702937445020,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445020,
      "end": 1702937445020,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445020,
      "end": 1702937445020,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445020,
      "end": 1702937445020,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445020,
      "end": 1702937445020,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445020,
      "end": 1702937445020,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445020,
      "end": 1702937445020,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445020,
      "end": 1702937445020,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445020,
      "end": 1702937445020,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445020,
      "end": 1702937445020,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar openqasm_1;\nvar hasRequiredOpenqasm;\n\nfunction requireOpenqasm () {\n\tif (hasRequiredOpenqasm) return openqasm_1;\n\thasRequiredOpenqasm = 1;\n\t'use strict'\n\n\topenqasm_1 = openqasm\n\topenqasm.displayName = 'openqasm'\n\topenqasm.aliases = ['qasm']\n\tfunction openqasm(Prism) {\n\t  // https://qiskit.github.io/openqasm/grammar/index.html\n\t  Prism.languages.openqasm = {\n\t    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/,\n\t    string: {\n\t      pattern: /\"[^\"\\r\\n\\t]*\"|'[^'\\r\\n\\t]*'/,\n\t      greedy: true\n\t    },\n\t    keyword:\n\t      /\\b(?:CX|OPENQASM|U|barrier|boxas|boxto|break|const|continue|ctrl|def|defcal|defcalgrammar|delay|else|end|for|gate|gphase|if|in|include|inv|kernel|lengthof|let|measure|pow|reset|return|rotary|stretchinf|while)\\b|#pragma\\b/,\n\t    'class-name':\n\t      /\\b(?:angle|bit|bool|creg|fixed|float|int|length|qreg|qubit|stretch|uint)\\b/,\n\t    function: /\\b(?:cos|exp|ln|popcount|rotl|rotr|sin|sqrt|tan)\\b(?=\\s*\\()/,\n\t    constant: /\\b(?:euler|pi|tau)\\b|π|𝜏|ℇ/,\n\t    number: {\n\t      pattern:\n\t        /(^|[^.\\w$])(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?(?:dt|ns|us|µs|ms|s)?/i,\n\t      lookbehind: true\n\t    },\n\t    operator: /->|>>=?|<<=?|&&|\\|\\||\\+\\+|--|[!=<>&|~^+\\-*/%]=?|@/,\n\t    punctuation: /[(){}\\[\\];,:.]/\n\t  }\n\t  Prism.languages.qasm = Prism.languages.openqasm\n\t}\n\treturn openqasm_1;\n}\n\nexport { requireOpenqasm as __require };",
      "start": 1702937445020,
      "end": 1702937445020,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;CAAA,YAAY;AACZ;AACA,WAAc,GAAG,QAAQ;CACzB,QAAQ,CAAC,WAAW,GAAG,UAAU;CACjC,QAAQ,CAAC,OAAO,GAAG,CAAC,MAAM,CAAC;CAC3B,SAAS,QAAQ,CAAC,KAAK,EAAE;CACzB;CACA,EAAE,KAAK,CAAC,SAAS,CAAC,QAAQ,GAAG;CAC7B,IAAI,OAAO,EAAE,yBAAyB;CACtC,IAAI,MAAM,EAAE;CACZ,MAAM,OAAO,EAAE,6BAA6B;CAC5C,MAAM,MAAM,EAAE,IAAI;CAClB,KAAK;CACL,IAAI,OAAO;CACX,MAAM,8NAA8N;CACpO,IAAI,YAAY;CAChB,MAAM,4EAA4E;CAClF,IAAI,QAAQ,EAAE,6DAA6D;CAC3E,IAAI,QAAQ,EAAE,6BAA6B;CAC3C,IAAI,MAAM,EAAE;CACZ,MAAM,OAAO;CACb,QAAQ,wEAAwE;CAChF,MAAM,UAAU,EAAE,IAAI;CACtB,KAAK;CACL,IAAI,QAAQ,EAAE,mDAAmD;CACjE,IAAI,WAAW,EAAE,gBAAgB;CACjC,GAAG;CACH,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,QAAQ;CACjD"
      }
    },
    {
      "name": "inject",
      "start": 1702937445020,
      "end": 1702937445020,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445020,
      "end": 1702937445020,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445020,
      "end": 1702937445020,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445020,
      "end": 1702937445020,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445020,
      "end": 1702937445020,
      "order": "normal"
    }
  ]
}
