{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/uncontrollable/lib/esm/utils.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import invariant from 'invariant';\n\nvar noop = function noop() {};\n\nfunction readOnlyPropType(handler, name) {\n  return function (props, propName) {\n    if (props[propName] !== undefined) {\n      if (!props[handler]) {\n        return new Error(\"You have provided a `\" + propName + \"` prop to `\" + name + \"` \" + (\"without an `\" + handler + \"` handler prop. This will render a read-only field. \") + (\"If the field should be mutable use `\" + defaultKey(propName) + \"`. \") + (\"Otherwise, set `\" + handler + \"`.\"));\n      }\n    }\n  };\n}\n\nexport function uncontrolledPropTypes(controlledValues, displayName) {\n  var propTypes = {};\n  Object.keys(controlledValues).forEach(function (prop) {\n    // add default propTypes for folks that use runtime checks\n    propTypes[defaultKey(prop)] = noop;\n\n    if (process.env.NODE_ENV !== 'production') {\n      var handler = controlledValues[prop];\n      !(typeof handler === 'string' && handler.trim().length) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Uncontrollable - [%s]: the prop `%s` needs a valid handler key name in order to make it uncontrollable', displayName, prop) : invariant(false) : void 0;\n      propTypes[prop] = readOnlyPropType(handler, displayName);\n    }\n  });\n  return propTypes;\n}\nexport function isProp(props, prop) {\n  return props[prop] !== undefined;\n}\nexport function defaultKey(key) {\n  return 'default' + key.charAt(0).toUpperCase() + key.substr(1);\n}\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nexport function canAcceptRef(component) {\n  return !!component && (typeof component !== 'function' || component.prototype && component.prototype.isReactComponent);\n}",
      "start": 1702937443994,
      "end": 1702937444009,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444009,
      "end": 1702937444009,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444009,
      "end": 1702937444009,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444009,
      "end": 1702937444009,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444009,
      "end": 1702937444009,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444009,
      "end": 1702937444009,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import invariant from \"invariant\";\nvar noop = function noop2() {\n};\nfunction readOnlyPropType(handler, name) {\n  return function(props, propName) {\n    if (props[propName] !== void 0) {\n      if (!props[handler]) {\n        return new Error(\"You have provided a `\" + propName + \"` prop to `\" + name + \"` \" + (\"without an `\" + handler + \"` handler prop. This will render a read-only field. \") + (\"If the field should be mutable use `\" + defaultKey(propName) + \"`. \") + (\"Otherwise, set `\" + handler + \"`.\"));\n      }\n    }\n  };\n}\nexport function uncontrolledPropTypes(controlledValues, displayName) {\n  var propTypes = {};\n  Object.keys(controlledValues).forEach(function(prop) {\n    propTypes[defaultKey(prop)] = noop;\n    if (false) {\n      var handler = controlledValues[prop];\n      !(typeof handler === \"string\" && handler.trim().length) ? false ? invariant(false, \"Uncontrollable - [%s]: the prop `%s` needs a valid handler key name in order to make it uncontrollable\", displayName, prop) : invariant(false) : void 0;\n      propTypes[prop] = readOnlyPropType(handler, displayName);\n    }\n  });\n  return propTypes;\n}\nexport function isProp(props, prop) {\n  return props[prop] !== void 0;\n}\nexport function defaultKey(key) {\n  return \"default\" + key.charAt(0).toUpperCase() + key.substr(1);\n}\nexport function canAcceptRef(component) {\n  return !!component && (typeof component !== \"function\" || component.prototype && component.prototype.isReactComponent);\n}\n",
      "start": 1702937444009,
      "end": 1702937444012,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444012,
      "end": 1702937444012,
      "order": "normal"
    }
  ]
}
