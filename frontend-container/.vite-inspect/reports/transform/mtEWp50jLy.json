{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/elixir.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = elixir\nelixir.displayName = 'elixir'\nelixir.aliases = []\nfunction elixir(Prism) {\n  Prism.languages.elixir = {\n    doc: {\n      pattern:\n        /@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2)/,\n      inside: {\n        attribute: /^@\\w+/,\n        string: /['\"][\\s\\S]+/\n      }\n    },\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n    regex: {\n      pattern:\n        /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n      greedy: true\n    },\n    string: [\n      {\n        // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n        pattern:\n          /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        // Multi-line strings are allowed\n        pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      }\n    ],\n    atom: {\n      // Look-behind prevents bad highlighting of the :: operator\n      pattern: /(^|[^:]):\\w+/,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    module: {\n      pattern: /\\b[A-Z]\\w*\\b/,\n      alias: 'class-name'\n    },\n    // Look-ahead prevents bad highlighting of the :: operator\n    'attr-name': /\\b\\w+\\??:(?!:)/,\n    argument: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&\\d+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'variable'\n    },\n    function: /\\b[_a-zA-Z]\\w*[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,\n    number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n    keyword:\n      /\\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,\n    boolean: /\\b(?:false|nil|true)\\b/,\n    operator: [\n      /\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,\n      {\n        // We don't want to match <<\n        pattern: /([^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /([^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /<<|>>|[.,%\\[\\]{}()]/\n  }\n  Prism.languages.elixir.string.forEach(function (o) {\n    o.inside = {\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.elixir\n        }\n      }\n    }\n  })\n}\n",
      "start": 1702937444872,
      "end": 1702937444896,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937444896,
      "end": 1702937444896,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937444896,
      "end": 1702937444896,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937444896,
      "end": 1702937444896,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar elixir_1;\nvar hasRequiredElixir;\n\nfunction requireElixir () {\n\tif (hasRequiredElixir) return elixir_1;\n\thasRequiredElixir = 1;\n\t'use strict'\n\n\telixir_1 = elixir\n\telixir.displayName = 'elixir'\n\telixir.aliases = []\n\tfunction elixir(Prism) {\n\t  Prism.languages.elixir = {\n\t    doc: {\n\t      pattern:\n\t        /@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2)/,\n\t      inside: {\n\t        attribute: /^@\\w+/,\n\t        string: /['\"][\\s\\S]+/\n\t      }\n\t    },\n\t    comment: {\n\t      pattern: /#.*/,\n\t      greedy: true\n\t    },\n\t    // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n\t    regex: {\n\t      pattern:\n\t        /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n\t      greedy: true\n\t    },\n\t    string: [\n\t      {\n\t        // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n\t        pattern:\n\t          /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n\t        greedy: true,\n\t        inside: {\n\t          // See interpolation below\n\t        }\n\t      },\n\t      {\n\t        pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n\t        greedy: true,\n\t        inside: {\n\t          // See interpolation below\n\t        }\n\t      },\n\t      {\n\t        // Multi-line strings are allowed\n\t        pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t        greedy: true,\n\t        inside: {\n\t          // See interpolation below\n\t        }\n\t      }\n\t    ],\n\t    atom: {\n\t      // Look-behind prevents bad highlighting of the :: operator\n\t      pattern: /(^|[^:]):\\w+/,\n\t      lookbehind: true,\n\t      alias: 'symbol'\n\t    },\n\t    module: {\n\t      pattern: /\\b[A-Z]\\w*\\b/,\n\t      alias: 'class-name'\n\t    },\n\t    // Look-ahead prevents bad highlighting of the :: operator\n\t    'attr-name': /\\b\\w+\\??:(?!:)/,\n\t    argument: {\n\t      // Look-behind prevents bad highlighting of the && operator\n\t      pattern: /(^|[^&])&\\d+/,\n\t      lookbehind: true,\n\t      alias: 'variable'\n\t    },\n\t    attribute: {\n\t      pattern: /@\\w+/,\n\t      alias: 'variable'\n\t    },\n\t    function: /\\b[_a-zA-Z]\\w*[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,\n\t    number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n\t    keyword:\n\t      /\\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,\n\t    boolean: /\\b(?:false|nil|true)\\b/,\n\t    operator: [\n\t      /\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,\n\t      {\n\t        // We don't want to match <<\n\t        pattern: /([^<])<(?!<)/,\n\t        lookbehind: true\n\t      },\n\t      {\n\t        // We don't want to match >>\n\t        pattern: /([^>])>(?!>)/,\n\t        lookbehind: true\n\t      }\n\t    ],\n\t    punctuation: /<<|>>|[.,%\\[\\]{}()]/\n\t  }\n\t  Prism.languages.elixir.string.forEach(function (o) {\n\t    o.inside = {\n\t      interpolation: {\n\t        pattern: /#\\{[^}]+\\}/,\n\t        inside: {\n\t          delimiter: {\n\t            pattern: /^#\\{|\\}$/,\n\t            alias: 'punctuation'\n\t          },\n\t          rest: Prism.languages.elixir\n\t        }\n\t      }\n\t    }\n\t  })\n\t}\n\treturn elixir_1;\n}\n\nexport { requireElixir as __require };",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937444897,
      "end": 1702937444897,
      "order": "normal"
    }
  ]
}
