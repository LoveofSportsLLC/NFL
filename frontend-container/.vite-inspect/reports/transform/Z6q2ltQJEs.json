{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/react-bootstrap/esm/Overlay.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "\"use client\";\n\nimport * as React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport BaseOverlay from '@restart/ui/Overlay';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport useIsomorphicEffect from '@restart/hooks/useIsomorphicEffect';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport useOverlayOffset from './useOverlayOffset';\nimport Fade from './Fade';\nimport safeFindDOMNode from './safeFindDOMNode';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction wrapRefs(props, arrowProps) {\n  const {\n    ref\n  } = props;\n  const {\n    ref: aRef\n  } = arrowProps;\n  props.ref = ref.__wrapped || (ref.__wrapped = r => ref(safeFindDOMNode(r)));\n  arrowProps.ref = aRef.__wrapped || (aRef.__wrapped = r => aRef(safeFindDOMNode(r)));\n}\nconst Overlay = /*#__PURE__*/React.forwardRef(({\n  children: overlay,\n  transition = Fade,\n  popperConfig = {},\n  rootClose = false,\n  placement = 'top',\n  show: outerShow = false,\n  ...outerProps\n}, outerRef) => {\n  const popperRef = useRef({});\n  const [firstRenderedState, setFirstRenderedState] = useState(null);\n  const [ref, modifiers] = useOverlayOffset(outerProps.offset);\n  const mergedRef = useMergedRefs(outerRef, ref);\n  const actualTransition = transition === true ? Fade : transition || undefined;\n  const handleFirstUpdate = useEventCallback(state => {\n    setFirstRenderedState(state);\n    popperConfig == null ? void 0 : popperConfig.onFirstUpdate == null ? void 0 : popperConfig.onFirstUpdate(state);\n  });\n  useIsomorphicEffect(() => {\n    if (firstRenderedState && outerProps.target) {\n      // Must wait for target element to resolve before updating popper.\n      popperRef.current.scheduleUpdate == null ? void 0 : popperRef.current.scheduleUpdate();\n    }\n  }, [firstRenderedState, outerProps.target]);\n  useEffect(() => {\n    if (!outerShow) {\n      setFirstRenderedState(null);\n    }\n  }, [outerShow]);\n  return /*#__PURE__*/_jsx(BaseOverlay, {\n    ...outerProps,\n    ref: mergedRef,\n    popperConfig: {\n      ...popperConfig,\n      modifiers: modifiers.concat(popperConfig.modifiers || []),\n      onFirstUpdate: handleFirstUpdate\n    },\n    transition: actualTransition,\n    rootClose: rootClose,\n    placement: placement,\n    show: outerShow,\n    children: (overlayProps, {\n      arrowProps,\n      popper: popperObj,\n      show\n    }) => {\n      var _popperObj$state, _popperObj$state$modi;\n      wrapRefs(overlayProps, arrowProps);\n      // Need to get placement from popper object, handling case when overlay is flipped using 'flip' prop\n      const updatedPlacement = popperObj == null ? void 0 : popperObj.placement;\n      const popper = Object.assign(popperRef.current, {\n        state: popperObj == null ? void 0 : popperObj.state,\n        scheduleUpdate: popperObj == null ? void 0 : popperObj.update,\n        placement: updatedPlacement,\n        outOfBoundaries: (popperObj == null ? void 0 : (_popperObj$state = popperObj.state) == null ? void 0 : (_popperObj$state$modi = _popperObj$state.modifiersData.hide) == null ? void 0 : _popperObj$state$modi.isReferenceHidden) || false,\n        strategy: popperConfig.strategy\n      });\n      const hasDoneInitialMeasure = !!firstRenderedState;\n      if (typeof overlay === 'function') return overlay({\n        ...overlayProps,\n        placement: updatedPlacement,\n        show,\n        ...(!transition && show && {\n          className: 'show'\n        }),\n        popper,\n        arrowProps,\n        hasDoneInitialMeasure\n      });\n      return /*#__PURE__*/React.cloneElement(overlay, {\n        ...overlayProps,\n        placement: updatedPlacement,\n        arrowProps,\n        popper,\n        hasDoneInitialMeasure,\n        className: classNames(overlay.props.className, !transition && show && 'show'),\n        style: {\n          ...overlay.props.style,\n          ...overlayProps.style\n        }\n      });\n    }\n  });\n});\nOverlay.displayName = 'Overlay';\nexport default Overlay;",
      "start": 1702937441501,
      "end": 1702937441523,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937441523,
      "end": 1702937441523,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937441523,
      "end": 1702937441523,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937441523,
      "end": 1702937441523,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937441523,
      "end": 1702937441523,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937441523,
      "end": 1702937441523,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937441523,
      "end": 1702937441523,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937441523,
      "end": 1702937441523,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937441523,
      "end": 1702937441523,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937441523,
      "end": 1702937441523,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937441523,
      "end": 1702937441523,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937441523,
      "end": 1702937441524,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937441524,
      "end": 1702937441524,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937441524,
      "end": 1702937441524,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937441524,
      "end": 1702937441524,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937441524,
      "end": 1702937441524,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937441524,
      "end": 1702937441524,
      "order": "normal"
    }
  ]
}
