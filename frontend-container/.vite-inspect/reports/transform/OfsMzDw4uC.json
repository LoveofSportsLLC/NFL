{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\nexport function LoneSchemaDefinitionRule(context) {\n  var _ref, _ref2, _oldSchema$astNode;\n\n  const oldSchema = context.getSchema();\n  const alreadyDefined =\n    (_ref =\n      (_ref2 =\n        (_oldSchema$astNode =\n          oldSchema === null || oldSchema === void 0\n            ? void 0\n            : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0\n          ? _oldSchema$astNode\n          : oldSchema === null || oldSchema === void 0\n          ? void 0\n          : oldSchema.getQueryType()) !== null && _ref2 !== void 0\n        ? _ref2\n        : oldSchema === null || oldSchema === void 0\n        ? void 0\n        : oldSchema.getMutationType()) !== null && _ref !== void 0\n      ? _ref\n      : oldSchema === null || oldSchema === void 0\n      ? void 0\n      : oldSchema.getSubscriptionType();\n  let schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(\n          new GraphQLError(\n            'Cannot define a new schema within a schema extension.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(\n          new GraphQLError('Must provide only one schema definition.', {\n            nodes: node,\n          }),\n        );\n      }\n\n      ++schemaDefinitionsCount;\n    },\n  };\n}\n",
      "start": 1702937443092,
      "end": 1702937443106,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937443106,
      "end": 1702937443106,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937443106,
      "end": 1702937443106,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937443106,
      "end": 1702937443106,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937443106,
      "end": 1702937443106,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937443106,
      "end": 1702937443106,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937443106,
      "end": 1702937443106,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937443106,
      "end": 1702937443106,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937443106,
      "end": 1702937443106,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937443106,
      "end": 1702937443106,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937443106,
      "end": 1702937443106,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702937443106,
      "end": 1702937443106,
      "order": "normal"
    },
    {
      "name": "inject",
      "start": 1702937443106,
      "end": 1702937443106,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937443106,
      "end": 1702937443106,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937443106,
      "end": 1702937443106,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937443106,
      "end": 1702937443106,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937443106,
      "end": 1702937443106,
      "order": "normal"
    }
  ]
}
