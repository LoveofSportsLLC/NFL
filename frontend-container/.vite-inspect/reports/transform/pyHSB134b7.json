{
  "resolvedId": "/home/zepor/ssweb/frontend-container/node_modules/refractor/lang/robotframework.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nmodule.exports = robotframework\nrobotframework.displayName = 'robotframework'\nrobotframework.aliases = []\nfunction robotframework(Prism) {\n  ;(function (Prism) {\n    var comment = {\n      pattern: /(^[ \\t]*| {2}|\\t)#.*/m,\n      lookbehind: true,\n      greedy: true\n    }\n    var variable = {\n      pattern: /((?:^|[^\\\\])(?:\\\\{2})*)[$@&%]\\{(?:[^{}\\r\\n]|\\{[^{}\\r\\n]*\\})*\\}/,\n      lookbehind: true,\n      inside: {\n        punctuation: /^[$@&%]\\{|\\}$/\n      }\n    }\n    function createSection(name, inside) {\n      var extendecInside = {}\n      extendecInside['section-header'] = {\n        pattern: /^ ?\\*{3}.+?\\*{3}/,\n        alias: 'keyword'\n      } // copy inside tokens\n      for (var token in inside) {\n        extendecInside[token] = inside[token]\n      }\n      extendecInside['tag'] = {\n        pattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)\\[[-\\w]+\\]/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\[|\\]/\n        }\n      }\n      extendecInside['variable'] = variable\n      extendecInside['comment'] = comment\n      return {\n        pattern: RegExp(\n          /^ ?\\*{3}[ \\t]*<name>[ \\t]*\\*{3}(?:.|[\\r\\n](?!\\*{3}))*/.source.replace(\n            /<name>/g,\n            function () {\n              return name\n            }\n          ),\n          'im'\n        ),\n        alias: 'section',\n        inside: extendecInside\n      }\n    }\n    var docTag = {\n      pattern:\n        /(\\[Documentation\\](?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n      lookbehind: true,\n      alias: 'string'\n    }\n    var testNameLike = {\n      pattern: /([\\r\\n] ?)(?!#)(?:\\S(?:[ \\t]\\S)*)+/,\n      lookbehind: true,\n      alias: 'function',\n      inside: {\n        variable: variable\n      }\n    }\n    var testPropertyLike = {\n      pattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)(?!\\[|\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n      lookbehind: true,\n      inside: {\n        variable: variable\n      }\n    }\n    Prism.languages['robotframework'] = {\n      settings: createSection('Settings', {\n        documentation: {\n          pattern:\n            /([\\r\\n] ?Documentation(?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n          lookbehind: true,\n          alias: 'string'\n        },\n        property: {\n          pattern: /([\\r\\n] ?)(?!\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n          lookbehind: true\n        }\n      }),\n      variables: createSection('Variables'),\n      'test-cases': createSection('Test Cases', {\n        'test-name': testNameLike,\n        documentation: docTag,\n        property: testPropertyLike\n      }),\n      keywords: createSection('Keywords', {\n        'keyword-name': testNameLike,\n        documentation: docTag,\n        property: testPropertyLike\n      }),\n      tasks: createSection('Tasks', {\n        'task-name': testNameLike,\n        documentation: docTag,\n        property: testPropertyLike\n      }),\n      comment: comment\n    }\n    Prism.languages.robot = Prism.languages['robotframework']\n  })(Prism)\n}\n",
      "start": 1702937445043,
      "end": 1702937445067,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1702937445067,
      "end": 1702937445067,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702937445067,
      "end": 1702937445067,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702937445067,
      "end": 1702937445068,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702937445068,
      "end": 1702937445068,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702937445068,
      "end": 1702937445068,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702937445068,
      "end": 1702937445068,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702937445068,
      "end": 1702937445068,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702937445068,
      "end": 1702937445068,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702937445068,
      "end": 1702937445068,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702937445068,
      "end": 1702937445068,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar robotframework_1;\nvar hasRequiredRobotframework;\n\nfunction requireRobotframework () {\n\tif (hasRequiredRobotframework) return robotframework_1;\n\thasRequiredRobotframework = 1;\n\t'use strict'\n\n\trobotframework_1 = robotframework\n\trobotframework.displayName = 'robotframework'\n\trobotframework.aliases = []\n\tfunction robotframework(Prism) {\n\t  ;(function (Prism) {\n\t    var comment = {\n\t      pattern: /(^[ \\t]*| {2}|\\t)#.*/m,\n\t      lookbehind: true,\n\t      greedy: true\n\t    }\n\t    var variable = {\n\t      pattern: /((?:^|[^\\\\])(?:\\\\{2})*)[$@&%]\\{(?:[^{}\\r\\n]|\\{[^{}\\r\\n]*\\})*\\}/,\n\t      lookbehind: true,\n\t      inside: {\n\t        punctuation: /^[$@&%]\\{|\\}$/\n\t      }\n\t    }\n\t    function createSection(name, inside) {\n\t      var extendecInside = {}\n\t      extendecInside['section-header'] = {\n\t        pattern: /^ ?\\*{3}.+?\\*{3}/,\n\t        alias: 'keyword'\n\t      } // copy inside tokens\n\t      for (var token in inside) {\n\t        extendecInside[token] = inside[token]\n\t      }\n\t      extendecInside['tag'] = {\n\t        pattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)\\[[-\\w]+\\]/,\n\t        lookbehind: true,\n\t        inside: {\n\t          punctuation: /\\[|\\]/\n\t        }\n\t      }\n\t      extendecInside['variable'] = variable\n\t      extendecInside['comment'] = comment\n\t      return {\n\t        pattern: RegExp(\n\t          /^ ?\\*{3}[ \\t]*<name>[ \\t]*\\*{3}(?:.|[\\r\\n](?!\\*{3}))*/.source.replace(\n\t            /<name>/g,\n\t            function () {\n\t              return name\n\t            }\n\t          ),\n\t          'im'\n\t        ),\n\t        alias: 'section',\n\t        inside: extendecInside\n\t      }\n\t    }\n\t    var docTag = {\n\t      pattern:\n\t        /(\\[Documentation\\](?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n\t      lookbehind: true,\n\t      alias: 'string'\n\t    }\n\t    var testNameLike = {\n\t      pattern: /([\\r\\n] ?)(?!#)(?:\\S(?:[ \\t]\\S)*)+/,\n\t      lookbehind: true,\n\t      alias: 'function',\n\t      inside: {\n\t        variable: variable\n\t      }\n\t    }\n\t    var testPropertyLike = {\n\t      pattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)(?!\\[|\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n\t      lookbehind: true,\n\t      inside: {\n\t        variable: variable\n\t      }\n\t    }\n\t    Prism.languages['robotframework'] = {\n\t      settings: createSection('Settings', {\n\t        documentation: {\n\t          pattern:\n\t            /([\\r\\n] ?Documentation(?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n\t          lookbehind: true,\n\t          alias: 'string'\n\t        },\n\t        property: {\n\t          pattern: /([\\r\\n] ?)(?!\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n\t          lookbehind: true\n\t        }\n\t      }),\n\t      variables: createSection('Variables'),\n\t      'test-cases': createSection('Test Cases', {\n\t        'test-name': testNameLike,\n\t        documentation: docTag,\n\t        property: testPropertyLike\n\t      }),\n\t      keywords: createSection('Keywords', {\n\t        'keyword-name': testNameLike,\n\t        documentation: docTag,\n\t        property: testPropertyLike\n\t      }),\n\t      tasks: createSection('Tasks', {\n\t        'task-name': testNameLike,\n\t        documentation: docTag,\n\t        property: testPropertyLike\n\t      }),\n\t      comment: comment\n\t    }\n\t    Prism.languages.robot = Prism.languages['robotframework']\n\t  })(Prism)\n\t}\n\treturn robotframework_1;\n}\n\nexport { requireRobotframework as __require };",
      "start": 1702937445068,
      "end": 1702937445068,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1702937445068,
      "end": 1702937445068,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702937445068,
      "end": 1702937445068,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702937445068,
      "end": 1702937445068,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702937445068,
      "end": 1702937445068,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702937445068,
      "end": 1702937445068,
      "order": "normal"
    }
  ]
}
