# Stage 1: Build the application
FROM node:20-alpine as build
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm install
COPY . .

# Declaring build arguments
ARG VITE_AUTH0_DOMAIN
ARG VITE_AUTH0_CLIENT_ID
ARG VITE_AUTH0_SECRET
ARG VITE_AUTH0_BASE_URL
ARG VITE_AUTH0_ISSUER_BASE_URL
ARG VITE_API_AUDIENCE
ARG VITE_PUBLISHABLE_KEY
ARG VITE_BUY_BUTTON
ARG VITE_SECRET_KEY
ARG VITE_SUPPORT_API_URL
ARG GOOGLE_CLIENT_ID
ARG GOOGLE_CLIENT_SECRET
ARG GOOGLE_PROJECT_ID
ARG GOOGLE_AUTH_URI
ARG GOOGLE_TOKEN_URI
ARG GOOGLE_AUTH_PROVIDER_X509_CERT_URL
ARG GOOGLE_REDIRECT_URIS
ARG GOOGLE_JAVASCRIPT_ORIGINS
ARG GOOGLE_APIKEY



# Setting environment variables from build arguments
ENV VITE_AUTH0_DOMAIN=$VITE_AUTH0_DOMAIN \
    VITE_AUTH0_CLIENT_ID=$VITE_AUTH0_CLIENT_ID \
    VITE_AUTH0_SECRET=$VITE_AUTH0_SECRET \
    VITE_AUTH0_BASE_URL=$VITE_AUTH0_BASE_URL \
    VITE_AUTH0_ISSUER_BASE_URL=$VITE_AUTH0_ISSUER_BASE_URL \
    VITE_API_AUDIENCE=$VITE_API_AUDIENCE \
    VITE_PUBLISHABLE_KEY=$VITE_PUBLISHABLE_KEY \
    VITE_BUY_BUTTON=$VITE_BUY_BUTTON \
    VITE_SECRET_KEY=$VITE_SECRET_KEY \
    VITE_SUPPORT_API_URL=$VITE_SUPPORT_API_URL \
    GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID \
    GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET \
    GOOGLE_PROJECT_ID=$GOOGLE_PROJECT_ID \
    GOOGLE_AUTH_URI=$GOOGLE_AUTH_URI \
    GOOGLE_TOKEN_URI=$GOOGLE_TOKEN_URI \
    GOOGLE_AUTH_PROVIDER_X509_CERT_URL=$GOOGLE_AUTH_PROVIDER_X509_CERT_URL \
    GOOGLE_REDIRECT_URIS=$GOOGLE_REDIRECT_URIS \
    GOOGLE_JAVASCRIPT_ORIGINS=$GOOGLE_JAVASCRIPT_ORIGINS \
    GOOGLE_APIKEY=$GOOGLE_APIKEY \
    SENTRY_AUTH_TOKEN=$SENTRY_AUTH_TOKEN 

# Run the build script with increased memory limit
RUN npm run build:dev

# Stage 2: Development environment with node_modules and built source
FROM node:20-alpine
WORKDIR /app
# Copy built files from the build stage
# Copy built files from the build stage
COPY --from=build /app/dist /app/dist
COPY --from=build /app/public /app/public
COPY --from=build /app/node_modules /app/node_modules
COPY --from=build /app/package.json /app/package.json
COPY --from=build /app/server.js /app/server.js
# Ensure all dependencies are installed, including express and compression
#RUN npm install express compression

# Change owner of the /app folder to the node user for security reasons
RUN chown -R node:node /app

# Switch to the node user
USER node

# Set the environment variable for  development
ENV PUBLIC_ENV__NODE_ENV=development
ENV NODE_ENV=development
ENV APOLLO_TELEMETRY_DISABLED=true
# Expose the port the app runs on
EXPOSE 3000
# Run the server.js script with Node
CMD ["npm", "start"]
