#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Dec 16 08:30:15 2023 by generateDS.py version 2.43.3.
# Python 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]
#
# Command line options:
#   ('-o', 'team-v7.0.py')
#
# Command line arguments:
#   team-v7.0.xsd
#
# Command line:
#   /home/zepor/.local/bin/generateDS -o "team-v7.0.py" team-v7.0.xsd
#
# Current working directory (os.getcwd()):
#   NFL_v7
#

import sys
try:
    ModulenotfoundExp_ = ModuleNotFoundError
except NameError:
    ModulenotfoundExp_ = ImportError
from six.moves import zip_longest
import os
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
from lxml import etree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
TagNamePrefix = ""
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the _exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ModulenotfoundExp_ :
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ModulenotfoundExp_ :
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ModulenotfoundExp_ :

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ModulenotfoundExp_ :
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ModulenotfoundExp_ as exp:
    try:
        from generatedssupersuper import GeneratedsSuperSuper
    except ModulenotfoundExp_ as exp:
        class GeneratedsSuperSuper(object):
            pass
    
    class GeneratedsSuper(GeneratedsSuperSuper):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def __str__(self):
            settings = {
                'str_pretty_print': True,
                'str_indent_level': 0,
                'str_namespaceprefix': '',
                'str_name': self.__class__.__name__,
                'str_namespacedefs': '',
            }
            for n in settings:
                if hasattr(self, n):
                    settings[n] = getattr(self, n)
            if sys.version_info.major == 2:
                from StringIO import StringIO
            else:
                from io import StringIO
            output = StringIO()
            self.export(
                output,
                settings['str_indent_level'],
                pretty_print=settings['str_pretty_print'],
                namespaceprefix_=settings['str_namespaceprefix'],
                name_=settings['str_name'],
                namespacedef_=settings['str_namespacedefs']
            )
            strval = output.getvalue()
            output.close()
            return strval
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data).decode('ascii')
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % int(input_data)
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer values')
            return values
        def gds_format_float(self, input_data, input_name=''):
            value = ('%.15f' % float(input_data)).rstrip('0')
            if value.endswith('.'):
                value += '0'
            return value
    
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return_value = '%s' % input_data
            if '.' in return_value:
                return_value = return_value.rstrip('0')
                if return_value.endswith('.'):
                    return_value = return_value.rstrip('.')
            return return_value
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return ' '.join([self.gds_format_decimal(item) for item in input_data])
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            input_data = input_data.strip()
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                value = self.gds_parse_boolean(value, node, input_name)
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            target = str(target)
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    s1 = s1.replace('\n', '&#10;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        if prefix == 'xml':
            namespace = 'http://www.w3.org/XML/1998/namespace'
        else:
            namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)


#
# Start enum classes
#
class coverageType(str, Enum):
    FULL='full'
    EXTENDED_BOXSCORE='extended_boxscore'
    BOXSCORE='boxscore'


class eligibilityType(str, Enum):
    FR='FR'
    SO='SO'
    JR='JR'
    SR='SR'
    GR='GR'


class entry_modeType(str, Enum):
    INGEST='INGEST'
    LDE='LDE'


class game_typeType(str, Enum):
    REGULAR='regular'
    CONFERENCE_CHAMPIONSHIP='conference_championship'
    BOWL='bowl'
    PLAYOFF='playoff'


class playoff_game_typeType(str, Enum):
    CFP_SEMIFINAL='CFP Semifinal'
    CFP_NATIONAL_CHAMPIONSHIP='CFP National Championship'
    FCS_FIRST_ROUND='FCS First Round'
    FCS_SECOND_ROUND='FCS Second Round'
    FCS_QUARTERFINAL='FCS Quarterfinal'
    FCS_SEMIFINAL='FCS Semifinal'
    FCS_CHAMPIONSHIP='FCS Championship'


class positionType(str, Enum):
    ATH='ATH'
    C='C'
    CG='C/G'
    CB='CB'
    CBRS='CB/RS'
    CBS='CB/S'
    DB='DB'
    DE='DE'
    DELB='DE/LB'
    DL='DL'
    DT='DT'
    FB='FB'
    FBRB='FB/RB'
    FS='FS'
    G='G'
    GC='G/C'
    GT='G/T'
    HB='H/B'
    HBT='H/B/T'
    HB_1='HB'
    ILB='ILB'
    K='K'
    KP='K/P'
    KR='KR'
    L='L'
    LB='LB'
    LBDE='LB/DE'
    LS='LS'
    MLB='MLB'
    NT='NT'
    OG='OG'
    OL='OL'
    OLB='OLB'
    OT='OT'
    P='P'
    QB='QB'
    QBWR='QB/WR'
    RB='RB'
    RBST='RB/ST'
    RBWR='RB/WR'
    RS='RS'
    S='S'
    SS='SS'
    SAF='SAF'
    T='T'
    TG='T/G'
    TE='TE'
    TEDT='TE/DT'
    TEFB='TE/FB'
    TELS='TE/LS'
    TEW='TEW'
    WR='WR'
    WRCB='WR/CB'
    WRKR='WR/KR'
    WRPR='WR/PR'
    WRRB='WR/RB'
    WRRS='WR/RS'
    QBWR_1='QB/WR'
    DBLB='DB/LB'
    FBDL='FB/DL'
    DEDT='DE/DT'


class roof_typeType(str, Enum):
    OUTDOOR='outdoor'
    DOME='dome'
    RETRACTABLE_DOME='retractable_dome'


class statusType(str, Enum):
    SCHEDULED='scheduled'
    CREATED='created'
    INPROGRESS='inprogress'
    HALFTIME='halftime'
    COMPLETE='complete'
    CLOSED='closed'
    CANCELLED='cancelled'
    POSTPONED='postponed'
    DELAYED='delayed'
    TIMETBD='time-tbd'
    FLEXSCHEDULE='flex-schedule'


class surfaceType(str, Enum):
    TURF='turf'
    ARTIFICIAL='artificial'


class typeType(str, Enum):
    PRE='PRE'
    REG='REG'
    PST='PST'


#
# Start data representation classes
#
class teamProfileType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, owner=None, general_manager=None, president=None, mascot=None, nicknames=None, fight_song=None, championships_won=None, championship_seasons=None, conference_titles=None, division_titles=None, playoff_appearances=None, id=None, sr_id=None, alias=None, name=None, market=None, founded=None, reference=None, franchise=None, venue=None, hierarchy=None, references=None, coaches=None, team_colors=None, players=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "t"
        self.owner = _cast(None, owner)
        self.owner_nsprefix_ = None
        self.general_manager = _cast(None, general_manager)
        self.general_manager_nsprefix_ = None
        self.president = _cast(None, president)
        self.president_nsprefix_ = None
        self.mascot = _cast(None, mascot)
        self.mascot_nsprefix_ = None
        self.nicknames = _cast(None, nicknames)
        self.nicknames_nsprefix_ = None
        self.fight_song = _cast(None, fight_song)
        self.fight_song_nsprefix_ = None
        self.championships_won = _cast(int, championships_won)
        self.championships_won_nsprefix_ = None
        self.championship_seasons = _cast(None, championship_seasons)
        self.championship_seasons_nsprefix_ = None
        self.conference_titles = _cast(int, conference_titles)
        self.conference_titles_nsprefix_ = None
        self.division_titles = _cast(int, division_titles)
        self.division_titles_nsprefix_ = None
        self.playoff_appearances = _cast(int, playoff_appearances)
        self.playoff_appearances_nsprefix_ = None
        self.id = _cast(None, id)
        self.id_nsprefix_ = None
        self.sr_id = _cast(None, sr_id)
        self.sr_id_nsprefix_ = None
        self.alias = _cast(None, alias)
        self.alias_nsprefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.market = _cast(None, market)
        self.market_nsprefix_ = None
        self.founded = _cast(int, founded)
        self.founded_nsprefix_ = None
        self.reference = _cast(None, reference)
        self.reference_nsprefix_ = None
        self.franchise = franchise
        self.franchise_nsprefix_ = "t"
        self.venue = venue
        self.venue_nsprefix_ = "t"
        self.hierarchy = hierarchy
        self.hierarchy_nsprefix_ = "t"
        self.references = references
        self.references_nsprefix_ = "t"
        self.coaches = coaches
        self.coaches_nsprefix_ = "t"
        self.team_colors = team_colors
        self.team_colors_nsprefix_ = "t"
        self.players = players
        self.players_nsprefix_ = "t"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, teamProfileType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if teamProfileType.subclass:
            return teamProfileType.subclass(*args_, **kwargs_)
        else:
            return teamProfileType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_franchise(self):
        return self.franchise
    def set_franchise(self, franchise):
        self.franchise = franchise
    def get_venue(self):
        return self.venue
    def set_venue(self, venue):
        self.venue = venue
    def get_hierarchy(self):
        return self.hierarchy
    def set_hierarchy(self, hierarchy):
        self.hierarchy = hierarchy
    def get_references(self):
        return self.references
    def set_references(self, references):
        self.references = references
    def get_coaches(self):
        return self.coaches
    def set_coaches(self, coaches):
        self.coaches = coaches
    def get_team_colors(self):
        return self.team_colors
    def set_team_colors(self, team_colors):
        self.team_colors = team_colors
    def get_players(self):
        return self.players
    def set_players(self, players):
        self.players = players
    def get_owner(self):
        return self.owner
    def set_owner(self, owner):
        self.owner = owner
    def get_general_manager(self):
        return self.general_manager
    def set_general_manager(self, general_manager):
        self.general_manager = general_manager
    def get_president(self):
        return self.president
    def set_president(self, president):
        self.president = president
    def get_mascot(self):
        return self.mascot
    def set_mascot(self, mascot):
        self.mascot = mascot
    def get_nicknames(self):
        return self.nicknames
    def set_nicknames(self, nicknames):
        self.nicknames = nicknames
    def get_fight_song(self):
        return self.fight_song
    def set_fight_song(self, fight_song):
        self.fight_song = fight_song
    def get_championships_won(self):
        return self.championships_won
    def set_championships_won(self, championships_won):
        self.championships_won = championships_won
    def get_championship_seasons(self):
        return self.championship_seasons
    def set_championship_seasons(self, championship_seasons):
        self.championship_seasons = championship_seasons
    def get_conference_titles(self):
        return self.conference_titles
    def set_conference_titles(self, conference_titles):
        self.conference_titles = conference_titles
    def get_division_titles(self):
        return self.division_titles
    def set_division_titles(self, division_titles):
        self.division_titles = division_titles
    def get_playoff_appearances(self):
        return self.playoff_appearances
    def set_playoff_appearances(self, playoff_appearances):
        self.playoff_appearances = playoff_appearances
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_sr_id(self):
        return self.sr_id
    def set_sr_id(self, sr_id):
        self.sr_id = sr_id
    def get_alias(self):
        return self.alias
    def set_alias(self, alias):
        self.alias = alias
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_market(self):
        return self.market
    def set_market(self, market):
        self.market = market
    def get_founded(self):
        return self.founded
    def set_founded(self, founded):
        self.founded = founded
    def get_reference(self):
        return self.reference
    def set_reference(self, reference):
        self.reference = reference
    def has__content(self):
        if (
            self.franchise is not None or
            self.venue is not None or
            self.hierarchy is not None or
            self.references is not None or
            self.coaches is not None or
            self.team_colors is not None or
            self.players is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='teamProfileType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('teamProfileType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'teamProfileType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='teamProfileType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='teamProfileType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='teamProfileType'):
        if self.owner is not None and 'owner' not in already_processed:
            already_processed.add('owner')
            outfile.write(' owner=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.owner), input_name='owner')), ))
        if self.general_manager is not None and 'general_manager' not in already_processed:
            already_processed.add('general_manager')
            outfile.write(' general_manager=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.general_manager), input_name='general_manager')), ))
        if self.president is not None and 'president' not in already_processed:
            already_processed.add('president')
            outfile.write(' president=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.president), input_name='president')), ))
        if self.mascot is not None and 'mascot' not in already_processed:
            already_processed.add('mascot')
            outfile.write(' mascot=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.mascot), input_name='mascot')), ))
        if self.nicknames is not None and 'nicknames' not in already_processed:
            already_processed.add('nicknames')
            outfile.write(' nicknames=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.nicknames), input_name='nicknames')), ))
        if self.fight_song is not None and 'fight_song' not in already_processed:
            already_processed.add('fight_song')
            outfile.write(' fight_song=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.fight_song), input_name='fight_song')), ))
        if self.championships_won is not None and 'championships_won' not in already_processed:
            already_processed.add('championships_won')
            outfile.write(' championships_won="%s"' % self.gds_format_integer(self.championships_won, input_name='championships_won'))
        if self.championship_seasons is not None and 'championship_seasons' not in already_processed:
            already_processed.add('championship_seasons')
            outfile.write(' championship_seasons=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.championship_seasons), input_name='championship_seasons')), ))
        if self.conference_titles is not None and 'conference_titles' not in already_processed:
            already_processed.add('conference_titles')
            outfile.write(' conference_titles="%s"' % self.gds_format_integer(self.conference_titles, input_name='conference_titles'))
        if self.division_titles is not None and 'division_titles' not in already_processed:
            already_processed.add('division_titles')
            outfile.write(' division_titles="%s"' % self.gds_format_integer(self.division_titles, input_name='division_titles'))
        if self.playoff_appearances is not None and 'playoff_appearances' not in already_processed:
            already_processed.add('playoff_appearances')
            outfile.write(' playoff_appearances="%s"' % self.gds_format_integer(self.playoff_appearances, input_name='playoff_appearances'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
        if self.sr_id is not None and 'sr_id' not in already_processed:
            already_processed.add('sr_id')
            outfile.write(' sr_id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.sr_id), input_name='sr_id')), ))
        if self.alias is not None and 'alias' not in already_processed:
            already_processed.add('alias')
            outfile.write(' alias=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.alias), input_name='alias')), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.market is not None and 'market' not in already_processed:
            already_processed.add('market')
            outfile.write(' market=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.market), input_name='market')), ))
        if self.founded is not None and 'founded' not in already_processed:
            already_processed.add('founded')
            outfile.write(' founded="%s"' % self.gds_format_integer(self.founded, input_name='founded'))
        if self.reference is not None and 'reference' not in already_processed:
            already_processed.add('reference')
            outfile.write(' reference=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.reference), input_name='reference')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='teamProfileType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.franchise is not None:
            namespaceprefix_ = self.franchise_nsprefix_ + ':' if (UseCapturedNS_ and self.franchise_nsprefix_) else ''
            self.franchise.export(outfile, level, namespaceprefix_='t:', namespacedef_='', name_='franchise', pretty_print=pretty_print)
        if self.venue is not None:
            namespaceprefix_ = self.venue_nsprefix_ + ':' if (UseCapturedNS_ and self.venue_nsprefix_) else ''
            self.venue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='venue', pretty_print=pretty_print)
        if self.hierarchy is not None:
            namespaceprefix_ = self.hierarchy_nsprefix_ + ':' if (UseCapturedNS_ and self.hierarchy_nsprefix_) else ''
            self.hierarchy.export(outfile, level, namespaceprefix_, namespacedef_='', name_='hierarchy', pretty_print=pretty_print)
        if self.references is not None:
            namespaceprefix_ = self.references_nsprefix_ + ':' if (UseCapturedNS_ and self.references_nsprefix_) else ''
            self.references.export(outfile, level, namespaceprefix_='t:', namespacedef_='', name_='references', pretty_print=pretty_print)
        if self.coaches is not None:
            namespaceprefix_ = self.coaches_nsprefix_ + ':' if (UseCapturedNS_ and self.coaches_nsprefix_) else ''
            self.coaches.export(outfile, level, namespaceprefix_, namespacedef_='', name_='coaches', pretty_print=pretty_print)
        if self.team_colors is not None:
            namespaceprefix_ = self.team_colors_nsprefix_ + ':' if (UseCapturedNS_ and self.team_colors_nsprefix_) else ''
            self.team_colors.export(outfile, level, namespaceprefix_, namespacedef_='', name_='team_colors', pretty_print=pretty_print)
        if self.players is not None:
            namespaceprefix_ = self.players_nsprefix_ + ':' if (UseCapturedNS_ and self.players_nsprefix_) else ''
            self.players.export(outfile, level, namespaceprefix_, namespacedef_='', name_='players', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('owner', node)
        if value is not None and 'owner' not in already_processed:
            already_processed.add('owner')
            self.owner = value
        value = find_attr_value_('general_manager', node)
        if value is not None and 'general_manager' not in already_processed:
            already_processed.add('general_manager')
            self.general_manager = value
        value = find_attr_value_('president', node)
        if value is not None and 'president' not in already_processed:
            already_processed.add('president')
            self.president = value
        value = find_attr_value_('mascot', node)
        if value is not None and 'mascot' not in already_processed:
            already_processed.add('mascot')
            self.mascot = value
        value = find_attr_value_('nicknames', node)
        if value is not None and 'nicknames' not in already_processed:
            already_processed.add('nicknames')
            self.nicknames = value
        value = find_attr_value_('fight_song', node)
        if value is not None and 'fight_song' not in already_processed:
            already_processed.add('fight_song')
            self.fight_song = value
        value = find_attr_value_('championships_won', node)
        if value is not None and 'championships_won' not in already_processed:
            already_processed.add('championships_won')
            self.championships_won = self.gds_parse_integer(value, node, 'championships_won')
        value = find_attr_value_('championship_seasons', node)
        if value is not None and 'championship_seasons' not in already_processed:
            already_processed.add('championship_seasons')
            self.championship_seasons = value
        value = find_attr_value_('conference_titles', node)
        if value is not None and 'conference_titles' not in already_processed:
            already_processed.add('conference_titles')
            self.conference_titles = self.gds_parse_integer(value, node, 'conference_titles')
        value = find_attr_value_('division_titles', node)
        if value is not None and 'division_titles' not in already_processed:
            already_processed.add('division_titles')
            self.division_titles = self.gds_parse_integer(value, node, 'division_titles')
        value = find_attr_value_('playoff_appearances', node)
        if value is not None and 'playoff_appearances' not in already_processed:
            already_processed.add('playoff_appearances')
            self.playoff_appearances = self.gds_parse_integer(value, node, 'playoff_appearances')
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
        value = find_attr_value_('sr_id', node)
        if value is not None and 'sr_id' not in already_processed:
            already_processed.add('sr_id')
            self.sr_id = value
        value = find_attr_value_('alias', node)
        if value is not None and 'alias' not in already_processed:
            already_processed.add('alias')
            self.alias = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('market', node)
        if value is not None and 'market' not in already_processed:
            already_processed.add('market')
            self.market = value
        value = find_attr_value_('founded', node)
        if value is not None and 'founded' not in already_processed:
            already_processed.add('founded')
            self.founded = self.gds_parse_integer(value, node, 'founded')
        value = find_attr_value_('reference', node)
        if value is not None and 'reference' not in already_processed:
            already_processed.add('reference')
            self.reference = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'franchise':
            obj_ = franchise.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.franchise = obj_
            obj_.original_tagname_ = 'franchise'
        elif nodeName_ == 'venue':
            obj_ = venueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.venue = obj_
            obj_.original_tagname_ = 'venue'
        elif nodeName_ == 'hierarchy':
            obj_ = hierarchyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.hierarchy = obj_
            obj_.original_tagname_ = 'hierarchy'
        elif nodeName_ == 'references':
            obj_ = references.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.references = obj_
            obj_.original_tagname_ = 'references'
        elif nodeName_ == 'coaches':
            obj_ = coachesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.coaches = obj_
            obj_.original_tagname_ = 'coaches'
        elif nodeName_ == 'team_colors':
            obj_ = teamColorsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.team_colors = obj_
            obj_.original_tagname_ = 'team_colors'
        elif nodeName_ == 'players':
            obj_ = playersType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.players = obj_
            obj_.original_tagname_ = 'players'
# end class teamProfileType


class organizationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, id=None, sr_id=None, alias=None, name=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "t"
        self.id = _cast(None, id)
        self.id_nsprefix_ = None
        self.sr_id = _cast(None, sr_id)
        self.sr_id_nsprefix_ = None
        self.alias = _cast(None, alias)
        self.alias_nsprefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, organizationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if organizationType.subclass:
            return organizationType.subclass(*args_, **kwargs_)
        else:
            return organizationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_sr_id(self):
        return self.sr_id
    def set_sr_id(self, sr_id):
        self.sr_id = sr_id
    def get_alias(self):
        return self.alias
    def set_alias(self, alias):
        self.alias = alias
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='organizationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('organizationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'organizationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='organizationType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='organizationType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='organizationType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
        if self.sr_id is not None and 'sr_id' not in already_processed:
            already_processed.add('sr_id')
            outfile.write(' sr_id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.sr_id), input_name='sr_id')), ))
        if self.alias is not None and 'alias' not in already_processed:
            already_processed.add('alias')
            outfile.write(' alias=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.alias), input_name='alias')), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='organizationType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
        value = find_attr_value_('sr_id', node)
        if value is not None and 'sr_id' not in already_processed:
            already_processed.add('sr_id')
            self.sr_id = value
        value = find_attr_value_('alias', node)
        if value is not None and 'alias' not in already_processed:
            already_processed.add('alias')
            self.alias = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class organizationType


class playerProfileType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, id=None, sr_id=None, name=None, jersey=None, reference=None, position=None, abbr_name=None, birth_date=None, birth_place=None, college=None, college_conf=None, first_name=None, height=None, high_school=None, last_name=None, preferred_name=None, rookie_year=None, status=None, weight=None, name_suffix=None, eligibility=None, draft=None, references=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "t"
        self.id = _cast(None, id)
        self.id_nsprefix_ = None
        self.sr_id = _cast(None, sr_id)
        self.sr_id_nsprefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.jersey = _cast(None, jersey)
        self.jersey_nsprefix_ = None
        self.reference = _cast(None, reference)
        self.reference_nsprefix_ = None
        self.position = _cast(None, position)
        self.position_nsprefix_ = None
        self.abbr_name = _cast(None, abbr_name)
        self.abbr_name_nsprefix_ = None
        if isinstance(birth_date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(birth_date, '%Y-%m-%d').date()
        else:
            initvalue_ = birth_date
        self.birth_date = initvalue_
        self.birth_place = _cast(None, birth_place)
        self.birth_place_nsprefix_ = None
        self.college = _cast(None, college)
        self.college_nsprefix_ = None
        self.college_conf = _cast(None, college_conf)
        self.college_conf_nsprefix_ = None
        self.first_name = _cast(None, first_name)
        self.first_name_nsprefix_ = None
        self.height = _cast(int, height)
        self.height_nsprefix_ = None
        self.high_school = _cast(None, high_school)
        self.high_school_nsprefix_ = None
        self.last_name = _cast(None, last_name)
        self.last_name_nsprefix_ = None
        self.preferred_name = _cast(None, preferred_name)
        self.preferred_name_nsprefix_ = None
        self.rookie_year = _cast(int, rookie_year)
        self.rookie_year_nsprefix_ = None
        self.status = _cast(None, status)
        self.status_nsprefix_ = None
        self.weight = _cast(float, weight)
        self.weight_nsprefix_ = None
        self.name_suffix = _cast(None, name_suffix)
        self.name_suffix_nsprefix_ = None
        self.eligibility = _cast(None, eligibility)
        self.eligibility_nsprefix_ = None
        self.draft = draft
        self.draft_nsprefix_ = "t"
        self.references = references
        self.references_nsprefix_ = "t"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, playerProfileType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if playerProfileType.subclass:
            return playerProfileType.subclass(*args_, **kwargs_)
        else:
            return playerProfileType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_draft(self):
        return self.draft
    def set_draft(self, draft):
        self.draft = draft
    def get_references(self):
        return self.references
    def set_references(self, references):
        self.references = references
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_sr_id(self):
        return self.sr_id
    def set_sr_id(self, sr_id):
        self.sr_id = sr_id
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_jersey(self):
        return self.jersey
    def set_jersey(self, jersey):
        self.jersey = jersey
    def get_reference(self):
        return self.reference
    def set_reference(self, reference):
        self.reference = reference
    def get_position(self):
        return self.position
    def set_position(self, position):
        self.position = position
    def get_abbr_name(self):
        return self.abbr_name
    def set_abbr_name(self, abbr_name):
        self.abbr_name = abbr_name
    def get_birth_date(self):
        return self.birth_date
    def set_birth_date(self, birth_date):
        self.birth_date = birth_date
    def get_birth_place(self):
        return self.birth_place
    def set_birth_place(self, birth_place):
        self.birth_place = birth_place
    def get_college(self):
        return self.college
    def set_college(self, college):
        self.college = college
    def get_college_conf(self):
        return self.college_conf
    def set_college_conf(self, college_conf):
        self.college_conf = college_conf
    def get_first_name(self):
        return self.first_name
    def set_first_name(self, first_name):
        self.first_name = first_name
    def get_height(self):
        return self.height
    def set_height(self, height):
        self.height = height
    def get_high_school(self):
        return self.high_school
    def set_high_school(self, high_school):
        self.high_school = high_school
    def get_last_name(self):
        return self.last_name
    def set_last_name(self, last_name):
        self.last_name = last_name
    def get_preferred_name(self):
        return self.preferred_name
    def set_preferred_name(self, preferred_name):
        self.preferred_name = preferred_name
    def get_rookie_year(self):
        return self.rookie_year
    def set_rookie_year(self, rookie_year):
        self.rookie_year = rookie_year
    def get_status(self):
        return self.status
    def set_status(self, status):
        self.status = status
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_name_suffix(self):
        return self.name_suffix
    def set_name_suffix(self, name_suffix):
        self.name_suffix = name_suffix
    def get_eligibility(self):
        return self.eligibility
    def set_eligibility(self, eligibility):
        self.eligibility = eligibility
    def validate_positionType(self, value):
        # Validate type positionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ATH', 'C', 'C/G', 'CB', 'CB/RS', 'CB/S', 'DB', 'DE', 'DE/LB', 'DL', 'DT', 'FB', 'FB/RB', 'FS', 'G', 'G/C', 'G/T', 'H/B', 'H/B/T', 'HB', 'ILB', 'K', 'K/P', 'KR', 'L', 'LB', 'LB/DE', 'LS', 'MLB', 'NT', 'OG', 'OL', 'OLB', 'OT', 'P', 'QB', 'QB/WR', 'RB', 'RB/ST', 'RB/WR', 'RS', 'S', 'SS', 'SAF', 'T', 'T/G', 'TE', 'TE/DT', 'TE/FB', 'TE/LS', 'TEW', 'WR', 'WR/CB', 'WR/KR', 'WR/PR', 'WR/RB', 'WR/RS', 'QB/WR', 'DB/LB', 'FB/DL', 'DE/DT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on positionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_eligibilityType(self, value):
        # Validate type eligibilityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FR', 'SO', 'JR', 'SR', 'GR']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on eligibilityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.draft is not None or
            self.references is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='playerProfileType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('playerProfileType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'playerProfileType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='playerProfileType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='playerProfileType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='playerProfileType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
        if self.sr_id is not None and 'sr_id' not in already_processed:
            already_processed.add('sr_id')
            outfile.write(' sr_id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.sr_id), input_name='sr_id')), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.jersey is not None and 'jersey' not in already_processed:
            already_processed.add('jersey')
            outfile.write(' jersey=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.jersey), input_name='jersey')), ))
        if self.reference is not None and 'reference' not in already_processed:
            already_processed.add('reference')
            outfile.write(' reference=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.reference), input_name='reference')), ))
        if self.position is not None and 'position' not in already_processed:
            already_processed.add('position')
            outfile.write(' position=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.position), input_name='position')), ))
        if self.abbr_name is not None and 'abbr_name' not in already_processed:
            already_processed.add('abbr_name')
            outfile.write(' abbr_name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.abbr_name), input_name='abbr_name')), ))
        if self.birth_date is not None and 'birth_date' not in already_processed:
            already_processed.add('birth_date')
            outfile.write(' birth_date="%s"' % self.gds_format_date(self.birth_date, input_name='birth_date'))
        if self.birth_place is not None and 'birth_place' not in already_processed:
            already_processed.add('birth_place')
            outfile.write(' birth_place=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.birth_place), input_name='birth_place')), ))
        if self.college is not None and 'college' not in already_processed:
            already_processed.add('college')
            outfile.write(' college=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.college), input_name='college')), ))
        if self.college_conf is not None and 'college_conf' not in already_processed:
            already_processed.add('college_conf')
            outfile.write(' college_conf=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.college_conf), input_name='college_conf')), ))
        if self.first_name is not None and 'first_name' not in already_processed:
            already_processed.add('first_name')
            outfile.write(' first_name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.first_name), input_name='first_name')), ))
        if self.height is not None and 'height' not in already_processed:
            already_processed.add('height')
            outfile.write(' height="%s"' % self.gds_format_integer(self.height, input_name='height'))
        if self.high_school is not None and 'high_school' not in already_processed:
            already_processed.add('high_school')
            outfile.write(' high_school=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.high_school), input_name='high_school')), ))
        if self.last_name is not None and 'last_name' not in already_processed:
            already_processed.add('last_name')
            outfile.write(' last_name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.last_name), input_name='last_name')), ))
        if self.preferred_name is not None and 'preferred_name' not in already_processed:
            already_processed.add('preferred_name')
            outfile.write(' preferred_name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.preferred_name), input_name='preferred_name')), ))
        if self.rookie_year is not None and 'rookie_year' not in already_processed:
            already_processed.add('rookie_year')
            outfile.write(' rookie_year="%s"' % self.gds_format_integer(self.rookie_year, input_name='rookie_year'))
        if self.status is not None and 'status' not in already_processed:
            already_processed.add('status')
            outfile.write(' status=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.status), input_name='status')), ))
        if self.weight is not None and 'weight' not in already_processed:
            already_processed.add('weight')
            outfile.write(' weight="%s"' % self.gds_format_decimal(self.weight, input_name='weight'))
        if self.name_suffix is not None and 'name_suffix' not in already_processed:
            already_processed.add('name_suffix')
            outfile.write(' name_suffix=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name_suffix), input_name='name_suffix')), ))
        if self.eligibility is not None and 'eligibility' not in already_processed:
            already_processed.add('eligibility')
            outfile.write(' eligibility=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.eligibility), input_name='eligibility')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='playerProfileType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.draft is not None:
            namespaceprefix_ = self.draft_nsprefix_ + ':' if (UseCapturedNS_ and self.draft_nsprefix_) else ''
            self.draft.export(outfile, level, namespaceprefix_, namespacedef_='', name_='draft', pretty_print=pretty_print)
        if self.references is not None:
            namespaceprefix_ = self.references_nsprefix_ + ':' if (UseCapturedNS_ and self.references_nsprefix_) else ''
            self.references.export(outfile, level, namespaceprefix_='t:', namespacedef_='', name_='references', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
        value = find_attr_value_('sr_id', node)
        if value is not None and 'sr_id' not in already_processed:
            already_processed.add('sr_id')
            self.sr_id = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('jersey', node)
        if value is not None and 'jersey' not in already_processed:
            already_processed.add('jersey')
            self.jersey = value
        value = find_attr_value_('reference', node)
        if value is not None and 'reference' not in already_processed:
            already_processed.add('reference')
            self.reference = value
        value = find_attr_value_('position', node)
        if value is not None and 'position' not in already_processed:
            already_processed.add('position')
            self.position = value
            self.validate_positionType(self.position)    # validate type positionType
        value = find_attr_value_('abbr_name', node)
        if value is not None and 'abbr_name' not in already_processed:
            already_processed.add('abbr_name')
            self.abbr_name = value
        value = find_attr_value_('birth_date', node)
        if value is not None and 'birth_date' not in already_processed:
            already_processed.add('birth_date')
            try:
                self.birth_date = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (birth_date): %s' % exp)
        value = find_attr_value_('birth_place', node)
        if value is not None and 'birth_place' not in already_processed:
            already_processed.add('birth_place')
            self.birth_place = value
        value = find_attr_value_('college', node)
        if value is not None and 'college' not in already_processed:
            already_processed.add('college')
            self.college = value
        value = find_attr_value_('college_conf', node)
        if value is not None and 'college_conf' not in already_processed:
            already_processed.add('college_conf')
            self.college_conf = value
        value = find_attr_value_('first_name', node)
        if value is not None and 'first_name' not in already_processed:
            already_processed.add('first_name')
            self.first_name = value
        value = find_attr_value_('height', node)
        if value is not None and 'height' not in already_processed:
            already_processed.add('height')
            self.height = self.gds_parse_integer(value, node, 'height')
        value = find_attr_value_('high_school', node)
        if value is not None and 'high_school' not in already_processed:
            already_processed.add('high_school')
            self.high_school = value
        value = find_attr_value_('last_name', node)
        if value is not None and 'last_name' not in already_processed:
            already_processed.add('last_name')
            self.last_name = value
        value = find_attr_value_('preferred_name', node)
        if value is not None and 'preferred_name' not in already_processed:
            already_processed.add('preferred_name')
            self.preferred_name = value
        value = find_attr_value_('rookie_year', node)
        if value is not None and 'rookie_year' not in already_processed:
            already_processed.add('rookie_year')
            self.rookie_year = self.gds_parse_integer(value, node, 'rookie_year')
        value = find_attr_value_('status', node)
        if value is not None and 'status' not in already_processed:
            already_processed.add('status')
            self.status = value
        value = find_attr_value_('weight', node)
        if value is not None and 'weight' not in already_processed:
            already_processed.add('weight')
            value = self.gds_parse_decimal(value, node, 'weight')
            self.weight = value
        value = find_attr_value_('name_suffix', node)
        if value is not None and 'name_suffix' not in already_processed:
            already_processed.add('name_suffix')
            self.name_suffix = value
        value = find_attr_value_('eligibility', node)
        if value is not None and 'eligibility' not in already_processed:
            already_processed.add('eligibility')
            self.eligibility = value
            self.validate_eligibilityType(self.eligibility)    # validate type eligibilityType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'draft':
            obj_ = draftType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.draft = obj_
            obj_.original_tagname_ = 'draft'
        elif nodeName_ == 'references':
            obj_ = references.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.references = obj_
            obj_.original_tagname_ = 'references'
# end class playerProfileType


class referenceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, id=None, origin=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "t"
        self.id = _cast(None, id)
        self.id_nsprefix_ = None
        self.origin = _cast(None, origin)
        self.origin_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, referenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if referenceType.subclass:
            return referenceType.subclass(*args_, **kwargs_)
        else:
            return referenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_origin(self):
        return self.origin
    def set_origin(self, origin):
        self.origin = origin
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='referenceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('referenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'referenceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='referenceType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='referenceType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='referenceType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
        if self.origin is not None and 'origin' not in already_processed:
            already_processed.add('origin')
            outfile.write(' origin=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.origin), input_name='origin')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='referenceType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
        value = find_attr_value_('origin', node)
        if value is not None and 'origin' not in already_processed:
            already_processed.add('origin')
            self.origin = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class referenceType


class venueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, id=None, sr_id=None, name=None, address=None, capacity=None, city=None, country=None, state=None, zip=None, roof_type=None, surface=None, location=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "t"
        self.id = _cast(None, id)
        self.id_nsprefix_ = None
        self.sr_id = _cast(None, sr_id)
        self.sr_id_nsprefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.address = _cast(None, address)
        self.address_nsprefix_ = None
        self.capacity = _cast(int, capacity)
        self.capacity_nsprefix_ = None
        self.city = _cast(None, city)
        self.city_nsprefix_ = None
        self.country = _cast(None, country)
        self.country_nsprefix_ = None
        self.state = _cast(None, state)
        self.state_nsprefix_ = None
        self.zip = _cast(None, zip)
        self.zip_nsprefix_ = None
        self.roof_type = _cast(None, roof_type)
        self.roof_type_nsprefix_ = None
        self.surface = _cast(None, surface)
        self.surface_nsprefix_ = None
        self.location = location
        self.location_nsprefix_ = "t"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, venueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if venueType.subclass:
            return venueType.subclass(*args_, **kwargs_)
        else:
            return venueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_location(self):
        return self.location
    def set_location(self, location):
        self.location = location
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_sr_id(self):
        return self.sr_id
    def set_sr_id(self, sr_id):
        self.sr_id = sr_id
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def get_capacity(self):
        return self.capacity
    def set_capacity(self, capacity):
        self.capacity = capacity
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_country(self):
        return self.country
    def set_country(self, country):
        self.country = country
    def get_state(self):
        return self.state
    def set_state(self, state):
        self.state = state
    def get_zip(self):
        return self.zip
    def set_zip(self, zip):
        self.zip = zip
    def get_roof_type(self):
        return self.roof_type
    def set_roof_type(self, roof_type):
        self.roof_type = roof_type
    def get_surface(self):
        return self.surface
    def set_surface(self, surface):
        self.surface = surface
    def validate_roof_typeType(self, value):
        # Validate type roof_typeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['outdoor', 'dome', 'retractable_dome']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on roof_typeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_surfaceType(self, value):
        # Validate type surfaceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['turf', 'artificial']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on surfaceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.location is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='venueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('venueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'venueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='venueType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='venueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='venueType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
        if self.sr_id is not None and 'sr_id' not in already_processed:
            already_processed.add('sr_id')
            outfile.write(' sr_id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.sr_id), input_name='sr_id')), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.address is not None and 'address' not in already_processed:
            already_processed.add('address')
            outfile.write(' address=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.address), input_name='address')), ))
        if self.capacity is not None and 'capacity' not in already_processed:
            already_processed.add('capacity')
            outfile.write(' capacity="%s"' % self.gds_format_integer(self.capacity, input_name='capacity'))
        if self.city is not None and 'city' not in already_processed:
            already_processed.add('city')
            outfile.write(' city=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.city), input_name='city')), ))
        if self.country is not None and 'country' not in already_processed:
            already_processed.add('country')
            outfile.write(' country=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.country), input_name='country')), ))
        if self.state is not None and 'state' not in already_processed:
            already_processed.add('state')
            outfile.write(' state=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.state), input_name='state')), ))
        if self.zip is not None and 'zip' not in already_processed:
            already_processed.add('zip')
            outfile.write(' zip=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.zip), input_name='zip')), ))
        if self.roof_type is not None and 'roof_type' not in already_processed:
            already_processed.add('roof_type')
            outfile.write(' roof_type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.roof_type), input_name='roof_type')), ))
        if self.surface is not None and 'surface' not in already_processed:
            already_processed.add('surface')
            outfile.write(' surface=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.surface), input_name='surface')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='venueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.location is not None:
            namespaceprefix_ = self.location_nsprefix_ + ':' if (UseCapturedNS_ and self.location_nsprefix_) else ''
            self.location.export(outfile, level, namespaceprefix_, namespacedef_='', name_='location', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
        value = find_attr_value_('sr_id', node)
        if value is not None and 'sr_id' not in already_processed:
            already_processed.add('sr_id')
            self.sr_id = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('address', node)
        if value is not None and 'address' not in already_processed:
            already_processed.add('address')
            self.address = value
        value = find_attr_value_('capacity', node)
        if value is not None and 'capacity' not in already_processed:
            already_processed.add('capacity')
            self.capacity = self.gds_parse_integer(value, node, 'capacity')
        value = find_attr_value_('city', node)
        if value is not None and 'city' not in already_processed:
            already_processed.add('city')
            self.city = value
        value = find_attr_value_('country', node)
        if value is not None and 'country' not in already_processed:
            already_processed.add('country')
            self.country = value
        value = find_attr_value_('state', node)
        if value is not None and 'state' not in already_processed:
            already_processed.add('state')
            self.state = value
        value = find_attr_value_('zip', node)
        if value is not None and 'zip' not in already_processed:
            already_processed.add('zip')
            self.zip = value
        value = find_attr_value_('roof_type', node)
        if value is not None and 'roof_type' not in already_processed:
            already_processed.add('roof_type')
            self.roof_type = value
            self.validate_roof_typeType(self.roof_type)    # validate type roof_typeType
        value = find_attr_value_('surface', node)
        if value is not None and 'surface' not in already_processed:
            already_processed.add('surface')
            self.surface = value
            self.validate_surfaceType(self.surface)    # validate type surfaceType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'location':
            obj_ = locationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.location = obj_
            obj_.original_tagname_ = 'location'
# end class venueType


class teamType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, id=None, sr_id=None, alias=None, name=None, market=None, founded=None, reference=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "t"
        self.id = _cast(None, id)
        self.id_nsprefix_ = None
        self.sr_id = _cast(None, sr_id)
        self.sr_id_nsprefix_ = None
        self.alias = _cast(None, alias)
        self.alias_nsprefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.market = _cast(None, market)
        self.market_nsprefix_ = None
        self.founded = _cast(int, founded)
        self.founded_nsprefix_ = None
        self.reference = _cast(None, reference)
        self.reference_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, teamType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if teamType.subclass:
            return teamType.subclass(*args_, **kwargs_)
        else:
            return teamType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_sr_id(self):
        return self.sr_id
    def set_sr_id(self, sr_id):
        self.sr_id = sr_id
    def get_alias(self):
        return self.alias
    def set_alias(self, alias):
        self.alias = alias
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_market(self):
        return self.market
    def set_market(self, market):
        self.market = market
    def get_founded(self):
        return self.founded
    def set_founded(self, founded):
        self.founded = founded
    def get_reference(self):
        return self.reference
    def set_reference(self, reference):
        self.reference = reference
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='teamType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('teamType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'teamType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='teamType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='teamType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='teamType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
        if self.sr_id is not None and 'sr_id' not in already_processed:
            already_processed.add('sr_id')
            outfile.write(' sr_id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.sr_id), input_name='sr_id')), ))
        if self.alias is not None and 'alias' not in already_processed:
            already_processed.add('alias')
            outfile.write(' alias=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.alias), input_name='alias')), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.market is not None and 'market' not in already_processed:
            already_processed.add('market')
            outfile.write(' market=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.market), input_name='market')), ))
        if self.founded is not None and 'founded' not in already_processed:
            already_processed.add('founded')
            outfile.write(' founded="%s"' % self.gds_format_integer(self.founded, input_name='founded'))
        if self.reference is not None and 'reference' not in already_processed:
            already_processed.add('reference')
            outfile.write(' reference=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.reference), input_name='reference')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='teamType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
        value = find_attr_value_('sr_id', node)
        if value is not None and 'sr_id' not in already_processed:
            already_processed.add('sr_id')
            self.sr_id = value
        value = find_attr_value_('alias', node)
        if value is not None and 'alias' not in already_processed:
            already_processed.add('alias')
            self.alias = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('market', node)
        if value is not None and 'market' not in already_processed:
            already_processed.add('market')
            self.market = value
        value = find_attr_value_('founded', node)
        if value is not None and 'founded' not in already_processed:
            already_processed.add('founded')
            self.founded = self.gds_parse_integer(value, node, 'founded')
        value = find_attr_value_('reference', node)
        if value is not None and 'reference' not in already_processed:
            already_processed.add('reference')
            self.reference = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class teamType


class references(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, reference=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "t"
        if reference is None:
            self.reference = []
        else:
            self.reference = reference
        self.reference_nsprefix_ = "t"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, references)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if references.subclass:
            return references.subclass(*args_, **kwargs_)
        else:
            return references(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_reference(self):
        return self.reference
    def set_reference(self, reference):
        self.reference = reference
    def add_reference(self, value):
        self.reference.append(value)
    def insert_reference_at(self, index, value):
        self.reference.insert(index, value)
    def replace_reference_at(self, index, value):
        self.reference[index] = value
    def has__content(self):
        if (
            self.reference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='references', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('references')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'references':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='references')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='references', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='references'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='references', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for reference_ in self.reference:
            namespaceprefix_ = self.reference_nsprefix_ + ':' if (UseCapturedNS_ and self.reference_nsprefix_) else ''
            reference_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='reference', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'reference':
            obj_ = referenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.reference.append(obj_)
            obj_.original_tagname_ = 'reference'
# end class references


class franchise(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, id=None, sr_id=None, alias=None, name=None, references=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "t"
        self.id = _cast(None, id)
        self.id_nsprefix_ = None
        self.sr_id = _cast(None, sr_id)
        self.sr_id_nsprefix_ = None
        self.alias = _cast(None, alias)
        self.alias_nsprefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        if references is None:
            self.references = []
        else:
            self.references = references
        self.references_nsprefix_ = "t"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, franchise)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if franchise.subclass:
            return franchise.subclass(*args_, **kwargs_)
        else:
            return franchise(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_references(self):
        return self.references
    def set_references(self, references):
        self.references = references
    def add_references(self, value):
        self.references.append(value)
    def insert_references_at(self, index, value):
        self.references.insert(index, value)
    def replace_references_at(self, index, value):
        self.references[index] = value
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_sr_id(self):
        return self.sr_id
    def set_sr_id(self, sr_id):
        self.sr_id = sr_id
    def get_alias(self):
        return self.alias
    def set_alias(self, alias):
        self.alias = alias
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def has__content(self):
        if (
            self.references
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='franchise', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('franchise')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'franchise':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='franchise')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='franchise', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='franchise'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
        if self.sr_id is not None and 'sr_id' not in already_processed:
            already_processed.add('sr_id')
            outfile.write(' sr_id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.sr_id), input_name='sr_id')), ))
        if self.alias is not None and 'alias' not in already_processed:
            already_processed.add('alias')
            outfile.write(' alias=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.alias), input_name='alias')), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='franchise', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for references_ in self.references:
            namespaceprefix_ = self.references_nsprefix_ + ':' if (UseCapturedNS_ and self.references_nsprefix_) else ''
            references_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='references', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
        value = find_attr_value_('sr_id', node)
        if value is not None and 'sr_id' not in already_processed:
            already_processed.add('sr_id')
            self.sr_id = value
        value = find_attr_value_('alias', node)
        if value is not None and 'alias' not in already_processed:
            already_processed.add('alias')
            self.alias = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'references':
            obj_ = references.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.references.append(obj_)
            obj_.original_tagname_ = 'references'
# end class franchise


class teamColorType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, type_=None, hex_color=None, alpha=None, rgb_color=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "t"
        self.type_ = _cast(None, type_)
        self.type__nsprefix_ = None
        self.hex_color = _cast(None, hex_color)
        self.hex_color_nsprefix_ = None
        self.alpha = _cast(float, alpha)
        self.alpha_nsprefix_ = None
        self.rgb_color = rgb_color
        self.rgb_color_nsprefix_ = "t"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, teamColorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if teamColorType.subclass:
            return teamColorType.subclass(*args_, **kwargs_)
        else:
            return teamColorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_rgb_color(self):
        return self.rgb_color
    def set_rgb_color(self, rgb_color):
        self.rgb_color = rgb_color
    def get_type(self):
        return self.type_
    def set_type(self, type_):
        self.type_ = type_
    def get_hex_color(self):
        return self.hex_color
    def set_hex_color(self, hex_color):
        self.hex_color = hex_color
    def get_alpha(self):
        return self.alpha
    def set_alpha(self, alpha):
        self.alpha = alpha
    def has__content(self):
        if (
            self.rgb_color is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='teamColorType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('teamColorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'teamColorType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='teamColorType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='teamColorType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='teamColorType'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.type_), input_name='type')), ))
        if self.hex_color is not None and 'hex_color' not in already_processed:
            already_processed.add('hex_color')
            outfile.write(' hex_color=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.hex_color), input_name='hex_color')), ))
        if self.alpha is not None and 'alpha' not in already_processed:
            already_processed.add('alpha')
            outfile.write(' alpha="%s"' % self.gds_format_float(self.alpha, input_name='alpha'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='teamColorType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.rgb_color is not None:
            namespaceprefix_ = self.rgb_color_nsprefix_ + ':' if (UseCapturedNS_ and self.rgb_color_nsprefix_) else ''
            self.rgb_color.export(outfile, level, namespaceprefix_, namespacedef_='', name_='rgb_color', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        value = find_attr_value_('hex_color', node)
        if value is not None and 'hex_color' not in already_processed:
            already_processed.add('hex_color')
            self.hex_color = value
        value = find_attr_value_('alpha', node)
        if value is not None and 'alpha' not in already_processed:
            already_processed.add('alpha')
            value = self.gds_parse_float(value, node, 'alpha')
            self.alpha = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'rgb_color':
            obj_ = rgb_colorType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.rgb_color = obj_
            obj_.original_tagname_ = 'rgb_color'
# end class teamColorType


class teamColorsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, team_color=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "t"
        if team_color is None:
            self.team_color = []
        else:
            self.team_color = team_color
        self.team_color_nsprefix_ = "t"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, teamColorsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if teamColorsType.subclass:
            return teamColorsType.subclass(*args_, **kwargs_)
        else:
            return teamColorsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_team_color(self):
        return self.team_color
    def set_team_color(self, team_color):
        self.team_color = team_color
    def add_team_color(self, value):
        self.team_color.append(value)
    def insert_team_color_at(self, index, value):
        self.team_color.insert(index, value)
    def replace_team_color_at(self, index, value):
        self.team_color[index] = value
    def has__content(self):
        if (
            self.team_color
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='teamColorsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('teamColorsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'teamColorsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='teamColorsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='teamColorsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='teamColorsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='teamColorsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for team_color_ in self.team_color:
            namespaceprefix_ = self.team_color_nsprefix_ + ':' if (UseCapturedNS_ and self.team_color_nsprefix_) else ''
            team_color_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='team_color', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'team_color':
            obj_ = teamColorType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.team_color.append(obj_)
            obj_.original_tagname_ = 'team_color'
# end class teamColorsType


class hierarchyType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, division=None, conference=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.division = division
        self.division_nsprefix_ = None
        self.conference = conference
        self.conference_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, hierarchyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if hierarchyType.subclass:
            return hierarchyType.subclass(*args_, **kwargs_)
        else:
            return hierarchyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_division(self):
        return self.division
    def set_division(self, division):
        self.division = division
    def get_conference(self):
        return self.conference
    def set_conference(self, conference):
        self.conference = conference
    def has__content(self):
        if (
            self.division is not None or
            self.conference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='hierarchyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('hierarchyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'hierarchyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='hierarchyType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='hierarchyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='hierarchyType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='hierarchyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.division is not None:
            namespaceprefix_ = self.division_nsprefix_ + ':' if (UseCapturedNS_ and self.division_nsprefix_) else ''
            self.division.export(outfile, level, namespaceprefix_, namespacedef_='', name_='division', pretty_print=pretty_print)
        if self.conference is not None:
            namespaceprefix_ = self.conference_nsprefix_ + ':' if (UseCapturedNS_ and self.conference_nsprefix_) else ''
            self.conference.export(outfile, level, namespaceprefix_, namespacedef_='', name_='conference', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'division':
            obj_ = organizationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.division = obj_
            obj_.original_tagname_ = 'division'
        elif nodeName_ == 'conference':
            obj_ = organizationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.conference = obj_
            obj_.original_tagname_ = 'conference'
# end class hierarchyType


class coachesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, coach=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if coach is None:
            self.coach = []
        else:
            self.coach = coach
        self.coach_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, coachesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if coachesType.subclass:
            return coachesType.subclass(*args_, **kwargs_)
        else:
            return coachesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_coach(self):
        return self.coach
    def set_coach(self, coach):
        self.coach = coach
    def add_coach(self, value):
        self.coach.append(value)
    def insert_coach_at(self, index, value):
        self.coach.insert(index, value)
    def replace_coach_at(self, index, value):
        self.coach[index] = value
    def has__content(self):
        if (
            self.coach
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='coachesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('coachesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'coachesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='coachesType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='coachesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='coachesType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='coachesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for coach_ in self.coach:
            namespaceprefix_ = self.coach_nsprefix_ + ':' if (UseCapturedNS_ and self.coach_nsprefix_) else ''
            coach_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='coach', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'coach':
            obj_ = coachType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.coach.append(obj_)
            obj_.original_tagname_ = 'coach'
# end class coachesType


class coachType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, id=None, full_name=None, first_name=None, last_name=None, position=None, name_suffix=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.id = _cast(None, id)
        self.id_nsprefix_ = None
        self.full_name = _cast(None, full_name)
        self.full_name_nsprefix_ = None
        self.first_name = _cast(None, first_name)
        self.first_name_nsprefix_ = None
        self.last_name = _cast(None, last_name)
        self.last_name_nsprefix_ = None
        self.position = _cast(None, position)
        self.position_nsprefix_ = None
        self.name_suffix = _cast(None, name_suffix)
        self.name_suffix_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, coachType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if coachType.subclass:
            return coachType.subclass(*args_, **kwargs_)
        else:
            return coachType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_full_name(self):
        return self.full_name
    def set_full_name(self, full_name):
        self.full_name = full_name
    def get_first_name(self):
        return self.first_name
    def set_first_name(self, first_name):
        self.first_name = first_name
    def get_last_name(self):
        return self.last_name
    def set_last_name(self, last_name):
        self.last_name = last_name
    def get_position(self):
        return self.position
    def set_position(self, position):
        self.position = position
    def get_name_suffix(self):
        return self.name_suffix
    def set_name_suffix(self, name_suffix):
        self.name_suffix = name_suffix
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='coachType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('coachType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'coachType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='coachType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='coachType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='coachType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
        if self.full_name is not None and 'full_name' not in already_processed:
            already_processed.add('full_name')
            outfile.write(' full_name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.full_name), input_name='full_name')), ))
        if self.first_name is not None and 'first_name' not in already_processed:
            already_processed.add('first_name')
            outfile.write(' first_name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.first_name), input_name='first_name')), ))
        if self.last_name is not None and 'last_name' not in already_processed:
            already_processed.add('last_name')
            outfile.write(' last_name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.last_name), input_name='last_name')), ))
        if self.position is not None and 'position' not in already_processed:
            already_processed.add('position')
            outfile.write(' position=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.position), input_name='position')), ))
        if self.name_suffix is not None and 'name_suffix' not in already_processed:
            already_processed.add('name_suffix')
            outfile.write(' name_suffix=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name_suffix), input_name='name_suffix')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='coachType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
        value = find_attr_value_('full_name', node)
        if value is not None and 'full_name' not in already_processed:
            already_processed.add('full_name')
            self.full_name = value
        value = find_attr_value_('first_name', node)
        if value is not None and 'first_name' not in already_processed:
            already_processed.add('first_name')
            self.first_name = value
        value = find_attr_value_('last_name', node)
        if value is not None and 'last_name' not in already_processed:
            already_processed.add('last_name')
            self.last_name = value
        value = find_attr_value_('position', node)
        if value is not None and 'position' not in already_processed:
            already_processed.add('position')
            self.position = value
        value = find_attr_value_('name_suffix', node)
        if value is not None and 'name_suffix' not in already_processed:
            already_processed.add('name_suffix')
            self.name_suffix = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class coachType


class playersType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, player=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if player is None:
            self.player = []
        else:
            self.player = player
        self.player_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, playersType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if playersType.subclass:
            return playersType.subclass(*args_, **kwargs_)
        else:
            return playersType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_player(self):
        return self.player
    def set_player(self, player):
        self.player = player
    def add_player(self, value):
        self.player.append(value)
    def insert_player_at(self, index, value):
        self.player.insert(index, value)
    def replace_player_at(self, index, value):
        self.player[index] = value
    def has__content(self):
        if (
            self.player
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='playersType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('playersType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'playersType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='playersType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='playersType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='playersType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='playersType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for player_ in self.player:
            namespaceprefix_ = self.player_nsprefix_ + ':' if (UseCapturedNS_ and self.player_nsprefix_) else ''
            player_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='player', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'player':
            obj_ = playerProfileType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.player.append(obj_)
            obj_.original_tagname_ = 'player'
# end class playersType


class draftType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, number=None, round=None, year=None, team=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.number = _cast(int, number)
        self.number_nsprefix_ = None
        self.round = _cast(int, round)
        self.round_nsprefix_ = None
        self.year = _cast(int, year)
        self.year_nsprefix_ = None
        self.team = team
        self.team_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, draftType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if draftType.subclass:
            return draftType.subclass(*args_, **kwargs_)
        else:
            return draftType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_team(self):
        return self.team
    def set_team(self, team):
        self.team = team
    def get_number(self):
        return self.number
    def set_number(self, number):
        self.number = number
    def get_round(self):
        return self.round
    def set_round(self, round):
        self.round = round
    def get_year(self):
        return self.year
    def set_year(self, year):
        self.year = year
    def has__content(self):
        if (
            self.team is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='draftType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('draftType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'draftType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='draftType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='draftType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='draftType'):
        if self.number is not None and 'number' not in already_processed:
            already_processed.add('number')
            outfile.write(' number="%s"' % self.gds_format_integer(self.number, input_name='number'))
        if self.round is not None and 'round' not in already_processed:
            already_processed.add('round')
            outfile.write(' round="%s"' % self.gds_format_integer(self.round, input_name='round'))
        if self.year is not None and 'year' not in already_processed:
            already_processed.add('year')
            outfile.write(' year="%s"' % self.gds_format_integer(self.year, input_name='year'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='draftType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.team is not None:
            namespaceprefix_ = self.team_nsprefix_ + ':' if (UseCapturedNS_ and self.team_nsprefix_) else ''
            self.team.export(outfile, level, namespaceprefix_, namespacedef_='', name_='team', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('number', node)
        if value is not None and 'number' not in already_processed:
            already_processed.add('number')
            self.number = self.gds_parse_integer(value, node, 'number')
        value = find_attr_value_('round', node)
        if value is not None and 'round' not in already_processed:
            already_processed.add('round')
            self.round = self.gds_parse_integer(value, node, 'round')
        value = find_attr_value_('year', node)
        if value is not None and 'year' not in already_processed:
            already_processed.add('year')
            self.year = self.gds_parse_integer(value, node, 'year')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'team':
            obj_ = teamType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.team = obj_
            obj_.original_tagname_ = 'team'
# end class draftType


class locationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, lat=None, lng=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.lat = _cast(float, lat)
        self.lat_nsprefix_ = None
        self.lng = _cast(float, lng)
        self.lng_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, locationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if locationType.subclass:
            return locationType.subclass(*args_, **kwargs_)
        else:
            return locationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_lat(self):
        return self.lat
    def set_lat(self, lat):
        self.lat = lat
    def get_lng(self):
        return self.lng
    def set_lng(self, lng):
        self.lng = lng
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='locationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('locationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'locationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='locationType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='locationType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='locationType'):
        if self.lat is not None and 'lat' not in already_processed:
            already_processed.add('lat')
            outfile.write(' lat="%s"' % self.gds_format_float(self.lat, input_name='lat'))
        if self.lng is not None and 'lng' not in already_processed:
            already_processed.add('lng')
            outfile.write(' lng="%s"' % self.gds_format_float(self.lng, input_name='lng'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='locationType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('lat', node)
        if value is not None and 'lat' not in already_processed:
            already_processed.add('lat')
            value = self.gds_parse_float(value, node, 'lat')
            self.lat = value
        value = find_attr_value_('lng', node)
        if value is not None and 'lng' not in already_processed:
            already_processed.add('lng')
            value = self.gds_parse_float(value, node, 'lng')
            self.lng = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class locationType


class rgb_colorType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, red=None, green=None, blue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.red = _cast(int, red)
        self.red_nsprefix_ = None
        self.green = _cast(int, green)
        self.green_nsprefix_ = None
        self.blue = _cast(int, blue)
        self.blue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, rgb_colorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if rgb_colorType.subclass:
            return rgb_colorType.subclass(*args_, **kwargs_)
        else:
            return rgb_colorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_red(self):
        return self.red
    def set_red(self, red):
        self.red = red
    def get_green(self):
        return self.green
    def set_green(self, green):
        self.green = green
    def get_blue(self):
        return self.blue
    def set_blue(self, blue):
        self.blue = blue
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='rgb_colorType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('rgb_colorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'rgb_colorType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='rgb_colorType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='rgb_colorType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='rgb_colorType'):
        if self.red is not None and 'red' not in already_processed:
            already_processed.add('red')
            outfile.write(' red="%s"' % self.gds_format_integer(self.red, input_name='red'))
        if self.green is not None and 'green' not in already_processed:
            already_processed.add('green')
            outfile.write(' green="%s"' % self.gds_format_integer(self.green, input_name='green'))
        if self.blue is not None and 'blue' not in already_processed:
            already_processed.add('blue')
            outfile.write(' blue="%s"' % self.gds_format_integer(self.blue, input_name='blue'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"', name_='rgb_colorType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('red', node)
        if value is not None and 'red' not in already_processed:
            already_processed.add('red')
            self.red = self.gds_parse_integer(value, node, 'red')
        value = find_attr_value_('green', node)
        if value is not None and 'green' not in already_processed:
            already_processed.add('green')
            self.green = self.gds_parse_integer(value, node, 'green')
        value = find_attr_value_('blue', node)
        if value is not None and 'blue' not in already_processed:
            already_processed.add('blue')
            self.blue = self.gds_parse_integer(value, node, 'blue')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class rgb_colorType


#
# End data representation classes.
#


GDSClassesMapping = {
    'team': teamProfileType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    prefix_tag = TagNamePrefix + tag
    rootClass = GDSClassesMapping.get(prefix_tag)
    if rootClass is None:
        rootClass = globals().get(prefix_tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'teamProfileType'
        rootClass = teamProfileType
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True,
               mapping=None, reverse_mapping=None, nsmap=None):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'teamProfileType'
        rootClass = teamProfileType
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if mapping is None:
        mapping = {}
    if reverse_mapping is None:
        reverse_mapping = {}
    rootElement = rootObj.to_etree(
        None, name_=rootTag, mapping_=mapping,
        reverse_mapping_=reverse_mapping, nsmap_=nsmap)
    reverse_node_mapping = rootObj.gds_reverse_node_mapping(mapping)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_node_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'teamProfileType'
        rootClass = teamProfileType
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:t="http://feed.elasticstats.com/schema/football/team-v7.0.xsd"')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'teamProfileType'
        rootClass = teamProfileType
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from team-v7.0 import *\n\n')
        sys.stdout.write('import team-v7.0 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

#
# Mapping of namespaces to types defined in them
# and the file in which each is defined.
# simpleTypes are marked "ST" and complexTypes "CT".
NamespaceToDefMappings_ = {'http://feed.elasticstats.com/schema/football/team-v7.0.xsd': [('teamProfileType',
                                                                 'team-v7.0.xsd',
                                                                 'CT'),
                                                                ('organizationType',
                                                                 'team-v7.0.xsd',
                                                                 'CT'),
                                                                ('playerProfileType',
                                                                 'team-v7.0.xsd',
                                                                 'CT')]}

__all__ = [
    "coachType",
    "coachesType",
    "draftType",
    "franchise",
    "hierarchyType",
    "locationType",
    "organizationType",
    "playerProfileType",
    "playersType",
    "referenceType",
    "references",
    "rgb_colorType",
    "teamColorType",
    "teamColorsType",
    "teamProfileType",
    "teamType",
    "venueType"
]
