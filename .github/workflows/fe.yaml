name: fe 
on:
  push:
    branches:
      - main
      - uat
  workflow_dispatch:

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Azure login
        uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      - name: Set image tag and Dockerfile based on branch
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          if [[ "$BRANCH_NAME" == "main" ]]; then
            IMAGE_TAG="prodlatest"
            DOCKERFILE="frontend-container/Dockerfile.Prod"
          else
            IMAGE_TAG="uatlatest"
            DOCKERFILE="frontend-container/Dockerfile.uat"
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "DOCKERFILE=$DOCKERFILE" >> $GITHUB_ENV

      - name: Generate Sentry release
        run: |
          SENTRY_RELEASE=$(git rev-parse --short HEAD)
          echo "SENTRY_RELEASE=$SENTRY_RELEASE" >> $GITHUB_ENV

      - name: Delete existing Sentry secret in uat namespace
        run: |
          kubectl delete secret sentry-secrets --namespace=uat || true
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Create Sentry release secret in uat namespace
        run: |
          kubectl create secret generic sentry-secrets \
            --from-literal=SENTRY_RELEASE=${{ env.SENTRY_RELEASE }} \
            --namespace=uat \
            --dry-run=client -o yaml | kubectl apply -f -
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Delete existing Sentry secret in azdevspace namespace
        run: |
          kubectl delete secret sentry-secrets --namespace=azdevspace || true
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Create Sentry release secret in azdevspace namespace
        run: |
          kubectl create secret generic sentry-secrets \
            --from-literal=SENTRY_RELEASE=${{ env.SENTRY_RELEASE }} \
            --namespace=azdevspace \
            --dry-run=client -o yaml | kubectl apply -f -
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Build and push Docker image
        env:
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
          VITE_GOOGLE_APIKEY: ${{ secrets.GOOGLE_APIKEY }}
          VITE_NEWS_API_KEY: ${{ secrets.VITE_NEWS_API_KEY }}
          VITE_COGNITO_USER_POOL_ID: ${{ secrets.VITE_COGNITO_USER_POOL_ID }}
          VITE_COGNITO_CLIENT_ID: ${{ secrets.VITE_COGNITO_CLIENT_ID }}
          VITE_AUTH0_DOMAIN: ${{ secrets.VITE_AUTH0_DOMAIN }}
          VITE_AUTH0_CLIENT_ID: ${{ secrets.VITE_AUTH0_CLIENT_ID }}
          VITE_API_AUDIENCE: ${{ secrets.VITE_API_AUDIENCE }}
          VITE_AUTH0_SECRET: ${{ secrets.VITE_AUTH0_SECRET }}
          VITE_AUTH0_BASE_URL: ${{ secrets.VITE_AUTH0_BASE_URL }}
          VITE_AUTH0_ISSUER_BASE_URL: ${{ secrets.VITE_AUTH0_ISSUER_BASE_URL }}
          VITE_PUBLISHABLE_KEY: ${{ secrets.VITE_PUBLISHABLE_KEY }}
          VITE_BUY_BUTTON: ${{ secrets.VITE_BUY_BUTTON }}
          VITE_SECRET_KEY: ${{ secrets.VITE_SECRET_KEY }}
          VITE_SUPPORT_API_URL: ${{ secrets.VITE_SUPPORT_API_URL }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
          GOOGLE_AUTH_URI: ${{ secrets.GOOGLE_AUTH_URI }}
          GOOGLE_TOKEN_URI: ${{ secrets.GOOGLE_TOKEN_URI }}
          GOOGLE_AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.GOOGLE_AUTH_PROVIDER_X509_CERT_URL }}
          GOOGLE_REDIRECT_URIS: ${{ secrets.GOOGLE_REDIRECT_URIS }}
          GOOGLE_JAVASCRIPT_ORIGINS: ${{ secrets.GOOGLE_JAVASCRIPT_ORIGINS }}
          GOOGLE_APIKEY: ${{ secrets.GOOGLE_APIKEY }}
          SENTRY_RELEASE: ${{ env.SENTRY_RELEASE }}
          VITE_SENTRY_AUTH_TOKEN: ${{ secrets.VITE_SENTRY_AUTH_TOKEN }}
          VITE_APP_INSIGHTS_KEY: ${{ secrets.VITE_APP_INSIGHTS_KEY }}
          VITE_APP_INSIGHTS_CONNECTION_STRING: ${{ secrets.VITE_APP_INSIGHTS_CONNECTION_STRING }}
          VITE_APP_INSIGHTS_INSTRUMENTATION_KEY: ${{ secrets.VITE_APP_INSIGHTS_INSTRUMENTATION_KEY }}
          BASE_URL: ${{ secrets.BASE_URL }}
          API_URL: ${{ secrets.API_URL }}
          LOG_URL: ${{ secrets.LOG_URL }}
          DOCKER_ENV: true
          GIT_WORKFLOW: "1"
          SOURCE_PATH: "/app"
        run: |
          az acr build --image fe:${{ env.IMAGE_TAG }} --registry ${{ secrets.AZURE_CONTAINER_REGISTRY }} -g ${{ secrets.ACR_RESOURCE_GROUP }} -f $DOCKERFILE frontend-container
 
  deploy:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: buildImage
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      - uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ secrets.CLUSTER_NAME }}
          resource-group: ${{ secrets.CLUSTER_RESOURCE_GROUP }}

      - name: Prepare Deployment Manifest
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            manifest_dir="manifests/prod"
          else
            manifest_dir="manifests/uat"
          fi
          kubectl apply -f ${{ github.workspace }}/$manifest_dir/deploy-fe.yaml
          kubectl apply -f ${{ github.workspace }}/$manifest_dir/svc-fe.yaml
